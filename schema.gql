# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Activity {
  action: String!
  contentId: Float!
  contentType: String!
  createdAt: DateTime
  deletedUserId: Float
  description: String!
  details: String!
  id: ID!
  updatedAt: DateTime
  user: User!
  userId: Float
  userName: String!
}

type ActivityConnection {
  """Array of edges."""
  edges: [ActivityEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ActivityDeleteFilter {
  and: [ActivityDeleteFilter!]
  id: IDFilterComparison
  or: [ActivityDeleteFilter!]
  userName: StringFieldComparison
}

type ActivityDeleteResponse {
  action: String
  contentId: Float
  contentType: String
  createdAt: DateTime
  deletedUserId: Float
  description: String
  details: String
  id: ID
  updatedAt: DateTime
  user: User
  userId: Float
  userName: String
}

type ActivityEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Activity"""
  node: Activity!
}

input ActivityFilter {
  and: [ActivityFilter!]
  id: IDFilterComparison
  or: [ActivityFilter!]
  userName: StringFieldComparison
}

input ActivityInput {
  action: String!
  contentId: Float!
  contentType: String!
  createdAt: DateTime
  deletedUserId: Float
  description: String!
  details: String!
  id: ID!
  updatedAt: DateTime
  user: UserInput!
  userId: Float
  userName: String!
}

input ActivitySort {
  direction: SortDirection!
  field: ActivitySortFields!
  nulls: SortNulls
}

enum ActivitySortFields {
  id
  userName
}

input ActivityUpdateFilter {
  and: [ActivityUpdateFilter!]
  id: IDFilterComparison
  or: [ActivityUpdateFilter!]
  userName: StringFieldComparison
}

type Address {
  address: String!
  address2: String
  cityId: Float!
  countryId: Float!
  createdAt: DateTime
  crmCompanyId: String
  crmCompanyPersonId: String
  deletedAt: DateTime
  email: String
  fullAddress: String
  fullname: String
  fullnameDescription: String
  fullnameTrimmed: String
  id: ID!
  latitude: String
  longitude: String
  nationalId: String
  oldAddress: String!
  phone: String
  phone2: String
  sepidarId: Float
  stateId: Float!
  updatedAt: DateTime
  userId: Float!
  zipCode: String
}

type AddressConnection {
  """Array of edges."""
  edges: [AddressEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input AddressDeleteFilter {
  and: [AddressDeleteFilter!]
  id: IDFilterComparison
  or: [AddressDeleteFilter!]
}

type AddressDeleteResponse {
  address: String
  address2: String
  cityId: Float
  countryId: Float
  createdAt: DateTime
  crmCompanyId: String
  crmCompanyPersonId: String
  deletedAt: DateTime
  email: String
  fullAddress: String
  fullname: String
  fullnameDescription: String
  fullnameTrimmed: String
  id: ID
  latitude: String
  longitude: String
  nationalId: String
  oldAddress: String
  phone: String
  phone2: String
  sepidarId: Float
  stateId: Float
  updatedAt: DateTime
  userId: Float
  zipCode: String
}

type AddressEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Address"""
  node: Address!
}

input AddressFilter {
  and: [AddressFilter!]
  id: IDFilterComparison
  or: [AddressFilter!]
}

input AddressSort {
  direction: SortDirection!
  field: AddressSortFields!
  nulls: SortNulls
}

enum AddressSortFields {
  id
}

input AddressUpdateFilter {
  and: [AddressUpdateFilter!]
  id: IDFilterComparison
  or: [AddressUpdateFilter!]
}

type Attribute {
  createdAt: DateTime
  id: Float!
  isActive: Float
  name: String!
  sortOrder: Float
  type: Float!
  updatedAt: DateTime
}

type AttributeAttributeGroup {
  attributeGroupId: Float!
  attributeId: Float!
  createdAt: DateTime
  id: Float!
  updatedAt: DateTime
}

type AttributeGroup {
  createdAt: DateTime
  generalName: String
  id: Float!
  isActive: Float
  name: String!
  productCategoryId: Float
  sortOrder: Float
  updatedAt: DateTime
}

type AttributeItem {
  attributeGroupId: Float
  attributeId: Float!
  createdAt: DateTime
  id: Float!
  name: String!
  updatedAt: DateTime
}

type AttributeProduct {
  attributeId: Float!
  attributeItemId: Float
  createdAt: DateTime
  id: Float!
  isChecked: Boolean
  productId: Float!
  sortOrder: Float
  updatedAt: DateTime
  value: String
}

type AttributeSubproduct {
  attributeId: Float!
  attributeItemId: Float
  createdAt: DateTime
  id: Float!
  isChecked: Boolean
  subproductId: Float!
  updatedAt: DateTime
  value: String
}

type AutomationEvent {
  createdAt: DateTime
  deletedAt: DateTime
  event: String!
  eventDate: String!
  eventDatetime: DateTime!
  eventTimestamp: String!
  id: ID!
  lastEec: String
  messages: String
  onlineSheetSaved: Boolean!
  rfmCat: String
  rfmScore: String
  smsSent: Boolean!
  status: String!
  triggerDatetime: DateTime!
  type: String!
  typeId: Float!
  updatedAt: DateTime
  userContact: String!
  userId: Float
  userName: String!
  userUid: Float!
}

type AutomationEventConnection {
  """Array of edges."""
  edges: [AutomationEventEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input AutomationEventDeleteFilter {
  and: [AutomationEventDeleteFilter!]
  id: IDFilterComparison
  or: [AutomationEventDeleteFilter!]
}

type AutomationEventDeleteResponse {
  createdAt: DateTime
  deletedAt: DateTime
  event: String
  eventDate: String
  eventDatetime: DateTime
  eventTimestamp: String
  id: ID
  lastEec: String
  messages: String
  onlineSheetSaved: Boolean
  rfmCat: String
  rfmScore: String
  smsSent: Boolean
  status: String
  triggerDatetime: DateTime
  type: String
  typeId: Float
  updatedAt: DateTime
  userContact: String
  userId: Float
  userName: String
  userUid: Float
}

type AutomationEventEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the AutomationEvent"""
  node: AutomationEvent!
}

input AutomationEventFilter {
  and: [AutomationEventFilter!]
  id: IDFilterComparison
  or: [AutomationEventFilter!]
}

input AutomationEventSort {
  direction: SortDirection!
  field: AutomationEventSortFields!
  nulls: SortNulls
}

enum AutomationEventSortFields {
  id
}

input AutomationEventUpdateFilter {
  and: [AutomationEventUpdateFilter!]
  id: IDFilterComparison
  or: [AutomationEventUpdateFilter!]
}

type AutomationRfmScore {
  id: ID!
  rfmScore: String!
  rfmScoreCode: String!
  rfmScoreTitle: String!
}

type AutomationRfmScoreConnection {
  """Array of edges."""
  edges: [AutomationRfmScoreEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input AutomationRfmScoreDeleteFilter {
  and: [AutomationRfmScoreDeleteFilter!]
  id: IDFilterComparison
  or: [AutomationRfmScoreDeleteFilter!]
}

type AutomationRfmScoreDeleteResponse {
  id: ID
  rfmScore: String
  rfmScoreCode: String
  rfmScoreTitle: String
}

type AutomationRfmScoreEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the AutomationRfmScore"""
  node: AutomationRfmScore!
}

input AutomationRfmScoreFilter {
  and: [AutomationRfmScoreFilter!]
  id: IDFilterComparison
  or: [AutomationRfmScoreFilter!]
}

input AutomationRfmScoreSort {
  direction: SortDirection!
  field: AutomationRfmScoreSortFields!
  nulls: SortNulls
}

enum AutomationRfmScoreSortFields {
  id
}

input AutomationRfmScoreUpdateFilter {
  and: [AutomationRfmScoreUpdateFilter!]
  id: IDFilterComparison
  or: [AutomationRfmScoreUpdateFilter!]
}

type BasicCarpetBorder {
  code: String!
  createdAt: DateTime
  id: ID!
  isActive: Boolean!
  sortOrder: Float
  title: String!
  updatedAt: DateTime
}

type BasicCarpetBorderConnection {
  """Array of edges."""
  edges: [BasicCarpetBorderEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input BasicCarpetBorderDeleteFilter {
  and: [BasicCarpetBorderDeleteFilter!]
  id: IDFilterComparison
  or: [BasicCarpetBorderDeleteFilter!]
}

type BasicCarpetBorderDeleteResponse {
  code: String
  createdAt: DateTime
  id: ID
  isActive: Boolean
  sortOrder: Float
  title: String
  updatedAt: DateTime
}

type BasicCarpetBorderEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the BasicCarpetBorder"""
  node: BasicCarpetBorder!
}

input BasicCarpetBorderFilter {
  and: [BasicCarpetBorderFilter!]
  id: IDFilterComparison
  or: [BasicCarpetBorderFilter!]
}

input BasicCarpetBorderSort {
  direction: SortDirection!
  field: BasicCarpetBorderSortFields!
  nulls: SortNulls
}

enum BasicCarpetBorderSortFields {
  id
}

input BasicCarpetBorderUpdateFilter {
  and: [BasicCarpetBorderUpdateFilter!]
  id: IDFilterComparison
  or: [BasicCarpetBorderUpdateFilter!]
}

type BasicCarpetColor {
  code: String!
  colorCode: String
  createdAt: DateTime!
  englishTitle: String
  id: ID!
  isActive: Boolean!
  persianTitle: String
  russianTitle: String
  shortCode: String
  sortOrder: Float
  spanishTitle: String
  title: String!
  updatedAt: DateTime!
}

type BasicCarpetColorConnection {
  """Array of edges."""
  edges: [BasicCarpetColorEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input BasicCarpetColorDeleteFilter {
  and: [BasicCarpetColorDeleteFilter!]
  id: IDFilterComparison
  or: [BasicCarpetColorDeleteFilter!]
}

type BasicCarpetColorDeleteResponse {
  code: String
  colorCode: String
  createdAt: DateTime
  englishTitle: String
  id: ID
  isActive: Boolean
  persianTitle: String
  russianTitle: String
  shortCode: String
  sortOrder: Float
  spanishTitle: String
  title: String
  updatedAt: DateTime
}

type BasicCarpetColorEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the BasicCarpetColor"""
  node: BasicCarpetColor!
}

input BasicCarpetColorFilter {
  and: [BasicCarpetColorFilter!]
  id: IDFilterComparison
  or: [BasicCarpetColorFilter!]
}

input BasicCarpetColorSort {
  direction: SortDirection!
  field: BasicCarpetColorSortFields!
  nulls: SortNulls
}

enum BasicCarpetColorSortFields {
  id
}

input BasicCarpetColorUpdateFilter {
  and: [BasicCarpetColorUpdateFilter!]
  id: IDFilterComparison
  or: [BasicCarpetColorUpdateFilter!]
}

type BasicCarpetDesign {
  code: String!
  createdAt: DateTime!
  id: ID!
  isActive: Boolean!
  sortOrder: Float
  title: String!
  updatedAt: DateTime!
}

type BasicCarpetDesignConnection {
  """Array of edges."""
  edges: [BasicCarpetDesignEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input BasicCarpetDesignDeleteFilter {
  and: [BasicCarpetDesignDeleteFilter!]
  id: IDFilterComparison
  or: [BasicCarpetDesignDeleteFilter!]
}

type BasicCarpetDesignDeleteResponse {
  code: String
  createdAt: DateTime
  id: ID
  isActive: Boolean
  sortOrder: Float
  title: String
  updatedAt: DateTime
}

type BasicCarpetDesignEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the BasicCarpetDesign"""
  node: BasicCarpetDesign!
}

input BasicCarpetDesignFilter {
  and: [BasicCarpetDesignFilter!]
  id: IDFilterComparison
  or: [BasicCarpetDesignFilter!]
}

input BasicCarpetDesignSort {
  direction: SortDirection!
  field: BasicCarpetDesignSortFields!
  nulls: SortNulls
}

enum BasicCarpetDesignSortFields {
  id
}

input BasicCarpetDesignUpdateFilter {
  and: [BasicCarpetDesignUpdateFilter!]
  id: IDFilterComparison
  or: [BasicCarpetDesignUpdateFilter!]
}

type BasicCarpetDesigner {
  cityId: Float
  code: String!
  countryId: Float
  createdAt: DateTime!
  description: String
  facebookId: String
  headerImage: String
  id: ID!
  instagramId: String
  isActive: Boolean!
  linkedinId: String
  pricePercentage: Float
  profilePicture: String
  selfEmployed: Boolean
  sortOrder: Float
  stateId: Float
  title: String!
  twitterId: String
  updatedAt: DateTime!
  userId: Float
}

type BasicCarpetDesignerConnection {
  """Array of edges."""
  edges: [BasicCarpetDesignerEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input BasicCarpetDesignerDeleteFilter {
  and: [BasicCarpetDesignerDeleteFilter!]
  id: IDFilterComparison
  or: [BasicCarpetDesignerDeleteFilter!]
}

type BasicCarpetDesignerDeleteResponse {
  cityId: Float
  code: String
  countryId: Float
  createdAt: DateTime
  description: String
  facebookId: String
  headerImage: String
  id: ID
  instagramId: String
  isActive: Boolean
  linkedinId: String
  pricePercentage: Float
  profilePicture: String
  selfEmployed: Boolean
  sortOrder: Float
  stateId: Float
  title: String
  twitterId: String
  updatedAt: DateTime
  userId: Float
}

type BasicCarpetDesignerEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the BasicCarpetDesigner"""
  node: BasicCarpetDesigner!
}

input BasicCarpetDesignerFilter {
  and: [BasicCarpetDesignerFilter!]
  id: IDFilterComparison
  or: [BasicCarpetDesignerFilter!]
}

input BasicCarpetDesignerSort {
  direction: SortDirection!
  field: BasicCarpetDesignerSortFields!
  nulls: SortNulls
}

enum BasicCarpetDesignerSortFields {
  id
}

input BasicCarpetDesignerUpdateFilter {
  and: [BasicCarpetDesignerUpdateFilter!]
  id: IDFilterComparison
  or: [BasicCarpetDesignerUpdateFilter!]
}

type BasicCarpetMaterial {
  code: String!
  createdAt: DateTime!
  id: ID!
  isActive: Boolean!
  sortOrder: Float
  title: String!
  updatedAt: DateTime!
}

type BasicCarpetMaterialConnection {
  """Array of edges."""
  edges: [BasicCarpetMaterialEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input BasicCarpetMaterialDeleteFilter {
  and: [BasicCarpetMaterialDeleteFilter!]
  id: IDFilterComparison
  or: [BasicCarpetMaterialDeleteFilter!]
}

type BasicCarpetMaterialDeleteResponse {
  code: String
  createdAt: DateTime
  id: ID
  isActive: Boolean
  sortOrder: Float
  title: String
  updatedAt: DateTime
}

type BasicCarpetMaterialEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the BasicCarpetMaterial"""
  node: BasicCarpetMaterial!
}

input BasicCarpetMaterialFilter {
  and: [BasicCarpetMaterialFilter!]
  id: IDFilterComparison
  or: [BasicCarpetMaterialFilter!]
}

input BasicCarpetMaterialSort {
  direction: SortDirection!
  field: BasicCarpetMaterialSortFields!
  nulls: SortNulls
}

enum BasicCarpetMaterialSortFields {
  id
}

input BasicCarpetMaterialUpdateFilter {
  and: [BasicCarpetMaterialUpdateFilter!]
  id: IDFilterComparison
  or: [BasicCarpetMaterialUpdateFilter!]
}

type BasicCarpetSize {
  altText: String
  altTextEn: String
  carpetVolume: Float
  code: String!
  createdAt: DateTime!
  description: String
  descriptionEn: String
  homepageImageId: Float
  id: ID!
  imageId: Float
  isActive: Boolean!
  length: Float!
  lengthText: String
  metaTags: String
  metaTagsEn: String
  mobileImageId: Float
  padVolume: Float
  pageTitle: String
  pageTitleEn: String
  sizeText: String
  sizeTextEn: String
  sortOrder: Float
  title: String!
  titleEn: String
  unitRatio: Float!
  updatedAt: DateTime!
  urlSlug: String
  urlSlugEn: String
  viewCounter: Float!
  width: Float!
  widthText: String
}

type BasicCarpetSizeConnection {
  """Array of edges."""
  edges: [BasicCarpetSizeEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input BasicCarpetSizeDeleteFilter {
  and: [BasicCarpetSizeDeleteFilter!]
  id: IDFilterComparison
  or: [BasicCarpetSizeDeleteFilter!]
}

type BasicCarpetSizeDeleteResponse {
  altText: String
  altTextEn: String
  carpetVolume: Float
  code: String
  createdAt: DateTime
  description: String
  descriptionEn: String
  homepageImageId: Float
  id: ID
  imageId: Float
  isActive: Boolean
  length: Float
  lengthText: String
  metaTags: String
  metaTagsEn: String
  mobileImageId: Float
  padVolume: Float
  pageTitle: String
  pageTitleEn: String
  sizeText: String
  sizeTextEn: String
  sortOrder: Float
  title: String
  titleEn: String
  unitRatio: Float
  updatedAt: DateTime
  urlSlug: String
  urlSlugEn: String
  viewCounter: Float
  width: Float
  widthText: String
}

type BasicCarpetSizeDetail {
  basicCarpetSizeId: Float
  createdAt: DateTime
  detailText: String
  detailTextEn: String
  id: ID!
  isActive: Boolean!
  sortOrder: Float
  title: String
  titleEn: String
  updatedAt: DateTime
}

type BasicCarpetSizeDetailConnection {
  """Array of edges."""
  edges: [BasicCarpetSizeDetailEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input BasicCarpetSizeDetailDeleteFilter {
  and: [BasicCarpetSizeDetailDeleteFilter!]
  id: IDFilterComparison
  or: [BasicCarpetSizeDetailDeleteFilter!]
}

type BasicCarpetSizeDetailDeleteResponse {
  basicCarpetSizeId: Float
  createdAt: DateTime
  detailText: String
  detailTextEn: String
  id: ID
  isActive: Boolean
  sortOrder: Float
  title: String
  titleEn: String
  updatedAt: DateTime
}

type BasicCarpetSizeDetailEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the BasicCarpetSizeDetail"""
  node: BasicCarpetSizeDetail!
}

input BasicCarpetSizeDetailFilter {
  and: [BasicCarpetSizeDetailFilter!]
  id: IDFilterComparison
  or: [BasicCarpetSizeDetailFilter!]
}

input BasicCarpetSizeDetailSort {
  direction: SortDirection!
  field: BasicCarpetSizeDetailSortFields!
  nulls: SortNulls
}

enum BasicCarpetSizeDetailSortFields {
  id
}

input BasicCarpetSizeDetailUpdateFilter {
  and: [BasicCarpetSizeDetailUpdateFilter!]
  id: IDFilterComparison
  or: [BasicCarpetSizeDetailUpdateFilter!]
}

type BasicCarpetSizeEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the BasicCarpetSize"""
  node: BasicCarpetSize!
}

input BasicCarpetSizeFilter {
  and: [BasicCarpetSizeFilter!]
  id: IDFilterComparison
  or: [BasicCarpetSizeFilter!]
}

input BasicCarpetSizeSort {
  direction: SortDirection!
  field: BasicCarpetSizeSortFields!
  nulls: SortNulls
}

enum BasicCarpetSizeSortFields {
  id
}

input BasicCarpetSizeUpdateFilter {
  and: [BasicCarpetSizeUpdateFilter!]
  id: IDFilterComparison
  or: [BasicCarpetSizeUpdateFilter!]
}

type BasicCarpetType {
  code: String!
  createdAt: DateTime!
  id: ID!
  isActive: Boolean!
  sortOrder: Float
  title: String!
  updatedAt: DateTime!
}

type BasicCarpetTypeConnection {
  """Array of edges."""
  edges: [BasicCarpetTypeEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input BasicCarpetTypeDeleteFilter {
  and: [BasicCarpetTypeDeleteFilter!]
  id: IDFilterComparison
  or: [BasicCarpetTypeDeleteFilter!]
}

type BasicCarpetTypeDeleteResponse {
  code: String
  createdAt: DateTime
  id: ID
  isActive: Boolean
  sortOrder: Float
  title: String
  updatedAt: DateTime
}

type BasicCarpetTypeEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the BasicCarpetType"""
  node: BasicCarpetType!
}

input BasicCarpetTypeFilter {
  and: [BasicCarpetTypeFilter!]
  id: IDFilterComparison
  or: [BasicCarpetTypeFilter!]
}

input BasicCarpetTypeSort {
  direction: SortDirection!
  field: BasicCarpetTypeSortFields!
  nulls: SortNulls
}

enum BasicCarpetTypeSortFields {
  id
}

input BasicCarpetTypeUpdateFilter {
  and: [BasicCarpetTypeUpdateFilter!]
  id: IDFilterComparison
  or: [BasicCarpetTypeUpdateFilter!]
}

type Border {
  code: String!
  count: Float
  id: ID!
}

type BorderConnection {
  """Array of edges."""
  edges: [BorderEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input BorderDeleteFilter {
  and: [BorderDeleteFilter!]
  id: IDFilterComparison
  or: [BorderDeleteFilter!]
}

type BorderDeleteResponse {
  code: String
  count: Float
  id: ID
}

type BorderEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Border"""
  node: Border!
}

input BorderFilter {
  and: [BorderFilter!]
  id: IDFilterComparison
  or: [BorderFilter!]
}

input BorderSort {
  direction: SortDirection!
  field: BorderSortFields!
  nulls: SortNulls
}

enum BorderSortFields {
  id
}

input BorderUpdateFilter {
  and: [BorderUpdateFilter!]
  id: IDFilterComparison
  or: [BorderUpdateFilter!]
}

type CampaignFreeOffer {
  createdAt: DateTime
  id: ID!
  isActive: Boolean!
  minPrice: String!
  updatedAt: DateTime
}

type CampaignFreeOfferConnection {
  """Array of edges."""
  edges: [CampaignFreeOfferEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input CampaignFreeOfferDeleteFilter {
  and: [CampaignFreeOfferDeleteFilter!]
  id: IDFilterComparison
  or: [CampaignFreeOfferDeleteFilter!]
}

type CampaignFreeOfferDeleteResponse {
  createdAt: DateTime
  id: ID
  isActive: Boolean
  minPrice: String
  updatedAt: DateTime
}

type CampaignFreeOfferEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the CampaignFreeOffer"""
  node: CampaignFreeOffer!
}

input CampaignFreeOfferFilter {
  and: [CampaignFreeOfferFilter!]
  id: IDFilterComparison
  or: [CampaignFreeOfferFilter!]
}

type CampaignFreeOfferSize {
  basicCarpetSizeId: Float!
  campaignFreeOfferId: Float!
  createdAt: DateTime
  id: ID!
  updatedAt: DateTime
}

type CampaignFreeOfferSizeConnection {
  """Array of edges."""
  edges: [CampaignFreeOfferSizeEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input CampaignFreeOfferSizeDeleteFilter {
  and: [CampaignFreeOfferSizeDeleteFilter!]
  id: IDFilterComparison
  or: [CampaignFreeOfferSizeDeleteFilter!]
}

type CampaignFreeOfferSizeDeleteResponse {
  basicCarpetSizeId: Float
  campaignFreeOfferId: Float
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
}

type CampaignFreeOfferSizeEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the CampaignFreeOfferSize"""
  node: CampaignFreeOfferSize!
}

input CampaignFreeOfferSizeFilter {
  and: [CampaignFreeOfferSizeFilter!]
  id: IDFilterComparison
  or: [CampaignFreeOfferSizeFilter!]
}

input CampaignFreeOfferSizeSort {
  direction: SortDirection!
  field: CampaignFreeOfferSizeSortFields!
  nulls: SortNulls
}

enum CampaignFreeOfferSizeSortFields {
  id
}

input CampaignFreeOfferSizeUpdateFilter {
  and: [CampaignFreeOfferSizeUpdateFilter!]
  id: IDFilterComparison
  or: [CampaignFreeOfferSizeUpdateFilter!]
}

input CampaignFreeOfferSort {
  direction: SortDirection!
  field: CampaignFreeOfferSortFields!
  nulls: SortNulls
}

enum CampaignFreeOfferSortFields {
  id
}

input CampaignFreeOfferUpdateFilter {
  and: [CampaignFreeOfferUpdateFilter!]
  id: IDFilterComparison
  or: [CampaignFreeOfferUpdateFilter!]
}

type CampaignGoldCoinSub {
  createdAt: DateTime
  id: ID!
  updatedAt: DateTime
  userId: Float!
}

type CampaignGoldCoinSubConnection {
  """Array of edges."""
  edges: [CampaignGoldCoinSubEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input CampaignGoldCoinSubDeleteFilter {
  and: [CampaignGoldCoinSubDeleteFilter!]
  id: IDFilterComparison
  or: [CampaignGoldCoinSubDeleteFilter!]
}

type CampaignGoldCoinSubDeleteResponse {
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
  userId: Float
}

type CampaignGoldCoinSubEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the CampaignGoldCoinSub"""
  node: CampaignGoldCoinSub!
}

input CampaignGoldCoinSubFilter {
  and: [CampaignGoldCoinSubFilter!]
  id: IDFilterComparison
  or: [CampaignGoldCoinSubFilter!]
}

input CampaignGoldCoinSubSort {
  direction: SortDirection!
  field: CampaignGoldCoinSubSortFields!
  nulls: SortNulls
}

enum CampaignGoldCoinSubSortFields {
  id
}

input CampaignGoldCoinSubUpdateFilter {
  and: [CampaignGoldCoinSubUpdateFilter!]
  id: IDFilterComparison
  or: [CampaignGoldCoinSubUpdateFilter!]
}

type CampaignInstagramFollow {
  answerNo: Int
  birthYear: Int
  createdAt: DateTime
  id: ID!
  image1: String
  image2: String
  name: String!
  phone: String!
  phoneVerified: Boolean!
  sex: Int
  updatedAt: DateTime
  userId: Int
  verificationCode: String
}

type CampaignInstagramFollowConnection {
  """Array of edges."""
  edges: [CampaignInstagramFollowEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input CampaignInstagramFollowDeleteFilter {
  and: [CampaignInstagramFollowDeleteFilter!]
  id: IDFilterComparison
  or: [CampaignInstagramFollowDeleteFilter!]
}

type CampaignInstagramFollowDeleteResponse {
  answerNo: Int
  birthYear: Int
  createdAt: DateTime
  id: ID
  image1: String
  image2: String
  name: String
  phone: String
  phoneVerified: Boolean
  sex: Int
  updatedAt: DateTime
  userId: Int
  verificationCode: String
}

type CampaignInstagramFollowEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the CampaignInstagramFollow"""
  node: CampaignInstagramFollow!
}

input CampaignInstagramFollowFilter {
  and: [CampaignInstagramFollowFilter!]
  id: IDFilterComparison
  or: [CampaignInstagramFollowFilter!]
}

input CampaignInstagramFollowSort {
  direction: SortDirection!
  field: CampaignInstagramFollowSortFields!
  nulls: SortNulls
}

enum CampaignInstagramFollowSortFields {
  id
}

input CampaignInstagramFollowUpdateFilter {
  and: [CampaignInstagramFollowUpdateFilter!]
  id: IDFilterComparison
  or: [CampaignInstagramFollowUpdateFilter!]
}

type CampaignPetForm {
  couponId: Float
  createdAt: DateTime
  discountAmount: Float!
  donationAmount: Float!
  filename: String
  id: ID!
  mime: String
  originalFilename: String
  path: String
  petName: String
  updatedAt: DateTime
  userId: Float!
}

type CampaignPetFormConnection {
  """Array of edges."""
  edges: [CampaignPetFormEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input CampaignPetFormDeleteFilter {
  and: [CampaignPetFormDeleteFilter!]
  id: IDFilterComparison
  or: [CampaignPetFormDeleteFilter!]
}

type CampaignPetFormDeleteResponse {
  couponId: Float
  createdAt: DateTime
  discountAmount: Float
  donationAmount: Float
  filename: String
  id: ID
  mime: String
  originalFilename: String
  path: String
  petName: String
  updatedAt: DateTime
  userId: Float
}

type CampaignPetFormEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the CampaignPetForm"""
  node: CampaignPetForm!
}

input CampaignPetFormFilter {
  and: [CampaignPetFormFilter!]
  id: IDFilterComparison
  or: [CampaignPetFormFilter!]
}

input CampaignPetFormSort {
  direction: SortDirection!
  field: CampaignPetFormSortFields!
  nulls: SortNulls
}

enum CampaignPetFormSortFields {
  id
}

input CampaignPetFormUpdateFilter {
  and: [CampaignPetFormUpdateFilter!]
  id: IDFilterComparison
  or: [CampaignPetFormUpdateFilter!]
}

type CampaignRoomvoImage {
  createdAt: DateTime
  filename: String
  id: ID!
  mime: String
  originalFilename: String
  path: String
  updatedAt: DateTime
  userId: Float!
  votesCount: Float!
}

type CampaignRoomvoImageConnection {
  """Array of edges."""
  edges: [CampaignRoomvoImageEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input CampaignRoomvoImageDeleteFilter {
  and: [CampaignRoomvoImageDeleteFilter!]
  id: IDFilterComparison
  or: [CampaignRoomvoImageDeleteFilter!]
}

type CampaignRoomvoImageDeleteResponse {
  createdAt: DateTime
  filename: String
  id: ID
  mime: String
  originalFilename: String
  path: String
  updatedAt: DateTime
  userId: Float
  votesCount: Float
}

type CampaignRoomvoImageEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the CampaignRoomvoImage"""
  node: CampaignRoomvoImage!
}

input CampaignRoomvoImageFilter {
  and: [CampaignRoomvoImageFilter!]
  id: IDFilterComparison
  or: [CampaignRoomvoImageFilter!]
}

input CampaignRoomvoImageSort {
  direction: SortDirection!
  field: CampaignRoomvoImageSortFields!
  nulls: SortNulls
}

enum CampaignRoomvoImageSortFields {
  id
}

input CampaignRoomvoImageUpdateFilter {
  and: [CampaignRoomvoImageUpdateFilter!]
  id: IDFilterComparison
  or: [CampaignRoomvoImageUpdateFilter!]
}

type CampaignRoomvoVote {
  campaignRoomvoImageId: Float!
  createdAt: DateTime
  id: ID!
  updatedAt: DateTime
  userId: Float!
}

type CampaignRoomvoVoteConnection {
  """Array of edges."""
  edges: [CampaignRoomvoVoteEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input CampaignRoomvoVoteDeleteFilter {
  and: [CampaignRoomvoVoteDeleteFilter!]
  id: IDFilterComparison
  or: [CampaignRoomvoVoteDeleteFilter!]
}

type CampaignRoomvoVoteDeleteResponse {
  campaignRoomvoImageId: Float
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
  userId: Float
}

type CampaignRoomvoVoteEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the CampaignRoomvoVote"""
  node: CampaignRoomvoVote!
}

input CampaignRoomvoVoteFilter {
  and: [CampaignRoomvoVoteFilter!]
  id: IDFilterComparison
  or: [CampaignRoomvoVoteFilter!]
}

input CampaignRoomvoVoteSort {
  direction: SortDirection!
  field: CampaignRoomvoVoteSortFields!
  nulls: SortNulls
}

enum CampaignRoomvoVoteSortFields {
  id
}

input CampaignRoomvoVoteUpdateFilter {
  and: [CampaignRoomvoVoteUpdateFilter!]
  id: IDFilterComparison
  or: [CampaignRoomvoVoteUpdateFilter!]
}

type CampaignSubscription {
  campaignName: String
  code: Int
  createdAt: DateTime
  id: ID!
  updatedAt: DateTime
  userId: Int!
}

type CampaignSubscriptionConnection {
  """Array of edges."""
  edges: [CampaignSubscriptionEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input CampaignSubscriptionDeleteFilter {
  and: [CampaignSubscriptionDeleteFilter!]
  id: IDFilterComparison
  or: [CampaignSubscriptionDeleteFilter!]
}

type CampaignSubscriptionDeleteResponse {
  campaignName: String
  code: Int
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
  userId: Int
}

type CampaignSubscriptionEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the CampaignSubscription"""
  node: CampaignSubscription!
}

input CampaignSubscriptionFilter {
  and: [CampaignSubscriptionFilter!]
  id: IDFilterComparison
  or: [CampaignSubscriptionFilter!]
}

input CampaignSubscriptionSort {
  direction: SortDirection!
  field: CampaignSubscriptionSortFields!
  nulls: SortNulls
}

enum CampaignSubscriptionSortFields {
  id
}

input CampaignSubscriptionUpdateFilter {
  and: [CampaignSubscriptionUpdateFilter!]
  id: IDFilterComparison
  or: [CampaignSubscriptionUpdateFilter!]
}

type CampaignUefaEuroSubscriber {
  contactFormStatusId: Float!
  createdAt: DateTime
  id: ID!
  mobile: String!
  status: Float!
  updatedAt: DateTime
  userId: Float
}

type CampaignUefaEuroSubscriberConnection {
  """Array of edges."""
  edges: [CampaignUefaEuroSubscriberEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input CampaignUefaEuroSubscriberDeleteFilter {
  and: [CampaignUefaEuroSubscriberDeleteFilter!]
  id: IDFilterComparison
  or: [CampaignUefaEuroSubscriberDeleteFilter!]
}

type CampaignUefaEuroSubscriberDeleteResponse {
  contactFormStatusId: Float
  createdAt: DateTime
  id: ID
  mobile: String
  status: Float
  updatedAt: DateTime
  userId: Float
}

type CampaignUefaEuroSubscriberEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the CampaignUefaEuroSubscriber"""
  node: CampaignUefaEuroSubscriber!
}

input CampaignUefaEuroSubscriberFilter {
  and: [CampaignUefaEuroSubscriberFilter!]
  id: IDFilterComparison
  or: [CampaignUefaEuroSubscriberFilter!]
}

type CampaignUefaEuroSubscriberHistory {
  campaignUefaEuroSubscriberId: Float!
  comment: String
  contactFormStatusId: Float!
  createdAt: DateTime
  id: ID!
  updatedAt: DateTime
  userId: Float
}

type CampaignUefaEuroSubscriberHistoryConnection {
  """Array of edges."""
  edges: [CampaignUefaEuroSubscriberHistoryEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input CampaignUefaEuroSubscriberHistoryDeleteFilter {
  and: [CampaignUefaEuroSubscriberHistoryDeleteFilter!]
  id: IDFilterComparison
  or: [CampaignUefaEuroSubscriberHistoryDeleteFilter!]
}

type CampaignUefaEuroSubscriberHistoryDeleteResponse {
  campaignUefaEuroSubscriberId: Float
  comment: String
  contactFormStatusId: Float
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
  userId: Float
}

type CampaignUefaEuroSubscriberHistoryEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the CampaignUefaEuroSubscriberHistory"""
  node: CampaignUefaEuroSubscriberHistory!
}

input CampaignUefaEuroSubscriberHistoryFilter {
  and: [CampaignUefaEuroSubscriberHistoryFilter!]
  id: IDFilterComparison
  or: [CampaignUefaEuroSubscriberHistoryFilter!]
}

input CampaignUefaEuroSubscriberHistorySort {
  direction: SortDirection!
  field: CampaignUefaEuroSubscriberHistorySortFields!
  nulls: SortNulls
}

enum CampaignUefaEuroSubscriberHistorySortFields {
  id
}

input CampaignUefaEuroSubscriberHistoryUpdateFilter {
  and: [CampaignUefaEuroSubscriberHistoryUpdateFilter!]
  id: IDFilterComparison
  or: [CampaignUefaEuroSubscriberHistoryUpdateFilter!]
}

input CampaignUefaEuroSubscriberSort {
  direction: SortDirection!
  field: CampaignUefaEuroSubscriberSortFields!
  nulls: SortNulls
}

enum CampaignUefaEuroSubscriberSortFields {
  id
}

input CampaignUefaEuroSubscriberUpdateFilter {
  and: [CampaignUefaEuroSubscriberUpdateFilter!]
  id: IDFilterComparison
  or: [CampaignUefaEuroSubscriberUpdateFilter!]
}

type CampaignVotingImage {
  campaignNo: Float!
  createdAt: DateTime
  id: ID!
  imageId: Float
  isActive: Boolean!
  sortOrder: Float!
  title: String!
  updatedAt: DateTime
}

type CampaignVotingImageConnection {
  """Array of edges."""
  edges: [CampaignVotingImageEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input CampaignVotingImageDeleteFilter {
  and: [CampaignVotingImageDeleteFilter!]
  id: IDFilterComparison
  or: [CampaignVotingImageDeleteFilter!]
}

type CampaignVotingImageDeleteResponse {
  campaignNo: Float
  createdAt: DateTime
  id: ID
  imageId: Float
  isActive: Boolean
  sortOrder: Float
  title: String
  updatedAt: DateTime
}

type CampaignVotingImageEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the CampaignVotingImage"""
  node: CampaignVotingImage!
}

input CampaignVotingImageFilter {
  and: [CampaignVotingImageFilter!]
  id: IDFilterComparison
  or: [CampaignVotingImageFilter!]
}

input CampaignVotingImageSort {
  direction: SortDirection!
  field: CampaignVotingImageSortFields!
  nulls: SortNulls
}

enum CampaignVotingImageSortFields {
  id
}

input CampaignVotingImageUpdateFilter {
  and: [CampaignVotingImageUpdateFilter!]
  id: IDFilterComparison
  or: [CampaignVotingImageUpdateFilter!]
}

type CarpetFeature {
  createdAt: DateTime
  id: ID!
  isActive: Boolean!
  sortOrder: Float
  title: String!
  updatedAt: DateTime
}

type CarpetFeatureConnection {
  """Array of edges."""
  edges: [CarpetFeatureEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input CarpetFeatureDeleteFilter {
  and: [CarpetFeatureDeleteFilter!]
  id: IDFilterComparison
  or: [CarpetFeatureDeleteFilter!]
}

type CarpetFeatureDeleteResponse {
  createdAt: DateTime
  id: ID
  isActive: Boolean
  sortOrder: Float
  title: String
  updatedAt: DateTime
}

type CarpetFeatureEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the CarpetFeature"""
  node: CarpetFeature!
}

input CarpetFeatureFilter {
  and: [CarpetFeatureFilter!]
  id: IDFilterComparison
  or: [CarpetFeatureFilter!]
}

input CarpetFeatureSort {
  direction: SortDirection!
  field: CarpetFeatureSortFields!
  nulls: SortNulls
}

enum CarpetFeatureSortFields {
  id
}

input CarpetFeatureUpdateFilter {
  and: [CarpetFeatureUpdateFilter!]
  id: IDFilterComparison
  or: [CarpetFeatureUpdateFilter!]
}

type CarpetFeatureUser {
  carpetFeatureId: Float!
  createdAt: DateTime
  id: ID!
  updatedAt: DateTime
  userId: Float!
}

type CarpetFeatureUserConnection {
  """Array of edges."""
  edges: [CarpetFeatureUserEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input CarpetFeatureUserDeleteFilter {
  and: [CarpetFeatureUserDeleteFilter!]
  id: IDFilterComparison
  or: [CarpetFeatureUserDeleteFilter!]
}

type CarpetFeatureUserDeleteResponse {
  carpetFeatureId: Float
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
  userId: Float
}

type CarpetFeatureUserEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the CarpetFeatureUser"""
  node: CarpetFeatureUser!
}

input CarpetFeatureUserFilter {
  and: [CarpetFeatureUserFilter!]
  id: IDFilterComparison
  or: [CarpetFeatureUserFilter!]
}

input CarpetFeatureUserSort {
  direction: SortDirection!
  field: CarpetFeatureUserSortFields!
  nulls: SortNulls
}

enum CarpetFeatureUserSortFields {
  id
}

input CarpetFeatureUserUpdateFilter {
  and: [CarpetFeatureUserUpdateFilter!]
  id: IDFilterComparison
  or: [CarpetFeatureUserUpdateFilter!]
}

type CarpetMaterial {
  createdAt: DateTime
  id: ID!
  isActive: Boolean!
  name: String!
  pricePerInch: Float!
  sortOrder: Float
  updatedAt: DateTime
}

type CarpetMaterialConnection {
  """Array of edges."""
  edges: [CarpetMaterialEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input CarpetMaterialDeleteFilter {
  and: [CarpetMaterialDeleteFilter!]
  id: IDFilterComparison
  or: [CarpetMaterialDeleteFilter!]
}

type CarpetMaterialDeleteResponse {
  createdAt: DateTime
  id: ID
  isActive: Boolean
  name: String
  pricePerInch: Float
  sortOrder: Float
  updatedAt: DateTime
}

type CarpetMaterialEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the CarpetMaterial"""
  node: CarpetMaterial!
}

input CarpetMaterialFilter {
  and: [CarpetMaterialFilter!]
  id: IDFilterComparison
  or: [CarpetMaterialFilter!]
}

input CarpetMaterialSort {
  direction: SortDirection!
  field: CarpetMaterialSortFields!
  nulls: SortNulls
}

enum CarpetMaterialSortFields {
  id
}

input CarpetMaterialUpdateFilter {
  and: [CarpetMaterialUpdateFilter!]
  id: IDFilterComparison
  or: [CarpetMaterialUpdateFilter!]
}

type CarpetShape {
  createdAt: DateTime
  hasLength: Boolean!
  id: ID!
  isActive: Boolean!
  maxLength: Float!
  maxWidth: Float!
  minLength: Float!
  minWidth: Float!
  name: String!
  sortOrder: Float
  updatedAt: DateTime
}

type CarpetShapeConnection {
  """Array of edges."""
  edges: [CarpetShapeEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input CarpetShapeDeleteFilter {
  and: [CarpetShapeDeleteFilter!]
  id: IDFilterComparison
  or: [CarpetShapeDeleteFilter!]
}

type CarpetShapeDeleteResponse {
  createdAt: DateTime
  hasLength: Boolean
  id: ID
  isActive: Boolean
  maxLength: Float
  maxWidth: Float
  minLength: Float
  minWidth: Float
  name: String
  sortOrder: Float
  updatedAt: DateTime
}

type CarpetShapeEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the CarpetShape"""
  node: CarpetShape!
}

input CarpetShapeFilter {
  and: [CarpetShapeFilter!]
  id: IDFilterComparison
  or: [CarpetShapeFilter!]
}

input CarpetShapeSort {
  direction: SortDirection!
  field: CarpetShapeSortFields!
  nulls: SortNulls
}

enum CarpetShapeSortFields {
  id
}

input CarpetShapeUpdateFilter {
  and: [CarpetShapeUpdateFilter!]
  id: IDFilterComparison
  or: [CarpetShapeUpdateFilter!]
}

type CarpetSize {
  createdAt: DateTime
  id: ID!
  isActive: Boolean!
  length: Float!
  sortOrder: Float
  updatedAt: DateTime
  width: Float!
}

type CarpetSizeConnection {
  """Array of edges."""
  edges: [CarpetSizeEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input CarpetSizeDeleteFilter {
  and: [CarpetSizeDeleteFilter!]
  id: IDFilterComparison
  or: [CarpetSizeDeleteFilter!]
}

type CarpetSizeDeleteResponse {
  createdAt: DateTime
  id: ID
  isActive: Boolean
  length: Float
  sortOrder: Float
  updatedAt: DateTime
  width: Float
}

type CarpetSizeEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the CarpetSize"""
  node: CarpetSize!
}

input CarpetSizeFilter {
  and: [CarpetSizeFilter!]
  id: IDFilterComparison
  or: [CarpetSizeFilter!]
}

input CarpetSizeSort {
  direction: SortDirection!
  field: CarpetSizeSortFields!
  nulls: SortNulls
}

enum CarpetSizeSortFields {
  id
}

input CarpetSizeUpdateFilter {
  and: [CarpetSizeUpdateFilter!]
  id: IDFilterComparison
  or: [CarpetSizeUpdateFilter!]
}

type CarpetUsagePlace {
  createdAt: DateTime
  id: ID!
  isActive: Boolean!
  sortOrder: Float
  title: String!
  updatedAt: DateTime
}

type CarpetUsagePlaceConnection {
  """Array of edges."""
  edges: [CarpetUsagePlaceEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input CarpetUsagePlaceDeleteFilter {
  and: [CarpetUsagePlaceDeleteFilter!]
  id: IDFilterComparison
  or: [CarpetUsagePlaceDeleteFilter!]
}

type CarpetUsagePlaceDeleteResponse {
  createdAt: DateTime
  id: ID
  isActive: Boolean
  sortOrder: Float
  title: String
  updatedAt: DateTime
}

type CarpetUsagePlaceEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the CarpetUsagePlace"""
  node: CarpetUsagePlace!
}

input CarpetUsagePlaceFilter {
  and: [CarpetUsagePlaceFilter!]
  id: IDFilterComparison
  or: [CarpetUsagePlaceFilter!]
}

type CarpetUsagePlaceInvoiceProduct {
  carpetUsagePlaceId: Float!
  createdAt: DateTime
  id: ID!
  invoiceProductId: Float!
  row: Float!
  updatedAt: DateTime
}

type CarpetUsagePlaceInvoiceProductConnection {
  """Array of edges."""
  edges: [CarpetUsagePlaceInvoiceProductEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input CarpetUsagePlaceInvoiceProductDeleteFilter {
  and: [CarpetUsagePlaceInvoiceProductDeleteFilter!]
  id: IDFilterComparison
  or: [CarpetUsagePlaceInvoiceProductDeleteFilter!]
}

type CarpetUsagePlaceInvoiceProductDeleteResponse {
  carpetUsagePlaceId: Float
  createdAt: DateTime
  id: ID
  invoiceProductId: Float
  row: Float
  updatedAt: DateTime
}

type CarpetUsagePlaceInvoiceProductEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the CarpetUsagePlaceInvoiceProduct"""
  node: CarpetUsagePlaceInvoiceProduct!
}

input CarpetUsagePlaceInvoiceProductFilter {
  and: [CarpetUsagePlaceInvoiceProductFilter!]
  id: IDFilterComparison
  or: [CarpetUsagePlaceInvoiceProductFilter!]
}

input CarpetUsagePlaceInvoiceProductSort {
  direction: SortDirection!
  field: CarpetUsagePlaceInvoiceProductSortFields!
  nulls: SortNulls
}

enum CarpetUsagePlaceInvoiceProductSortFields {
  id
}

input CarpetUsagePlaceInvoiceProductUpdateFilter {
  and: [CarpetUsagePlaceInvoiceProductUpdateFilter!]
  id: IDFilterComparison
  or: [CarpetUsagePlaceInvoiceProductUpdateFilter!]
}

input CarpetUsagePlaceSort {
  direction: SortDirection!
  field: CarpetUsagePlaceSortFields!
  nulls: SortNulls
}

enum CarpetUsagePlaceSortFields {
  id
}

input CarpetUsagePlaceUpdateFilter {
  and: [CarpetUsagePlaceUpdateFilter!]
  id: IDFilterComparison
  or: [CarpetUsagePlaceUpdateFilter!]
}

type CarpetUsagePlaceUser {
  carpetUsagePlaceId: Float!
  createdAt: DateTime
  id: ID!
  updatedAt: DateTime
  userId: Float!
}

type CarpetUsagePlaceUserConnection {
  """Array of edges."""
  edges: [CarpetUsagePlaceUserEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input CarpetUsagePlaceUserDeleteFilter {
  and: [CarpetUsagePlaceUserDeleteFilter!]
  id: IDFilterComparison
  or: [CarpetUsagePlaceUserDeleteFilter!]
}

type CarpetUsagePlaceUserDeleteResponse {
  carpetUsagePlaceId: Float
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
  userId: Float
}

type CarpetUsagePlaceUserEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the CarpetUsagePlaceUser"""
  node: CarpetUsagePlaceUser!
}

input CarpetUsagePlaceUserFilter {
  and: [CarpetUsagePlaceUserFilter!]
  id: IDFilterComparison
  or: [CarpetUsagePlaceUserFilter!]
}

input CarpetUsagePlaceUserSort {
  direction: SortDirection!
  field: CarpetUsagePlaceUserSortFields!
  nulls: SortNulls
}

enum CarpetUsagePlaceUserSortFields {
  id
}

input CarpetUsagePlaceUserUpdateFilter {
  and: [CarpetUsagePlaceUserUpdateFilter!]
  id: IDFilterComparison
  or: [CarpetUsagePlaceUserUpdateFilter!]
}

type ChaparSettlementStatus {
  createdAt: DateTime
  id: ID!
  status: String!
  updatedAt: DateTime
}

type ChaparSettlementStatusConnection {
  """Array of edges."""
  edges: [ChaparSettlementStatusEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ChaparSettlementStatusDeleteFilter {
  and: [ChaparSettlementStatusDeleteFilter!]
  id: IDFilterComparison
  or: [ChaparSettlementStatusDeleteFilter!]
}

type ChaparSettlementStatusDeleteResponse {
  createdAt: DateTime
  id: ID
  status: String
  updatedAt: DateTime
}

type ChaparSettlementStatusEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ChaparSettlementStatus"""
  node: ChaparSettlementStatus!
}

input ChaparSettlementStatusFilter {
  and: [ChaparSettlementStatusFilter!]
  id: IDFilterComparison
  or: [ChaparSettlementStatusFilter!]
}

input ChaparSettlementStatusSort {
  direction: SortDirection!
  field: ChaparSettlementStatusSortFields!
  nulls: SortNulls
}

enum ChaparSettlementStatusSortFields {
  id
}

input ChaparSettlementStatusUpdateFilter {
  and: [ChaparSettlementStatusUpdateFilter!]
  id: IDFilterComparison
  or: [ChaparSettlementStatusUpdateFilter!]
}

type ChaparTrackingHistory {
  createdAt: DateTime
  date: String!
  id: ID!
  invoiceId: Float!
  reference: String!
  status: String!
  statusNote: String!
  time: String!
  tracking: String!
  updatedAt: DateTime
}

type ChaparTrackingHistoryConnection {
  """Array of edges."""
  edges: [ChaparTrackingHistoryEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ChaparTrackingHistoryDeleteFilter {
  and: [ChaparTrackingHistoryDeleteFilter!]
  id: IDFilterComparison
  or: [ChaparTrackingHistoryDeleteFilter!]
}

type ChaparTrackingHistoryDeleteResponse {
  createdAt: DateTime
  date: String
  id: ID
  invoiceId: Float
  reference: String
  status: String
  statusNote: String
  time: String
  tracking: String
  updatedAt: DateTime
}

type ChaparTrackingHistoryEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ChaparTrackingHistory"""
  node: ChaparTrackingHistory!
}

input ChaparTrackingHistoryFilter {
  and: [ChaparTrackingHistoryFilter!]
  id: IDFilterComparison
  or: [ChaparTrackingHistoryFilter!]
}

input ChaparTrackingHistorySort {
  direction: SortDirection!
  field: ChaparTrackingHistorySortFields!
  nulls: SortNulls
}

enum ChaparTrackingHistorySortFields {
  id
}

input ChaparTrackingHistoryUpdateFilter {
  and: [ChaparTrackingHistoryUpdateFilter!]
  id: IDFilterComparison
  or: [ChaparTrackingHistoryUpdateFilter!]
}

type CitiesSepidar {
  cityId: Float
  id: ID!
  name: String
  sepidarStateId: Float
  stateId: Float
  stateName: String
}

type CitiesSepidarConnection {
  """Array of edges."""
  edges: [CitiesSepidarEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input CitiesSepidarDeleteFilter {
  and: [CitiesSepidarDeleteFilter!]
  id: IDFilterComparison
  or: [CitiesSepidarDeleteFilter!]
}

type CitiesSepidarDeleteResponse {
  cityId: Float
  id: ID
  name: String
  sepidarStateId: Float
  stateId: Float
  stateName: String
}

type CitiesSepidarEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the CitiesSepidar"""
  node: CitiesSepidar!
}

input CitiesSepidarFilter {
  and: [CitiesSepidarFilter!]
  id: IDFilterComparison
  or: [CitiesSepidarFilter!]
}

input CitiesSepidarSort {
  direction: SortDirection!
  field: CitiesSepidarSortFields!
  nulls: SortNulls
}

enum CitiesSepidarSortFields {
  id
}

input CitiesSepidarUpdateFilter {
  and: [CitiesSepidarUpdateFilter!]
  id: IDFilterComparison
  or: [CitiesSepidarUpdateFilter!]
}

type City {
  chaparId: Float
  code: String
  createdAt: DateTime
  id: ID!
  mahexCode: String
  name: String!
  sepidarId: Float
  stateId: Float!
  tipaxId: Float
  updatedAt: DateTime
}

type City2 {
  id: ID!
  sepidarId: Float
}

type City2Connection {
  """Array of edges."""
  edges: [City2Edge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input City2DeleteFilter {
  and: [City2DeleteFilter!]
  id: IDFilterComparison
  or: [City2DeleteFilter!]
}

type City2DeleteResponse {
  id: ID
  sepidarId: Float
}

type City2Edge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the City2"""
  node: City2!
}

input City2Filter {
  and: [City2Filter!]
  id: IDFilterComparison
  or: [City2Filter!]
}

input City2Sort {
  direction: SortDirection!
  field: City2SortFields!
  nulls: SortNulls
}

enum City2SortFields {
  id
}

input City2UpdateFilter {
  and: [City2UpdateFilter!]
  id: IDFilterComparison
  or: [City2UpdateFilter!]
}

type CityConnection {
  """Array of edges."""
  edges: [CityEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input CityDeleteFilter {
  and: [CityDeleteFilter!]
  id: IDFilterComparison
  or: [CityDeleteFilter!]
}

type CityDeleteResponse {
  chaparId: Float
  code: String
  createdAt: DateTime
  id: ID
  mahexCode: String
  name: String
  sepidarId: Float
  stateId: Float
  tipaxId: Float
  updatedAt: DateTime
}

type CityEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the City"""
  node: City!
}

input CityFilter {
  and: [CityFilter!]
  id: IDFilterComparison
  or: [CityFilter!]
}

input CitySort {
  direction: SortDirection!
  field: CitySortFields!
  nulls: SortNulls
}

enum CitySortFields {
  id
}

input CityUpdateFilter {
  and: [CityUpdateFilter!]
  id: IDFilterComparison
  or: [CityUpdateFilter!]
}

type Color {
  colorCode: String
  colorCodeOriginal: String
  colorName: String
  hexCode: String
  id: ID!
}

type ColorCategory {
  altText: String
  altTextEn: String
  color: String!
  createdAt: DateTime
  description: String
  descriptionEn: String
  homepageImageId: Float
  id: ID!
  imageId: Float
  isActive: Boolean!
  metaTags: String
  metaTagsEn: String
  mobileImageId: Float
  name: String!
  nameEn: String
  pageTitle: String
  pageTitleEn: String
  sortOrder: Float
  updatedAt: DateTime
  urlSlug: String
  urlSlugEn: String
  viewCounter: Float!
}

type ColorCategoryConnection {
  """Array of edges."""
  edges: [ColorCategoryEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ColorCategoryDeleteFilter {
  and: [ColorCategoryDeleteFilter!]
  id: IDFilterComparison
  or: [ColorCategoryDeleteFilter!]
}

type ColorCategoryDeleteResponse {
  altText: String
  altTextEn: String
  color: String
  createdAt: DateTime
  description: String
  descriptionEn: String
  homepageImageId: Float
  id: ID
  imageId: Float
  isActive: Boolean
  metaTags: String
  metaTagsEn: String
  mobileImageId: Float
  name: String
  nameEn: String
  pageTitle: String
  pageTitleEn: String
  sortOrder: Float
  updatedAt: DateTime
  urlSlug: String
  urlSlugEn: String
  viewCounter: Float
}

type ColorCategoryDetail {
  colorCategoryId: Float
  createdAt: DateTime
  detailText: String
  detailTextEn: String
  id: ID!
  isActive: Boolean!
  sortOrder: Float
  title: String
  titleEn: String
  updatedAt: DateTime
}

type ColorCategoryDetailConnection {
  """Array of edges."""
  edges: [ColorCategoryDetailEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ColorCategoryDetailDeleteFilter {
  and: [ColorCategoryDetailDeleteFilter!]
  id: IDFilterComparison
  or: [ColorCategoryDetailDeleteFilter!]
}

type ColorCategoryDetailDeleteResponse {
  colorCategoryId: Float
  createdAt: DateTime
  detailText: String
  detailTextEn: String
  id: ID
  isActive: Boolean
  sortOrder: Float
  title: String
  titleEn: String
  updatedAt: DateTime
}

type ColorCategoryDetailEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ColorCategoryDetail"""
  node: ColorCategoryDetail!
}

input ColorCategoryDetailFilter {
  and: [ColorCategoryDetailFilter!]
  id: IDFilterComparison
  or: [ColorCategoryDetailFilter!]
}

input ColorCategoryDetailSort {
  direction: SortDirection!
  field: ColorCategoryDetailSortFields!
  nulls: SortNulls
}

enum ColorCategoryDetailSortFields {
  id
}

input ColorCategoryDetailUpdateFilter {
  and: [ColorCategoryDetailUpdateFilter!]
  id: IDFilterComparison
  or: [ColorCategoryDetailUpdateFilter!]
}

type ColorCategoryEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ColorCategory"""
  node: ColorCategory!
}

input ColorCategoryFilter {
  and: [ColorCategoryFilter!]
  id: IDFilterComparison
  or: [ColorCategoryFilter!]
}

input ColorCategorySort {
  direction: SortDirection!
  field: ColorCategorySortFields!
  nulls: SortNulls
}

enum ColorCategorySortFields {
  id
}

type ColorCategorySubproduct {
  colorCategoryId: Float!
  createdAt: DateTime
  id: ID!
  subproductId: Float!
  updatedAt: DateTime
}

type ColorCategorySubproductConnection {
  """Array of edges."""
  edges: [ColorCategorySubproductEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ColorCategorySubproductDeleteFilter {
  and: [ColorCategorySubproductDeleteFilter!]
  id: IDFilterComparison
  or: [ColorCategorySubproductDeleteFilter!]
}

type ColorCategorySubproductDeleteResponse {
  colorCategoryId: Float
  createdAt: DateTime
  id: ID
  subproductId: Float
  updatedAt: DateTime
}

type ColorCategorySubproductEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ColorCategorySubproduct"""
  node: ColorCategorySubproduct!
}

input ColorCategorySubproductFilter {
  and: [ColorCategorySubproductFilter!]
  id: IDFilterComparison
  or: [ColorCategorySubproductFilter!]
}

input ColorCategorySubproductSort {
  direction: SortDirection!
  field: ColorCategorySubproductSortFields!
  nulls: SortNulls
}

enum ColorCategorySubproductSortFields {
  id
}

input ColorCategorySubproductUpdateFilter {
  and: [ColorCategorySubproductUpdateFilter!]
  id: IDFilterComparison
  or: [ColorCategorySubproductUpdateFilter!]
}

input ColorCategoryUpdateFilter {
  and: [ColorCategoryUpdateFilter!]
  id: IDFilterComparison
  or: [ColorCategoryUpdateFilter!]
}

type ColorConnection {
  """Array of edges."""
  edges: [ColorEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ColorDeleteFilter {
  and: [ColorDeleteFilter!]
  id: IDFilterComparison
  or: [ColorDeleteFilter!]
}

type ColorDeleteResponse {
  colorCode: String
  colorCodeOriginal: String
  colorName: String
  hexCode: String
  id: ID
}

type ColorEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Color"""
  node: Color!
}

input ColorFilter {
  and: [ColorFilter!]
  id: IDFilterComparison
  or: [ColorFilter!]
}

input ColorSort {
  direction: SortDirection!
  field: ColorSortFields!
  nulls: SortNulls
}

enum ColorSortFields {
  id
}

input ColorUpdateFilter {
  and: [ColorUpdateFilter!]
  id: IDFilterComparison
  or: [ColorUpdateFilter!]
}

type Config {
  createdAt: DateTime
  id: ID!
  key: String!
  updatedAt: DateTime
  value: String
}

type ConfigConnection {
  """Array of edges."""
  edges: [ConfigEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ConfigDeleteFilter {
  and: [ConfigDeleteFilter!]
  id: IDFilterComparison
  or: [ConfigDeleteFilter!]
}

type ConfigDeleteResponse {
  createdAt: DateTime
  id: ID
  key: String
  updatedAt: DateTime
  value: String
}

type ConfigEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Config"""
  node: Config!
}

input ConfigFilter {
  and: [ConfigFilter!]
  id: IDFilterComparison
  or: [ConfigFilter!]
}

input ConfigSort {
  direction: SortDirection!
  field: ConfigSortFields!
  nulls: SortNulls
}

enum ConfigSortFields {
  id
}

input ConfigUpdateFilter {
  and: [ConfigUpdateFilter!]
  id: IDFilterComparison
  or: [ConfigUpdateFilter!]
}

"""Cursor for paging through collections"""
scalar ConnectionCursor

type ContactForm {
  answer1: String
  answer2: String
  answer3: String
  city: String
  contactFormStatusId: Float!
  countryId: Float!
  createdAt: DateTime
  departmentId: Float
  email: String
  id: ID!
  name: String
  phone: String
  text: String
  updatedAt: DateTime
  userId: Float
}

type ContactFormConnection {
  """Array of edges."""
  edges: [ContactFormEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ContactFormDeleteFilter {
  and: [ContactFormDeleteFilter!]
  id: IDFilterComparison
  or: [ContactFormDeleteFilter!]
}

type ContactFormDeleteResponse {
  answer1: String
  answer2: String
  answer3: String
  city: String
  contactFormStatusId: Float
  countryId: Float
  createdAt: DateTime
  departmentId: Float
  email: String
  id: ID
  name: String
  phone: String
  text: String
  updatedAt: DateTime
  userId: Float
}

type ContactFormEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ContactForm"""
  node: ContactForm!
}

input ContactFormFilter {
  and: [ContactFormFilter!]
  id: IDFilterComparison
  or: [ContactFormFilter!]
}

type ContactFormHistory {
  comment: String
  contactFormId: Float!
  contactFormStatusId: Float!
  createdAt: DateTime
  id: ID!
  updatedAt: DateTime
  userId: Float!
}

type ContactFormHistoryConnection {
  """Array of edges."""
  edges: [ContactFormHistoryEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ContactFormHistoryDeleteFilter {
  and: [ContactFormHistoryDeleteFilter!]
  id: IDFilterComparison
  or: [ContactFormHistoryDeleteFilter!]
}

type ContactFormHistoryDeleteResponse {
  comment: String
  contactFormId: Float
  contactFormStatusId: Float
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
  userId: Float
}

type ContactFormHistoryEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ContactFormHistory"""
  node: ContactFormHistory!
}

input ContactFormHistoryFilter {
  and: [ContactFormHistoryFilter!]
  id: IDFilterComparison
  or: [ContactFormHistoryFilter!]
}

input ContactFormHistorySort {
  direction: SortDirection!
  field: ContactFormHistorySortFields!
  nulls: SortNulls
}

enum ContactFormHistorySortFields {
  id
}

input ContactFormHistoryUpdateFilter {
  and: [ContactFormHistoryUpdateFilter!]
  id: IDFilterComparison
  or: [ContactFormHistoryUpdateFilter!]
}

input ContactFormSort {
  direction: SortDirection!
  field: ContactFormSortFields!
  nulls: SortNulls
}

enum ContactFormSortFields {
  id
}

type ContactFormStatus {
  createdAt: DateTime
  id: ID!
  status: String!
  updatedAt: DateTime
}

type ContactFormStatusConnection {
  """Array of edges."""
  edges: [ContactFormStatusEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ContactFormStatusDeleteFilter {
  and: [ContactFormStatusDeleteFilter!]
  id: IDFilterComparison
  or: [ContactFormStatusDeleteFilter!]
}

type ContactFormStatusDeleteResponse {
  createdAt: DateTime
  id: ID
  status: String
  updatedAt: DateTime
}

type ContactFormStatusEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ContactFormStatus"""
  node: ContactFormStatus!
}

input ContactFormStatusFilter {
  and: [ContactFormStatusFilter!]
  id: IDFilterComparison
  or: [ContactFormStatusFilter!]
}

input ContactFormStatusSort {
  direction: SortDirection!
  field: ContactFormStatusSortFields!
  nulls: SortNulls
}

enum ContactFormStatusSortFields {
  id
}

input ContactFormStatusUpdateFilter {
  and: [ContactFormStatusUpdateFilter!]
  id: IDFilterComparison
  or: [ContactFormStatusUpdateFilter!]
}

input ContactFormUpdateFilter {
  and: [ContactFormUpdateFilter!]
  id: IDFilterComparison
  or: [ContactFormUpdateFilter!]
}

type Country {
  chaparId: Float
  createdAt: DateTime
  id: ID!
  name: String!
  phoneCode: Float
  sortName: String
  tipaxId: Float
  updatedAt: DateTime
}

type CountryConnection {
  """Array of edges."""
  edges: [CountryEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input CountryDeleteFilter {
  and: [CountryDeleteFilter!]
  id: IDFilterComparison
  or: [CountryDeleteFilter!]
}

type CountryDeleteResponse {
  chaparId: Float
  createdAt: DateTime
  id: ID
  name: String
  phoneCode: Float
  sortName: String
  tipaxId: Float
  updatedAt: DateTime
}

type CountryEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Country"""
  node: Country!
}

input CountryFilter {
  and: [CountryFilter!]
  id: IDFilterComparison
  or: [CountryFilter!]
}

input CountrySort {
  direction: SortDirection!
  field: CountrySortFields!
  nulls: SortNulls
}

enum CountrySortFields {
  id
}

input CountryUpdateFilter {
  and: [CountryUpdateFilter!]
  id: IDFilterComparison
  or: [CountryUpdateFilter!]
}

type Coupon {
  code: String!
  createdAt: DateTime
  createdBy: Float
  discount: String!
  endDate: DateTime!
  forNewCustomersOnly: Boolean!
  forOldCustomersOnly: Boolean!
  forReadyProductsOnly: Boolean!
  id: ID!
  isActive: Float
  isApplicableToDiscountedProducts: Float
  maxDiscountPrice: String
  maxPercent: Float
  maxUsage: Float!
  minInvoicePrice: String
  name: String!
  offType: Float!
  onlyForOneItem: Boolean!
  onlyForOutOfStocks: Float!
  retargetingInvoiceId: Float
  retargetingUserId: Float
  sortOrder: Float
  startDate: DateTime!
  updatedAt: DateTime
  updatedBy: Float
  userId: Float
}

type CouponConnection {
  """Array of edges."""
  edges: [CouponEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input CouponDeleteFilter {
  and: [CouponDeleteFilter!]
  id: IDFilterComparison
  or: [CouponDeleteFilter!]
}

type CouponDeleteResponse {
  code: String
  createdAt: DateTime
  createdBy: Float
  discount: String
  endDate: DateTime
  forNewCustomersOnly: Boolean
  forOldCustomersOnly: Boolean
  forReadyProductsOnly: Boolean
  id: ID
  isActive: Float
  isApplicableToDiscountedProducts: Float
  maxDiscountPrice: String
  maxPercent: Float
  maxUsage: Float
  minInvoicePrice: String
  name: String
  offType: Float
  onlyForOneItem: Boolean
  onlyForOutOfStocks: Float
  retargetingInvoiceId: Float
  retargetingUserId: Float
  sortOrder: Float
  startDate: DateTime
  updatedAt: DateTime
  updatedBy: Float
  userId: Float
}

type CouponEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Coupon"""
  node: Coupon!
}

input CouponFilter {
  and: [CouponFilter!]
  id: IDFilterComparison
  or: [CouponFilter!]
}

input CouponSort {
  direction: SortDirection!
  field: CouponSortFields!
  nulls: SortNulls
}

enum CouponSortFields {
  id
}

type CouponSubject {
  basicCarpetSizeId: Float
  couponId: Float!
  createdAt: DateTime
  id: ID!
  productCategoryId: Float
  productId: Float
  subproductId: Float
  updatedAt: DateTime
}

type CouponSubjectConnection {
  """Array of edges."""
  edges: [CouponSubjectEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input CouponSubjectDeleteFilter {
  and: [CouponSubjectDeleteFilter!]
  id: IDFilterComparison
  or: [CouponSubjectDeleteFilter!]
}

type CouponSubjectDeleteResponse {
  basicCarpetSizeId: Float
  couponId: Float
  createdAt: DateTime
  id: ID
  productCategoryId: Float
  productId: Float
  subproductId: Float
  updatedAt: DateTime
}

type CouponSubjectEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the CouponSubject"""
  node: CouponSubject!
}

input CouponSubjectFilter {
  and: [CouponSubjectFilter!]
  id: IDFilterComparison
  or: [CouponSubjectFilter!]
}

input CouponSubjectSort {
  direction: SortDirection!
  field: CouponSubjectSortFields!
  nulls: SortNulls
}

enum CouponSubjectSortFields {
  id
}

input CouponSubjectUpdateFilter {
  and: [CouponSubjectUpdateFilter!]
  id: IDFilterComparison
  or: [CouponSubjectUpdateFilter!]
}

input CouponUpdateFilter {
  and: [CouponUpdateFilter!]
  id: IDFilterComparison
  or: [CouponUpdateFilter!]
}

input CreateActivityInput {
  action: String!
  contentId: Float!
  contentType: String!
  createdAt: DateTime
  deletedUserId: Float
  description: String!
  details: String!
  id: Float!
  updatedAt: DateTime
  user: UserInput!
  userId: Float
  userName: String!
}

input CreateAddressInput {
  address: String!
  address2: String
  cityId: Float!
  countryId: Float!
  createdAt: DateTime
  crmCompanyId: String
  crmCompanyPersonId: String
  deletedAt: DateTime
  email: String
  fullAddress: String
  fullname: String
  fullnameDescription: String
  fullnameTrimmed: String
  id: Float!
  latitude: String
  longitude: String
  nationalId: String
  oldAddress: String!
  phone: String
  phone2: String
  sepidarId: Float
  stateId: Float!
  updatedAt: DateTime
  userId: Float!
  zipCode: String
}

input CreateAttributeAttributeGroupInput {
  attributeGroupId: Float!
  attributeId: Float!
  createdAt: DateTime
  id: Float!
  updatedAt: DateTime
}

input CreateAttributeInput {
  createdAt: DateTime
  id: Float!
  isActive: Float
  name: String!
  sortOrder: Float
  type: Float!
  updatedAt: DateTime
}

input CreateAttributeItemInput {
  attributeGroupId: Float
  attributeId: Float!
  createdAt: DateTime
  id: Float!
  name: String!
  updatedAt: DateTime
}

input CreateAttributeProductInput {
  attributeId: Float!
  attributeItemId: Float
  createdAt: DateTime
  id: Float!
  isChecked: Boolean
  productId: Float!
  sortOrder: Float
  updatedAt: DateTime
  value: String
}

input CreateAttributeSubproductInput {
  attributeId: Float!
  attributeItemId: Float
  createdAt: DateTime
  id: Float!
  isChecked: Boolean
  subproductId: Float!
  updatedAt: DateTime
  value: String
}

input CreateAutomationEventInput {
  createdAt: DateTime
  deletedAt: DateTime
  event: String!
  eventDate: String!
  eventDatetime: DateTime!
  eventTimestamp: String!
  id: Float!
  lastEec: String
  messages: String
  onlineSheetSaved: Boolean! = false
  rfmCat: String
  rfmScore: String
  smsSent: Boolean! = false
  status: String!
  triggerDatetime: DateTime!
  type: String!
  typeId: Float!
  updatedAt: DateTime
  userContact: String!
  userId: Float
  userName: String!
  userUid: Float!
}

input CreateAutomationRfmScoreInput {
  id: Float!
  rfmScore: String!
  rfmScoreCode: String!
  rfmScoreTitle: String!
}

input CreateBasicCarpetBorderInput {
  code: String!
  createdAt: DateTime
  id: Float!
  isActive: Boolean! = true
  sortOrder: Float
  title: String!
  updatedAt: DateTime
}

input CreateBasicCarpetColorInput {
  code: String!
  colorCode: String
  createdAt: DateTime! = "2025-03-16T11:39:58.269Z"
  englishTitle: String
  id: Float!
  isActive: Boolean! = true
  persianTitle: String
  russianTitle: String
  shortCode: String
  sortOrder: Float
  spanishTitle: String
  title: String!
  updatedAt: DateTime!
}

input CreateBasicCarpetDesignInput {
  code: String!
  createdAt: DateTime! = "2025-03-16T11:39:58.281Z"
  id: Float!
  isActive: Boolean! = true
  sortOrder: Float
  title: String!
  updatedAt: DateTime!
}

input CreateBasicCarpetDesignerInput {
  cityId: Float
  code: String!
  countryId: Float
  createdAt: DateTime! = "2025-03-16T11:39:58.289Z"
  description: String
  facebookId: String
  headerImage: String
  id: Float!
  instagramId: String
  isActive: Boolean! = true
  linkedinId: String
  pricePercentage: Float = 0
  profilePicture: String
  selfEmployed: Boolean = false
  sortOrder: Float
  stateId: Float
  title: String!
  twitterId: String
  updatedAt: DateTime!
  userId: Float
}

input CreateBasicCarpetMaterialInput {
  code: String!
  createdAt: DateTime! = "2025-03-16T11:39:58.312Z"
  id: Float!
  isActive: Boolean! = true
  sortOrder: Float
  title: String!
  updatedAt: DateTime!
}

input CreateBasicCarpetSizeDetailInput {
  basicCarpetSizeId: Float
  createdAt: DateTime
  detailText: String
  detailTextEn: String
  id: Float!
  isActive: Boolean! = true
  sortOrder: Float
  title: String
  titleEn: String
  updatedAt: DateTime
}

input CreateBasicCarpetSizeInput {
  altText: String
  altTextEn: String
  carpetVolume: Float = 0
  code: String!
  createdAt: DateTime! = "2025-03-16T11:39:58.333Z"
  description: String
  descriptionEn: String
  homepageImageId: Float
  id: Float!
  imageId: Float
  isActive: Boolean! = true
  length: Float!
  lengthText: String
  metaTags: String
  metaTagsEn: String
  mobileImageId: Float
  padVolume: Float = 0
  pageTitle: String
  pageTitleEn: String
  sizeText: String
  sizeTextEn: String
  sortOrder: Float
  title: String!
  titleEn: String
  unitRatio: Float!
  updatedAt: DateTime!
  urlSlug: String
  urlSlugEn: String
  viewCounter: Float! = 0
  width: Float!
  widthText: String
}

input CreateBasicCarpetTypeInput {
  code: String!
  createdAt: DateTime! = "2025-03-16T11:39:58.363Z"
  id: Float!
  isActive: Boolean! = true
  sortOrder: Float
  title: String!
  updatedAt: DateTime!
}

input CreateBorderInput {
  code: String!
  count: Float
  id: Float!
}

input CreateCampaignFreeOfferInput {
  createdAt: DateTime
  id: Float!
  isActive: Boolean! = true
  minPrice: String!
  updatedAt: DateTime
}

input CreateCampaignFreeOfferSizeInput {
  basicCarpetSizeId: Float!
  campaignFreeOfferId: Float!
  createdAt: DateTime
  id: Float!
  updatedAt: DateTime
}

input CreateCampaignGoldCoinSubInput {
  createdAt: DateTime
  id: Float!
  updatedAt: DateTime
  userId: Float!
}

input CreateCampaignInstagramFollowInput {
  answerNo: Int
  birthYear: Int
  createdAt: DateTime
  id: Int!
  image1: String
  image2: String
  name: String!
  phone: String!
  phoneVerified: Boolean!
  sex: Int
  updatedAt: DateTime
  userId: Int
  verificationCode: String
}

input CreateCampaignPetFormInput {
  couponId: Float
  createdAt: DateTime
  discountAmount: Float! = 0
  donationAmount: Float! = 0
  filename: String
  id: Float!
  mime: String
  originalFilename: String
  path: String = "/"
  petName: String
  updatedAt: DateTime
  userId: Float!
}

input CreateCampaignRoomvoImageInput {
  createdAt: DateTime
  filename: String
  id: Float!
  mime: String
  originalFilename: String
  path: String
  updatedAt: DateTime
  userId: Float!
  votesCount: Float! = 0
}

input CreateCampaignRoomvoVoteInput {
  campaignRoomvoImageId: Float!
  createdAt: DateTime
  id: Float!
  updatedAt: DateTime
  userId: Float!
}

input CreateCampaignSubscriptionInput {
  campaignName: String
  code: Int
  createdAt: DateTime
  id: Int!
  updatedAt: DateTime
  userId: Int!
}

input CreateCampaignUefaEuroSubscriberHistoryInput {
  campaignUefaEuroSubscriberId: Float!
  comment: String
  contactFormStatusId: Float!
  createdAt: DateTime
  id: Float!
  updatedAt: DateTime
  userId: Float
}

input CreateCampaignUefaEuroSubscriberInput {
  contactFormStatusId: Float! = 1
  createdAt: DateTime
  id: Float!
  mobile: String!
  status: Float! = 1
  updatedAt: DateTime
  userId: Float
}

input CreateCampaignVotingImageInput {
  campaignNo: Float!
  createdAt: DateTime
  id: Float!
  imageId: Float
  isActive: Boolean! = true
  sortOrder: Float! = 1
  title: String!
  updatedAt: DateTime
}

input CreateCarpetFeatureInput {
  createdAt: DateTime
  id: Float!
  isActive: Boolean! = true
  sortOrder: Float
  title: String!
  updatedAt: DateTime
}

input CreateCarpetFeatureUserInput {
  carpetFeatureId: Float!
  createdAt: DateTime
  id: Float!
  updatedAt: DateTime
  userId: Float!
}

input CreateCarpetMaterialInput {
  createdAt: DateTime
  id: Float!
  isActive: Boolean! = true
  name: String!
  pricePerInch: Float!
  sortOrder: Float
  updatedAt: DateTime
}

input CreateCarpetShapeInput {
  createdAt: DateTime
  hasLength: Boolean! = true
  id: Float!
  isActive: Boolean! = true
  maxLength: Float!
  maxWidth: Float!
  minLength: Float!
  minWidth: Float!
  name: String!
  sortOrder: Float
  updatedAt: DateTime
}

input CreateCarpetSizeInput {
  createdAt: DateTime
  id: Float!
  isActive: Boolean! = true
  length: Float!
  sortOrder: Float
  updatedAt: DateTime
  width: Float!
}

input CreateCarpetUsagePlaceInput {
  createdAt: DateTime
  id: Float!
  isActive: Boolean! = true
  sortOrder: Float
  title: String!
  updatedAt: DateTime
}

input CreateCarpetUsagePlaceInvoiceProductInput {
  carpetUsagePlaceId: Float!
  createdAt: DateTime
  id: Float!
  invoiceProductId: Float!
  row: Float!
  updatedAt: DateTime
}

input CreateCarpetUsagePlaceUserInput {
  carpetUsagePlaceId: Float!
  createdAt: DateTime
  id: Float!
  updatedAt: DateTime
  userId: Float!
}

input CreateChaparSettlementStatusInput {
  createdAt: DateTime
  id: Float!
  status: String!
  updatedAt: DateTime
}

input CreateChaparTrackingHistoryInput {
  createdAt: DateTime
  date: String!
  id: Float!
  invoiceId: Float!
  reference: String!
  status: String!
  statusNote: String!
  time: String!
  tracking: String!
  updatedAt: DateTime
}

input CreateCitiesSepidarInput {
  cityId: Float
  id: Float!
  name: String
  sepidarStateId: Float
  stateId: Float
  stateName: String
}

input CreateCity2Input {
  id: Int
  sepidarId: Int
}

input CreateCityInput {
  chaparId: Float
  code: String
  createdAt: DateTime
  id: Float!
  mahexCode: String
  name: String!
  sepidarId: Float
  stateId: Float!
  tipaxId: Float
  updatedAt: DateTime
}

input CreateColorCategoryDetailInput {
  colorCategoryId: Float
  createdAt: DateTime
  detailText: String
  detailTextEn: String
  id: Float!
  isActive: Boolean!
  sortOrder: Float
  title: String
  titleEn: String
  updatedAt: DateTime
}

input CreateColorCategoryInput {
  altText: String
  altTextEn: String
  color: String!
  createdAt: DateTime
  description: String
  descriptionEn: String
  homepageImageId: Float
  id: Float!
  imageId: Float
  isActive: Boolean!
  metaTags: String
  metaTagsEn: String
  mobileImageId: Float
  name: String!
  nameEn: String
  pageTitle: String
  pageTitleEn: String
  sortOrder: Float
  updatedAt: DateTime
  urlSlug: String
  urlSlugEn: String
  viewCounter: Float!
}

input CreateColorCategorySubproductInput {
  colorCategoryId: Float!
  createdAt: DateTime
  id: Float!
  subproductId: Float!
  updatedAt: DateTime
}

input CreateColorInput {
  colorCode: String
  colorCodeOriginal: String
  colorName: String
  hexCode: String
  id: Float!
}

input CreateConfigInput {
  createdAt: DateTime
  id: Float!
  key: String!
  updatedAt: DateTime
  value: String
}

input CreateContactFormHistoryInput {
  comment: String
  contactFormId: Float!
  contactFormStatusId: Float!
  createdAt: DateTime
  id: Float!
  updatedAt: DateTime
  userId: Float!
}

input CreateContactFormInput {
  answer1: String
  answer2: String
  answer3: String
  city: String
  contactFormStatusId: Float!
  countryId: Float!
  createdAt: DateTime
  departmentId: Float
  email: String
  id: Float!
  name: String
  phone: String
  text: String
  updatedAt: DateTime
  userId: Float
}

input CreateContactFormStatusInput {
  createdAt: DateTime
  id: Float!
  status: String!
  updatedAt: DateTime
}

input CreateCountryInput {
  chaparId: Float
  createdAt: DateTime
  id: Float!
  name: String!
  phoneCode: Float
  sortName: String
  tipaxId: Float
  updatedAt: DateTime
}

input CreateCouponInput {
  code: String!
  createdAt: DateTime
  createdBy: Float
  discount: String!
  endDate: DateTime!
  forNewCustomersOnly: Boolean!
  forOldCustomersOnly: Boolean!
  forReadyProductsOnly: Boolean!
  id: Float!
  isActive: Float
  isApplicableToDiscountedProducts: Float
  maxDiscountPrice: String
  maxPercent: Float
  maxUsage: Float!
  minInvoicePrice: String
  name: String!
  offType: Float!
  onlyForOneItem: Boolean!
  onlyForOutOfStocks: Float!
  retargetingInvoiceId: Float
  retargetingUserId: Float
  sortOrder: Float
  startDate: DateTime!
  updatedAt: DateTime
  updatedBy: Float
  userId: Float
}

input CreateCouponSubjectInput {
  basicCarpetSizeId: Float
  couponId: Float!
  createdAt: DateTime
  id: Float!
  productCategoryId: Float
  productId: Float
  subproductId: Float
  updatedAt: DateTime
}

input CreateCrmPresentationInput {
  mobile: String
  optionId: Float
}

input CreateCustomerImageProductInput {
  createdAt: DateTime
  id: Float!
  imageId: Float!
  productId: Float!
  sortOrder: Float
  updatedAt: DateTime
}

input CreateCustomerRequestFileInput {
  createdAt: DateTime
  customerRequestId: Float!
  filename: String!
  id: Float!
  mime: String!
  originalFilename: String!
  path: String! = "/"
  updatedAt: DateTime
}

input CreateCustomerRequestInput {
  createdAt: DateTime
  id: Float!
  name: String
  phone: String
  updatedAt: DateTime
  userId: Float
  uuid: String
}

input CreateCustomerVideoProductInput {
  createdAt: DateTime
  id: Float!
  productId: Float!
  sortOrder: Float = 0
  updatedAt: DateTime
  videoId: Float!
}

input CreateDamageReasonInput {
  cause: String!
  createdAt: DateTime
  department: String!
  id: Float!
  name: String!
  updatedAt: DateTime
}

input CreateDepartmentInput {
  createdAt: DateTime
  id: Float!
  name: String!
  nameEn: String
  updatedAt: DateTime
}

input CreateDesignInput {
  backgroundColor: String = "#FFFFFF"
  borderColor: String = "#FFFFFF"
  carpetMaterialId: Float
  carpetShapeId: Float = 1
  createdAt: DateTime
  deletedAt: DateTime
  filename: String
  fringeColor: String = "#FFFFFF"
  id: Float!
  length: Float = 0
  name: String
  path: String = "/"
  updatedAt: DateTime
  userId: Float
  width: Float = 0
}

input CreateDesignersProductPriceRangeInput {
  basicCarpetSizeId: Float!
  createdAt: DateTime
  id: Float!
  maxPrice: Float!
  minPrice: Float!
  updatedAt: DateTime
}

input CreateDiscountInput {
  createdAt: DateTime
  createdBy: Float
  discount: String!
  endDate: DateTime!
  hasStockCountOnly: Boolean! = false
  id: Float!
  isActive: Float = 1
  maxDiscountPrice: String
  minProductPrice: String
  name: String
  redisForShowoffIsDeleted: Boolean! = false
  redisIsDeleted: Boolean! = false
  showoffEndDate: DateTime
  showoffStartDate: DateTime
  sortOrder: Float
  startDate: DateTime!
  type: Float!
  updatedAt: DateTime
  updatedBy: Float
  withPad: Boolean! = false
}

input CreateDiscountNotificationInput {
  createdAt: DateTime
  deletedAt: DateTime
  id: Float!
  productId: Float
  updatedAt: DateTime
  userId: Float
}

input CreateDiscountSubjectInput {
  basicCarpetSizeId: Float
  createdAt: DateTime
  discountId: Float!
  id: Float!
  priceGroupId: Float
  productCategoryId: Float
  productId: Float
  subproductId: Float
  updatedAt: DateTime
}

input CreateExitControlInput {
  createdAt: DateTime
  driverName: String!
  driverPhone: String!
  exitDate: String!
  id: Float!
  isClosed: Boolean! = false
  plateNo: String!
  updatedAt: DateTime
  userId: Float!
}

input CreateExitControlItemInput {
  boxNo: Float!
  carpetPadScanned: Boolean! = false
  carpetScanned: Boolean! = false
  createdAt: DateTime
  exitControlId: Float!
  id: Float!
  invoiceProductItemId: Float!
  updatedAt: DateTime
}

input CreateExportProductInput {
  code: String
  id: String!
  price: Float
}

input CreateFailedJobInput {
  connection: String!
  exception: String!
  failedAt: DateTime!
  id: String!
  payload: String!
  queue: String!
}

input CreateFavoriteProductInput {
  createdAt: DateTime
  id: Float!
  productId: Float!
  subproductId: Float
  userId: Float!
}

input CreateFedexAddressValidationAttributeInput {
  code: String!
  correctValue: Boolean!
  createdAt: DateTime!
  description: String!
  id: Float!
  updatedAt: DateTime!
}

input CreateFetchSiteUrlInput {
  createdAt: DateTime
  date: DateTime!
  id: Float!
  isFetch: Boolean!
  updatedAt: DateTime
  url: String!
}

input CreateFileInput {
  createdAt: DateTime
  filename: String!
  id: Float!
  mime: String!
  originalFilename: String!
  path: String! = "/"
  updatedAt: DateTime
  uploadSource: String!
}

input CreateFileNegotiationInput {
  createdAt: DateTime
  fileId: Float!
  id: Float!
  negotiationId: Float!
  updatedAt: DateTime
}

input CreateGhazalInput {
  createdAt: DateTime
  explanation: String
  id: Float!
  poem: String
  updatedAt: DateTime
}

input CreateGoogleFormUtmInput {
  createdAt: DateTime
  formId: String!
  id: Float!
  status: Boolean! = false
  updatedAt: DateTime
  url: String!
  userId: Float!
  utm: String!
}

input CreateHeardAboutUsOptionInput {
  createdAt: DateTime
  id: Float!
  isActive: Boolean! = true
  name: String!
  sortOrder: Float! = 1
  updatedAt: DateTime
}

input CreateHelpDeskInput {
  createdAt: DateTime
  id: String!
  imageId: Float
  isActive: Float
  isOnline: Float
  phone: String
  title: String
  updatedAt: DateTime
  userId: Float!
}

input CreateHolidayInput {
  createdAt: DateTime
  deletedAt: DateTime
  holidayDate: String!
  id: Float!
  updatedAt: DateTime
  userId: Float
  weekday: Float!
}

input CreateHomePageCustomerImageInput {
  createdAt: DateTime
  desktopImageAlt: String
  desktopImageId: Float
  id: Float!
  mobileImageAlt: String
  mobileImageId: Float
  sortOrder: Float!
  updatedAt: DateTime
}

input CreateHyperInput {
  code: String!
  depot: Float
  produce: Float
}

input CreateHyperstarCodeInput {
  code: String!
  subproductCode: String
}

input CreateImageInput {
  altText: String
  altTextEn: String
  createdAt: DateTime
  filename: String!
  id: Float!
  imageRecreated: Boolean!
  mime: String!
  originalFilename: String!
  path: String!
  updatedAt: DateTime
  uploadSource: String!
}

input CreateImageLayerInput {
  centerX: Float!
  centerY: Float!
  createdAt: DateTime
  deletedAt: DateTime
  designId: Float!
  filename: String!
  id: Float!
  path: String!
  rotation: Float!
  scaleX: Float!
  scaleY: Float!
  sortOrder: Float!
  updatedAt: DateTime
}

input CreateImageProductInput {
  createdAt: DateTime
  id: Float!
  imageId: Float!
  productId: Float!
  sortOrder: Float
  updatedAt: DateTime
}

input CreateImageSizeInput {
  createdAt: DateTime
  height: Float!
  id: Float!
  name: String!
  shortName: String!
  updatedAt: DateTime
  width: Float!
}

input CreateImageSubproductInput {
  createdAt: DateTime
  id: Float!
  imageId: Float!
  sortOrder: Float
  subproductId: Float!
  updatedAt: DateTime
}

input CreateImagesSizeGuidesDetailInput {
  createdAt: DateTime
  id: Float!
  imageId: Float
  sizeGuidesDetailsId: Float!
  sortOrder: Float
  updatedAt: DateTime
}

input CreateImpersonateHistoryInput {
  createdAt: DateTime
  id: String!
  impersonateUserId: Float!
  updatedAt: DateTime
  userId: Float!
}

input CreateIncredibleOfferInput {
  basicCarpetColorId: Float!
  count: Float!
  createdAt: DateTime
  discountId: Float
  discountPercent: Float!
  id: Float!
  isFake: Boolean!
  offerDate: String!
  place: Float
  productId: Float!
  soldCount: Float!
  sortOrder: Float!
  updatedAt: DateTime
}

input CreateIncredibleOfferSentNotificationInput {
  createdAt: DateTime
  id: Float!
  message: String
  updatedAt: DateTime
  userId: Float!
}

input CreateInstagramFeedInput {
  altText: String
  caption: String
  carouselMedia: String
  comments: String
  commentsCount: Float
  commentsDisabled: Boolean
  commentsNextPage: String
  createdAt: DateTime
  createdTime: String
  data: String
  downloadedImageHighResolutionUrl: String
  downloadedImageLowResolutionUrl: String
  downloadedImageStandardResolutionUrl: String
  downloadedImageThumbnailUrl: String
  hasMoreComments: Boolean
  id: Float!
  imageHighResolutionUrl: String
  imageLowResolutionUrl: String
  imageStandardResolutionUrl: String
  imageThumbnailUrl: String
  instagramId: String!
  isAd: Boolean
  isAutoConstruct: Boolean
  isCaptionEdited: Boolean
  isFake: Boolean
  isLoadEmpty: Boolean
  isLoaded: Boolean
  isNew: Boolean
  likesCount: Float
  link: String
  locationAddressJson: String
  locationId: String
  locationName: String
  locationSlug: String
  modified: String
  owner: String
  ownerId: String
  shortCode: String
  sidecarMedias: String
  squareImages: String
  type: String
  updatedAt: DateTime
  videoDuration: String
  videoLowBandwidthUrl: String
  videoLowResolutionUrl: String
  videoStandardResolutionUrl: String
  videoViews: Float
}

input CreateInvitationCodeInput {
  code: String!
  createdAt: DateTime
  email: String
  id: Float!
  isActive: Boolean!
  maxUsage: Float
  updatedAt: DateTime
}

input CreateInvoiceAddressInput {
  address: String!
  address2: String
  addressId: Float!
  cityId: Float!
  countryId: Float!
  createdAt: DateTime
  crmCompanyId: String
  crmCompanyPersonId: String
  email: String
  fullAddress: String
  fullname: String
  id: Float!
  invoiceId: Float!
  latitude: String
  longitude: String
  nationalId: String
  phone: String
  phone2: String
  stateId: Float!
  updatedAt: DateTime
  userId: Float!
  zipCode: String
}

input CreateInvoiceBankGatewayHistoryInput {
  amount: String
  createdAt: DateTime
  id: Float!
  invoiceId: Float
  orderId: String
  preorderRegisterId: Float
  refId: String
  saleRefId: String
  updatedAt: DateTime
}

input CreateInvoiceHistoryInput {
  accountingDescription: String
  additions: String!
  address: String!
  address2: String
  addressId: Float!
  cashOnDelivery: Float!
  chaparSettlementStatusId: Float
  chaparStatus: String
  cityId: Float!
  countryId: Float!
  couponId: Float
  createdAt: DateTime
  crmCompanyId: String
  crmCompanyPersonId: String
  crmPreOrderId: String
  currentInvoiceStatusId: Float!
  deliveredDate: DateTime
  description: String
  digikalaShare: Float
  digikalaSharePercent: Float
  editorUserId: Float!
  email: String
  forDigikala: Boolean!
  freeDelivery: Float!
  fullAddress: String
  fullname: String
  hasPriority: Boolean!
  id: Float!
  invoiceAddressId: Float!
  invoiceId: Float!
  invoiceModeId: Float
  invoiceNumber: String
  invoicePaymentStatusId: Float
  invoiceTypeId: Float
  isChaparDelivery: Float!
  isDepot: Boolean
  isForAdvertisement: Boolean!
  isReversible: Boolean!
  issueDate: DateTime!
  lastName: String!
  latitude: String
  lockState: Float
  longitude: String
  moneyTransferConfirmed: Boolean
  moneyTransferConfirmedBy: Float
  moneyTransferRefCode: String
  name: String!
  needsReview: Boolean!
  orderId: String
  packageCount: Float
  parentInvoiceId: Float
  partnerCode: String
  paymentCreditable: Boolean
  paymentErrorMessage: String
  phone: String
  phone2: String
  refId: String
  replacementAdditionalPrice: String
  replacementPaymentStatusId: Float
  replacementPriceMoneyTransferCode: String
  saleRefId: String
  selectedShippingServiceId: Float
  shippingRate: String
  shippingRateCod: String
  stateId: Float!
  subtotalPrice: String
  taxRate: Float
  totalCouponDiscount: String
  totalDiscount: String
  totalPrice: String
  totalPriceOld: Float
  totalTax: String
  totalVisitorShare: Float
  totalWalletCharged: String
  trackingCode: String
  updatedAt: DateTime
  useWallet: Boolean
  userId: Float
  visitorCouponId: Float
  visitorCouponRate: Float
  visitorGroupId: Float
  visitorId: Float
  visitorRate: Float
  visitorShareCalculated: Float!
  wholesaleRemainingMoneyTransferRefCode: String
  zipCode: String
}

input CreateInvoiceInput {
  accountingDescription: String
  additions: String!
  addressId: Float!
  canReturn: Boolean!
  cashOnDelivery: Boolean!
  chaparSettlementStatusId: Float
  chaparStatus: String
  containsPadsOnly: Boolean!
  couponId: Float
  createdAt: DateTime
  crmCompanyId: String
  crmCompanyPersonId: String
  crmPreOrderId: String
  currentInvoiceStatusId: Float!
  deadlineDate: String
  deadlineDateOld: String
  deliveredDate: DateTime
  description: String
  digikalaShare: Float
  digikalaSharePercent: Float
  forDigikala: Boolean!
  freeDelivery: Boolean!
  hasPriority: Boolean!
  id: Float!
  invoiceModeId: Float
  invoiceNumber: String
  invoicePaymentStatusId: Float
  invoiceTypeId: Float
  isChaparDelivery: Boolean!
  isDepot: Boolean!
  isForAdvertisement: Boolean!
  isReversible: Boolean!
  issueDate: DateTime!
  lastName: String!
  lockState: Float
  lockStateDescription: String
  mah: Float
  moneyTransferConfirmed: Boolean
  moneyTransferConfirmedBy: Float
  moneyTransferRefCode: String
  name: String!
  needsReview: Boolean!
  orderId: String
  packageCount: Float
  paidCodShippingRate: Float!
  parentInvoiceId: Float
  partnerCode: String!
  paymentCreditable: Boolean!
  paymentErrorMessage: String
  refId: String
  replacementAdditionalPrice: String!
  replacementPaymentStatusId: Float
  replacementPriceMoneyTransferCode: String
  roz: Float
  sal: Float
  saleRefId: String
  seenAt: DateTime
  selectedShippingServiceId: Float
  sepidarCode: Float
  sepidarId: Float
  shipmentUuid: String
  shippingRate: String
  shippingRateCod: String
  subtotalPrice: String
  taxRate: Float
  totalCouponDiscount: String
  totalDiscount: String
  totalPrice: String
  totalPriceOld: Float
  totalTax: String
  totalVisitorShare: Float
  totalWalletCharged: String
  trackingCode: String
  updatedAt: DateTime
  useWallet: Boolean!
  userId: Float
  visitorCouponId: Float
  visitorCouponRate: Float
  visitorGroupId: Float
  visitorId: Float
  visitorRate: Float
  visitorShareCalculated: Boolean!
  wholesaleRemainingMoneyTransferRefCode: String
}

input CreateInvoiceInvoiceStatusInput {
  comment: String
  createdAt: DateTime
  id: Float!
  invoiceId: Float!
  invoiceStatusId: Float!
  updatedAt: DateTime
  userId: Float
}

input CreateInvoiceModeInput {
  createdAt: DateTime
  id: Float!
  name: String!
  updatedAt: DateTime
}

input CreateInvoiceNegotiationInput {
  createdAt: DateTime
  id: Float!
  invoiceId: Float!
  negotiationId: Float!
  updatedAt: DateTime
}

input CreateInvoicePaymentHistoryInput {
  amount: String!
  chequeBank: String
  chequeDate: String
  chequeNumber: String
  chequePayee: String
  confirmedBy: Float
  createdAt: DateTime
  description: String
  forShipping: Boolean
  id: Float!
  invoiceHistoryId: Float
  invoiceId: Float!
  invoicePaymentId: Float!
  invoicePaymentTypeId: Float!
  isConfirmed: Boolean
  paymentDate: String
  refCode: String
  refCodeSales: String
  updatedAt: DateTime
  userId: Float!
}

input CreateInvoicePaymentInput {
  amount: String!
  chequeBank: String
  chequeDate: String
  chequeNumber: String
  chequePayee: String
  confirmedBy: Float
  createdAt: DateTime
  description: String
  forShipping: Boolean!
  id: Float!
  invoiceId: Float!
  invoicePaymentTypeId: Float!
  isConfirmed: Boolean
  paymentDate: String
  refCode: String
  refCodeSales: String
  updatedAt: DateTime
  userId: Float!
}

input CreateInvoicePaymentStatusInput {
  createdAt: DateTime
  id: Float!
  name: String
  updatedAt: DateTime
}

input CreateInvoicePaymentTypeInput {
  createdAt: DateTime
  id: Float!
  name: String!
  updatedAt: DateTime
}

input CreateInvoiceProductHistoryInput {
  bundleCount: Float!
  bundlePrice: String!
  count: Float!
  createdAt: DateTime
  description: String
  designId: Float
  designerPricePercentage: Float
  designerPriceShare: Float
  discount: String
  discountId: Float
  id: Float!
  invoiceHistoryId: Float!
  invoiceId: Float!
  invoiceProductId: Float
  invoiceProductItemsCreated: Boolean!
  isCouponApplicable: Boolean!
  itemsFromDepot: Float
  itemsToProduce: Float
  length: Float
  manuallyAdded: Boolean!
  padId: Float
  price: String!
  pricePerInch: Float
  productId: Float
  relatedProductId: Float
  relatedSubproductId: Float
  stockCount: Float
  subproductId: Float
  totalCouponDiscount: String
  totalDiscount: String
  totalPrice: Float
  updatedAt: DateTime
  width: Float
  withPad: Boolean!
}

input CreateInvoiceProductInput {
  bundleCount: Float!
  bundlePrice: String!
  count: Float!
  createdAt: DateTime
  description: String
  designId: Float
  designerPricePercentage: Float
  designerPriceShare: Float
  discount: String
  discountId: Float
  gift: Float!
  id: Float!
  invoiceId: Float!
  invoiceProductItemsCreated: Boolean!
  isCouponApplicable: Boolean!
  itemsFromDepot: Float
  itemsToProduce: Float
  length: Float
  manuallyAdded: Boolean!
  padId: Float
  price: String!
  pricePerInch: Float
  productId: Float
  relatedProductId: Float
  relatedSubproductId: Float
  sepidarId: Float
  stockCount: Float
  subproductId: Float
  tempDepotItemsCreated: Boolean!
  totalCouponDiscount: String
  totalDiscount: String
  totalPrice: Float
  updatedAt: DateTime
  width: Float
  withPad: Boolean!
}

input CreateInvoiceProductItemInput {
  code: String!
  createdAt: DateTime!
  currentStatusId: Float!
  damageCause: String
  damageReasonId: Float
  damageType: Float
  fromDepot: Boolean
  id: Float!
  invoiceProductId: Float!
  isInsertedIntoSepidar: Boolean!
  isPrintedAndHeated: Boolean
  isReversed: Boolean!
  isTagPrinted: Boolean
  padCode: String
  predictedDateForReceivedByRepository: String
  printProfileId: Float
  printRipId: Float
  productionRollId: Float
  rollReferenceCode: String
  row: Float!
  sortOrder: Float
  tagSortOrder: Float
  tempStatusId: Float
  updatedAt: DateTime!
}

input CreateInvoiceProductItemInvoiceProductStatusInput {
  comment: String
  createdAt: DateTime!
  id: Float!
  invoiceProductItemId: Float!
  invoiceProductStatusId: Float!
  updatedAt: DateTime!
  userId: Float!
}

input CreateInvoiceProductStatusInput {
  color: String!
  createdAt: DateTime!
  id: Float!
  status: String!
  step: Float
  stepShaggy: Float
  updatedAt: DateTime!
}

input CreateInvoiceRatesResultInput {
  addressId: Float!
  createdAt: DateTime
  id: Float!
  invoiceId: Float!
  ratesReplyCodResult: String
  ratesReplyResult: String
  shippingServiceId: Float
  updatedAt: DateTime
}

input CreateInvoiceReversalInput {
  createdAt: DateTime
  id: Float!
  invoiceId: Float!
  invoiceStatusId: Float!
  isReviewed: Boolean!
  reviewedBy: Float
  reviewedDate: DateTime
  updatedAt: DateTime
  wholeInvoice: Boolean!
}

input CreateInvoiceReversalItemInput {
  count: Float!
  createdAt: DateTime
  id: Float!
  invoiceProductId: Float!
  invoiceReversalId: Float!
  updatedAt: DateTime
  withPad: Boolean!
}

input CreateInvoiceShippingRateInput {
  createdAt: DateTime
  id: Float!
  invoiceId: Float!
  shippingRate: String!
  shippingRateCod: String
  shippingServiceId: Float!
  updatedAt: DateTime
}

input CreateInvoiceStatusInput {
  color: String
  createdAt: DateTime
  id: Float!
  notificationEmails: String
  notificationNumbers: String
  smsToCustomer: Boolean
  status: String!
  updatedAt: DateTime
}

input CreateInvoiceTypeInput {
  createdAt: DateTime
  id: Float!
  name: String!
  updatedAt: DateTime
}

input CreateLabelInput {
  color: String!
  createdAt: DateTime
  id: Float!
  name: String!
  textColor: String!
  updatedAt: DateTime
}

input CreateLabelProductInput {
  createdAt: DateTime
  id: Float!
  labelId: Float!
  productId: Float!
  updatedAt: DateTime
}

input CreateManyActivitiesInput {
  """Array of records to create"""
  activities: [CreateActivityInput!]!
}

input CreateManyAddressesInput {
  """Array of records to create"""
  addresses: [CreateAddressInput!]!
}

input CreateManyAutomationEventsInput {
  """Array of records to create"""
  automationEvents: [CreateAutomationEventInput!]!
}

input CreateManyAutomationRfmScoresInput {
  """Array of records to create"""
  automationRfmScores: [CreateAutomationRfmScoreInput!]!
}

input CreateManyBasicCarpetBordersInput {
  """Array of records to create"""
  basicCarpetBorders: [CreateBasicCarpetBorderInput!]!
}

input CreateManyBasicCarpetColorsInput {
  """Array of records to create"""
  basicCarpetColors: [CreateBasicCarpetColorInput!]!
}

input CreateManyBasicCarpetDesignersInput {
  """Array of records to create"""
  basicCarpetDesigners: [CreateBasicCarpetDesignerInput!]!
}

input CreateManyBasicCarpetDesignsInput {
  """Array of records to create"""
  basicCarpetDesigns: [CreateBasicCarpetDesignInput!]!
}

input CreateManyBasicCarpetMaterialsInput {
  """Array of records to create"""
  basicCarpetMaterials: [CreateBasicCarpetMaterialInput!]!
}

input CreateManyBasicCarpetSizeDetailsInput {
  """Array of records to create"""
  basicCarpetSizeDetails: [CreateBasicCarpetSizeDetailInput!]!
}

input CreateManyBasicCarpetSizesInput {
  """Array of records to create"""
  basicCarpetSizes: [CreateBasicCarpetSizeInput!]!
}

input CreateManyBasicCarpetTypesInput {
  """Array of records to create"""
  basicCarpetTypes: [CreateBasicCarpetTypeInput!]!
}

input CreateManyBordersInput {
  """Array of records to create"""
  borders: [CreateBorderInput!]!
}

input CreateManyCampaignFreeOfferSizesInput {
  """Array of records to create"""
  campaignFreeOfferSizes: [CreateCampaignFreeOfferSizeInput!]!
}

input CreateManyCampaignFreeOffersInput {
  """Array of records to create"""
  campaignFreeOffers: [CreateCampaignFreeOfferInput!]!
}

input CreateManyCampaignGoldCoinSubsInput {
  """Array of records to create"""
  campaignGoldCoinSubs: [CreateCampaignGoldCoinSubInput!]!
}

input CreateManyCampaignInstagramFollowsInput {
  """Array of records to create"""
  campaignInstagramFollows: [CreateCampaignInstagramFollowInput!]!
}

input CreateManyCampaignPetFormsInput {
  """Array of records to create"""
  campaignPetForms: [CreateCampaignPetFormInput!]!
}

input CreateManyCampaignRoomvoImagesInput {
  """Array of records to create"""
  campaignRoomvoImages: [CreateCampaignRoomvoImageInput!]!
}

input CreateManyCampaignRoomvoVotesInput {
  """Array of records to create"""
  campaignRoomvoVotes: [CreateCampaignRoomvoVoteInput!]!
}

input CreateManyCampaignSubscriptionsInput {
  """Array of records to create"""
  campaignSubscriptions: [CreateCampaignSubscriptionInput!]!
}

input CreateManyCampaignUefaEuroSubscriberHistoriesInput {
  """Array of records to create"""
  campaignUefaEuroSubscriberHistories: [CreateCampaignUefaEuroSubscriberHistoryInput!]!
}

input CreateManyCampaignUefaEuroSubscribersInput {
  """Array of records to create"""
  campaignUefaEuroSubscribers: [CreateCampaignUefaEuroSubscriberInput!]!
}

input CreateManyCampaignVotingImagesInput {
  """Array of records to create"""
  campaignVotingImages: [CreateCampaignVotingImageInput!]!
}

input CreateManyCarpetFeatureUsersInput {
  """Array of records to create"""
  carpetFeatureUsers: [CreateCarpetFeatureUserInput!]!
}

input CreateManyCarpetFeaturesInput {
  """Array of records to create"""
  carpetFeatures: [CreateCarpetFeatureInput!]!
}

input CreateManyCarpetMaterialsInput {
  """Array of records to create"""
  carpetMaterials: [CreateCarpetMaterialInput!]!
}

input CreateManyCarpetShapesInput {
  """Array of records to create"""
  carpetShapes: [CreateCarpetShapeInput!]!
}

input CreateManyCarpetSizesInput {
  """Array of records to create"""
  carpetSizes: [CreateCarpetSizeInput!]!
}

input CreateManyCarpetUsagePlaceInvoiceProductsInput {
  """Array of records to create"""
  carpetUsagePlaceInvoiceProducts: [CreateCarpetUsagePlaceInvoiceProductInput!]!
}

input CreateManyCarpetUsagePlaceUsersInput {
  """Array of records to create"""
  carpetUsagePlaceUsers: [CreateCarpetUsagePlaceUserInput!]!
}

input CreateManyCarpetUsagePlacesInput {
  """Array of records to create"""
  carpetUsagePlaces: [CreateCarpetUsagePlaceInput!]!
}

input CreateManyChaparSettlementStatusesInput {
  """Array of records to create"""
  chaparSettlementStatuses: [CreateChaparSettlementStatusInput!]!
}

input CreateManyChaparTrackingHistoriesInput {
  """Array of records to create"""
  chaparTrackingHistories: [CreateChaparTrackingHistoryInput!]!
}

input CreateManyCitiesInput {
  """Array of records to create"""
  cities: [CreateCityInput!]!
}

input CreateManyCitiesSepidarsInput {
  """Array of records to create"""
  citiesSepidars: [CreateCitiesSepidarInput!]!
}

input CreateManyCity2sInput {
  """Array of records to create"""
  city2s: [CreateCity2Input!]!
}

input CreateManyColorCategoriesInput {
  """Array of records to create"""
  colorCategories: [CreateColorCategoryInput!]!
}

input CreateManyColorCategoryDetailsInput {
  """Array of records to create"""
  colorCategoryDetails: [CreateColorCategoryDetailInput!]!
}

input CreateManyColorCategorySubproductsInput {
  """Array of records to create"""
  colorCategorySubproducts: [CreateColorCategorySubproductInput!]!
}

input CreateManyColorsInput {
  """Array of records to create"""
  colors: [CreateColorInput!]!
}

input CreateManyConfigsInput {
  """Array of records to create"""
  configs: [CreateConfigInput!]!
}

input CreateManyContactFormHistoriesInput {
  """Array of records to create"""
  contactFormHistories: [CreateContactFormHistoryInput!]!
}

input CreateManyContactFormStatusesInput {
  """Array of records to create"""
  contactFormStatuses: [CreateContactFormStatusInput!]!
}

input CreateManyContactFormsInput {
  """Array of records to create"""
  contactForms: [CreateContactFormInput!]!
}

input CreateManyCountriesInput {
  """Array of records to create"""
  countries: [CreateCountryInput!]!
}

input CreateManyCouponSubjectsInput {
  """Array of records to create"""
  couponSubjects: [CreateCouponSubjectInput!]!
}

input CreateManyCouponsInput {
  """Array of records to create"""
  coupons: [CreateCouponInput!]!
}

input CreateManyCrmPresentationsInput {
  """Array of records to create"""
  crmPresentations: [CreateCrmPresentationInput!]!
}

input CreateManyCustomerImageProductsInput {
  """Array of records to create"""
  customerImageProducts: [CreateCustomerImageProductInput!]!
}

input CreateManyCustomerRequestFilesInput {
  """Array of records to create"""
  customerRequestFiles: [CreateCustomerRequestFileInput!]!
}

input CreateManyCustomerRequestsInput {
  """Array of records to create"""
  customerRequests: [CreateCustomerRequestInput!]!
}

input CreateManyCustomerVideoProductsInput {
  """Array of records to create"""
  customerVideoProducts: [CreateCustomerVideoProductInput!]!
}

input CreateManyDamageReasonsInput {
  """Array of records to create"""
  damageReasons: [CreateDamageReasonInput!]!
}

input CreateManyDepartmentsInput {
  """Array of records to create"""
  departments: [CreateDepartmentInput!]!
}

input CreateManyDesignersProductPriceRangesInput {
  """Array of records to create"""
  designersProductPriceRanges: [CreateDesignersProductPriceRangeInput!]!
}

input CreateManyDesignsInput {
  """Array of records to create"""
  designs: [CreateDesignInput!]!
}

input CreateManyDiscountNotificationsInput {
  """Array of records to create"""
  discountNotifications: [CreateDiscountNotificationInput!]!
}

input CreateManyDiscountSubjectsInput {
  """Array of records to create"""
  discountSubjects: [CreateDiscountSubjectInput!]!
}

input CreateManyDiscountsInput {
  """Array of records to create"""
  discounts: [CreateDiscountInput!]!
}

input CreateManyExitControlItemsInput {
  """Array of records to create"""
  exitControlItems: [CreateExitControlItemInput!]!
}

input CreateManyExitControlsInput {
  """Array of records to create"""
  exitControls: [CreateExitControlInput!]!
}

input CreateManyExportProductsInput {
  """Array of records to create"""
  exportProducts: [CreateExportProductInput!]!
}

input CreateManyFailedJobsInput {
  """Array of records to create"""
  failedJobs: [CreateFailedJobInput!]!
}

input CreateManyFavoriteProductsInput {
  """Array of records to create"""
  favoriteProducts: [CreateFavoriteProductInput!]!
}

input CreateManyFedexAddressValidationAttributesInput {
  """Array of records to create"""
  fedexAddressValidationAttributes: [CreateFedexAddressValidationAttributeInput!]!
}

input CreateManyFetchSiteUrlsInput {
  """Array of records to create"""
  fetchSiteUrls: [CreateFetchSiteUrlInput!]!
}

input CreateManyFileNegotiationsInput {
  """Array of records to create"""
  fileNegotiations: [CreateFileNegotiationInput!]!
}

input CreateManyFilesInput {
  """Array of records to create"""
  files: [CreateFileInput!]!
}

input CreateManyGhazalsInput {
  """Array of records to create"""
  ghazals: [CreateGhazalInput!]!
}

input CreateManyGoogleFormUtmsInput {
  """Array of records to create"""
  googleFormUtms: [CreateGoogleFormUtmInput!]!
}

input CreateManyHeardAboutUsOptionsInput {
  """Array of records to create"""
  heardAboutUsOptions: [CreateHeardAboutUsOptionInput!]!
}

input CreateManyHelpDesksInput {
  """Array of records to create"""
  helpDesks: [CreateHelpDeskInput!]!
}

input CreateManyHolidaysInput {
  """Array of records to create"""
  holidays: [CreateHolidayInput!]!
}

input CreateManyHomePageCustomerImagesInput {
  """Array of records to create"""
  homePageCustomerImages: [CreateHomePageCustomerImageInput!]!
}

input CreateManyHypersInput {
  """Array of records to create"""
  hypers: [CreateHyperInput!]!
}

input CreateManyHyperstarCodesInput {
  """Array of records to create"""
  hyperstarCodes: [CreateHyperstarCodeInput!]!
}

input CreateManyImageLayersInput {
  """Array of records to create"""
  imageLayers: [CreateImageLayerInput!]!
}

input CreateManyImageProductsInput {
  """Array of records to create"""
  imageProducts: [CreateImageProductInput!]!
}

input CreateManyImageSizesInput {
  """Array of records to create"""
  imageSizes: [CreateImageSizeInput!]!
}

input CreateManyImageSubproductsInput {
  """Array of records to create"""
  imageSubproducts: [CreateImageSubproductInput!]!
}

input CreateManyImagesInput {
  """Array of records to create"""
  images: [CreateImageInput!]!
}

input CreateManyImagesSizeGuidesDetailsInput {
  """Array of records to create"""
  imagesSizeGuidesDetails: [CreateImagesSizeGuidesDetailInput!]!
}

input CreateManyImpersonateHistoriesInput {
  """Array of records to create"""
  impersonateHistories: [CreateImpersonateHistoryInput!]!
}

input CreateManyIncredibleOfferSentNotificationsInput {
  """Array of records to create"""
  incredibleOfferSentNotifications: [CreateIncredibleOfferSentNotificationInput!]!
}

input CreateManyIncredibleOffersInput {
  """Array of records to create"""
  incredibleOffers: [CreateIncredibleOfferInput!]!
}

input CreateManyInstagramFeedsInput {
  """Array of records to create"""
  instagramFeeds: [CreateInstagramFeedInput!]!
}

input CreateManyInvitationCodesInput {
  """Array of records to create"""
  invitationCodes: [CreateInvitationCodeInput!]!
}

input CreateManyInvoiceAddressesInput {
  """Array of records to create"""
  invoiceAddresses: [CreateInvoiceAddressInput!]!
}

input CreateManyInvoiceBankGatewayHistoriesInput {
  """Array of records to create"""
  invoiceBankGatewayHistories: [CreateInvoiceBankGatewayHistoryInput!]!
}

input CreateManyInvoiceHistoriesInput {
  """Array of records to create"""
  invoiceHistories: [CreateInvoiceHistoryInput!]!
}

input CreateManyInvoiceInvoiceStatusesInput {
  """Array of records to create"""
  invoiceInvoiceStatuses: [CreateInvoiceInvoiceStatusInput!]!
}

input CreateManyInvoiceModesInput {
  """Array of records to create"""
  invoiceModes: [CreateInvoiceModeInput!]!
}

input CreateManyInvoiceNegotiationsInput {
  """Array of records to create"""
  invoiceNegotiations: [CreateInvoiceNegotiationInput!]!
}

input CreateManyInvoicePaymentHistoriesInput {
  """Array of records to create"""
  invoicePaymentHistories: [CreateInvoicePaymentHistoryInput!]!
}

input CreateManyInvoicePaymentStatusesInput {
  """Array of records to create"""
  invoicePaymentStatuses: [CreateInvoicePaymentStatusInput!]!
}

input CreateManyInvoicePaymentTypesInput {
  """Array of records to create"""
  invoicePaymentTypes: [CreateInvoicePaymentTypeInput!]!
}

input CreateManyInvoicePaymentsInput {
  """Array of records to create"""
  invoicePayments: [CreateInvoicePaymentInput!]!
}

input CreateManyInvoiceProductHistoriesInput {
  """Array of records to create"""
  invoiceProductHistories: [CreateInvoiceProductHistoryInput!]!
}

input CreateManyInvoiceProductItemInvoiceProductStatusesInput {
  """Array of records to create"""
  invoiceProductItemInvoiceProductStatuses: [CreateInvoiceProductItemInvoiceProductStatusInput!]!
}

input CreateManyInvoiceProductItemsInput {
  """Array of records to create"""
  invoiceProductItems: [CreateInvoiceProductItemInput!]!
}

input CreateManyInvoiceProductStatusesInput {
  """Array of records to create"""
  invoiceProductStatuses: [CreateInvoiceProductStatusInput!]!
}

input CreateManyInvoiceProductsInput {
  """Array of records to create"""
  invoiceProducts: [CreateInvoiceProductInput!]!
}

input CreateManyInvoiceRatesResultsInput {
  """Array of records to create"""
  invoiceRatesResults: [CreateInvoiceRatesResultInput!]!
}

input CreateManyInvoiceReversalItemsInput {
  """Array of records to create"""
  invoiceReversalItems: [CreateInvoiceReversalItemInput!]!
}

input CreateManyInvoiceReversalsInput {
  """Array of records to create"""
  invoiceReversals: [CreateInvoiceReversalInput!]!
}

input CreateManyInvoiceShippingRatesInput {
  """Array of records to create"""
  invoiceShippingRates: [CreateInvoiceShippingRateInput!]!
}

input CreateManyInvoiceStatusesInput {
  """Array of records to create"""
  invoiceStatuses: [CreateInvoiceStatusInput!]!
}

input CreateManyInvoiceTypesInput {
  """Array of records to create"""
  invoiceTypes: [CreateInvoiceTypeInput!]!
}

input CreateManyInvoicesInput {
  """Array of records to create"""
  invoices: [CreateInvoiceInput!]!
}

input CreateManyLabelProductsInput {
  """Array of records to create"""
  labelProducts: [CreateLabelProductInput!]!
}

input CreateManyLabelsInput {
  """Array of records to create"""
  labels: [CreateLabelInput!]!
}

input CreateManyMellatPaymentErrorsInput {
  """Array of records to create"""
  mellatPaymentErrors: [CreateMellatPaymentErrorInput!]!
}

input CreateManyMigrationsInput {
  """Array of records to create"""
  migrations: [CreateMigrationInput!]!
}

input CreateManyModelHasPermissionsInput {
  """Array of records to create"""
  modelHasPermissions: [CreateModelHasPermissionInput!]!
}

input CreateManyModelHasRolesInput {
  """Array of records to create"""
  modelHasRoles: [CreateModelHasRoleInput!]!
}

input CreateManyModelVisitsInput {
  """Array of records to create"""
  modelVisits: [CreateModelVisitInput!]!
}

input CreateManyModemaAcceleratorImagesInput {
  """Array of records to create"""
  modemaAcceleratorImages: [CreateModemaAcceleratorImageInput!]!
}

input CreateManyModemaAcceleratorVideosInput {
  """Array of records to create"""
  modemaAcceleratorVideos: [CreateModemaAcceleratorVideoInput!]!
}

input CreateManyModemaAcceleratorsInput {
  """Array of records to create"""
  modemaAccelerators: [CreateModemaAcceleratorInput!]!
}

input CreateManyNeedsPhotographySubproductsInput {
  """Array of records to create"""
  needsPhotographySubproducts: [CreateNeedsPhotographySubproductInput!]!
}

input CreateManyNegotiationHistoriesInput {
  """Array of records to create"""
  negotiationHistories: [CreateNegotiationHistoryInput!]!
}

input CreateManyNegotiationStatusesInput {
  """Array of records to create"""
  negotiationStatuses: [CreateNegotiationStatusInput!]!
}

input CreateManyNegotiationTypesInput {
  """Array of records to create"""
  negotiationTypes: [CreateNegotiationTypeInput!]!
}

input CreateManyNegotiationsInput {
  """Array of records to create"""
  negotiations: [CreateNegotiationInput!]!
}

input CreateManyNewBordersInput {
  """Array of records to create"""
  newBorders: [CreateNewBorderInput!]!
}

input CreateManyOauthAccessTokensInput {
  """Array of records to create"""
  oauthAccessTokens: [CreateOauthAccessTokenInput!]!
}

input CreateManyOauthAuthCodesInput {
  """Array of records to create"""
  oauthAuthCodes: [CreateOauthAuthCodeInput!]!
}

input CreateManyOauthClientsInput {
  """Array of records to create"""
  oauthClients: [CreateOauthClientInput!]!
}

input CreateManyOauthPersonalAccessClientsInput {
  """Array of records to create"""
  oauthPersonalAccessClients: [CreateOauthPersonalAccessClientInput!]!
}

input CreateManyOauthRefreshTokensInput {
  """Array of records to create"""
  oauthRefreshTokens: [CreateOauthRefreshTokenInput!]!
}

input CreateManyOutOfStockButListedProductsInput {
  """Array of records to create"""
  outOfStockButListedProducts: [CreateOutOfStockButListedProductInput!]!
}

input CreateManyPasswordResetsInput {
  """Array of records to create"""
  passwordResets: [CreatePasswordResetInput!]!
}

input CreateManyPatternCategoriesInput {
  """Array of records to create"""
  patternCategories: [CreatePatternCategoryInput!]!
}

input CreateManyPatternLayersInput {
  """Array of records to create"""
  patternLayers: [CreatePatternLayerInput!]!
}

input CreateManyPatternsInput {
  """Array of records to create"""
  patterns: [CreatePatternInput!]!
}

input CreateManyPaymentMethodFieldsInput {
  """Array of records to create"""
  paymentMethodFields: [CreatePaymentMethodFieldInput!]!
}

input CreateManyPaymentMethodsInput {
  """Array of records to create"""
  paymentMethods: [CreatePaymentMethodInput!]!
}

input CreateManyPaymentRequestStatusesInput {
  """Array of records to create"""
  paymentRequestStatuses: [CreatePaymentRequestStatusInput!]!
}

input CreateManyPaymentRequestsInput {
  """Array of records to create"""
  paymentRequests: [CreatePaymentRequestInput!]!
}

input CreateManyPermissionGroupsInput {
  """Array of records to create"""
  permissionGroups: [CreatePermissionGroupInput!]!
}

input CreateManyPermissionsInput {
  """Array of records to create"""
  permissions: [CreatePermissionInput!]!
}

input CreateManyPreorderRegistersInput {
  """Array of records to create"""
  preorderRegisters: [CreatePreorderRegisterInput!]!
}

input CreateManyPreorderStatusesInput {
  """Array of records to create"""
  preorderStatuses: [CreatePreorderStatusInput!]!
}

input CreateManyPreordersInput {
  """Array of records to create"""
  preorders: [CreatePreorderInput!]!
}

input CreateManyPriceGroupSizesInput {
  """Array of records to create"""
  priceGroupSizes: [CreatePriceGroupSizeInput!]!
}

input CreateManyPriceGroupsInput {
  """Array of records to create"""
  priceGroups: [CreatePriceGroupInput!]!
}

input CreateManyPrintProfilesInput {
  """Array of records to create"""
  printProfiles: [CreatePrintProfileInput!]!
}

input CreateManyProductCategoryDetailsInput {
  """Array of records to create"""
  productCategoryDetails: [CreateProductCategoryDetailInput!]!
}

input CreateManyProductCategoryRatesInput {
  """Array of records to create"""
  productCategoryRates: [CreateProductCategoryRateInput!]!
}

input CreateManyProductColorImagesInput {
  """Array of records to create"""
  productColorImages: [CreateProductColorImageInput!]!
}

input CreateManyProductColorSalesInput {
  """Array of records to create"""
  productColorSales: [CreateProductColorSaleInput!]!
}

input CreateManyProductCommentLikesInput {
  """Array of records to create"""
  productCommentLikes: [CreateProductCommentLikeInput!]!
}

input CreateManyProductCommentsInput {
  """Array of records to create"""
  productComments: [CreateProductCommentInput!]!
}

input CreateManyProductLikesInput {
  """Array of records to create"""
  productLikes: [CreateProductLikeInput!]!
}

input CreateManyProductsInput {
  """Array of records to create"""
  products: [CreateProductInput!]!
}

input CreateManyUsersInput {
  """Array of records to create"""
  users: [CreateUserInput!]!
}

input CreateMellatPaymentErrorInput {
  code: String
  createdAt: DateTime
  id: String!
  message: String
  updatedAt: DateTime
}

input CreateMigrationInput {
  batch: Float!
  id: Float!
  migration: String!
}

input CreateModelHasPermissionInput {
  modelId: String!
  modelType: String!
  permissionId: Float!
}

input CreateModelHasRoleInput {
  modelId: String!
  modelType: String!
  roleId: Float!
}

input CreateModelVisitInput {
  createdAt: DateTime
  id: Float!
  modelId: Float!
  modelName: String!
  updatedAt: DateTime
  userId: Float!
}

input CreateModemaAcceleratorImageInput {
  createdAt: DateTime
  filename: String!
  id: Float!
  mime: String!
  modemaAcceleratorId: Float
  originalFilename: String!
  path: String!
  type: String!
  updatedAt: DateTime
  uploadSource: String!
}

input CreateModemaAcceleratorInput {
  city: String!
  createdAt: DateTime
  details: String!
  hasOffice: String!
  id: Float!
  instagram: String!
  jobCategory: String!
  name: String!
  phone: String!
  pro: String!
  updatedAt: DateTime
}

input CreateModemaAcceleratorVideoInput {
  altText: String
  createdAt: DateTime
  filename: String!
  id: Float!
  mime: String!
  modemaAcceleratorId: Float
  originalFilename: String!
  path: String!
  type: String!
  updatedAt: DateTime
  uploadSource: String!
}

input CreateNeedsPhotographySubproductInput {
  announcedDate: DateTime
  announcedUserId: Float
  createdAt: DateTime
  deletedAt: DateTime
  id: Float!
  photographyDate: DateTime
  photographyUserId: Float
  subproductId: Float!
  updatedAt: DateTime
}

input CreateNegotiationHistoryInput {
  createdAt: DateTime
  id: Float!
  negotiationId: Float!
  negotiationStatusId: Float!
  newNegotiatorId: Float!
  oldNegotiatorId: Float!
  submittedBy: Float!
  updatedAt: DateTime
}

input CreateNegotiationInput {
  createdAt: DateTime
  customerId: Float
  dateTime: DateTime!
  id: Float!
  isRead: Boolean!
  name: String
  negotiationStatusId: Float!
  negotiatorId: Float!
  priority: Float!
  submittedBy: Float!
  tel: String
  updatedAt: DateTime
}

input CreateNegotiationStatusInput {
  createdAt: DateTime
  id: Float!
  name: String
  updatedAt: DateTime
}

input CreateNegotiationTypeInput {
  createdAt: DateTime
  id: Float!
  name: String
  updatedAt: DateTime
}

input CreateNewBorderInput {
  brand: String
  color: String
  design: String
  designer: String
  id: Float!
  material: String
  name: String
  newBorder: String
  oldBorder: String
  sizes: String
  type: String
}

input CreateOauthAccessTokenInput {
  clientId: Float!
  createdAt: DateTime
  expiresAt: DateTime
  id: String!
  name: String
  revoked: Boolean!
  scopes: String
  updatedAt: DateTime
  userId: Float
}

input CreateOauthAuthCodeInput {
  clientId: Float!
  expiresAt: DateTime
  id: String!
  revoked: Boolean!
  scopes: String
  userId: Float!
}

input CreateOauthClientInput {
  createdAt: DateTime
  id: Float!
  name: String!
  passwordClient: Boolean!
  personalAccessClient: Boolean!
  provider: String
  redirect: String!
  revoked: Boolean!
  secret: String
  updatedAt: DateTime
  userId: Float
}

input CreateOauthPersonalAccessClientInput {
  clientId: Float!
  createdAt: DateTime
  id: Float!
  updatedAt: DateTime
}

input CreateOauthRefreshTokenInput {
  accessTokenId: String!
  expiresAt: DateTime
  id: String!
  revoked: Boolean!
}

input CreateOneActivityInput {
  """The record to create"""
  activity: CreateActivityInput!
}

input CreateOneAddressInput {
  """The record to create"""
  address: CreateAddressInput!
}

input CreateOneAutomationEventInput {
  """The record to create"""
  automationEvent: CreateAutomationEventInput!
}

input CreateOneAutomationRfmScoreInput {
  """The record to create"""
  automationRfmScore: CreateAutomationRfmScoreInput!
}

input CreateOneBasicCarpetBorderInput {
  """The record to create"""
  basicCarpetBorder: CreateBasicCarpetBorderInput!
}

input CreateOneBasicCarpetColorInput {
  """The record to create"""
  basicCarpetColor: CreateBasicCarpetColorInput!
}

input CreateOneBasicCarpetDesignInput {
  """The record to create"""
  basicCarpetDesign: CreateBasicCarpetDesignInput!
}

input CreateOneBasicCarpetDesignerInput {
  """The record to create"""
  basicCarpetDesigner: CreateBasicCarpetDesignerInput!
}

input CreateOneBasicCarpetMaterialInput {
  """The record to create"""
  basicCarpetMaterial: CreateBasicCarpetMaterialInput!
}

input CreateOneBasicCarpetSizeDetailInput {
  """The record to create"""
  basicCarpetSizeDetail: CreateBasicCarpetSizeDetailInput!
}

input CreateOneBasicCarpetSizeInput {
  """The record to create"""
  basicCarpetSize: CreateBasicCarpetSizeInput!
}

input CreateOneBasicCarpetTypeInput {
  """The record to create"""
  basicCarpetType: CreateBasicCarpetTypeInput!
}

input CreateOneBorderInput {
  """The record to create"""
  border: CreateBorderInput!
}

input CreateOneCampaignFreeOfferInput {
  """The record to create"""
  campaignFreeOffer: CreateCampaignFreeOfferInput!
}

input CreateOneCampaignFreeOfferSizeInput {
  """The record to create"""
  campaignFreeOfferSize: CreateCampaignFreeOfferSizeInput!
}

input CreateOneCampaignGoldCoinSubInput {
  """The record to create"""
  campaignGoldCoinSub: CreateCampaignGoldCoinSubInput!
}

input CreateOneCampaignInstagramFollowInput {
  """The record to create"""
  campaignInstagramFollow: CreateCampaignInstagramFollowInput!
}

input CreateOneCampaignPetFormInput {
  """The record to create"""
  campaignPetForm: CreateCampaignPetFormInput!
}

input CreateOneCampaignRoomvoImageInput {
  """The record to create"""
  campaignRoomvoImage: CreateCampaignRoomvoImageInput!
}

input CreateOneCampaignRoomvoVoteInput {
  """The record to create"""
  campaignRoomvoVote: CreateCampaignRoomvoVoteInput!
}

input CreateOneCampaignSubscriptionInput {
  """The record to create"""
  campaignSubscription: CreateCampaignSubscriptionInput!
}

input CreateOneCampaignUefaEuroSubscriberHistoryInput {
  """The record to create"""
  campaignUefaEuroSubscriberHistory: CreateCampaignUefaEuroSubscriberHistoryInput!
}

input CreateOneCampaignUefaEuroSubscriberInput {
  """The record to create"""
  campaignUefaEuroSubscriber: CreateCampaignUefaEuroSubscriberInput!
}

input CreateOneCampaignVotingImageInput {
  """The record to create"""
  campaignVotingImage: CreateCampaignVotingImageInput!
}

input CreateOneCarpetFeatureInput {
  """The record to create"""
  carpetFeature: CreateCarpetFeatureInput!
}

input CreateOneCarpetFeatureUserInput {
  """The record to create"""
  carpetFeatureUser: CreateCarpetFeatureUserInput!
}

input CreateOneCarpetMaterialInput {
  """The record to create"""
  carpetMaterial: CreateCarpetMaterialInput!
}

input CreateOneCarpetShapeInput {
  """The record to create"""
  carpetShape: CreateCarpetShapeInput!
}

input CreateOneCarpetSizeInput {
  """The record to create"""
  carpetSize: CreateCarpetSizeInput!
}

input CreateOneCarpetUsagePlaceInput {
  """The record to create"""
  carpetUsagePlace: CreateCarpetUsagePlaceInput!
}

input CreateOneCarpetUsagePlaceInvoiceProductInput {
  """The record to create"""
  carpetUsagePlaceInvoiceProduct: CreateCarpetUsagePlaceInvoiceProductInput!
}

input CreateOneCarpetUsagePlaceUserInput {
  """The record to create"""
  carpetUsagePlaceUser: CreateCarpetUsagePlaceUserInput!
}

input CreateOneChaparSettlementStatusInput {
  """The record to create"""
  chaparSettlementStatus: CreateChaparSettlementStatusInput!
}

input CreateOneChaparTrackingHistoryInput {
  """The record to create"""
  chaparTrackingHistory: CreateChaparTrackingHistoryInput!
}

input CreateOneCitiesSepidarInput {
  """The record to create"""
  citiesSepidar: CreateCitiesSepidarInput!
}

input CreateOneCity2Input {
  """The record to create"""
  city2: CreateCity2Input!
}

input CreateOneCityInput {
  """The record to create"""
  city: CreateCityInput!
}

input CreateOneColorCategoryDetailInput {
  """The record to create"""
  colorCategoryDetail: CreateColorCategoryDetailInput!
}

input CreateOneColorCategoryInput {
  """The record to create"""
  colorCategory: CreateColorCategoryInput!
}

input CreateOneColorCategorySubproductInput {
  """The record to create"""
  colorCategorySubproduct: CreateColorCategorySubproductInput!
}

input CreateOneColorInput {
  """The record to create"""
  color: CreateColorInput!
}

input CreateOneConfigInput {
  """The record to create"""
  config: CreateConfigInput!
}

input CreateOneContactFormHistoryInput {
  """The record to create"""
  contactFormHistory: CreateContactFormHistoryInput!
}

input CreateOneContactFormInput {
  """The record to create"""
  contactForm: CreateContactFormInput!
}

input CreateOneContactFormStatusInput {
  """The record to create"""
  contactFormStatus: CreateContactFormStatusInput!
}

input CreateOneCountryInput {
  """The record to create"""
  country: CreateCountryInput!
}

input CreateOneCouponInput {
  """The record to create"""
  coupon: CreateCouponInput!
}

input CreateOneCouponSubjectInput {
  """The record to create"""
  couponSubject: CreateCouponSubjectInput!
}

input CreateOneCrmPresentationInput {
  """The record to create"""
  crmPresentation: CreateCrmPresentationInput!
}

input CreateOneCustomerImageProductInput {
  """The record to create"""
  customerImageProduct: CreateCustomerImageProductInput!
}

input CreateOneCustomerRequestFileInput {
  """The record to create"""
  customerRequestFile: CreateCustomerRequestFileInput!
}

input CreateOneCustomerRequestInput {
  """The record to create"""
  customerRequest: CreateCustomerRequestInput!
}

input CreateOneCustomerVideoProductInput {
  """The record to create"""
  customerVideoProduct: CreateCustomerVideoProductInput!
}

input CreateOneDamageReasonInput {
  """The record to create"""
  damageReason: CreateDamageReasonInput!
}

input CreateOneDepartmentInput {
  """The record to create"""
  department: CreateDepartmentInput!
}

input CreateOneDesignInput {
  """The record to create"""
  design: CreateDesignInput!
}

input CreateOneDesignersProductPriceRangeInput {
  """The record to create"""
  designersProductPriceRange: CreateDesignersProductPriceRangeInput!
}

input CreateOneDiscountInput {
  """The record to create"""
  discount: CreateDiscountInput!
}

input CreateOneDiscountNotificationInput {
  """The record to create"""
  discountNotification: CreateDiscountNotificationInput!
}

input CreateOneDiscountSubjectInput {
  """The record to create"""
  discountSubject: CreateDiscountSubjectInput!
}

input CreateOneExitControlInput {
  """The record to create"""
  exitControl: CreateExitControlInput!
}

input CreateOneExitControlItemInput {
  """The record to create"""
  exitControlItem: CreateExitControlItemInput!
}

input CreateOneExportProductInput {
  """The record to create"""
  exportProduct: CreateExportProductInput!
}

input CreateOneFailedJobInput {
  """The record to create"""
  failedJob: CreateFailedJobInput!
}

input CreateOneFavoriteProductInput {
  """The record to create"""
  favoriteProduct: CreateFavoriteProductInput!
}

input CreateOneFedexAddressValidationAttributeInput {
  """The record to create"""
  fedexAddressValidationAttribute: CreateFedexAddressValidationAttributeInput!
}

input CreateOneFetchSiteUrlInput {
  """The record to create"""
  fetchSiteUrl: CreateFetchSiteUrlInput!
}

input CreateOneFileInput {
  """The record to create"""
  file: CreateFileInput!
}

input CreateOneFileNegotiationInput {
  """The record to create"""
  fileNegotiation: CreateFileNegotiationInput!
}

input CreateOneGhazalInput {
  """The record to create"""
  ghazal: CreateGhazalInput!
}

input CreateOneGoogleFormUtmInput {
  """The record to create"""
  googleFormUtm: CreateGoogleFormUtmInput!
}

input CreateOneHeardAboutUsOptionInput {
  """The record to create"""
  heardAboutUsOption: CreateHeardAboutUsOptionInput!
}

input CreateOneHelpDeskInput {
  """The record to create"""
  helpDesk: CreateHelpDeskInput!
}

input CreateOneHolidayInput {
  """The record to create"""
  holiday: CreateHolidayInput!
}

input CreateOneHomePageCustomerImageInput {
  """The record to create"""
  homePageCustomerImage: CreateHomePageCustomerImageInput!
}

input CreateOneHyperInput {
  """The record to create"""
  hyper: CreateHyperInput!
}

input CreateOneHyperstarCodeInput {
  """The record to create"""
  hyperstarCode: CreateHyperstarCodeInput!
}

input CreateOneImageInput {
  """The record to create"""
  image: CreateImageInput!
}

input CreateOneImageLayerInput {
  """The record to create"""
  imageLayer: CreateImageLayerInput!
}

input CreateOneImageProductInput {
  """The record to create"""
  imageProduct: CreateImageProductInput!
}

input CreateOneImageSizeInput {
  """The record to create"""
  imageSize: CreateImageSizeInput!
}

input CreateOneImageSubproductInput {
  """The record to create"""
  imageSubproduct: CreateImageSubproductInput!
}

input CreateOneImagesSizeGuidesDetailInput {
  """The record to create"""
  imagesSizeGuidesDetail: CreateImagesSizeGuidesDetailInput!
}

input CreateOneImpersonateHistoryInput {
  """The record to create"""
  impersonateHistory: CreateImpersonateHistoryInput!
}

input CreateOneIncredibleOfferInput {
  """The record to create"""
  incredibleOffer: CreateIncredibleOfferInput!
}

input CreateOneIncredibleOfferSentNotificationInput {
  """The record to create"""
  incredibleOfferSentNotification: CreateIncredibleOfferSentNotificationInput!
}

input CreateOneInstagramFeedInput {
  """The record to create"""
  instagramFeed: CreateInstagramFeedInput!
}

input CreateOneInvitationCodeInput {
  """The record to create"""
  invitationCode: CreateInvitationCodeInput!
}

input CreateOneInvoiceAddressInput {
  """The record to create"""
  invoiceAddress: CreateInvoiceAddressInput!
}

input CreateOneInvoiceBankGatewayHistoryInput {
  """The record to create"""
  invoiceBankGatewayHistory: CreateInvoiceBankGatewayHistoryInput!
}

input CreateOneInvoiceHistoryInput {
  """The record to create"""
  invoiceHistory: CreateInvoiceHistoryInput!
}

input CreateOneInvoiceInput {
  """The record to create"""
  invoice: CreateInvoiceInput!
}

input CreateOneInvoiceInvoiceStatusInput {
  """The record to create"""
  invoiceInvoiceStatus: CreateInvoiceInvoiceStatusInput!
}

input CreateOneInvoiceModeInput {
  """The record to create"""
  invoiceMode: CreateInvoiceModeInput!
}

input CreateOneInvoiceNegotiationInput {
  """The record to create"""
  invoiceNegotiation: CreateInvoiceNegotiationInput!
}

input CreateOneInvoicePaymentHistoryInput {
  """The record to create"""
  invoicePaymentHistory: CreateInvoicePaymentHistoryInput!
}

input CreateOneInvoicePaymentInput {
  """The record to create"""
  invoicePayment: CreateInvoicePaymentInput!
}

input CreateOneInvoicePaymentStatusInput {
  """The record to create"""
  invoicePaymentStatus: CreateInvoicePaymentStatusInput!
}

input CreateOneInvoicePaymentTypeInput {
  """The record to create"""
  invoicePaymentType: CreateInvoicePaymentTypeInput!
}

input CreateOneInvoiceProductHistoryInput {
  """The record to create"""
  invoiceProductHistory: CreateInvoiceProductHistoryInput!
}

input CreateOneInvoiceProductInput {
  """The record to create"""
  invoiceProduct: CreateInvoiceProductInput!
}

input CreateOneInvoiceProductItemInput {
  """The record to create"""
  invoiceProductItem: CreateInvoiceProductItemInput!
}

input CreateOneInvoiceProductItemInvoiceProductStatusInput {
  """The record to create"""
  invoiceProductItemInvoiceProductStatus: CreateInvoiceProductItemInvoiceProductStatusInput!
}

input CreateOneInvoiceProductStatusInput {
  """The record to create"""
  invoiceProductStatus: CreateInvoiceProductStatusInput!
}

input CreateOneInvoiceRatesResultInput {
  """The record to create"""
  invoiceRatesResult: CreateInvoiceRatesResultInput!
}

input CreateOneInvoiceReversalInput {
  """The record to create"""
  invoiceReversal: CreateInvoiceReversalInput!
}

input CreateOneInvoiceReversalItemInput {
  """The record to create"""
  invoiceReversalItem: CreateInvoiceReversalItemInput!
}

input CreateOneInvoiceShippingRateInput {
  """The record to create"""
  invoiceShippingRate: CreateInvoiceShippingRateInput!
}

input CreateOneInvoiceStatusInput {
  """The record to create"""
  invoiceStatus: CreateInvoiceStatusInput!
}

input CreateOneInvoiceTypeInput {
  """The record to create"""
  invoiceType: CreateInvoiceTypeInput!
}

input CreateOneLabelInput {
  """The record to create"""
  label: CreateLabelInput!
}

input CreateOneLabelProductInput {
  """The record to create"""
  labelProduct: CreateLabelProductInput!
}

input CreateOneMellatPaymentErrorInput {
  """The record to create"""
  mellatPaymentError: CreateMellatPaymentErrorInput!
}

input CreateOneMigrationInput {
  """The record to create"""
  migration: CreateMigrationInput!
}

input CreateOneModelHasPermissionInput {
  """The record to create"""
  modelHasPermission: CreateModelHasPermissionInput!
}

input CreateOneModelHasRoleInput {
  """The record to create"""
  modelHasRole: CreateModelHasRoleInput!
}

input CreateOneModelVisitInput {
  """The record to create"""
  modelVisit: CreateModelVisitInput!
}

input CreateOneModemaAcceleratorImageInput {
  """The record to create"""
  modemaAcceleratorImage: CreateModemaAcceleratorImageInput!
}

input CreateOneModemaAcceleratorInput {
  """The record to create"""
  modemaAccelerator: CreateModemaAcceleratorInput!
}

input CreateOneModemaAcceleratorVideoInput {
  """The record to create"""
  modemaAcceleratorVideo: CreateModemaAcceleratorVideoInput!
}

input CreateOneNeedsPhotographySubproductInput {
  """The record to create"""
  needsPhotographySubproduct: CreateNeedsPhotographySubproductInput!
}

input CreateOneNegotiationHistoryInput {
  """The record to create"""
  negotiationHistory: CreateNegotiationHistoryInput!
}

input CreateOneNegotiationInput {
  """The record to create"""
  negotiation: CreateNegotiationInput!
}

input CreateOneNegotiationStatusInput {
  """The record to create"""
  negotiationStatus: CreateNegotiationStatusInput!
}

input CreateOneNegotiationTypeInput {
  """The record to create"""
  negotiationType: CreateNegotiationTypeInput!
}

input CreateOneNewBorderInput {
  """The record to create"""
  newBorder: CreateNewBorderInput!
}

input CreateOneOauthAccessTokenInput {
  """The record to create"""
  oauthAccessToken: CreateOauthAccessTokenInput!
}

input CreateOneOauthAuthCodeInput {
  """The record to create"""
  oauthAuthCode: CreateOauthAuthCodeInput!
}

input CreateOneOauthClientInput {
  """The record to create"""
  oauthClient: CreateOauthClientInput!
}

input CreateOneOauthPersonalAccessClientInput {
  """The record to create"""
  oauthPersonalAccessClient: CreateOauthPersonalAccessClientInput!
}

input CreateOneOauthRefreshTokenInput {
  """The record to create"""
  oauthRefreshToken: CreateOauthRefreshTokenInput!
}

input CreateOneOutOfStockButListedProductInput {
  """The record to create"""
  outOfStockButListedProduct: CreateOutOfStockButListedProductInput!
}

input CreateOnePasswordResetInput {
  """The record to create"""
  passwordReset: CreatePasswordResetInput!
}

input CreateOnePatternCategoryInput {
  """The record to create"""
  patternCategory: CreatePatternCategoryInput!
}

input CreateOnePatternInput {
  """The record to create"""
  pattern: CreatePatternInput!
}

input CreateOnePatternLayerInput {
  """The record to create"""
  patternLayer: CreatePatternLayerInput!
}

input CreateOnePaymentMethodFieldInput {
  """The record to create"""
  paymentMethodField: CreatePaymentMethodFieldInput!
}

input CreateOnePaymentMethodInput {
  """The record to create"""
  paymentMethod: CreatePaymentMethodInput!
}

input CreateOnePaymentRequestInput {
  """The record to create"""
  paymentRequest: CreatePaymentRequestInput!
}

input CreateOnePaymentRequestStatusInput {
  """The record to create"""
  paymentRequestStatus: CreatePaymentRequestStatusInput!
}

input CreateOnePermissionGroupInput {
  """The record to create"""
  permissionGroup: CreatePermissionGroupInput!
}

input CreateOnePermissionInput {
  """The record to create"""
  permission: CreatePermissionInput!
}

input CreateOnePreorderInput {
  """The record to create"""
  preorder: CreatePreorderInput!
}

input CreateOnePreorderRegisterInput {
  """The record to create"""
  preorderRegister: CreatePreorderRegisterInput!
}

input CreateOnePreorderStatusInput {
  """The record to create"""
  preorderStatus: CreatePreorderStatusInput!
}

input CreateOnePriceGroupInput {
  """The record to create"""
  priceGroup: CreatePriceGroupInput!
}

input CreateOnePriceGroupSizeInput {
  """The record to create"""
  priceGroupSize: CreatePriceGroupSizeInput!
}

input CreateOnePrintProfileInput {
  """The record to create"""
  printProfile: CreatePrintProfileInput!
}

input CreateOneProductCategoryDetailInput {
  """The record to create"""
  productCategoryDetail: CreateProductCategoryDetailInput!
}

input CreateOneProductCategoryRateInput {
  """The record to create"""
  productCategoryRate: CreateProductCategoryRateInput!
}

input CreateOneProductColorImageInput {
  """The record to create"""
  productColorImage: CreateProductColorImageInput!
}

input CreateOneProductColorSaleInput {
  """The record to create"""
  productColorSale: CreateProductColorSaleInput!
}

input CreateOneProductCommentInput {
  """The record to create"""
  productComment: CreateProductCommentInput!
}

input CreateOneProductCommentLikeInput {
  """The record to create"""
  productCommentLike: CreateProductCommentLikeInput!
}

input CreateOneProductInput {
  """The record to create"""
  product: CreateProductInput!
}

input CreateOneProductLikeInput {
  """The record to create"""
  productLike: CreateProductLikeInput!
}

input CreateOneUserInput {
  """The record to create"""
  user: CreateUserInput!
}

input CreateOutOfStockButListedProductInput {
  createdAt: DateTime
  id: Float!
  productId: Float!
  updatedAt: DateTime
}

input CreatePasswordResetInput {
  createdAt: DateTime
  email: String!
  token: String!
}

input CreatePatternCategoryInput {
  createdAt: DateTime
  id: Float!
  imageId: Float
  isActive: Float
  name: String!
  sortOrder: Float
  updatedAt: DateTime
  viewCounter: Float
}

input CreatePatternInput {
  createdAt: DateTime
  filename: String
  id: Float!
  isActive: Float
  keywords: String
  mime: String
  name: String!
  originalFilename: String
  path: String!
  patternCategoryId: Float!
  sortOrder: Float
  thumbnailFilename: String
  updatedAt: DateTime
  viewCounter: Float
}

input CreatePatternLayerInput {
  centerX: Float!
  centerY: Float!
  createdAt: DateTime
  designId: Float!
  filename: String!
  id: Float!
  path: String!
  patternId: Float!
  repeat: Float!
  rotation: Float!
  scaleX: Float!
  scaleY: Float!
  sortOrder: Float!
  updatedAt: DateTime
}

input CreatePaymentMethodFieldInput {
  createdAt: DateTime
  id: Float!
  invoiceId: Float!
  name: String!
  paymentIdentifier: String!
  paymentMethodId: Float!
  updatedAt: DateTime
  value: String!
}

input CreatePaymentMethodInput {
  id: Float!
  name: String!
}

input CreatePaymentRequestInput {
  adminUserId: Float
  amount: String
  bankAccountNumber: String
  createdAt: DateTime!
  id: Float!
  message: String
  paymentRequestStatusId: Float!
  updatedAt: DateTime
  visitorId: Float!
}

input CreatePaymentRequestStatusInput {
  createdAt: DateTime!
  id: Float!
  name: String!
  updatedAt: DateTime!
}

input CreatePermissionGroupInput {
  createdAt: DateTime
  id: Float!
  name: String!
  updatedAt: DateTime
}

input CreatePermissionInput {
  createdAt: DateTime
  guardName: String!
  id: Float!
  name: String!
  parentId: Float
  permissionGroupId: Float
  updatedAt: DateTime
}

input CreatePreorderInput {
  activationCode: String
  activationSendDate: DateTime
  activationSendDateP: String
  activationSendTurn: Float!
  assignedUserId: Float
  companyDescription: String
  createdAt: DateTime
  createdAtP: String
  customerDescription: String
  dateOfTurn: String
  dateOfTurnP: String
  deletedAt: DateTime
  expirationDate: DateTime
  expirationDateP: String
  id: Float!
  isActivated: Boolean!
  lastCallDate: DateTime
  lastCallDateP: String
  name: String
  phone: String
  phone2: String
  preorderStatusId: Float!
  productId: Float
  salesPersonId: Float
  subproductId: Float
  trackingCode: String
  updatedAt: DateTime
  userId: Float
}

input CreatePreorderPreorderStatusInput {
  companyDescription: String
  createdAt: DateTime
  id: Float!
  preorderId: Float!
  preorderStatusId: Float!
  updatedAt: DateTime
  userId: Float
}

input CreatePreorderRegisterInput {
  createdAt: DateTime
  id: Float!
  isConfirmed: Boolean!
  isPaid: Boolean!
  moneyTransferConfirmedBy: Float
  moneyTransferRefCode: String
  orderId: String
  paymentAmount: String!
  paymentTypeId: Float
  preorderDate: DateTime
  preorderNumber: String
  refCodeSales: String
  refId: String
  saleRefId: String
  updatedAt: DateTime
  userId: Float!
  withdrawnAmount: String!
}

input CreatePreorderStatusInput {
  createdAt: DateTime
  id: Float!
  status: String!
  updatedAt: DateTime
}

input CreatePriceGroupInput {
  createdAt: DateTime
  id: Float!
  name: String!
  updatedAt: DateTime
}

input CreatePriceGroupSizeInput {
  basicCarpetSizeId: Float!
  bundlePadPrice: String
  bundlePrice: String
  createdAt: DateTime
  id: Float!
  padPrice: String!
  price: String!
  priceGroupId: Float!
  updatedAt: DateTime
}

input CreatePrintProfileInput {
  blackCurve: String
  blackGain: String
  createdAt: DateTime
  createdBy: Float
  cyanCurve: String
  cyanGain: String
  fabricsBackgroundColor: String
  fabricsPerSquareMeterWeight: String
  fabricsTextureGrade: String
  headHeight: String
  heatSpeed: String
  heatTemperature: String
  id: Float!
  inkCode: String
  isActive: Boolean!
  laminateGlueType: String
  magentaCurve: String
  magentaGain: String
  passCount: String
  totalInkLimit: String
  updatedAt: DateTime
  updatedBy: Float
  versionChangeDate: DateTime!
  versionNo: String!
  yellowCurve: String
  yellowGain: String
}

input CreateProductCategoryDetailInput {
  createdAt: DateTime
  detailText: String
  detailTextEn: String
  id: Float!
  isActive: Boolean!
  productCategoryId: Float
  sortOrder: Float
  title: String
  titleEn: String
  updatedAt: DateTime
}

input CreateProductCategoryRateInput {
  createdAt: DateTime
  id: Float!
  productCategoryId: Float!
  rateId: Float!
  updatedAt: DateTime
}

input CreateProductColorImageInput {
  basicCarpetColorId: Float
  createdAt: DateTime
  id: Float!
  imageId: Float!
  productId: Float!
  sortOrder: Float
  updatedAt: DateTime
}

input CreateProductColorSaleInput {
  averageSaleCount: Float!
  basicCarpetColorId: Float!
  createdAt: DateTime
  id: Float!
  productId: Float!
  saleCount: Float!
  saleCountYear: Float!
  updatedAt: DateTime
}

input CreateProductCommentInput {
  approved: Boolean!
  approvedBy: Float
  comment: String!
  createdAt: DateTime
  id: Float!
  isBuyer: Boolean
  parentCommentId: Float
  productId: Float!
  recommended: Boolean
  starred: Boolean!
  subproductId: Float
  totalDislikes: Float!
  totalLikes: Float!
  updatedAt: DateTime
  userId: Float!
}

input CreateProductCommentLikeInput {
  createdAt: DateTime
  id: Float!
  isDisliked: Boolean
  isLiked: Boolean
  productCommentId: Float!
  updatedAt: DateTime
  userId: Float!
}

input CreateProductInput {
  activeUpdatedAt: DateTime!
  bestSellerColorId: Float
  carpetHasRoots: Boolean!
  code: String
  collectionName: String
  colors: String
  createdAt: DateTime
  description: String
  descriptionEn: String
  designerIsGeneral: Float!
  emallsActive: Boolean!
  emallsTitle: String
  id: Float!
  imageId: Float
  isActive: Boolean!
  isCarpetPad: Boolean
  isSelfEmployedDesigner: Float!
  isShaggy: Boolean!
  length: Float
  metaTags: String
  metaTagsEn: String
  minBasicCarpetSizeId: Float
  name: String!
  nameEn: String
  nameEs: String
  newSubproductsCreated: Float!
  pageTitle: String
  pageTitleEn: String
  parentProductId: Float
  price: String
  priceGroupId: Float
  rate: Float!
  rateCount: Float
  russianName: String
  saleCount: Float!
  saleCountDaily: Float!
  searchName: String
  searchNameEn: String
  size: Float!
  sizeIsCustomizable: Float!
  snapppayActive: Boolean!
  snapppaySortOrder: Boolean
  sortOrder: Float
  totalDislike: Float!
  totalLike: Float!
  updatedAt: DateTime
  urlSlug: String
  urlSlugEn: String
  viewCounter: Float
  width: Float
}

input CreateProductLikeInput {
  createdAt: DateTime
  id: Float!
  isLike: Boolean!
  productId: Float!
  subproductId: Float
  updatedAt: DateTime
  userId: Float!
}

input CreateUserInput {
  activities: [ActivityInput!]!
  apiToken: String
  atmCardNo: String
  avatar: String
  campaignCartItems: String
  campaignCartItemsStartDate: DateTime
  campaignFindingCouponCode: String
  campaignFindingCouponFoundParts: String!
  campaignFindingCouponHidingPlace: String
  campaignFindingCouponUsed: Boolean!
  campaignFindingCouponWinnerPlace: Float
  campaignId: Float
  childrenCouponIsUsed: Boolean!
  code: String
  commentsChargedAmount: String!
  createdAt: DateTime
  discountNotificationSentDate: DateTime
  email: String
  emailVerified: Float
  family: String!
  hafezPoemCount: Float!
  heardAboutUsOptionId: Float
  id: Float!
  invitationCodeId: Float
  isActive: Float
  isForeigner: Boolean!
  isGuest: Float
  isPasswordChanged: Boolean!
  isPreorderApplicant: Boolean!
  loginEmail: String
  lotteryCode: String
  mah: Float
  monthlyRetargetingStartDate: DateTime
  name: String!
  nationalId: String
  newUsersCampaignCharged: Boolean!
  os: String
  osVersion: String
  password: String
  phone: String
  phoneVerified: Float
  phoneVerifiedBy: Float
  preorderPaid: Boolean!
  preorderRegisterDate: DateTime
  preorderTurnEndDate: String
  preorderTurnStartDate: String
  profilePicture: String
  rememberToken: String
  retargetingIsUsed: Boolean!
  roz: Float
  sal: Float
  sepidarCode: Float
  sepidarId: Float
  spinnerIsUsed: Boolean!
  spinnerVerificationCode: String
  spinnerVerified: Boolean!
  status: Float!
  stripeId: String
  temp: String
  tempName: String!
  updatedAt: DateTime
  username: String
  verificationCode: String
}

type CrmPresentation {
  mobile: ID!
  optionId: Float
}

type CrmPresentationConnection {
  """Array of edges."""
  edges: [CrmPresentationEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input CrmPresentationDeleteFilter {
  and: [CrmPresentationDeleteFilter!]
  mobile: IDFilterComparison
  or: [CrmPresentationDeleteFilter!]
}

type CrmPresentationDeleteResponse {
  mobile: ID
  optionId: Float
}

type CrmPresentationEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the CrmPresentation"""
  node: CrmPresentation!
}

input CrmPresentationFilter {
  and: [CrmPresentationFilter!]
  mobile: IDFilterComparison
  or: [CrmPresentationFilter!]
}

input CrmPresentationSort {
  direction: SortDirection!
  field: CrmPresentationSortFields!
  nulls: SortNulls
}

enum CrmPresentationSortFields {
  mobile
}

input CrmPresentationUpdateFilter {
  and: [CrmPresentationUpdateFilter!]
  mobile: IDFilterComparison
  or: [CrmPresentationUpdateFilter!]
}

input CursorPaging {
  """Paginate after opaque cursor"""
  after: ConnectionCursor

  """Paginate before opaque cursor"""
  before: ConnectionCursor

  """Paginate first"""
  first: Int

  """Paginate last"""
  last: Int
}

type CustomerImageProduct {
  createdAt: DateTime
  id: ID!
  imageId: Float!
  productId: Float!
  sortOrder: Float
  updatedAt: DateTime
}

type CustomerImageProductConnection {
  """Array of edges."""
  edges: [CustomerImageProductEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input CustomerImageProductDeleteFilter {
  and: [CustomerImageProductDeleteFilter!]
  id: IDFilterComparison
  or: [CustomerImageProductDeleteFilter!]
}

type CustomerImageProductDeleteResponse {
  createdAt: DateTime
  id: ID
  imageId: Float
  productId: Float
  sortOrder: Float
  updatedAt: DateTime
}

type CustomerImageProductEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the CustomerImageProduct"""
  node: CustomerImageProduct!
}

input CustomerImageProductFilter {
  and: [CustomerImageProductFilter!]
  id: IDFilterComparison
  or: [CustomerImageProductFilter!]
}

input CustomerImageProductSort {
  direction: SortDirection!
  field: CustomerImageProductSortFields!
  nulls: SortNulls
}

enum CustomerImageProductSortFields {
  id
}

input CustomerImageProductUpdateFilter {
  and: [CustomerImageProductUpdateFilter!]
  id: IDFilterComparison
  or: [CustomerImageProductUpdateFilter!]
}

type CustomerRequest {
  createdAt: DateTime
  id: ID!
  name: String
  phone: String
  updatedAt: DateTime
  userId: Float
  uuid: String
}

type CustomerRequestConnection {
  """Array of edges."""
  edges: [CustomerRequestEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input CustomerRequestDeleteFilter {
  and: [CustomerRequestDeleteFilter!]
  id: IDFilterComparison
  or: [CustomerRequestDeleteFilter!]
}

type CustomerRequestDeleteResponse {
  createdAt: DateTime
  id: ID
  name: String
  phone: String
  updatedAt: DateTime
  userId: Float
  uuid: String
}

type CustomerRequestEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the CustomerRequest"""
  node: CustomerRequest!
}

type CustomerRequestFile {
  createdAt: DateTime
  customerRequestId: Float!
  filename: String!
  id: ID!
  mime: String!
  originalFilename: String!
  path: String!
  updatedAt: DateTime
}

type CustomerRequestFileConnection {
  """Array of edges."""
  edges: [CustomerRequestFileEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input CustomerRequestFileDeleteFilter {
  and: [CustomerRequestFileDeleteFilter!]
  id: IDFilterComparison
  or: [CustomerRequestFileDeleteFilter!]
}

type CustomerRequestFileDeleteResponse {
  createdAt: DateTime
  customerRequestId: Float
  filename: String
  id: ID
  mime: String
  originalFilename: String
  path: String
  updatedAt: DateTime
}

type CustomerRequestFileEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the CustomerRequestFile"""
  node: CustomerRequestFile!
}

input CustomerRequestFileFilter {
  and: [CustomerRequestFileFilter!]
  id: IDFilterComparison
  or: [CustomerRequestFileFilter!]
}

input CustomerRequestFileSort {
  direction: SortDirection!
  field: CustomerRequestFileSortFields!
  nulls: SortNulls
}

enum CustomerRequestFileSortFields {
  id
}

input CustomerRequestFileUpdateFilter {
  and: [CustomerRequestFileUpdateFilter!]
  id: IDFilterComparison
  or: [CustomerRequestFileUpdateFilter!]
}

input CustomerRequestFilter {
  and: [CustomerRequestFilter!]
  id: IDFilterComparison
  or: [CustomerRequestFilter!]
}

input CustomerRequestSort {
  direction: SortDirection!
  field: CustomerRequestSortFields!
  nulls: SortNulls
}

enum CustomerRequestSortFields {
  id
}

input CustomerRequestUpdateFilter {
  and: [CustomerRequestUpdateFilter!]
  id: IDFilterComparison
  or: [CustomerRequestUpdateFilter!]
}

type CustomerVideoProduct {
  createdAt: DateTime
  id: ID!
  productId: Float!
  sortOrder: Float
  updatedAt: DateTime
  videoId: Float!
}

type CustomerVideoProductConnection {
  """Array of edges."""
  edges: [CustomerVideoProductEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input CustomerVideoProductDeleteFilter {
  and: [CustomerVideoProductDeleteFilter!]
  id: IDFilterComparison
  or: [CustomerVideoProductDeleteFilter!]
}

type CustomerVideoProductDeleteResponse {
  createdAt: DateTime
  id: ID
  productId: Float
  sortOrder: Float
  updatedAt: DateTime
  videoId: Float
}

type CustomerVideoProductEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the CustomerVideoProduct"""
  node: CustomerVideoProduct!
}

input CustomerVideoProductFilter {
  and: [CustomerVideoProductFilter!]
  id: IDFilterComparison
  or: [CustomerVideoProductFilter!]
}

input CustomerVideoProductSort {
  direction: SortDirection!
  field: CustomerVideoProductSortFields!
  nulls: SortNulls
}

enum CustomerVideoProductSortFields {
  id
}

input CustomerVideoProductUpdateFilter {
  and: [CustomerVideoProductUpdateFilter!]
  id: IDFilterComparison
  or: [CustomerVideoProductUpdateFilter!]
}

type DamageReason {
  cause: String!
  createdAt: DateTime
  department: String!
  id: ID!
  name: String!
  updatedAt: DateTime
}

type DamageReasonConnection {
  """Array of edges."""
  edges: [DamageReasonEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input DamageReasonDeleteFilter {
  and: [DamageReasonDeleteFilter!]
  id: IDFilterComparison
  or: [DamageReasonDeleteFilter!]
}

type DamageReasonDeleteResponse {
  cause: String
  createdAt: DateTime
  department: String
  id: ID
  name: String
  updatedAt: DateTime
}

type DamageReasonEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the DamageReason"""
  node: DamageReason!
}

input DamageReasonFilter {
  and: [DamageReasonFilter!]
  id: IDFilterComparison
  or: [DamageReasonFilter!]
}

input DamageReasonSort {
  direction: SortDirection!
  field: DamageReasonSortFields!
  nulls: SortNulls
}

enum DamageReasonSortFields {
  id
}

input DamageReasonUpdateFilter {
  and: [DamageReasonUpdateFilter!]
  id: IDFilterComparison
  or: [DamageReasonUpdateFilter!]
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeleteManyActivitiesInput {
  """Filter to find records to delete"""
  filter: ActivityDeleteFilter!
}

input DeleteManyAddressesInput {
  """Filter to find records to delete"""
  filter: AddressDeleteFilter!
}

input DeleteManyAutomationEventsInput {
  """Filter to find records to delete"""
  filter: AutomationEventDeleteFilter!
}

input DeleteManyAutomationRfmScoresInput {
  """Filter to find records to delete"""
  filter: AutomationRfmScoreDeleteFilter!
}

input DeleteManyBasicCarpetBordersInput {
  """Filter to find records to delete"""
  filter: BasicCarpetBorderDeleteFilter!
}

input DeleteManyBasicCarpetColorsInput {
  """Filter to find records to delete"""
  filter: BasicCarpetColorDeleteFilter!
}

input DeleteManyBasicCarpetDesignersInput {
  """Filter to find records to delete"""
  filter: BasicCarpetDesignerDeleteFilter!
}

input DeleteManyBasicCarpetDesignsInput {
  """Filter to find records to delete"""
  filter: BasicCarpetDesignDeleteFilter!
}

input DeleteManyBasicCarpetMaterialsInput {
  """Filter to find records to delete"""
  filter: BasicCarpetMaterialDeleteFilter!
}

input DeleteManyBasicCarpetSizeDetailsInput {
  """Filter to find records to delete"""
  filter: BasicCarpetSizeDetailDeleteFilter!
}

input DeleteManyBasicCarpetSizesInput {
  """Filter to find records to delete"""
  filter: BasicCarpetSizeDeleteFilter!
}

input DeleteManyBasicCarpetTypesInput {
  """Filter to find records to delete"""
  filter: BasicCarpetTypeDeleteFilter!
}

input DeleteManyBordersInput {
  """Filter to find records to delete"""
  filter: BorderDeleteFilter!
}

input DeleteManyCampaignFreeOfferSizesInput {
  """Filter to find records to delete"""
  filter: CampaignFreeOfferSizeDeleteFilter!
}

input DeleteManyCampaignFreeOffersInput {
  """Filter to find records to delete"""
  filter: CampaignFreeOfferDeleteFilter!
}

input DeleteManyCampaignGoldCoinSubsInput {
  """Filter to find records to delete"""
  filter: CampaignGoldCoinSubDeleteFilter!
}

input DeleteManyCampaignInstagramFollowsInput {
  """Filter to find records to delete"""
  filter: CampaignInstagramFollowDeleteFilter!
}

input DeleteManyCampaignPetFormsInput {
  """Filter to find records to delete"""
  filter: CampaignPetFormDeleteFilter!
}

input DeleteManyCampaignRoomvoImagesInput {
  """Filter to find records to delete"""
  filter: CampaignRoomvoImageDeleteFilter!
}

input DeleteManyCampaignRoomvoVotesInput {
  """Filter to find records to delete"""
  filter: CampaignRoomvoVoteDeleteFilter!
}

input DeleteManyCampaignSubscriptionsInput {
  """Filter to find records to delete"""
  filter: CampaignSubscriptionDeleteFilter!
}

input DeleteManyCampaignUefaEuroSubscriberHistoriesInput {
  """Filter to find records to delete"""
  filter: CampaignUefaEuroSubscriberHistoryDeleteFilter!
}

input DeleteManyCampaignUefaEuroSubscribersInput {
  """Filter to find records to delete"""
  filter: CampaignUefaEuroSubscriberDeleteFilter!
}

input DeleteManyCampaignVotingImagesInput {
  """Filter to find records to delete"""
  filter: CampaignVotingImageDeleteFilter!
}

input DeleteManyCarpetFeatureUsersInput {
  """Filter to find records to delete"""
  filter: CarpetFeatureUserDeleteFilter!
}

input DeleteManyCarpetFeaturesInput {
  """Filter to find records to delete"""
  filter: CarpetFeatureDeleteFilter!
}

input DeleteManyCarpetMaterialsInput {
  """Filter to find records to delete"""
  filter: CarpetMaterialDeleteFilter!
}

input DeleteManyCarpetShapesInput {
  """Filter to find records to delete"""
  filter: CarpetShapeDeleteFilter!
}

input DeleteManyCarpetSizesInput {
  """Filter to find records to delete"""
  filter: CarpetSizeDeleteFilter!
}

input DeleteManyCarpetUsagePlaceInvoiceProductsInput {
  """Filter to find records to delete"""
  filter: CarpetUsagePlaceInvoiceProductDeleteFilter!
}

input DeleteManyCarpetUsagePlaceUsersInput {
  """Filter to find records to delete"""
  filter: CarpetUsagePlaceUserDeleteFilter!
}

input DeleteManyCarpetUsagePlacesInput {
  """Filter to find records to delete"""
  filter: CarpetUsagePlaceDeleteFilter!
}

input DeleteManyChaparSettlementStatusesInput {
  """Filter to find records to delete"""
  filter: ChaparSettlementStatusDeleteFilter!
}

input DeleteManyChaparTrackingHistoriesInput {
  """Filter to find records to delete"""
  filter: ChaparTrackingHistoryDeleteFilter!
}

input DeleteManyCitiesInput {
  """Filter to find records to delete"""
  filter: CityDeleteFilter!
}

input DeleteManyCitiesSepidarsInput {
  """Filter to find records to delete"""
  filter: CitiesSepidarDeleteFilter!
}

input DeleteManyCity2sInput {
  """Filter to find records to delete"""
  filter: City2DeleteFilter!
}

input DeleteManyColorCategoriesInput {
  """Filter to find records to delete"""
  filter: ColorCategoryDeleteFilter!
}

input DeleteManyColorCategoryDetailsInput {
  """Filter to find records to delete"""
  filter: ColorCategoryDetailDeleteFilter!
}

input DeleteManyColorCategorySubproductsInput {
  """Filter to find records to delete"""
  filter: ColorCategorySubproductDeleteFilter!
}

input DeleteManyColorsInput {
  """Filter to find records to delete"""
  filter: ColorDeleteFilter!
}

input DeleteManyConfigsInput {
  """Filter to find records to delete"""
  filter: ConfigDeleteFilter!
}

input DeleteManyContactFormHistoriesInput {
  """Filter to find records to delete"""
  filter: ContactFormHistoryDeleteFilter!
}

input DeleteManyContactFormStatusesInput {
  """Filter to find records to delete"""
  filter: ContactFormStatusDeleteFilter!
}

input DeleteManyContactFormsInput {
  """Filter to find records to delete"""
  filter: ContactFormDeleteFilter!
}

input DeleteManyCountriesInput {
  """Filter to find records to delete"""
  filter: CountryDeleteFilter!
}

input DeleteManyCouponSubjectsInput {
  """Filter to find records to delete"""
  filter: CouponSubjectDeleteFilter!
}

input DeleteManyCouponsInput {
  """Filter to find records to delete"""
  filter: CouponDeleteFilter!
}

input DeleteManyCrmPresentationsInput {
  """Filter to find records to delete"""
  filter: CrmPresentationDeleteFilter!
}

input DeleteManyCustomerImageProductsInput {
  """Filter to find records to delete"""
  filter: CustomerImageProductDeleteFilter!
}

input DeleteManyCustomerRequestFilesInput {
  """Filter to find records to delete"""
  filter: CustomerRequestFileDeleteFilter!
}

input DeleteManyCustomerRequestsInput {
  """Filter to find records to delete"""
  filter: CustomerRequestDeleteFilter!
}

input DeleteManyCustomerVideoProductsInput {
  """Filter to find records to delete"""
  filter: CustomerVideoProductDeleteFilter!
}

input DeleteManyDamageReasonsInput {
  """Filter to find records to delete"""
  filter: DamageReasonDeleteFilter!
}

input DeleteManyDepartmentsInput {
  """Filter to find records to delete"""
  filter: DepartmentDeleteFilter!
}

input DeleteManyDesignersProductPriceRangesInput {
  """Filter to find records to delete"""
  filter: DesignersProductPriceRangeDeleteFilter!
}

input DeleteManyDesignsInput {
  """Filter to find records to delete"""
  filter: DesignDeleteFilter!
}

input DeleteManyDiscountNotificationsInput {
  """Filter to find records to delete"""
  filter: DiscountNotificationDeleteFilter!
}

input DeleteManyDiscountSubjectsInput {
  """Filter to find records to delete"""
  filter: DiscountSubjectDeleteFilter!
}

input DeleteManyDiscountsInput {
  """Filter to find records to delete"""
  filter: DiscountDeleteFilter!
}

input DeleteManyExitControlItemsInput {
  """Filter to find records to delete"""
  filter: ExitControlItemDeleteFilter!
}

input DeleteManyExitControlsInput {
  """Filter to find records to delete"""
  filter: ExitControlDeleteFilter!
}

input DeleteManyExportProductsInput {
  """Filter to find records to delete"""
  filter: ExportProductDeleteFilter!
}

input DeleteManyFailedJobsInput {
  """Filter to find records to delete"""
  filter: FailedJobDeleteFilter!
}

input DeleteManyFavoriteProductsInput {
  """Filter to find records to delete"""
  filter: FavoriteProductDeleteFilter!
}

input DeleteManyFedexAddressValidationAttributesInput {
  """Filter to find records to delete"""
  filter: FedexAddressValidationAttributeDeleteFilter!
}

input DeleteManyFetchSiteUrlsInput {
  """Filter to find records to delete"""
  filter: FetchSiteUrlDeleteFilter!
}

input DeleteManyFileNegotiationsInput {
  """Filter to find records to delete"""
  filter: FileNegotiationDeleteFilter!
}

input DeleteManyFilesInput {
  """Filter to find records to delete"""
  filter: FileDeleteFilter!
}

input DeleteManyGhazalsInput {
  """Filter to find records to delete"""
  filter: GhazalDeleteFilter!
}

input DeleteManyGoogleFormUtmsInput {
  """Filter to find records to delete"""
  filter: GoogleFormUtmDeleteFilter!
}

input DeleteManyHeardAboutUsOptionsInput {
  """Filter to find records to delete"""
  filter: HeardAboutUsOptionDeleteFilter!
}

input DeleteManyHelpDesksInput {
  """Filter to find records to delete"""
  filter: HelpDeskDeleteFilter!
}

input DeleteManyHolidaysInput {
  """Filter to find records to delete"""
  filter: HolidayDeleteFilter!
}

input DeleteManyHomePageCustomerImagesInput {
  """Filter to find records to delete"""
  filter: HomePageCustomerImageDeleteFilter!
}

input DeleteManyHypersInput {
  """Filter to find records to delete"""
  filter: HyperDeleteFilter!
}

input DeleteManyHyperstarCodesInput {
  """Filter to find records to delete"""
  filter: HyperstarCodeDeleteFilter!
}

input DeleteManyImageLayersInput {
  """Filter to find records to delete"""
  filter: ImageLayerDeleteFilter!
}

input DeleteManyImageProductsInput {
  """Filter to find records to delete"""
  filter: ImageProductDeleteFilter!
}

input DeleteManyImageSizesInput {
  """Filter to find records to delete"""
  filter: ImageSizeDeleteFilter!
}

input DeleteManyImageSubproductsInput {
  """Filter to find records to delete"""
  filter: ImageSubproductDeleteFilter!
}

input DeleteManyImagesInput {
  """Filter to find records to delete"""
  filter: ImageDeleteFilter!
}

input DeleteManyImagesSizeGuidesDetailsInput {
  """Filter to find records to delete"""
  filter: ImagesSizeGuidesDetailDeleteFilter!
}

input DeleteManyImpersonateHistoriesInput {
  """Filter to find records to delete"""
  filter: ImpersonateHistoryDeleteFilter!
}

input DeleteManyIncredibleOfferSentNotificationsInput {
  """Filter to find records to delete"""
  filter: IncredibleOfferSentNotificationDeleteFilter!
}

input DeleteManyIncredibleOffersInput {
  """Filter to find records to delete"""
  filter: IncredibleOfferDeleteFilter!
}

input DeleteManyInstagramFeedsInput {
  """Filter to find records to delete"""
  filter: InstagramFeedDeleteFilter!
}

input DeleteManyInvitationCodesInput {
  """Filter to find records to delete"""
  filter: InvitationCodeDeleteFilter!
}

input DeleteManyInvoiceAddressesInput {
  """Filter to find records to delete"""
  filter: InvoiceAddressDeleteFilter!
}

input DeleteManyInvoiceBankGatewayHistoriesInput {
  """Filter to find records to delete"""
  filter: InvoiceBankGatewayHistoryDeleteFilter!
}

input DeleteManyInvoiceHistoriesInput {
  """Filter to find records to delete"""
  filter: InvoiceHistoryDeleteFilter!
}

input DeleteManyInvoiceInvoiceStatusesInput {
  """Filter to find records to delete"""
  filter: InvoiceInvoiceStatusDeleteFilter!
}

input DeleteManyInvoiceModesInput {
  """Filter to find records to delete"""
  filter: InvoiceModeDeleteFilter!
}

input DeleteManyInvoiceNegotiationsInput {
  """Filter to find records to delete"""
  filter: InvoiceNegotiationDeleteFilter!
}

input DeleteManyInvoicePaymentHistoriesInput {
  """Filter to find records to delete"""
  filter: InvoicePaymentHistoryDeleteFilter!
}

input DeleteManyInvoicePaymentStatusesInput {
  """Filter to find records to delete"""
  filter: InvoicePaymentStatusDeleteFilter!
}

input DeleteManyInvoicePaymentTypesInput {
  """Filter to find records to delete"""
  filter: InvoicePaymentTypeDeleteFilter!
}

input DeleteManyInvoicePaymentsInput {
  """Filter to find records to delete"""
  filter: InvoicePaymentDeleteFilter!
}

input DeleteManyInvoiceProductHistoriesInput {
  """Filter to find records to delete"""
  filter: InvoiceProductHistoryDeleteFilter!
}

input DeleteManyInvoiceProductItemInvoiceProductStatusesInput {
  """Filter to find records to delete"""
  filter: InvoiceProductItemInvoiceProductStatusDeleteFilter!
}

input DeleteManyInvoiceProductItemsInput {
  """Filter to find records to delete"""
  filter: InvoiceProductItemDeleteFilter!
}

input DeleteManyInvoiceProductStatusesInput {
  """Filter to find records to delete"""
  filter: InvoiceProductStatusDeleteFilter!
}

input DeleteManyInvoiceProductsInput {
  """Filter to find records to delete"""
  filter: InvoiceProductDeleteFilter!
}

input DeleteManyInvoiceRatesResultsInput {
  """Filter to find records to delete"""
  filter: InvoiceRatesResultDeleteFilter!
}

input DeleteManyInvoiceReversalItemsInput {
  """Filter to find records to delete"""
  filter: InvoiceReversalItemDeleteFilter!
}

input DeleteManyInvoiceReversalsInput {
  """Filter to find records to delete"""
  filter: InvoiceReversalDeleteFilter!
}

input DeleteManyInvoiceShippingRatesInput {
  """Filter to find records to delete"""
  filter: InvoiceShippingRateDeleteFilter!
}

input DeleteManyInvoiceStatusesInput {
  """Filter to find records to delete"""
  filter: InvoiceStatusDeleteFilter!
}

input DeleteManyInvoiceTypesInput {
  """Filter to find records to delete"""
  filter: InvoiceTypeDeleteFilter!
}

input DeleteManyInvoicesInput {
  """Filter to find records to delete"""
  filter: InvoiceDeleteFilter!
}

input DeleteManyLabelProductsInput {
  """Filter to find records to delete"""
  filter: LabelProductDeleteFilter!
}

input DeleteManyLabelsInput {
  """Filter to find records to delete"""
  filter: LabelDeleteFilter!
}

input DeleteManyMellatPaymentErrorsInput {
  """Filter to find records to delete"""
  filter: MellatPaymentErrorDeleteFilter!
}

input DeleteManyMigrationsInput {
  """Filter to find records to delete"""
  filter: MigrationDeleteFilter!
}

input DeleteManyModelHasPermissionsInput {
  """Filter to find records to delete"""
  filter: ModelHasPermissionDeleteFilter!
}

input DeleteManyModelHasRolesInput {
  """Filter to find records to delete"""
  filter: ModelHasRoleDeleteFilter!
}

input DeleteManyModelVisitsInput {
  """Filter to find records to delete"""
  filter: ModelVisitDeleteFilter!
}

input DeleteManyModemaAcceleratorImagesInput {
  """Filter to find records to delete"""
  filter: ModemaAcceleratorImageDeleteFilter!
}

input DeleteManyModemaAcceleratorVideosInput {
  """Filter to find records to delete"""
  filter: ModemaAcceleratorVideoDeleteFilter!
}

input DeleteManyModemaAcceleratorsInput {
  """Filter to find records to delete"""
  filter: ModemaAcceleratorDeleteFilter!
}

input DeleteManyNeedsPhotographySubproductsInput {
  """Filter to find records to delete"""
  filter: NeedsPhotographySubproductDeleteFilter!
}

input DeleteManyNegotiationHistoriesInput {
  """Filter to find records to delete"""
  filter: NegotiationHistoryDeleteFilter!
}

input DeleteManyNegotiationStatusesInput {
  """Filter to find records to delete"""
  filter: NegotiationStatusDeleteFilter!
}

input DeleteManyNegotiationTypesInput {
  """Filter to find records to delete"""
  filter: NegotiationTypeDeleteFilter!
}

input DeleteManyNegotiationsInput {
  """Filter to find records to delete"""
  filter: NegotiationDeleteFilter!
}

input DeleteManyNewBordersInput {
  """Filter to find records to delete"""
  filter: NewBorderDeleteFilter!
}

input DeleteManyOauthAccessTokensInput {
  """Filter to find records to delete"""
  filter: OauthAccessTokenDeleteFilter!
}

input DeleteManyOauthAuthCodesInput {
  """Filter to find records to delete"""
  filter: OauthAuthCodeDeleteFilter!
}

input DeleteManyOauthClientsInput {
  """Filter to find records to delete"""
  filter: OauthClientDeleteFilter!
}

input DeleteManyOauthPersonalAccessClientsInput {
  """Filter to find records to delete"""
  filter: OauthPersonalAccessClientDeleteFilter!
}

input DeleteManyOauthRefreshTokensInput {
  """Filter to find records to delete"""
  filter: OauthRefreshTokenDeleteFilter!
}

input DeleteManyOutOfStockButListedProductsInput {
  """Filter to find records to delete"""
  filter: OutOfStockButListedProductDeleteFilter!
}

input DeleteManyPasswordResetsInput {
  """Filter to find records to delete"""
  filter: PasswordResetDeleteFilter!
}

input DeleteManyPatternCategoriesInput {
  """Filter to find records to delete"""
  filter: PatternCategoryDeleteFilter!
}

input DeleteManyPatternLayersInput {
  """Filter to find records to delete"""
  filter: PatternLayerDeleteFilter!
}

input DeleteManyPatternsInput {
  """Filter to find records to delete"""
  filter: PatternDeleteFilter!
}

input DeleteManyPaymentMethodFieldsInput {
  """Filter to find records to delete"""
  filter: PaymentMethodFieldDeleteFilter!
}

input DeleteManyPaymentMethodsInput {
  """Filter to find records to delete"""
  filter: PaymentMethodDeleteFilter!
}

input DeleteManyPaymentRequestStatusesInput {
  """Filter to find records to delete"""
  filter: PaymentRequestStatusDeleteFilter!
}

input DeleteManyPaymentRequestsInput {
  """Filter to find records to delete"""
  filter: PaymentRequestDeleteFilter!
}

input DeleteManyPermissionGroupsInput {
  """Filter to find records to delete"""
  filter: PermissionGroupDeleteFilter!
}

input DeleteManyPermissionsInput {
  """Filter to find records to delete"""
  filter: PermissionDeleteFilter!
}

input DeleteManyPreorderRegistersInput {
  """Filter to find records to delete"""
  filter: PreorderRegisterDeleteFilter!
}

input DeleteManyPreorderStatusesInput {
  """Filter to find records to delete"""
  filter: PreorderStatusDeleteFilter!
}

input DeleteManyPreordersInput {
  """Filter to find records to delete"""
  filter: PreorderDeleteFilter!
}

input DeleteManyPriceGroupSizesInput {
  """Filter to find records to delete"""
  filter: PriceGroupSizeDeleteFilter!
}

input DeleteManyPriceGroupsInput {
  """Filter to find records to delete"""
  filter: PriceGroupDeleteFilter!
}

input DeleteManyPrintProfilesInput {
  """Filter to find records to delete"""
  filter: PrintProfileDeleteFilter!
}

input DeleteManyProductCategoryDetailsInput {
  """Filter to find records to delete"""
  filter: ProductCategoryDetailDeleteFilter!
}

input DeleteManyProductCategoryRatesInput {
  """Filter to find records to delete"""
  filter: ProductCategoryRateDeleteFilter!
}

input DeleteManyProductColorImagesInput {
  """Filter to find records to delete"""
  filter: ProductColorImageDeleteFilter!
}

input DeleteManyProductColorSalesInput {
  """Filter to find records to delete"""
  filter: ProductColorSaleDeleteFilter!
}

input DeleteManyProductCommentLikesInput {
  """Filter to find records to delete"""
  filter: ProductCommentLikeDeleteFilter!
}

input DeleteManyProductCommentsInput {
  """Filter to find records to delete"""
  filter: ProductCommentDeleteFilter!
}

input DeleteManyProductLikesInput {
  """Filter to find records to delete"""
  filter: ProductLikeDeleteFilter!
}

input DeleteManyProductsInput {
  """Filter to find records to delete"""
  filter: ProductDeleteFilter!
}

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

input DeleteManyUsersInput {
  """Filter to find records to delete"""
  filter: UserDeleteFilter!
}

input DeleteOneActivityInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneAddressInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneAutomationEventInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneAutomationRfmScoreInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneBasicCarpetBorderInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneBasicCarpetColorInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneBasicCarpetDesignInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneBasicCarpetDesignerInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneBasicCarpetMaterialInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneBasicCarpetSizeDetailInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneBasicCarpetSizeInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneBasicCarpetTypeInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneBorderInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCampaignFreeOfferInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCampaignFreeOfferSizeInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCampaignGoldCoinSubInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCampaignInstagramFollowInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCampaignPetFormInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCampaignRoomvoImageInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCampaignRoomvoVoteInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCampaignSubscriptionInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCampaignUefaEuroSubscriberHistoryInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCampaignUefaEuroSubscriberInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCampaignVotingImageInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCarpetFeatureInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCarpetFeatureUserInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCarpetMaterialInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCarpetShapeInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCarpetSizeInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCarpetUsagePlaceInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCarpetUsagePlaceInvoiceProductInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCarpetUsagePlaceUserInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneChaparSettlementStatusInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneChaparTrackingHistoryInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCitiesSepidarInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCity2Input {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCityInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneColorCategoryDetailInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneColorCategoryInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneColorCategorySubproductInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneColorInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneConfigInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneContactFormHistoryInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneContactFormInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneContactFormStatusInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCountryInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCouponInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCouponSubjectInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCrmPresentationInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCustomerImageProductInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCustomerRequestFileInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCustomerRequestInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCustomerVideoProductInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneDamageReasonInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneDepartmentInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneDesignInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneDesignersProductPriceRangeInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneDiscountInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneDiscountNotificationInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneDiscountSubjectInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneExitControlInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneExitControlItemInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneExportProductInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneFailedJobInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneFavoriteProductInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneFedexAddressValidationAttributeInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneFetchSiteUrlInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneFileInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneFileNegotiationInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneGhazalInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneGoogleFormUtmInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneHeardAboutUsOptionInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneHelpDeskInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneHolidayInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneHomePageCustomerImageInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneHyperInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneHyperstarCodeInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneImageInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneImageLayerInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneImageProductInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneImageSizeInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneImageSubproductInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneImagesSizeGuidesDetailInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneImpersonateHistoryInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneIncredibleOfferInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneIncredibleOfferSentNotificationInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneInstagramFeedInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneInvitationCodeInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneInvoiceAddressInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneInvoiceBankGatewayHistoryInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneInvoiceHistoryInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneInvoiceInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneInvoiceInvoiceStatusInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneInvoiceModeInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneInvoiceNegotiationInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneInvoicePaymentHistoryInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneInvoicePaymentInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneInvoicePaymentStatusInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneInvoicePaymentTypeInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneInvoiceProductHistoryInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneInvoiceProductInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneInvoiceProductItemInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneInvoiceProductItemInvoiceProductStatusInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneInvoiceProductStatusInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneInvoiceRatesResultInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneInvoiceReversalInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneInvoiceReversalItemInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneInvoiceShippingRateInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneInvoiceStatusInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneInvoiceTypeInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneLabelInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneLabelProductInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneMellatPaymentErrorInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneMigrationInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneModelHasPermissionInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneModelHasRoleInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneModelVisitInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneModemaAcceleratorImageInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneModemaAcceleratorInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneModemaAcceleratorVideoInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneNeedsPhotographySubproductInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneNegotiationHistoryInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneNegotiationInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneNegotiationStatusInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneNegotiationTypeInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneNewBorderInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneOauthAccessTokenInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneOauthAuthCodeInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneOauthClientInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneOauthPersonalAccessClientInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneOauthRefreshTokenInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneOutOfStockButListedProductInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOnePasswordResetInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOnePatternCategoryInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOnePatternInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOnePatternLayerInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOnePaymentMethodFieldInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOnePaymentMethodInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOnePaymentRequestInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOnePaymentRequestStatusInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOnePermissionGroupInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOnePermissionInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOnePreorderInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOnePreorderRegisterInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOnePreorderStatusInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOnePriceGroupInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOnePriceGroupSizeInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOnePrintProfileInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneProductCategoryDetailInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneProductCategoryRateInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneProductColorImageInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneProductColorSaleInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneProductCommentInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneProductCommentLikeInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneProductInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneProductLikeInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneUserInput {
  """The id of the record to delete."""
  id: ID!
}

type Department {
  createdAt: DateTime
  id: ID!
  name: String!
  nameEn: String
  updatedAt: DateTime
}

type DepartmentConnection {
  """Array of edges."""
  edges: [DepartmentEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input DepartmentDeleteFilter {
  and: [DepartmentDeleteFilter!]
  id: IDFilterComparison
  or: [DepartmentDeleteFilter!]
}

type DepartmentDeleteResponse {
  createdAt: DateTime
  id: ID
  name: String
  nameEn: String
  updatedAt: DateTime
}

type DepartmentEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Department"""
  node: Department!
}

input DepartmentFilter {
  and: [DepartmentFilter!]
  id: IDFilterComparison
  or: [DepartmentFilter!]
}

input DepartmentSort {
  direction: SortDirection!
  field: DepartmentSortFields!
  nulls: SortNulls
}

enum DepartmentSortFields {
  id
}

input DepartmentUpdateFilter {
  and: [DepartmentUpdateFilter!]
  id: IDFilterComparison
  or: [DepartmentUpdateFilter!]
}

type Design {
  backgroundColor: String
  borderColor: String
  carpetMaterialId: Float
  carpetShapeId: Float
  createdAt: DateTime
  deletedAt: DateTime
  filename: String
  fringeColor: String
  id: ID!
  length: Float
  name: String
  path: String
  updatedAt: DateTime
  userId: Float
  width: Float
}

type DesignConnection {
  """Array of edges."""
  edges: [DesignEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input DesignDeleteFilter {
  and: [DesignDeleteFilter!]
  id: IDFilterComparison
  or: [DesignDeleteFilter!]
}

type DesignDeleteResponse {
  backgroundColor: String
  borderColor: String
  carpetMaterialId: Float
  carpetShapeId: Float
  createdAt: DateTime
  deletedAt: DateTime
  filename: String
  fringeColor: String
  id: ID
  length: Float
  name: String
  path: String
  updatedAt: DateTime
  userId: Float
  width: Float
}

type DesignEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Design"""
  node: Design!
}

input DesignFilter {
  and: [DesignFilter!]
  id: IDFilterComparison
  or: [DesignFilter!]
}

input DesignSort {
  direction: SortDirection!
  field: DesignSortFields!
  nulls: SortNulls
}

enum DesignSortFields {
  id
}

input DesignUpdateFilter {
  and: [DesignUpdateFilter!]
  id: IDFilterComparison
  or: [DesignUpdateFilter!]
}

type DesignersProductPriceRange {
  basicCarpetSizeId: Float!
  createdAt: DateTime
  id: ID!
  maxPrice: Float!
  minPrice: Float!
  updatedAt: DateTime
}

type DesignersProductPriceRangeConnection {
  """Array of edges."""
  edges: [DesignersProductPriceRangeEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input DesignersProductPriceRangeDeleteFilter {
  and: [DesignersProductPriceRangeDeleteFilter!]
  id: IDFilterComparison
  or: [DesignersProductPriceRangeDeleteFilter!]
}

type DesignersProductPriceRangeDeleteResponse {
  basicCarpetSizeId: Float
  createdAt: DateTime
  id: ID
  maxPrice: Float
  minPrice: Float
  updatedAt: DateTime
}

type DesignersProductPriceRangeEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the DesignersProductPriceRange"""
  node: DesignersProductPriceRange!
}

input DesignersProductPriceRangeFilter {
  and: [DesignersProductPriceRangeFilter!]
  id: IDFilterComparison
  or: [DesignersProductPriceRangeFilter!]
}

input DesignersProductPriceRangeSort {
  direction: SortDirection!
  field: DesignersProductPriceRangeSortFields!
  nulls: SortNulls
}

enum DesignersProductPriceRangeSortFields {
  id
}

input DesignersProductPriceRangeUpdateFilter {
  and: [DesignersProductPriceRangeUpdateFilter!]
  id: IDFilterComparison
  or: [DesignersProductPriceRangeUpdateFilter!]
}

type Discount {
  createdAt: DateTime
  createdBy: Float
  discount: String!
  endDate: DateTime!
  hasStockCountOnly: Boolean!
  id: ID!
  isActive: Float
  maxDiscountPrice: String
  minProductPrice: String
  name: String
  redisForShowoffIsDeleted: Boolean!
  redisIsDeleted: Boolean!
  showoffEndDate: DateTime
  showoffStartDate: DateTime
  sortOrder: Float
  startDate: DateTime!
  type: Float!
  updatedAt: DateTime
  updatedBy: Float
  withPad: Boolean!
}

type DiscountConnection {
  """Array of edges."""
  edges: [DiscountEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input DiscountDeleteFilter {
  and: [DiscountDeleteFilter!]
  id: IDFilterComparison
  or: [DiscountDeleteFilter!]
}

type DiscountDeleteResponse {
  createdAt: DateTime
  createdBy: Float
  discount: String
  endDate: DateTime
  hasStockCountOnly: Boolean
  id: ID
  isActive: Float
  maxDiscountPrice: String
  minProductPrice: String
  name: String
  redisForShowoffIsDeleted: Boolean
  redisIsDeleted: Boolean
  showoffEndDate: DateTime
  showoffStartDate: DateTime
  sortOrder: Float
  startDate: DateTime
  type: Float
  updatedAt: DateTime
  updatedBy: Float
  withPad: Boolean
}

type DiscountEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Discount"""
  node: Discount!
}

input DiscountFilter {
  and: [DiscountFilter!]
  id: IDFilterComparison
  or: [DiscountFilter!]
}

type DiscountNotification {
  createdAt: DateTime
  deletedAt: DateTime
  id: ID!
  productId: Float
  updatedAt: DateTime
  userId: Float
}

type DiscountNotificationConnection {
  """Array of edges."""
  edges: [DiscountNotificationEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input DiscountNotificationDeleteFilter {
  and: [DiscountNotificationDeleteFilter!]
  id: IDFilterComparison
  or: [DiscountNotificationDeleteFilter!]
}

type DiscountNotificationDeleteResponse {
  createdAt: DateTime
  deletedAt: DateTime
  id: ID
  productId: Float
  updatedAt: DateTime
  userId: Float
}

type DiscountNotificationEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the DiscountNotification"""
  node: DiscountNotification!
}

input DiscountNotificationFilter {
  and: [DiscountNotificationFilter!]
  id: IDFilterComparison
  or: [DiscountNotificationFilter!]
}

input DiscountNotificationSort {
  direction: SortDirection!
  field: DiscountNotificationSortFields!
  nulls: SortNulls
}

enum DiscountNotificationSortFields {
  id
}

input DiscountNotificationUpdateFilter {
  and: [DiscountNotificationUpdateFilter!]
  id: IDFilterComparison
  or: [DiscountNotificationUpdateFilter!]
}

input DiscountSort {
  direction: SortDirection!
  field: DiscountSortFields!
  nulls: SortNulls
}

enum DiscountSortFields {
  id
}

type DiscountSubject {
  basicCarpetSizeId: Float
  createdAt: DateTime
  discountId: Float!
  id: ID!
  priceGroupId: Float
  productCategoryId: Float
  productId: Float
  subproductId: Float
  updatedAt: DateTime
}

type DiscountSubjectConnection {
  """Array of edges."""
  edges: [DiscountSubjectEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input DiscountSubjectDeleteFilter {
  and: [DiscountSubjectDeleteFilter!]
  id: IDFilterComparison
  or: [DiscountSubjectDeleteFilter!]
}

type DiscountSubjectDeleteResponse {
  basicCarpetSizeId: Float
  createdAt: DateTime
  discountId: Float
  id: ID
  priceGroupId: Float
  productCategoryId: Float
  productId: Float
  subproductId: Float
  updatedAt: DateTime
}

type DiscountSubjectEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the DiscountSubject"""
  node: DiscountSubject!
}

input DiscountSubjectFilter {
  and: [DiscountSubjectFilter!]
  id: IDFilterComparison
  or: [DiscountSubjectFilter!]
}

input DiscountSubjectSort {
  direction: SortDirection!
  field: DiscountSubjectSortFields!
  nulls: SortNulls
}

enum DiscountSubjectSortFields {
  id
}

input DiscountSubjectUpdateFilter {
  and: [DiscountSubjectUpdateFilter!]
  id: IDFilterComparison
  or: [DiscountSubjectUpdateFilter!]
}

input DiscountUpdateFilter {
  and: [DiscountUpdateFilter!]
  id: IDFilterComparison
  or: [DiscountUpdateFilter!]
}

type ExitControl {
  createdAt: DateTime
  driverName: String!
  driverPhone: String!
  exitDate: String!
  id: ID!
  isClosed: Boolean!
  plateNo: String!
  updatedAt: DateTime
  userId: Float!
}

type ExitControlConnection {
  """Array of edges."""
  edges: [ExitControlEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ExitControlDeleteFilter {
  and: [ExitControlDeleteFilter!]
  id: IDFilterComparison
  or: [ExitControlDeleteFilter!]
}

type ExitControlDeleteResponse {
  createdAt: DateTime
  driverName: String
  driverPhone: String
  exitDate: String
  id: ID
  isClosed: Boolean
  plateNo: String
  updatedAt: DateTime
  userId: Float
}

type ExitControlEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ExitControl"""
  node: ExitControl!
}

input ExitControlFilter {
  and: [ExitControlFilter!]
  id: IDFilterComparison
  or: [ExitControlFilter!]
}

type ExitControlItem {
  boxNo: Float!
  carpetPadScanned: Boolean!
  carpetScanned: Boolean!
  createdAt: DateTime
  exitControlId: Float!
  id: ID!
  invoiceProductItemId: Float!
  updatedAt: DateTime
}

type ExitControlItemConnection {
  """Array of edges."""
  edges: [ExitControlItemEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ExitControlItemDeleteFilter {
  and: [ExitControlItemDeleteFilter!]
  id: IDFilterComparison
  or: [ExitControlItemDeleteFilter!]
}

type ExitControlItemDeleteResponse {
  boxNo: Float
  carpetPadScanned: Boolean
  carpetScanned: Boolean
  createdAt: DateTime
  exitControlId: Float
  id: ID
  invoiceProductItemId: Float
  updatedAt: DateTime
}

type ExitControlItemEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ExitControlItem"""
  node: ExitControlItem!
}

input ExitControlItemFilter {
  and: [ExitControlItemFilter!]
  id: IDFilterComparison
  or: [ExitControlItemFilter!]
}

input ExitControlItemSort {
  direction: SortDirection!
  field: ExitControlItemSortFields!
  nulls: SortNulls
}

enum ExitControlItemSortFields {
  id
}

input ExitControlItemUpdateFilter {
  and: [ExitControlItemUpdateFilter!]
  id: IDFilterComparison
  or: [ExitControlItemUpdateFilter!]
}

input ExitControlSort {
  direction: SortDirection!
  field: ExitControlSortFields!
  nulls: SortNulls
}

enum ExitControlSortFields {
  id
}

input ExitControlUpdateFilter {
  and: [ExitControlUpdateFilter!]
  id: IDFilterComparison
  or: [ExitControlUpdateFilter!]
}

type ExportProduct {
  code: String
  id: ID!
  price: Float
}

type ExportProductConnection {
  """Array of edges."""
  edges: [ExportProductEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ExportProductDeleteFilter {
  and: [ExportProductDeleteFilter!]
  id: IDFilterComparison
  or: [ExportProductDeleteFilter!]
}

type ExportProductDeleteResponse {
  code: String
  id: ID
  price: Float
}

type ExportProductEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ExportProduct"""
  node: ExportProduct!
}

input ExportProductFilter {
  and: [ExportProductFilter!]
  id: IDFilterComparison
  or: [ExportProductFilter!]
}

input ExportProductSort {
  direction: SortDirection!
  field: ExportProductSortFields!
  nulls: SortNulls
}

enum ExportProductSortFields {
  id
}

input ExportProductUpdateFilter {
  and: [ExportProductUpdateFilter!]
  id: IDFilterComparison
  or: [ExportProductUpdateFilter!]
}

type FailedJob {
  connection: String!
  exception: String!
  failedAt: DateTime!
  id: ID!
  payload: String!
  queue: String!
}

type FailedJobConnection {
  """Array of edges."""
  edges: [FailedJobEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input FailedJobDeleteFilter {
  and: [FailedJobDeleteFilter!]
  id: IDFilterComparison
  or: [FailedJobDeleteFilter!]
}

type FailedJobDeleteResponse {
  connection: String
  exception: String
  failedAt: DateTime
  id: ID
  payload: String
  queue: String
}

type FailedJobEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the FailedJob"""
  node: FailedJob!
}

input FailedJobFilter {
  and: [FailedJobFilter!]
  id: IDFilterComparison
  or: [FailedJobFilter!]
}

input FailedJobSort {
  direction: SortDirection!
  field: FailedJobSortFields!
  nulls: SortNulls
}

enum FailedJobSortFields {
  id
}

input FailedJobUpdateFilter {
  and: [FailedJobUpdateFilter!]
  id: IDFilterComparison
  or: [FailedJobUpdateFilter!]
}

type FavoriteProduct {
  createdAt: DateTime
  id: ID!
  productId: Float!
  subproductId: Float
  updatedAt: DateTime
  userId: Float!
}

type FavoriteProductConnection {
  """Array of edges."""
  edges: [FavoriteProductEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input FavoriteProductDeleteFilter {
  and: [FavoriteProductDeleteFilter!]
  id: IDFilterComparison
  or: [FavoriteProductDeleteFilter!]
}

type FavoriteProductDeleteResponse {
  createdAt: DateTime
  id: ID
  productId: Float
  subproductId: Float
  updatedAt: DateTime
  userId: Float
}

type FavoriteProductEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the FavoriteProduct"""
  node: FavoriteProduct!
}

input FavoriteProductFilter {
  and: [FavoriteProductFilter!]
  id: IDFilterComparison
  or: [FavoriteProductFilter!]
}

input FavoriteProductSort {
  direction: SortDirection!
  field: FavoriteProductSortFields!
  nulls: SortNulls
}

enum FavoriteProductSortFields {
  id
}

input FavoriteProductUpdateFilter {
  and: [FavoriteProductUpdateFilter!]
  id: IDFilterComparison
  or: [FavoriteProductUpdateFilter!]
}

type FedexAddressValidationAttribute {
  code: String!
  correctValue: Boolean!
  createdAt: DateTime!
  description: String!
  id: ID!
  updatedAt: DateTime!
}

type FedexAddressValidationAttributeConnection {
  """Array of edges."""
  edges: [FedexAddressValidationAttributeEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input FedexAddressValidationAttributeDeleteFilter {
  and: [FedexAddressValidationAttributeDeleteFilter!]
  id: IDFilterComparison
  or: [FedexAddressValidationAttributeDeleteFilter!]
}

type FedexAddressValidationAttributeDeleteResponse {
  code: String
  correctValue: Boolean
  createdAt: DateTime
  description: String
  id: ID
  updatedAt: DateTime
}

type FedexAddressValidationAttributeEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the FedexAddressValidationAttribute"""
  node: FedexAddressValidationAttribute!
}

input FedexAddressValidationAttributeFilter {
  and: [FedexAddressValidationAttributeFilter!]
  id: IDFilterComparison
  or: [FedexAddressValidationAttributeFilter!]
}

input FedexAddressValidationAttributeSort {
  direction: SortDirection!
  field: FedexAddressValidationAttributeSortFields!
  nulls: SortNulls
}

enum FedexAddressValidationAttributeSortFields {
  id
}

input FedexAddressValidationAttributeUpdateFilter {
  and: [FedexAddressValidationAttributeUpdateFilter!]
  id: IDFilterComparison
  or: [FedexAddressValidationAttributeUpdateFilter!]
}

type FetchSiteUrl {
  createdAt: DateTime
  date: DateTime!
  id: ID!
  isFetch: Boolean!
  updatedAt: DateTime
  url: String!
}

type FetchSiteUrlConnection {
  """Array of edges."""
  edges: [FetchSiteUrlEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input FetchSiteUrlDeleteFilter {
  and: [FetchSiteUrlDeleteFilter!]
  id: IDFilterComparison
  or: [FetchSiteUrlDeleteFilter!]
}

type FetchSiteUrlDeleteResponse {
  createdAt: DateTime
  date: DateTime
  id: ID
  isFetch: Boolean
  updatedAt: DateTime
  url: String
}

type FetchSiteUrlEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the FetchSiteUrl"""
  node: FetchSiteUrl!
}

input FetchSiteUrlFilter {
  and: [FetchSiteUrlFilter!]
  id: IDFilterComparison
  or: [FetchSiteUrlFilter!]
}

input FetchSiteUrlSort {
  direction: SortDirection!
  field: FetchSiteUrlSortFields!
  nulls: SortNulls
}

enum FetchSiteUrlSortFields {
  id
}

input FetchSiteUrlUpdateFilter {
  and: [FetchSiteUrlUpdateFilter!]
  id: IDFilterComparison
  or: [FetchSiteUrlUpdateFilter!]
}

type File {
  createdAt: DateTime
  filename: String!
  id: ID!
  mime: String!
  originalFilename: String!
  path: String!
  updatedAt: DateTime
  uploadSource: String!
}

type FileConnection {
  """Array of edges."""
  edges: [FileEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input FileDeleteFilter {
  and: [FileDeleteFilter!]
  id: IDFilterComparison
  or: [FileDeleteFilter!]
}

type FileDeleteResponse {
  createdAt: DateTime
  filename: String
  id: ID
  mime: String
  originalFilename: String
  path: String
  updatedAt: DateTime
  uploadSource: String
}

type FileEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the File"""
  node: File!
}

input FileFilter {
  and: [FileFilter!]
  id: IDFilterComparison
  or: [FileFilter!]
}

type FileNegotiation {
  createdAt: DateTime
  fileId: Float!
  id: ID!
  negotiationId: Float!
  updatedAt: DateTime
}

type FileNegotiationConnection {
  """Array of edges."""
  edges: [FileNegotiationEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input FileNegotiationDeleteFilter {
  and: [FileNegotiationDeleteFilter!]
  id: IDFilterComparison
  or: [FileNegotiationDeleteFilter!]
}

type FileNegotiationDeleteResponse {
  createdAt: DateTime
  fileId: Float
  id: ID
  negotiationId: Float
  updatedAt: DateTime
}

type FileNegotiationEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the FileNegotiation"""
  node: FileNegotiation!
}

input FileNegotiationFilter {
  and: [FileNegotiationFilter!]
  id: IDFilterComparison
  or: [FileNegotiationFilter!]
}

input FileNegotiationSort {
  direction: SortDirection!
  field: FileNegotiationSortFields!
  nulls: SortNulls
}

enum FileNegotiationSortFields {
  id
}

input FileNegotiationUpdateFilter {
  and: [FileNegotiationUpdateFilter!]
  id: IDFilterComparison
  or: [FileNegotiationUpdateFilter!]
}

input FileSort {
  direction: SortDirection!
  field: FileSortFields!
  nulls: SortNulls
}

enum FileSortFields {
  id
}

input FileUpdateFilter {
  and: [FileUpdateFilter!]
  id: IDFilterComparison
  or: [FileUpdateFilter!]
}

type Ghazal {
  createdAt: DateTime
  explanation: String
  id: ID!
  poem: String
  updatedAt: DateTime
}

type GhazalConnection {
  """Array of edges."""
  edges: [GhazalEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input GhazalDeleteFilter {
  and: [GhazalDeleteFilter!]
  id: IDFilterComparison
  or: [GhazalDeleteFilter!]
}

type GhazalDeleteResponse {
  createdAt: DateTime
  explanation: String
  id: ID
  poem: String
  updatedAt: DateTime
}

type GhazalEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Ghazal"""
  node: Ghazal!
}

input GhazalFilter {
  and: [GhazalFilter!]
  id: IDFilterComparison
  or: [GhazalFilter!]
}

input GhazalSort {
  direction: SortDirection!
  field: GhazalSortFields!
  nulls: SortNulls
}

enum GhazalSortFields {
  id
}

input GhazalUpdateFilter {
  and: [GhazalUpdateFilter!]
  id: IDFilterComparison
  or: [GhazalUpdateFilter!]
}

type GoogleFormUtm {
  createdAt: DateTime
  formId: String!
  id: ID!
  status: Boolean!
  updatedAt: DateTime
  url: String!
  userId: Float!
  utm: String!
}

type GoogleFormUtmConnection {
  """Array of edges."""
  edges: [GoogleFormUtmEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input GoogleFormUtmDeleteFilter {
  and: [GoogleFormUtmDeleteFilter!]
  id: IDFilterComparison
  or: [GoogleFormUtmDeleteFilter!]
}

type GoogleFormUtmDeleteResponse {
  createdAt: DateTime
  formId: String
  id: ID
  status: Boolean
  updatedAt: DateTime
  url: String
  userId: Float
  utm: String
}

type GoogleFormUtmEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the GoogleFormUtm"""
  node: GoogleFormUtm!
}

input GoogleFormUtmFilter {
  and: [GoogleFormUtmFilter!]
  id: IDFilterComparison
  or: [GoogleFormUtmFilter!]
}

input GoogleFormUtmSort {
  direction: SortDirection!
  field: GoogleFormUtmSortFields!
  nulls: SortNulls
}

enum GoogleFormUtmSortFields {
  id
}

input GoogleFormUtmUpdateFilter {
  and: [GoogleFormUtmUpdateFilter!]
  id: IDFilterComparison
  or: [GoogleFormUtmUpdateFilter!]
}

type HeardAboutUsOption {
  createdAt: DateTime
  id: ID!
  isActive: Boolean!
  name: String!
  sortOrder: Float!
  updatedAt: DateTime
}

type HeardAboutUsOptionConnection {
  """Array of edges."""
  edges: [HeardAboutUsOptionEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input HeardAboutUsOptionDeleteFilter {
  and: [HeardAboutUsOptionDeleteFilter!]
  id: IDFilterComparison
  or: [HeardAboutUsOptionDeleteFilter!]
}

type HeardAboutUsOptionDeleteResponse {
  createdAt: DateTime
  id: ID
  isActive: Boolean
  name: String
  sortOrder: Float
  updatedAt: DateTime
}

type HeardAboutUsOptionEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the HeardAboutUsOption"""
  node: HeardAboutUsOption!
}

input HeardAboutUsOptionFilter {
  and: [HeardAboutUsOptionFilter!]
  id: IDFilterComparison
  or: [HeardAboutUsOptionFilter!]
}

input HeardAboutUsOptionSort {
  direction: SortDirection!
  field: HeardAboutUsOptionSortFields!
  nulls: SortNulls
}

enum HeardAboutUsOptionSortFields {
  id
}

input HeardAboutUsOptionUpdateFilter {
  and: [HeardAboutUsOptionUpdateFilter!]
  id: IDFilterComparison
  or: [HeardAboutUsOptionUpdateFilter!]
}

type HelpDesk {
  createdAt: DateTime
  id: ID!
  imageId: Float
  isActive: Float
  isOnline: Float
  phone: String
  title: String
  updatedAt: DateTime
  userId: Float!
}

type HelpDeskConnection {
  """Array of edges."""
  edges: [HelpDeskEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input HelpDeskDeleteFilter {
  and: [HelpDeskDeleteFilter!]
  id: IDFilterComparison
  or: [HelpDeskDeleteFilter!]
}

type HelpDeskDeleteResponse {
  createdAt: DateTime
  id: ID
  imageId: Float
  isActive: Float
  isOnline: Float
  phone: String
  title: String
  updatedAt: DateTime
  userId: Float
}

type HelpDeskEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the HelpDesk"""
  node: HelpDesk!
}

input HelpDeskFilter {
  and: [HelpDeskFilter!]
  id: IDFilterComparison
  or: [HelpDeskFilter!]
}

input HelpDeskSort {
  direction: SortDirection!
  field: HelpDeskSortFields!
  nulls: SortNulls
}

enum HelpDeskSortFields {
  id
}

input HelpDeskUpdateFilter {
  and: [HelpDeskUpdateFilter!]
  id: IDFilterComparison
  or: [HelpDeskUpdateFilter!]
}

type Holiday {
  createdAt: DateTime
  deletedAt: DateTime
  holidayDate: String!
  id: ID!
  updatedAt: DateTime
  userId: Float
  weekday: Float!
}

type HolidayConnection {
  """Array of edges."""
  edges: [HolidayEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input HolidayDeleteFilter {
  and: [HolidayDeleteFilter!]
  id: IDFilterComparison
  or: [HolidayDeleteFilter!]
}

type HolidayDeleteResponse {
  createdAt: DateTime
  deletedAt: DateTime
  holidayDate: String
  id: ID
  updatedAt: DateTime
  userId: Float
  weekday: Float
}

type HolidayEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Holiday"""
  node: Holiday!
}

input HolidayFilter {
  and: [HolidayFilter!]
  id: IDFilterComparison
  or: [HolidayFilter!]
}

input HolidaySort {
  direction: SortDirection!
  field: HolidaySortFields!
  nulls: SortNulls
}

enum HolidaySortFields {
  id
}

input HolidayUpdateFilter {
  and: [HolidayUpdateFilter!]
  id: IDFilterComparison
  or: [HolidayUpdateFilter!]
}

type HomePageCustomerImage {
  createdAt: DateTime
  desktopImageAlt: String
  desktopImageId: Float
  id: ID!
  mobileImageAlt: String
  mobileImageId: Float
  productId: Float
  sortOrder: Float!
  updatedAt: DateTime
}

type HomePageCustomerImageConnection {
  """Array of edges."""
  edges: [HomePageCustomerImageEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input HomePageCustomerImageDeleteFilter {
  and: [HomePageCustomerImageDeleteFilter!]
  id: IDFilterComparison
  or: [HomePageCustomerImageDeleteFilter!]
}

type HomePageCustomerImageDeleteResponse {
  createdAt: DateTime
  desktopImageAlt: String
  desktopImageId: Float
  id: ID
  mobileImageAlt: String
  mobileImageId: Float
  productId: Float
  sortOrder: Float
  updatedAt: DateTime
}

type HomePageCustomerImageEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the HomePageCustomerImage"""
  node: HomePageCustomerImage!
}

input HomePageCustomerImageFilter {
  and: [HomePageCustomerImageFilter!]
  id: IDFilterComparison
  or: [HomePageCustomerImageFilter!]
}

input HomePageCustomerImageSort {
  direction: SortDirection!
  field: HomePageCustomerImageSortFields!
  nulls: SortNulls
}

enum HomePageCustomerImageSortFields {
  id
}

input HomePageCustomerImageUpdateFilter {
  and: [HomePageCustomerImageUpdateFilter!]
  id: IDFilterComparison
  or: [HomePageCustomerImageUpdateFilter!]
}

type Hyper {
  code: ID!
  depot: Float
  produce: Float
}

type HyperConnection {
  """Array of edges."""
  edges: [HyperEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input HyperDeleteFilter {
  and: [HyperDeleteFilter!]
  code: IDFilterComparison
  or: [HyperDeleteFilter!]
}

type HyperDeleteResponse {
  code: ID
  depot: Float
  produce: Float
}

type HyperEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Hyper"""
  node: Hyper!
}

input HyperFilter {
  and: [HyperFilter!]
  code: IDFilterComparison
  or: [HyperFilter!]
}

input HyperSort {
  direction: SortDirection!
  field: HyperSortFields!
  nulls: SortNulls
}

enum HyperSortFields {
  code
}

input HyperUpdateFilter {
  and: [HyperUpdateFilter!]
  code: IDFilterComparison
  or: [HyperUpdateFilter!]
}

type HyperstarCode {
  code: ID!
  subproductCode: String
}

type HyperstarCodeConnection {
  """Array of edges."""
  edges: [HyperstarCodeEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input HyperstarCodeDeleteFilter {
  and: [HyperstarCodeDeleteFilter!]
  code: IDFilterComparison
  or: [HyperstarCodeDeleteFilter!]
}

type HyperstarCodeDeleteResponse {
  code: ID
  subproductCode: String
}

type HyperstarCodeEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the HyperstarCode"""
  node: HyperstarCode!
}

input HyperstarCodeFilter {
  and: [HyperstarCodeFilter!]
  code: IDFilterComparison
  or: [HyperstarCodeFilter!]
}

input HyperstarCodeSort {
  direction: SortDirection!
  field: HyperstarCodeSortFields!
  nulls: SortNulls
}

enum HyperstarCodeSortFields {
  code
}

input HyperstarCodeUpdateFilter {
  and: [HyperstarCodeUpdateFilter!]
  code: IDFilterComparison
  or: [HyperstarCodeUpdateFilter!]
}

input IDFilterComparison {
  eq: ID
  gt: ID
  gte: ID
  iLike: ID
  in: [ID!]
  is: Boolean
  isNot: Boolean
  like: ID
  lt: ID
  lte: ID
  neq: ID
  notILike: ID
  notIn: [ID!]
  notLike: ID
}

type Image {
  altText: String
  altTextEn: String
  createdAt: DateTime
  filename: String!
  id: ID!
  imageRecreated: Boolean!
  mime: String!
  originalFilename: String!
  path: String!
  updatedAt: DateTime
  uploadSource: String!
}

type ImageConnection {
  """Array of edges."""
  edges: [ImageEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ImageDeleteFilter {
  and: [ImageDeleteFilter!]
  id: IDFilterComparison
  or: [ImageDeleteFilter!]
}

type ImageDeleteResponse {
  altText: String
  altTextEn: String
  createdAt: DateTime
  filename: String
  id: ID
  imageRecreated: Boolean
  mime: String
  originalFilename: String
  path: String
  updatedAt: DateTime
  uploadSource: String
}

type ImageEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Image"""
  node: Image!
}

input ImageFilter {
  and: [ImageFilter!]
  id: IDFilterComparison
  or: [ImageFilter!]
}

type ImageLayer {
  centerX: Float!
  centerY: Float!
  createdAt: DateTime
  deletedAt: DateTime
  designId: Float!
  filename: String!
  id: ID!
  path: String!
  rotation: Float!
  scaleX: Float!
  scaleY: Float!
  sortOrder: Float!
  updatedAt: DateTime
}

type ImageLayerConnection {
  """Array of edges."""
  edges: [ImageLayerEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ImageLayerDeleteFilter {
  and: [ImageLayerDeleteFilter!]
  id: IDFilterComparison
  or: [ImageLayerDeleteFilter!]
}

type ImageLayerDeleteResponse {
  centerX: Float
  centerY: Float
  createdAt: DateTime
  deletedAt: DateTime
  designId: Float
  filename: String
  id: ID
  path: String
  rotation: Float
  scaleX: Float
  scaleY: Float
  sortOrder: Float
  updatedAt: DateTime
}

type ImageLayerEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ImageLayer"""
  node: ImageLayer!
}

input ImageLayerFilter {
  and: [ImageLayerFilter!]
  id: IDFilterComparison
  or: [ImageLayerFilter!]
}

input ImageLayerSort {
  direction: SortDirection!
  field: ImageLayerSortFields!
  nulls: SortNulls
}

enum ImageLayerSortFields {
  id
}

input ImageLayerUpdateFilter {
  and: [ImageLayerUpdateFilter!]
  id: IDFilterComparison
  or: [ImageLayerUpdateFilter!]
}

type ImageProduct {
  createdAt: DateTime
  id: ID!
  imageId: Float!
  productId: Float!
  sortOrder: Float
  updatedAt: DateTime
}

type ImageProductConnection {
  """Array of edges."""
  edges: [ImageProductEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ImageProductDeleteFilter {
  and: [ImageProductDeleteFilter!]
  id: IDFilterComparison
  or: [ImageProductDeleteFilter!]
}

type ImageProductDeleteResponse {
  createdAt: DateTime
  id: ID
  imageId: Float
  productId: Float
  sortOrder: Float
  updatedAt: DateTime
}

type ImageProductEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ImageProduct"""
  node: ImageProduct!
}

input ImageProductFilter {
  and: [ImageProductFilter!]
  id: IDFilterComparison
  or: [ImageProductFilter!]
}

input ImageProductSort {
  direction: SortDirection!
  field: ImageProductSortFields!
  nulls: SortNulls
}

enum ImageProductSortFields {
  id
}

input ImageProductUpdateFilter {
  and: [ImageProductUpdateFilter!]
  id: IDFilterComparison
  or: [ImageProductUpdateFilter!]
}

type ImageSize {
  createdAt: DateTime
  height: Float!
  id: ID!
  name: String!
  shortName: String!
  updatedAt: DateTime
  width: Float!
}

type ImageSizeConnection {
  """Array of edges."""
  edges: [ImageSizeEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ImageSizeDeleteFilter {
  and: [ImageSizeDeleteFilter!]
  id: IDFilterComparison
  or: [ImageSizeDeleteFilter!]
}

type ImageSizeDeleteResponse {
  createdAt: DateTime
  height: Float
  id: ID
  name: String
  shortName: String
  updatedAt: DateTime
  width: Float
}

type ImageSizeEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ImageSize"""
  node: ImageSize!
}

input ImageSizeFilter {
  and: [ImageSizeFilter!]
  id: IDFilterComparison
  or: [ImageSizeFilter!]
}

input ImageSizeSort {
  direction: SortDirection!
  field: ImageSizeSortFields!
  nulls: SortNulls
}

enum ImageSizeSortFields {
  id
}

input ImageSizeUpdateFilter {
  and: [ImageSizeUpdateFilter!]
  id: IDFilterComparison
  or: [ImageSizeUpdateFilter!]
}

input ImageSort {
  direction: SortDirection!
  field: ImageSortFields!
  nulls: SortNulls
}

enum ImageSortFields {
  id
}

type ImageSubproduct {
  createdAt: DateTime
  id: ID!
  imageId: Float!
  sortOrder: Float
  subproductId: Float!
  updatedAt: DateTime
}

type ImageSubproductConnection {
  """Array of edges."""
  edges: [ImageSubproductEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ImageSubproductDeleteFilter {
  and: [ImageSubproductDeleteFilter!]
  id: IDFilterComparison
  or: [ImageSubproductDeleteFilter!]
}

type ImageSubproductDeleteResponse {
  createdAt: DateTime
  id: ID
  imageId: Float
  sortOrder: Float
  subproductId: Float
  updatedAt: DateTime
}

type ImageSubproductEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ImageSubproduct"""
  node: ImageSubproduct!
}

input ImageSubproductFilter {
  and: [ImageSubproductFilter!]
  id: IDFilterComparison
  or: [ImageSubproductFilter!]
}

input ImageSubproductSort {
  direction: SortDirection!
  field: ImageSubproductSortFields!
  nulls: SortNulls
}

enum ImageSubproductSortFields {
  id
}

input ImageSubproductUpdateFilter {
  and: [ImageSubproductUpdateFilter!]
  id: IDFilterComparison
  or: [ImageSubproductUpdateFilter!]
}

input ImageUpdateFilter {
  and: [ImageUpdateFilter!]
  id: IDFilterComparison
  or: [ImageUpdateFilter!]
}

type ImagesSizeGuidesDetail {
  createdAt: DateTime
  id: ID!
  imageId: Float
  sizeGuidesDetailsId: Float!
  sortOrder: Float
  updatedAt: DateTime
}

type ImagesSizeGuidesDetailConnection {
  """Array of edges."""
  edges: [ImagesSizeGuidesDetailEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ImagesSizeGuidesDetailDeleteFilter {
  and: [ImagesSizeGuidesDetailDeleteFilter!]
  id: IDFilterComparison
  or: [ImagesSizeGuidesDetailDeleteFilter!]
}

type ImagesSizeGuidesDetailDeleteResponse {
  createdAt: DateTime
  id: ID
  imageId: Float
  sizeGuidesDetailsId: Float
  sortOrder: Float
  updatedAt: DateTime
}

type ImagesSizeGuidesDetailEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ImagesSizeGuidesDetail"""
  node: ImagesSizeGuidesDetail!
}

input ImagesSizeGuidesDetailFilter {
  and: [ImagesSizeGuidesDetailFilter!]
  id: IDFilterComparison
  or: [ImagesSizeGuidesDetailFilter!]
}

input ImagesSizeGuidesDetailSort {
  direction: SortDirection!
  field: ImagesSizeGuidesDetailSortFields!
  nulls: SortNulls
}

enum ImagesSizeGuidesDetailSortFields {
  id
}

input ImagesSizeGuidesDetailUpdateFilter {
  and: [ImagesSizeGuidesDetailUpdateFilter!]
  id: IDFilterComparison
  or: [ImagesSizeGuidesDetailUpdateFilter!]
}

type ImpersonateHistory {
  createdAt: DateTime
  id: ID!
  impersonateUserId: Float!
  updatedAt: DateTime
  userId: Float!
}

type ImpersonateHistoryConnection {
  """Array of edges."""
  edges: [ImpersonateHistoryEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ImpersonateHistoryDeleteFilter {
  and: [ImpersonateHistoryDeleteFilter!]
  id: IDFilterComparison
  or: [ImpersonateHistoryDeleteFilter!]
}

type ImpersonateHistoryDeleteResponse {
  createdAt: DateTime
  id: ID
  impersonateUserId: Float
  updatedAt: DateTime
  userId: Float
}

type ImpersonateHistoryEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ImpersonateHistory"""
  node: ImpersonateHistory!
}

input ImpersonateHistoryFilter {
  and: [ImpersonateHistoryFilter!]
  id: IDFilterComparison
  or: [ImpersonateHistoryFilter!]
}

input ImpersonateHistorySort {
  direction: SortDirection!
  field: ImpersonateHistorySortFields!
  nulls: SortNulls
}

enum ImpersonateHistorySortFields {
  id
}

input ImpersonateHistoryUpdateFilter {
  and: [ImpersonateHistoryUpdateFilter!]
  id: IDFilterComparison
  or: [ImpersonateHistoryUpdateFilter!]
}

type IncredibleOffer {
  basicCarpetColorId: Float!
  count: Float!
  createdAt: DateTime
  discountId: Float
  discountPercent: Float!
  id: ID!
  isFake: Boolean!
  offerDate: String!
  place: Float
  productId: Float!
  soldCount: Float!
  sortOrder: Float!
  updatedAt: DateTime
}

type IncredibleOfferConnection {
  """Array of edges."""
  edges: [IncredibleOfferEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input IncredibleOfferDeleteFilter {
  and: [IncredibleOfferDeleteFilter!]
  id: IDFilterComparison
  or: [IncredibleOfferDeleteFilter!]
}

type IncredibleOfferDeleteResponse {
  basicCarpetColorId: Float
  count: Float
  createdAt: DateTime
  discountId: Float
  discountPercent: Float
  id: ID
  isFake: Boolean
  offerDate: String
  place: Float
  productId: Float
  soldCount: Float
  sortOrder: Float
  updatedAt: DateTime
}

type IncredibleOfferEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the IncredibleOffer"""
  node: IncredibleOffer!
}

input IncredibleOfferFilter {
  and: [IncredibleOfferFilter!]
  id: IDFilterComparison
  or: [IncredibleOfferFilter!]
}

type IncredibleOfferSentNotification {
  createdAt: DateTime
  id: ID!
  message: String
  updatedAt: DateTime
  userId: Float!
}

type IncredibleOfferSentNotificationConnection {
  """Array of edges."""
  edges: [IncredibleOfferSentNotificationEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input IncredibleOfferSentNotificationDeleteFilter {
  and: [IncredibleOfferSentNotificationDeleteFilter!]
  id: IDFilterComparison
  or: [IncredibleOfferSentNotificationDeleteFilter!]
}

type IncredibleOfferSentNotificationDeleteResponse {
  createdAt: DateTime
  id: ID
  message: String
  updatedAt: DateTime
  userId: Float
}

type IncredibleOfferSentNotificationEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the IncredibleOfferSentNotification"""
  node: IncredibleOfferSentNotification!
}

input IncredibleOfferSentNotificationFilter {
  and: [IncredibleOfferSentNotificationFilter!]
  id: IDFilterComparison
  or: [IncredibleOfferSentNotificationFilter!]
}

input IncredibleOfferSentNotificationSort {
  direction: SortDirection!
  field: IncredibleOfferSentNotificationSortFields!
  nulls: SortNulls
}

enum IncredibleOfferSentNotificationSortFields {
  id
}

input IncredibleOfferSentNotificationUpdateFilter {
  and: [IncredibleOfferSentNotificationUpdateFilter!]
  id: IDFilterComparison
  or: [IncredibleOfferSentNotificationUpdateFilter!]
}

input IncredibleOfferSort {
  direction: SortDirection!
  field: IncredibleOfferSortFields!
  nulls: SortNulls
}

enum IncredibleOfferSortFields {
  id
}

input IncredibleOfferUpdateFilter {
  and: [IncredibleOfferUpdateFilter!]
  id: IDFilterComparison
  or: [IncredibleOfferUpdateFilter!]
}

type InstagramFeed {
  altText: String
  caption: String
  carouselMedia: String
  comments: String
  commentsCount: Float
  commentsDisabled: Boolean
  commentsNextPage: String
  createdAt: DateTime
  createdTime: String
  data: String
  downloadedImageHighResolutionUrl: String
  downloadedImageLowResolutionUrl: String
  downloadedImageStandardResolutionUrl: String
  downloadedImageThumbnailUrl: String
  hasMoreComments: Boolean
  id: ID!
  imageHighResolutionUrl: String
  imageLowResolutionUrl: String
  imageStandardResolutionUrl: String
  imageThumbnailUrl: String
  instagramId: String!
  isAd: Boolean
  isAutoConstruct: Boolean
  isCaptionEdited: Boolean
  isFake: Boolean
  isLoadEmpty: Boolean
  isLoaded: Boolean
  isNew: Boolean
  likesCount: Float
  link: String
  locationAddressJson: String
  locationId: String
  locationName: String
  locationSlug: String
  modified: String
  owner: String
  ownerId: String
  shortCode: String
  sidecarMedias: String
  squareImages: String
  type: String
  updatedAt: DateTime
  videoDuration: String
  videoLowBandwidthUrl: String
  videoLowResolutionUrl: String
  videoStandardResolutionUrl: String
  videoViews: Float
}

type InstagramFeedConnection {
  """Array of edges."""
  edges: [InstagramFeedEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input InstagramFeedDeleteFilter {
  and: [InstagramFeedDeleteFilter!]
  id: IDFilterComparison
  or: [InstagramFeedDeleteFilter!]
}

type InstagramFeedDeleteResponse {
  altText: String
  caption: String
  carouselMedia: String
  comments: String
  commentsCount: Float
  commentsDisabled: Boolean
  commentsNextPage: String
  createdAt: DateTime
  createdTime: String
  data: String
  downloadedImageHighResolutionUrl: String
  downloadedImageLowResolutionUrl: String
  downloadedImageStandardResolutionUrl: String
  downloadedImageThumbnailUrl: String
  hasMoreComments: Boolean
  id: ID
  imageHighResolutionUrl: String
  imageLowResolutionUrl: String
  imageStandardResolutionUrl: String
  imageThumbnailUrl: String
  instagramId: String
  isAd: Boolean
  isAutoConstruct: Boolean
  isCaptionEdited: Boolean
  isFake: Boolean
  isLoadEmpty: Boolean
  isLoaded: Boolean
  isNew: Boolean
  likesCount: Float
  link: String
  locationAddressJson: String
  locationId: String
  locationName: String
  locationSlug: String
  modified: String
  owner: String
  ownerId: String
  shortCode: String
  sidecarMedias: String
  squareImages: String
  type: String
  updatedAt: DateTime
  videoDuration: String
  videoLowBandwidthUrl: String
  videoLowResolutionUrl: String
  videoStandardResolutionUrl: String
  videoViews: Float
}

type InstagramFeedEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the InstagramFeed"""
  node: InstagramFeed!
}

input InstagramFeedFilter {
  and: [InstagramFeedFilter!]
  id: IDFilterComparison
  or: [InstagramFeedFilter!]
}

input InstagramFeedSort {
  direction: SortDirection!
  field: InstagramFeedSortFields!
  nulls: SortNulls
}

enum InstagramFeedSortFields {
  id
}

input InstagramFeedUpdateFilter {
  and: [InstagramFeedUpdateFilter!]
  id: IDFilterComparison
  or: [InstagramFeedUpdateFilter!]
}

type InvitationCode {
  code: String!
  createdAt: DateTime
  email: String
  id: ID!
  isActive: Boolean!
  maxUsage: Float
  updatedAt: DateTime
}

type InvitationCodeConnection {
  """Array of edges."""
  edges: [InvitationCodeEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input InvitationCodeDeleteFilter {
  and: [InvitationCodeDeleteFilter!]
  id: IDFilterComparison
  or: [InvitationCodeDeleteFilter!]
}

type InvitationCodeDeleteResponse {
  code: String
  createdAt: DateTime
  email: String
  id: ID
  isActive: Boolean
  maxUsage: Float
  updatedAt: DateTime
}

type InvitationCodeEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the InvitationCode"""
  node: InvitationCode!
}

input InvitationCodeFilter {
  and: [InvitationCodeFilter!]
  id: IDFilterComparison
  or: [InvitationCodeFilter!]
}

input InvitationCodeSort {
  direction: SortDirection!
  field: InvitationCodeSortFields!
  nulls: SortNulls
}

enum InvitationCodeSortFields {
  id
}

input InvitationCodeUpdateFilter {
  and: [InvitationCodeUpdateFilter!]
  id: IDFilterComparison
  or: [InvitationCodeUpdateFilter!]
}

type Invoice {
  accountingDescription: String
  additions: String!
  addressId: Float!
  canReturn: Boolean!
  cashOnDelivery: Boolean!
  chaparSettlementStatusId: Float
  chaparStatus: String
  containsPadsOnly: Boolean!
  couponId: Float
  createdAt: DateTime
  crmCompanyId: String
  crmCompanyPersonId: String
  crmPreOrderId: String
  currentInvoiceStatusId: Float!
  deadlineDate: String
  deadlineDateOld: String
  deliveredDate: DateTime
  description: String
  digikalaShare: Float
  digikalaSharePercent: Float
  forDigikala: Boolean!
  freeDelivery: Boolean!
  hasPriority: Boolean!
  id: ID!
  invoiceModeId: Float
  invoiceNumber: String
  invoicePaymentStatusId: Float
  invoiceTypeId: Float
  isChaparDelivery: Boolean!
  isDepot: Boolean!
  isForAdvertisement: Boolean!
  isReversible: Boolean!
  issueDate: DateTime!
  lastName: String!
  lockState: Float
  lockStateDescription: String
  mah: Float
  moneyTransferConfirmed: Boolean
  moneyTransferConfirmedBy: Float
  moneyTransferRefCode: String
  name: String!
  needsReview: Boolean!
  orderId: String
  packageCount: Float
  paidCodShippingRate: Float!
  parentInvoiceId: Float
  partnerCode: String!
  paymentCreditable: Boolean!
  paymentErrorMessage: String
  refId: String
  replacementAdditionalPrice: String!
  replacementPaymentStatusId: Float
  replacementPriceMoneyTransferCode: String
  roz: Float
  sal: Float
  saleRefId: String
  seenAt: DateTime
  selectedShippingServiceId: Float
  sepidarCode: Float
  sepidarId: Float
  shipmentUuid: String
  shippingRate: String
  shippingRateCod: String
  subtotalPrice: String
  taxRate: Float
  totalCouponDiscount: String
  totalDiscount: String
  totalPrice: String
  totalPriceOld: Float
  totalTax: String
  totalVisitorShare: Float
  totalWalletCharged: String
  trackingCode: String
  updatedAt: DateTime
  useWallet: Boolean!
  userId: Float
  visitorCouponId: Float
  visitorCouponRate: Float
  visitorGroupId: Float
  visitorId: Float
  visitorRate: Float
  visitorShareCalculated: Boolean!
  wholesaleRemainingMoneyTransferRefCode: String
}

type InvoiceAddress {
  address: String!
  address2: String
  addressId: Float!
  cityId: Float!
  countryId: Float!
  createdAt: DateTime
  crmCompanyId: String
  crmCompanyPersonId: String
  email: String
  fullAddress: String
  fullname: String
  id: ID!
  invoiceId: Float!
  latitude: String
  longitude: String
  nationalId: String
  phone: String
  phone2: String
  stateId: Float!
  updatedAt: DateTime
  userId: Float!
  zipCode: String
}

type InvoiceAddressConnection {
  """Array of edges."""
  edges: [InvoiceAddressEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input InvoiceAddressDeleteFilter {
  and: [InvoiceAddressDeleteFilter!]
  id: IDFilterComparison
  or: [InvoiceAddressDeleteFilter!]
}

type InvoiceAddressDeleteResponse {
  address: String
  address2: String
  addressId: Float
  cityId: Float
  countryId: Float
  createdAt: DateTime
  crmCompanyId: String
  crmCompanyPersonId: String
  email: String
  fullAddress: String
  fullname: String
  id: ID
  invoiceId: Float
  latitude: String
  longitude: String
  nationalId: String
  phone: String
  phone2: String
  stateId: Float
  updatedAt: DateTime
  userId: Float
  zipCode: String
}

type InvoiceAddressEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the InvoiceAddress"""
  node: InvoiceAddress!
}

input InvoiceAddressFilter {
  and: [InvoiceAddressFilter!]
  id: IDFilterComparison
  or: [InvoiceAddressFilter!]
}

input InvoiceAddressSort {
  direction: SortDirection!
  field: InvoiceAddressSortFields!
  nulls: SortNulls
}

enum InvoiceAddressSortFields {
  id
}

input InvoiceAddressUpdateFilter {
  and: [InvoiceAddressUpdateFilter!]
  id: IDFilterComparison
  or: [InvoiceAddressUpdateFilter!]
}

type InvoiceBankGatewayHistory {
  amount: String
  createdAt: DateTime
  id: ID!
  invoiceId: Float
  orderId: String
  preorderRegisterId: Float
  refId: String
  saleRefId: String
  updatedAt: DateTime
}

type InvoiceBankGatewayHistoryConnection {
  """Array of edges."""
  edges: [InvoiceBankGatewayHistoryEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input InvoiceBankGatewayHistoryDeleteFilter {
  and: [InvoiceBankGatewayHistoryDeleteFilter!]
  id: IDFilterComparison
  or: [InvoiceBankGatewayHistoryDeleteFilter!]
}

type InvoiceBankGatewayHistoryDeleteResponse {
  amount: String
  createdAt: DateTime
  id: ID
  invoiceId: Float
  orderId: String
  preorderRegisterId: Float
  refId: String
  saleRefId: String
  updatedAt: DateTime
}

type InvoiceBankGatewayHistoryEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the InvoiceBankGatewayHistory"""
  node: InvoiceBankGatewayHistory!
}

input InvoiceBankGatewayHistoryFilter {
  and: [InvoiceBankGatewayHistoryFilter!]
  id: IDFilterComparison
  or: [InvoiceBankGatewayHistoryFilter!]
}

input InvoiceBankGatewayHistorySort {
  direction: SortDirection!
  field: InvoiceBankGatewayHistorySortFields!
  nulls: SortNulls
}

enum InvoiceBankGatewayHistorySortFields {
  id
}

input InvoiceBankGatewayHistoryUpdateFilter {
  and: [InvoiceBankGatewayHistoryUpdateFilter!]
  id: IDFilterComparison
  or: [InvoiceBankGatewayHistoryUpdateFilter!]
}

type InvoiceConnection {
  """Array of edges."""
  edges: [InvoiceEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input InvoiceDeleteFilter {
  and: [InvoiceDeleteFilter!]
  id: IDFilterComparison
  or: [InvoiceDeleteFilter!]
}

type InvoiceDeleteResponse {
  accountingDescription: String
  additions: String
  addressId: Float
  canReturn: Boolean
  cashOnDelivery: Boolean
  chaparSettlementStatusId: Float
  chaparStatus: String
  containsPadsOnly: Boolean
  couponId: Float
  createdAt: DateTime
  crmCompanyId: String
  crmCompanyPersonId: String
  crmPreOrderId: String
  currentInvoiceStatusId: Float
  deadlineDate: String
  deadlineDateOld: String
  deliveredDate: DateTime
  description: String
  digikalaShare: Float
  digikalaSharePercent: Float
  forDigikala: Boolean
  freeDelivery: Boolean
  hasPriority: Boolean
  id: ID
  invoiceModeId: Float
  invoiceNumber: String
  invoicePaymentStatusId: Float
  invoiceTypeId: Float
  isChaparDelivery: Boolean
  isDepot: Boolean
  isForAdvertisement: Boolean
  isReversible: Boolean
  issueDate: DateTime
  lastName: String
  lockState: Float
  lockStateDescription: String
  mah: Float
  moneyTransferConfirmed: Boolean
  moneyTransferConfirmedBy: Float
  moneyTransferRefCode: String
  name: String
  needsReview: Boolean
  orderId: String
  packageCount: Float
  paidCodShippingRate: Float
  parentInvoiceId: Float
  partnerCode: String
  paymentCreditable: Boolean
  paymentErrorMessage: String
  refId: String
  replacementAdditionalPrice: String
  replacementPaymentStatusId: Float
  replacementPriceMoneyTransferCode: String
  roz: Float
  sal: Float
  saleRefId: String
  seenAt: DateTime
  selectedShippingServiceId: Float
  sepidarCode: Float
  sepidarId: Float
  shipmentUuid: String
  shippingRate: String
  shippingRateCod: String
  subtotalPrice: String
  taxRate: Float
  totalCouponDiscount: String
  totalDiscount: String
  totalPrice: String
  totalPriceOld: Float
  totalTax: String
  totalVisitorShare: Float
  totalWalletCharged: String
  trackingCode: String
  updatedAt: DateTime
  useWallet: Boolean
  userId: Float
  visitorCouponId: Float
  visitorCouponRate: Float
  visitorGroupId: Float
  visitorId: Float
  visitorRate: Float
  visitorShareCalculated: Boolean
  wholesaleRemainingMoneyTransferRefCode: String
}

type InvoiceEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Invoice"""
  node: Invoice!
}

input InvoiceFilter {
  and: [InvoiceFilter!]
  id: IDFilterComparison
  or: [InvoiceFilter!]
}

type InvoiceHistory {
  accountingDescription: String
  additions: String!
  address: String!
  address2: String
  addressId: Float!
  cashOnDelivery: Float!
  chaparSettlementStatusId: Float
  chaparStatus: String
  cityId: Float!
  countryId: Float!
  couponId: Float
  createdAt: DateTime
  crmCompanyId: String
  crmCompanyPersonId: String
  crmPreOrderId: String
  currentInvoiceStatusId: Float!
  deliveredDate: DateTime
  description: String
  digikalaShare: Float
  digikalaSharePercent: Float
  editorUserId: Float!
  email: String
  forDigikala: Boolean!
  freeDelivery: Float!
  fullAddress: String
  fullname: String
  hasPriority: Boolean!
  id: ID!
  invoiceAddressId: Float!
  invoiceId: Float!
  invoiceModeId: Float
  invoiceNumber: String
  invoicePaymentStatusId: Float
  invoiceTypeId: Float
  isChaparDelivery: Float!
  isDepot: Boolean
  isForAdvertisement: Boolean!
  isReversible: Boolean!
  issueDate: DateTime!
  lastName: String!
  latitude: String
  lockState: Float
  longitude: String
  moneyTransferConfirmed: Boolean
  moneyTransferConfirmedBy: Float
  moneyTransferRefCode: String
  name: String!
  needsReview: Boolean!
  orderId: String
  packageCount: Float
  parentInvoiceId: Float
  partnerCode: String
  paymentCreditable: Boolean
  paymentErrorMessage: String
  phone: String
  phone2: String
  refId: String
  replacementAdditionalPrice: String
  replacementPaymentStatusId: Float
  replacementPriceMoneyTransferCode: String
  saleRefId: String
  selectedShippingServiceId: Float
  shippingRate: String
  shippingRateCod: String
  stateId: Float!
  subtotalPrice: String
  taxRate: Float
  totalCouponDiscount: String
  totalDiscount: String
  totalPrice: String
  totalPriceOld: Float
  totalTax: String
  totalVisitorShare: Float
  totalWalletCharged: String
  trackingCode: String
  updatedAt: DateTime
  useWallet: Boolean
  userId: Float
  visitorCouponId: Float
  visitorCouponRate: Float
  visitorGroupId: Float
  visitorId: Float
  visitorRate: Float
  visitorShareCalculated: Float!
  wholesaleRemainingMoneyTransferRefCode: String
  zipCode: String
}

type InvoiceHistoryConnection {
  """Array of edges."""
  edges: [InvoiceHistoryEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input InvoiceHistoryDeleteFilter {
  and: [InvoiceHistoryDeleteFilter!]
  id: IDFilterComparison
  or: [InvoiceHistoryDeleteFilter!]
}

type InvoiceHistoryDeleteResponse {
  accountingDescription: String
  additions: String
  address: String
  address2: String
  addressId: Float
  cashOnDelivery: Float
  chaparSettlementStatusId: Float
  chaparStatus: String
  cityId: Float
  countryId: Float
  couponId: Float
  createdAt: DateTime
  crmCompanyId: String
  crmCompanyPersonId: String
  crmPreOrderId: String
  currentInvoiceStatusId: Float
  deliveredDate: DateTime
  description: String
  digikalaShare: Float
  digikalaSharePercent: Float
  editorUserId: Float
  email: String
  forDigikala: Boolean
  freeDelivery: Float
  fullAddress: String
  fullname: String
  hasPriority: Boolean
  id: ID
  invoiceAddressId: Float
  invoiceId: Float
  invoiceModeId: Float
  invoiceNumber: String
  invoicePaymentStatusId: Float
  invoiceTypeId: Float
  isChaparDelivery: Float
  isDepot: Boolean
  isForAdvertisement: Boolean
  isReversible: Boolean
  issueDate: DateTime
  lastName: String
  latitude: String
  lockState: Float
  longitude: String
  moneyTransferConfirmed: Boolean
  moneyTransferConfirmedBy: Float
  moneyTransferRefCode: String
  name: String
  needsReview: Boolean
  orderId: String
  packageCount: Float
  parentInvoiceId: Float
  partnerCode: String
  paymentCreditable: Boolean
  paymentErrorMessage: String
  phone: String
  phone2: String
  refId: String
  replacementAdditionalPrice: String
  replacementPaymentStatusId: Float
  replacementPriceMoneyTransferCode: String
  saleRefId: String
  selectedShippingServiceId: Float
  shippingRate: String
  shippingRateCod: String
  stateId: Float
  subtotalPrice: String
  taxRate: Float
  totalCouponDiscount: String
  totalDiscount: String
  totalPrice: String
  totalPriceOld: Float
  totalTax: String
  totalVisitorShare: Float
  totalWalletCharged: String
  trackingCode: String
  updatedAt: DateTime
  useWallet: Boolean
  userId: Float
  visitorCouponId: Float
  visitorCouponRate: Float
  visitorGroupId: Float
  visitorId: Float
  visitorRate: Float
  visitorShareCalculated: Float
  wholesaleRemainingMoneyTransferRefCode: String
  zipCode: String
}

type InvoiceHistoryEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the InvoiceHistory"""
  node: InvoiceHistory!
}

input InvoiceHistoryFilter {
  and: [InvoiceHistoryFilter!]
  id: IDFilterComparison
  or: [InvoiceHistoryFilter!]
}

input InvoiceHistorySort {
  direction: SortDirection!
  field: InvoiceHistorySortFields!
  nulls: SortNulls
}

enum InvoiceHistorySortFields {
  id
}

input InvoiceHistoryUpdateFilter {
  and: [InvoiceHistoryUpdateFilter!]
  id: IDFilterComparison
  or: [InvoiceHistoryUpdateFilter!]
}

type InvoiceInvoiceStatus {
  comment: String
  createdAt: DateTime
  id: ID!
  invoiceId: Float!
  invoiceStatusId: Float!
  updatedAt: DateTime
  userId: Float
}

type InvoiceInvoiceStatusConnection {
  """Array of edges."""
  edges: [InvoiceInvoiceStatusEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input InvoiceInvoiceStatusDeleteFilter {
  and: [InvoiceInvoiceStatusDeleteFilter!]
  id: IDFilterComparison
  or: [InvoiceInvoiceStatusDeleteFilter!]
}

type InvoiceInvoiceStatusDeleteResponse {
  comment: String
  createdAt: DateTime
  id: ID
  invoiceId: Float
  invoiceStatusId: Float
  updatedAt: DateTime
  userId: Float
}

type InvoiceInvoiceStatusEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the InvoiceInvoiceStatus"""
  node: InvoiceInvoiceStatus!
}

input InvoiceInvoiceStatusFilter {
  and: [InvoiceInvoiceStatusFilter!]
  id: IDFilterComparison
  or: [InvoiceInvoiceStatusFilter!]
}

input InvoiceInvoiceStatusSort {
  direction: SortDirection!
  field: InvoiceInvoiceStatusSortFields!
  nulls: SortNulls
}

enum InvoiceInvoiceStatusSortFields {
  id
}

input InvoiceInvoiceStatusUpdateFilter {
  and: [InvoiceInvoiceStatusUpdateFilter!]
  id: IDFilterComparison
  or: [InvoiceInvoiceStatusUpdateFilter!]
}

type InvoiceMode {
  createdAt: DateTime
  id: ID!
  name: String!
  updatedAt: DateTime
}

type InvoiceModeConnection {
  """Array of edges."""
  edges: [InvoiceModeEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input InvoiceModeDeleteFilter {
  and: [InvoiceModeDeleteFilter!]
  id: IDFilterComparison
  or: [InvoiceModeDeleteFilter!]
}

type InvoiceModeDeleteResponse {
  createdAt: DateTime
  id: ID
  name: String
  updatedAt: DateTime
}

type InvoiceModeEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the InvoiceMode"""
  node: InvoiceMode!
}

input InvoiceModeFilter {
  and: [InvoiceModeFilter!]
  id: IDFilterComparison
  or: [InvoiceModeFilter!]
}

input InvoiceModeSort {
  direction: SortDirection!
  field: InvoiceModeSortFields!
  nulls: SortNulls
}

enum InvoiceModeSortFields {
  id
}

input InvoiceModeUpdateFilter {
  and: [InvoiceModeUpdateFilter!]
  id: IDFilterComparison
  or: [InvoiceModeUpdateFilter!]
}

type InvoiceNegotiation {
  createdAt: DateTime
  id: ID!
  invoiceId: Float!
  negotiationId: Float!
  updatedAt: DateTime
}

type InvoiceNegotiationConnection {
  """Array of edges."""
  edges: [InvoiceNegotiationEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input InvoiceNegotiationDeleteFilter {
  and: [InvoiceNegotiationDeleteFilter!]
  id: IDFilterComparison
  or: [InvoiceNegotiationDeleteFilter!]
}

type InvoiceNegotiationDeleteResponse {
  createdAt: DateTime
  id: ID
  invoiceId: Float
  negotiationId: Float
  updatedAt: DateTime
}

type InvoiceNegotiationEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the InvoiceNegotiation"""
  node: InvoiceNegotiation!
}

input InvoiceNegotiationFilter {
  and: [InvoiceNegotiationFilter!]
  id: IDFilterComparison
  or: [InvoiceNegotiationFilter!]
}

input InvoiceNegotiationSort {
  direction: SortDirection!
  field: InvoiceNegotiationSortFields!
  nulls: SortNulls
}

enum InvoiceNegotiationSortFields {
  id
}

input InvoiceNegotiationUpdateFilter {
  and: [InvoiceNegotiationUpdateFilter!]
  id: IDFilterComparison
  or: [InvoiceNegotiationUpdateFilter!]
}

type InvoicePayment {
  amount: String!
  chequeBank: String
  chequeDate: String
  chequeNumber: String
  chequePayee: String
  confirmedBy: Float
  createdAt: DateTime
  description: String
  forShipping: Boolean!
  id: ID!
  invoiceId: Float!
  invoicePaymentTypeId: Float!
  isConfirmed: Boolean
  paymentDate: String
  refCode: String
  refCodeSales: String
  updatedAt: DateTime
  userId: Float!
}

type InvoicePaymentConnection {
  """Array of edges."""
  edges: [InvoicePaymentEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input InvoicePaymentDeleteFilter {
  and: [InvoicePaymentDeleteFilter!]
  id: IDFilterComparison
  or: [InvoicePaymentDeleteFilter!]
}

type InvoicePaymentDeleteResponse {
  amount: String
  chequeBank: String
  chequeDate: String
  chequeNumber: String
  chequePayee: String
  confirmedBy: Float
  createdAt: DateTime
  description: String
  forShipping: Boolean
  id: ID
  invoiceId: Float
  invoicePaymentTypeId: Float
  isConfirmed: Boolean
  paymentDate: String
  refCode: String
  refCodeSales: String
  updatedAt: DateTime
  userId: Float
}

type InvoicePaymentEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the InvoicePayment"""
  node: InvoicePayment!
}

input InvoicePaymentFilter {
  and: [InvoicePaymentFilter!]
  id: IDFilterComparison
  or: [InvoicePaymentFilter!]
}

type InvoicePaymentHistory {
  amount: String!
  chequeBank: String
  chequeDate: String
  chequeNumber: String
  chequePayee: String
  confirmedBy: Float
  createdAt: DateTime
  description: String
  forShipping: Boolean
  id: ID!
  invoiceHistoryId: Float
  invoiceId: Float!
  invoicePaymentId: Float!
  invoicePaymentTypeId: Float!
  isConfirmed: Boolean
  paymentDate: String
  refCode: String
  refCodeSales: String
  updatedAt: DateTime
  userId: Float!
}

type InvoicePaymentHistoryConnection {
  """Array of edges."""
  edges: [InvoicePaymentHistoryEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input InvoicePaymentHistoryDeleteFilter {
  and: [InvoicePaymentHistoryDeleteFilter!]
  id: IDFilterComparison
  or: [InvoicePaymentHistoryDeleteFilter!]
}

type InvoicePaymentHistoryDeleteResponse {
  amount: String
  chequeBank: String
  chequeDate: String
  chequeNumber: String
  chequePayee: String
  confirmedBy: Float
  createdAt: DateTime
  description: String
  forShipping: Boolean
  id: ID
  invoiceHistoryId: Float
  invoiceId: Float
  invoicePaymentId: Float
  invoicePaymentTypeId: Float
  isConfirmed: Boolean
  paymentDate: String
  refCode: String
  refCodeSales: String
  updatedAt: DateTime
  userId: Float
}

type InvoicePaymentHistoryEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the InvoicePaymentHistory"""
  node: InvoicePaymentHistory!
}

input InvoicePaymentHistoryFilter {
  and: [InvoicePaymentHistoryFilter!]
  id: IDFilterComparison
  or: [InvoicePaymentHistoryFilter!]
}

input InvoicePaymentHistorySort {
  direction: SortDirection!
  field: InvoicePaymentHistorySortFields!
  nulls: SortNulls
}

enum InvoicePaymentHistorySortFields {
  id
}

input InvoicePaymentHistoryUpdateFilter {
  and: [InvoicePaymentHistoryUpdateFilter!]
  id: IDFilterComparison
  or: [InvoicePaymentHistoryUpdateFilter!]
}

input InvoicePaymentSort {
  direction: SortDirection!
  field: InvoicePaymentSortFields!
  nulls: SortNulls
}

enum InvoicePaymentSortFields {
  id
}

type InvoicePaymentStatus {
  createdAt: DateTime
  id: ID!
  name: String
  updatedAt: DateTime
}

type InvoicePaymentStatusConnection {
  """Array of edges."""
  edges: [InvoicePaymentStatusEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input InvoicePaymentStatusDeleteFilter {
  and: [InvoicePaymentStatusDeleteFilter!]
  id: IDFilterComparison
  or: [InvoicePaymentStatusDeleteFilter!]
}

type InvoicePaymentStatusDeleteResponse {
  createdAt: DateTime
  id: ID
  name: String
  updatedAt: DateTime
}

type InvoicePaymentStatusEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the InvoicePaymentStatus"""
  node: InvoicePaymentStatus!
}

input InvoicePaymentStatusFilter {
  and: [InvoicePaymentStatusFilter!]
  id: IDFilterComparison
  or: [InvoicePaymentStatusFilter!]
}

input InvoicePaymentStatusSort {
  direction: SortDirection!
  field: InvoicePaymentStatusSortFields!
  nulls: SortNulls
}

enum InvoicePaymentStatusSortFields {
  id
}

input InvoicePaymentStatusUpdateFilter {
  and: [InvoicePaymentStatusUpdateFilter!]
  id: IDFilterComparison
  or: [InvoicePaymentStatusUpdateFilter!]
}

type InvoicePaymentType {
  createdAt: DateTime
  id: ID!
  name: String!
  updatedAt: DateTime
}

type InvoicePaymentTypeConnection {
  """Array of edges."""
  edges: [InvoicePaymentTypeEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input InvoicePaymentTypeDeleteFilter {
  and: [InvoicePaymentTypeDeleteFilter!]
  id: IDFilterComparison
  or: [InvoicePaymentTypeDeleteFilter!]
}

type InvoicePaymentTypeDeleteResponse {
  createdAt: DateTime
  id: ID
  name: String
  updatedAt: DateTime
}

type InvoicePaymentTypeEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the InvoicePaymentType"""
  node: InvoicePaymentType!
}

input InvoicePaymentTypeFilter {
  and: [InvoicePaymentTypeFilter!]
  id: IDFilterComparison
  or: [InvoicePaymentTypeFilter!]
}

input InvoicePaymentTypeSort {
  direction: SortDirection!
  field: InvoicePaymentTypeSortFields!
  nulls: SortNulls
}

enum InvoicePaymentTypeSortFields {
  id
}

input InvoicePaymentTypeUpdateFilter {
  and: [InvoicePaymentTypeUpdateFilter!]
  id: IDFilterComparison
  or: [InvoicePaymentTypeUpdateFilter!]
}

input InvoicePaymentUpdateFilter {
  and: [InvoicePaymentUpdateFilter!]
  id: IDFilterComparison
  or: [InvoicePaymentUpdateFilter!]
}

type InvoiceProduct {
  bundleCount: Float!
  bundlePrice: String!
  count: Float!
  createdAt: DateTime
  description: String
  designId: Float
  designerPricePercentage: Float
  designerPriceShare: Float
  discount: String
  discountId: Float
  gift: Float!
  id: ID!
  invoiceId: Float!
  invoiceProductItemsCreated: Boolean!
  isCouponApplicable: Boolean!
  itemsFromDepot: Float
  itemsToProduce: Float
  length: Float
  manuallyAdded: Boolean!
  padId: Float
  price: String!
  pricePerInch: Float
  productId: Float
  relatedProductId: Float
  relatedSubproductId: Float
  sepidarId: Float
  stockCount: Float
  subproductId: Float
  tempDepotItemsCreated: Boolean!
  totalCouponDiscount: String
  totalDiscount: String
  totalPrice: Float
  updatedAt: DateTime
  width: Float
  withPad: Boolean!
}

type InvoiceProductConnection {
  """Array of edges."""
  edges: [InvoiceProductEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input InvoiceProductDeleteFilter {
  and: [InvoiceProductDeleteFilter!]
  id: IDFilterComparison
  or: [InvoiceProductDeleteFilter!]
}

type InvoiceProductDeleteResponse {
  bundleCount: Float
  bundlePrice: String
  count: Float
  createdAt: DateTime
  description: String
  designId: Float
  designerPricePercentage: Float
  designerPriceShare: Float
  discount: String
  discountId: Float
  gift: Float
  id: ID
  invoiceId: Float
  invoiceProductItemsCreated: Boolean
  isCouponApplicable: Boolean
  itemsFromDepot: Float
  itemsToProduce: Float
  length: Float
  manuallyAdded: Boolean
  padId: Float
  price: String
  pricePerInch: Float
  productId: Float
  relatedProductId: Float
  relatedSubproductId: Float
  sepidarId: Float
  stockCount: Float
  subproductId: Float
  tempDepotItemsCreated: Boolean
  totalCouponDiscount: String
  totalDiscount: String
  totalPrice: Float
  updatedAt: DateTime
  width: Float
  withPad: Boolean
}

type InvoiceProductEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the InvoiceProduct"""
  node: InvoiceProduct!
}

input InvoiceProductFilter {
  and: [InvoiceProductFilter!]
  id: IDFilterComparison
  or: [InvoiceProductFilter!]
}

type InvoiceProductHistory {
  bundleCount: Float!
  bundlePrice: String!
  count: Float!
  createdAt: DateTime
  description: String
  designId: Float
  designerPricePercentage: Float
  designerPriceShare: Float
  discount: String
  discountId: Float
  id: ID!
  invoiceHistoryId: Float!
  invoiceId: Float!
  invoiceProductId: Float
  invoiceProductItemsCreated: Boolean!
  isCouponApplicable: Boolean!
  itemsFromDepot: Float
  itemsToProduce: Float
  length: Float
  manuallyAdded: Boolean!
  padId: Float
  price: String!
  pricePerInch: Float
  productId: Float
  relatedProductId: Float
  relatedSubproductId: Float
  stockCount: Float
  subproductId: Float
  totalCouponDiscount: String
  totalDiscount: String
  totalPrice: Float
  updatedAt: DateTime
  width: Float
  withPad: Boolean!
}

type InvoiceProductHistoryConnection {
  """Array of edges."""
  edges: [InvoiceProductHistoryEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input InvoiceProductHistoryDeleteFilter {
  and: [InvoiceProductHistoryDeleteFilter!]
  id: IDFilterComparison
  or: [InvoiceProductHistoryDeleteFilter!]
}

type InvoiceProductHistoryDeleteResponse {
  bundleCount: Float
  bundlePrice: String
  count: Float
  createdAt: DateTime
  description: String
  designId: Float
  designerPricePercentage: Float
  designerPriceShare: Float
  discount: String
  discountId: Float
  id: ID
  invoiceHistoryId: Float
  invoiceId: Float
  invoiceProductId: Float
  invoiceProductItemsCreated: Boolean
  isCouponApplicable: Boolean
  itemsFromDepot: Float
  itemsToProduce: Float
  length: Float
  manuallyAdded: Boolean
  padId: Float
  price: String
  pricePerInch: Float
  productId: Float
  relatedProductId: Float
  relatedSubproductId: Float
  stockCount: Float
  subproductId: Float
  totalCouponDiscount: String
  totalDiscount: String
  totalPrice: Float
  updatedAt: DateTime
  width: Float
  withPad: Boolean
}

type InvoiceProductHistoryEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the InvoiceProductHistory"""
  node: InvoiceProductHistory!
}

input InvoiceProductHistoryFilter {
  and: [InvoiceProductHistoryFilter!]
  id: IDFilterComparison
  or: [InvoiceProductHistoryFilter!]
}

input InvoiceProductHistorySort {
  direction: SortDirection!
  field: InvoiceProductHistorySortFields!
  nulls: SortNulls
}

enum InvoiceProductHistorySortFields {
  id
}

input InvoiceProductHistoryUpdateFilter {
  and: [InvoiceProductHistoryUpdateFilter!]
  id: IDFilterComparison
  or: [InvoiceProductHistoryUpdateFilter!]
}

type InvoiceProductItem {
  code: String!
  createdAt: DateTime!
  currentStatusId: Float!
  damageCause: String
  damageReasonId: Float
  damageType: Float
  fromDepot: Boolean
  id: ID!
  invoiceProductId: Float!
  isInsertedIntoSepidar: Boolean!
  isPrintedAndHeated: Boolean
  isReversed: Boolean!
  isTagPrinted: Boolean
  padCode: String
  predictedDateForReceivedByRepository: String
  printProfileId: Float
  printRipId: Float
  productionRollId: Float
  rollReferenceCode: String
  row: Float!
  sortOrder: Float
  tagSortOrder: Float
  tempStatusId: Float
  updatedAt: DateTime!
}

type InvoiceProductItemConnection {
  """Array of edges."""
  edges: [InvoiceProductItemEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input InvoiceProductItemDeleteFilter {
  and: [InvoiceProductItemDeleteFilter!]
  id: IDFilterComparison
  or: [InvoiceProductItemDeleteFilter!]
}

type InvoiceProductItemDeleteResponse {
  code: String
  createdAt: DateTime
  currentStatusId: Float
  damageCause: String
  damageReasonId: Float
  damageType: Float
  fromDepot: Boolean
  id: ID
  invoiceProductId: Float
  isInsertedIntoSepidar: Boolean
  isPrintedAndHeated: Boolean
  isReversed: Boolean
  isTagPrinted: Boolean
  padCode: String
  predictedDateForReceivedByRepository: String
  printProfileId: Float
  printRipId: Float
  productionRollId: Float
  rollReferenceCode: String
  row: Float
  sortOrder: Float
  tagSortOrder: Float
  tempStatusId: Float
  updatedAt: DateTime
}

type InvoiceProductItemEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the InvoiceProductItem"""
  node: InvoiceProductItem!
}

input InvoiceProductItemFilter {
  and: [InvoiceProductItemFilter!]
  id: IDFilterComparison
  or: [InvoiceProductItemFilter!]
}

type InvoiceProductItemInvoiceProductStatus {
  comment: String
  createdAt: DateTime!
  id: ID!
  invoiceProductItemId: Float!
  invoiceProductStatusId: Float!
  updatedAt: DateTime!
  userId: Float!
}

type InvoiceProductItemInvoiceProductStatusConnection {
  """Array of edges."""
  edges: [InvoiceProductItemInvoiceProductStatusEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input InvoiceProductItemInvoiceProductStatusDeleteFilter {
  and: [InvoiceProductItemInvoiceProductStatusDeleteFilter!]
  id: IDFilterComparison
  or: [InvoiceProductItemInvoiceProductStatusDeleteFilter!]
}

type InvoiceProductItemInvoiceProductStatusDeleteResponse {
  comment: String
  createdAt: DateTime
  id: ID
  invoiceProductItemId: Float
  invoiceProductStatusId: Float
  updatedAt: DateTime
  userId: Float
}

type InvoiceProductItemInvoiceProductStatusEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the InvoiceProductItemInvoiceProductStatus"""
  node: InvoiceProductItemInvoiceProductStatus!
}

input InvoiceProductItemInvoiceProductStatusFilter {
  and: [InvoiceProductItemInvoiceProductStatusFilter!]
  id: IDFilterComparison
  or: [InvoiceProductItemInvoiceProductStatusFilter!]
}

input InvoiceProductItemInvoiceProductStatusSort {
  direction: SortDirection!
  field: InvoiceProductItemInvoiceProductStatusSortFields!
  nulls: SortNulls
}

enum InvoiceProductItemInvoiceProductStatusSortFields {
  id
}

input InvoiceProductItemInvoiceProductStatusUpdateFilter {
  and: [InvoiceProductItemInvoiceProductStatusUpdateFilter!]
  id: IDFilterComparison
  or: [InvoiceProductItemInvoiceProductStatusUpdateFilter!]
}

input InvoiceProductItemSort {
  direction: SortDirection!
  field: InvoiceProductItemSortFields!
  nulls: SortNulls
}

enum InvoiceProductItemSortFields {
  id
}

input InvoiceProductItemUpdateFilter {
  and: [InvoiceProductItemUpdateFilter!]
  id: IDFilterComparison
  or: [InvoiceProductItemUpdateFilter!]
}

input InvoiceProductSort {
  direction: SortDirection!
  field: InvoiceProductSortFields!
  nulls: SortNulls
}

enum InvoiceProductSortFields {
  id
}

type InvoiceProductStatus {
  color: String!
  createdAt: DateTime!
  id: ID!
  status: String!
  step: Float
  stepShaggy: Float
  updatedAt: DateTime!
}

type InvoiceProductStatusConnection {
  """Array of edges."""
  edges: [InvoiceProductStatusEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input InvoiceProductStatusDeleteFilter {
  and: [InvoiceProductStatusDeleteFilter!]
  id: IDFilterComparison
  or: [InvoiceProductStatusDeleteFilter!]
}

type InvoiceProductStatusDeleteResponse {
  color: String
  createdAt: DateTime
  id: ID
  status: String
  step: Float
  stepShaggy: Float
  updatedAt: DateTime
}

type InvoiceProductStatusEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the InvoiceProductStatus"""
  node: InvoiceProductStatus!
}

input InvoiceProductStatusFilter {
  and: [InvoiceProductStatusFilter!]
  id: IDFilterComparison
  or: [InvoiceProductStatusFilter!]
}

input InvoiceProductStatusSort {
  direction: SortDirection!
  field: InvoiceProductStatusSortFields!
  nulls: SortNulls
}

enum InvoiceProductStatusSortFields {
  id
}

input InvoiceProductStatusUpdateFilter {
  and: [InvoiceProductStatusUpdateFilter!]
  id: IDFilterComparison
  or: [InvoiceProductStatusUpdateFilter!]
}

input InvoiceProductUpdateFilter {
  and: [InvoiceProductUpdateFilter!]
  id: IDFilterComparison
  or: [InvoiceProductUpdateFilter!]
}

type InvoiceRatesResult {
  addressId: Float!
  createdAt: DateTime
  id: ID!
  invoiceId: Float!
  ratesReplyCodResult: String
  ratesReplyResult: String
  shippingServiceId: Float
  updatedAt: DateTime
}

type InvoiceRatesResultConnection {
  """Array of edges."""
  edges: [InvoiceRatesResultEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input InvoiceRatesResultDeleteFilter {
  and: [InvoiceRatesResultDeleteFilter!]
  id: IDFilterComparison
  or: [InvoiceRatesResultDeleteFilter!]
}

type InvoiceRatesResultDeleteResponse {
  addressId: Float
  createdAt: DateTime
  id: ID
  invoiceId: Float
  ratesReplyCodResult: String
  ratesReplyResult: String
  shippingServiceId: Float
  updatedAt: DateTime
}

type InvoiceRatesResultEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the InvoiceRatesResult"""
  node: InvoiceRatesResult!
}

input InvoiceRatesResultFilter {
  and: [InvoiceRatesResultFilter!]
  id: IDFilterComparison
  or: [InvoiceRatesResultFilter!]
}

input InvoiceRatesResultSort {
  direction: SortDirection!
  field: InvoiceRatesResultSortFields!
  nulls: SortNulls
}

enum InvoiceRatesResultSortFields {
  id
}

input InvoiceRatesResultUpdateFilter {
  and: [InvoiceRatesResultUpdateFilter!]
  id: IDFilterComparison
  or: [InvoiceRatesResultUpdateFilter!]
}

type InvoiceReversal {
  createdAt: DateTime
  id: ID!
  invoiceId: Float!
  invoiceStatusId: Float!
  isReviewed: Boolean!
  reviewedBy: Float
  reviewedDate: DateTime
  updatedAt: DateTime
  wholeInvoice: Boolean!
}

type InvoiceReversalConnection {
  """Array of edges."""
  edges: [InvoiceReversalEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input InvoiceReversalDeleteFilter {
  and: [InvoiceReversalDeleteFilter!]
  id: IDFilterComparison
  or: [InvoiceReversalDeleteFilter!]
}

type InvoiceReversalDeleteResponse {
  createdAt: DateTime
  id: ID
  invoiceId: Float
  invoiceStatusId: Float
  isReviewed: Boolean
  reviewedBy: Float
  reviewedDate: DateTime
  updatedAt: DateTime
  wholeInvoice: Boolean
}

type InvoiceReversalEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the InvoiceReversal"""
  node: InvoiceReversal!
}

input InvoiceReversalFilter {
  and: [InvoiceReversalFilter!]
  id: IDFilterComparison
  or: [InvoiceReversalFilter!]
}

type InvoiceReversalItem {
  count: Float!
  createdAt: DateTime
  id: ID!
  invoiceProductId: Float!
  invoiceReversalId: Float!
  updatedAt: DateTime
  withPad: Boolean!
}

type InvoiceReversalItemConnection {
  """Array of edges."""
  edges: [InvoiceReversalItemEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input InvoiceReversalItemDeleteFilter {
  and: [InvoiceReversalItemDeleteFilter!]
  id: IDFilterComparison
  or: [InvoiceReversalItemDeleteFilter!]
}

type InvoiceReversalItemDeleteResponse {
  count: Float
  createdAt: DateTime
  id: ID
  invoiceProductId: Float
  invoiceReversalId: Float
  updatedAt: DateTime
  withPad: Boolean
}

type InvoiceReversalItemEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the InvoiceReversalItem"""
  node: InvoiceReversalItem!
}

input InvoiceReversalItemFilter {
  and: [InvoiceReversalItemFilter!]
  id: IDFilterComparison
  or: [InvoiceReversalItemFilter!]
}

input InvoiceReversalItemSort {
  direction: SortDirection!
  field: InvoiceReversalItemSortFields!
  nulls: SortNulls
}

enum InvoiceReversalItemSortFields {
  id
}

input InvoiceReversalItemUpdateFilter {
  and: [InvoiceReversalItemUpdateFilter!]
  id: IDFilterComparison
  or: [InvoiceReversalItemUpdateFilter!]
}

input InvoiceReversalSort {
  direction: SortDirection!
  field: InvoiceReversalSortFields!
  nulls: SortNulls
}

enum InvoiceReversalSortFields {
  id
}

input InvoiceReversalUpdateFilter {
  and: [InvoiceReversalUpdateFilter!]
  id: IDFilterComparison
  or: [InvoiceReversalUpdateFilter!]
}

type InvoiceShippingRate {
  createdAt: DateTime
  id: ID!
  invoiceId: Float!
  shippingRate: String!
  shippingRateCod: String
  shippingServiceId: Float!
  updatedAt: DateTime
}

type InvoiceShippingRateConnection {
  """Array of edges."""
  edges: [InvoiceShippingRateEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input InvoiceShippingRateDeleteFilter {
  and: [InvoiceShippingRateDeleteFilter!]
  id: IDFilterComparison
  or: [InvoiceShippingRateDeleteFilter!]
}

type InvoiceShippingRateDeleteResponse {
  createdAt: DateTime
  id: ID
  invoiceId: Float
  shippingRate: String
  shippingRateCod: String
  shippingServiceId: Float
  updatedAt: DateTime
}

type InvoiceShippingRateEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the InvoiceShippingRate"""
  node: InvoiceShippingRate!
}

input InvoiceShippingRateFilter {
  and: [InvoiceShippingRateFilter!]
  id: IDFilterComparison
  or: [InvoiceShippingRateFilter!]
}

input InvoiceShippingRateSort {
  direction: SortDirection!
  field: InvoiceShippingRateSortFields!
  nulls: SortNulls
}

enum InvoiceShippingRateSortFields {
  id
}

input InvoiceShippingRateUpdateFilter {
  and: [InvoiceShippingRateUpdateFilter!]
  id: IDFilterComparison
  or: [InvoiceShippingRateUpdateFilter!]
}

input InvoiceSort {
  direction: SortDirection!
  field: InvoiceSortFields!
  nulls: SortNulls
}

enum InvoiceSortFields {
  id
}

type InvoiceStatus {
  color: String
  createdAt: DateTime
  id: ID!
  notificationEmails: String
  notificationNumbers: String
  smsToCustomer: Boolean
  status: String!
  updatedAt: DateTime
}

type InvoiceStatusConnection {
  """Array of edges."""
  edges: [InvoiceStatusEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input InvoiceStatusDeleteFilter {
  and: [InvoiceStatusDeleteFilter!]
  id: IDFilterComparison
  or: [InvoiceStatusDeleteFilter!]
}

type InvoiceStatusDeleteResponse {
  color: String
  createdAt: DateTime
  id: ID
  notificationEmails: String
  notificationNumbers: String
  smsToCustomer: Boolean
  status: String
  updatedAt: DateTime
}

type InvoiceStatusEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the InvoiceStatus"""
  node: InvoiceStatus!
}

input InvoiceStatusFilter {
  and: [InvoiceStatusFilter!]
  id: IDFilterComparison
  or: [InvoiceStatusFilter!]
}

input InvoiceStatusSort {
  direction: SortDirection!
  field: InvoiceStatusSortFields!
  nulls: SortNulls
}

enum InvoiceStatusSortFields {
  id
}

input InvoiceStatusUpdateFilter {
  and: [InvoiceStatusUpdateFilter!]
  id: IDFilterComparison
  or: [InvoiceStatusUpdateFilter!]
}

type InvoiceType {
  createdAt: DateTime
  id: ID!
  name: String!
  updatedAt: DateTime
}

type InvoiceTypeConnection {
  """Array of edges."""
  edges: [InvoiceTypeEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input InvoiceTypeDeleteFilter {
  and: [InvoiceTypeDeleteFilter!]
  id: IDFilterComparison
  or: [InvoiceTypeDeleteFilter!]
}

type InvoiceTypeDeleteResponse {
  createdAt: DateTime
  id: ID
  name: String
  updatedAt: DateTime
}

type InvoiceTypeEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the InvoiceType"""
  node: InvoiceType!
}

input InvoiceTypeFilter {
  and: [InvoiceTypeFilter!]
  id: IDFilterComparison
  or: [InvoiceTypeFilter!]
}

input InvoiceTypeSort {
  direction: SortDirection!
  field: InvoiceTypeSortFields!
  nulls: SortNulls
}

enum InvoiceTypeSortFields {
  id
}

input InvoiceTypeUpdateFilter {
  and: [InvoiceTypeUpdateFilter!]
  id: IDFilterComparison
  or: [InvoiceTypeUpdateFilter!]
}

input InvoiceUpdateFilter {
  and: [InvoiceUpdateFilter!]
  id: IDFilterComparison
  or: [InvoiceUpdateFilter!]
}

type Label {
  color: String!
  createdAt: DateTime
  id: ID!
  name: String!
  textColor: String!
  updatedAt: DateTime
}

type LabelConnection {
  """Array of edges."""
  edges: [LabelEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input LabelDeleteFilter {
  and: [LabelDeleteFilter!]
  id: IDFilterComparison
  or: [LabelDeleteFilter!]
}

type LabelDeleteResponse {
  color: String
  createdAt: DateTime
  id: ID
  name: String
  textColor: String
  updatedAt: DateTime
}

type LabelEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Label"""
  node: Label!
}

input LabelFilter {
  and: [LabelFilter!]
  id: IDFilterComparison
  or: [LabelFilter!]
}

type LabelProduct {
  createdAt: DateTime
  id: ID!
  labelId: Float!
  productId: Float!
  updatedAt: DateTime
}

type LabelProductConnection {
  """Array of edges."""
  edges: [LabelProductEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input LabelProductDeleteFilter {
  and: [LabelProductDeleteFilter!]
  id: IDFilterComparison
  or: [LabelProductDeleteFilter!]
}

type LabelProductDeleteResponse {
  createdAt: DateTime
  id: ID
  labelId: Float
  productId: Float
  updatedAt: DateTime
}

type LabelProductEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the LabelProduct"""
  node: LabelProduct!
}

input LabelProductFilter {
  and: [LabelProductFilter!]
  id: IDFilterComparison
  or: [LabelProductFilter!]
}

input LabelProductSort {
  direction: SortDirection!
  field: LabelProductSortFields!
  nulls: SortNulls
}

enum LabelProductSortFields {
  id
}

input LabelProductUpdateFilter {
  and: [LabelProductUpdateFilter!]
  id: IDFilterComparison
  or: [LabelProductUpdateFilter!]
}

input LabelSort {
  direction: SortDirection!
  field: LabelSortFields!
  nulls: SortNulls
}

enum LabelSortFields {
  id
}

input LabelUpdateFilter {
  and: [LabelUpdateFilter!]
  id: IDFilterComparison
  or: [LabelUpdateFilter!]
}

type MellatPaymentError {
  code: String
  createdAt: DateTime
  id: ID!
  message: String
  updatedAt: DateTime
}

type MellatPaymentErrorConnection {
  """Array of edges."""
  edges: [MellatPaymentErrorEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input MellatPaymentErrorDeleteFilter {
  and: [MellatPaymentErrorDeleteFilter!]
  id: IDFilterComparison
  or: [MellatPaymentErrorDeleteFilter!]
}

type MellatPaymentErrorDeleteResponse {
  code: String
  createdAt: DateTime
  id: ID
  message: String
  updatedAt: DateTime
}

type MellatPaymentErrorEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the MellatPaymentError"""
  node: MellatPaymentError!
}

input MellatPaymentErrorFilter {
  and: [MellatPaymentErrorFilter!]
  id: IDFilterComparison
  or: [MellatPaymentErrorFilter!]
}

input MellatPaymentErrorSort {
  direction: SortDirection!
  field: MellatPaymentErrorSortFields!
  nulls: SortNulls
}

enum MellatPaymentErrorSortFields {
  id
}

input MellatPaymentErrorUpdateFilter {
  and: [MellatPaymentErrorUpdateFilter!]
  id: IDFilterComparison
  or: [MellatPaymentErrorUpdateFilter!]
}

type Migration {
  batch: Float!
  id: ID!
  migration: String!
}

type MigrationConnection {
  """Array of edges."""
  edges: [MigrationEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input MigrationDeleteFilter {
  and: [MigrationDeleteFilter!]
  id: IDFilterComparison
  or: [MigrationDeleteFilter!]
}

type MigrationDeleteResponse {
  batch: Float
  id: ID
  migration: String
}

type MigrationEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Migration"""
  node: Migration!
}

input MigrationFilter {
  and: [MigrationFilter!]
  id: IDFilterComparison
  or: [MigrationFilter!]
}

input MigrationSort {
  direction: SortDirection!
  field: MigrationSortFields!
  nulls: SortNulls
}

enum MigrationSortFields {
  id
}

input MigrationUpdateFilter {
  and: [MigrationUpdateFilter!]
  id: IDFilterComparison
  or: [MigrationUpdateFilter!]
}

type ModelHasPermission {
  modelId: String!
  modelType: String!
  permissionId: ID!
}

type ModelHasPermissionConnection {
  """Array of edges."""
  edges: [ModelHasPermissionEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ModelHasPermissionDeleteFilter {
  and: [ModelHasPermissionDeleteFilter!]
  or: [ModelHasPermissionDeleteFilter!]
  permissionId: IDFilterComparison
}

type ModelHasPermissionDeleteResponse {
  modelId: String
  modelType: String
  permissionId: ID
}

type ModelHasPermissionEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ModelHasPermission"""
  node: ModelHasPermission!
}

input ModelHasPermissionFilter {
  and: [ModelHasPermissionFilter!]
  or: [ModelHasPermissionFilter!]
  permissionId: IDFilterComparison
}

input ModelHasPermissionSort {
  direction: SortDirection!
  field: ModelHasPermissionSortFields!
  nulls: SortNulls
}

enum ModelHasPermissionSortFields {
  permissionId
}

input ModelHasPermissionUpdateFilter {
  and: [ModelHasPermissionUpdateFilter!]
  or: [ModelHasPermissionUpdateFilter!]
  permissionId: IDFilterComparison
}

type ModelHasRole {
  modelId: String!
  modelType: String!
  roleId: ID!
}

type ModelHasRoleConnection {
  """Array of edges."""
  edges: [ModelHasRoleEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ModelHasRoleDeleteFilter {
  and: [ModelHasRoleDeleteFilter!]
  or: [ModelHasRoleDeleteFilter!]
  roleId: IDFilterComparison
}

type ModelHasRoleDeleteResponse {
  modelId: String
  modelType: String
  roleId: ID
}

type ModelHasRoleEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ModelHasRole"""
  node: ModelHasRole!
}

input ModelHasRoleFilter {
  and: [ModelHasRoleFilter!]
  or: [ModelHasRoleFilter!]
  roleId: IDFilterComparison
}

input ModelHasRoleSort {
  direction: SortDirection!
  field: ModelHasRoleSortFields!
  nulls: SortNulls
}

enum ModelHasRoleSortFields {
  roleId
}

input ModelHasRoleUpdateFilter {
  and: [ModelHasRoleUpdateFilter!]
  or: [ModelHasRoleUpdateFilter!]
  roleId: IDFilterComparison
}

type ModelVisit {
  createdAt: DateTime
  id: ID!
  modelId: Float!
  modelName: String!
  updatedAt: DateTime
  userId: Float!
}

type ModelVisitConnection {
  """Array of edges."""
  edges: [ModelVisitEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ModelVisitDeleteFilter {
  and: [ModelVisitDeleteFilter!]
  id: IDFilterComparison
  or: [ModelVisitDeleteFilter!]
}

type ModelVisitDeleteResponse {
  createdAt: DateTime
  id: ID
  modelId: Float
  modelName: String
  updatedAt: DateTime
  userId: Float
}

type ModelVisitEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ModelVisit"""
  node: ModelVisit!
}

input ModelVisitFilter {
  and: [ModelVisitFilter!]
  id: IDFilterComparison
  or: [ModelVisitFilter!]
}

input ModelVisitSort {
  direction: SortDirection!
  field: ModelVisitSortFields!
  nulls: SortNulls
}

enum ModelVisitSortFields {
  id
}

input ModelVisitUpdateFilter {
  and: [ModelVisitUpdateFilter!]
  id: IDFilterComparison
  or: [ModelVisitUpdateFilter!]
}

type ModemaAccelerator {
  city: String!
  createdAt: DateTime
  details: String!
  hasOffice: String!
  id: ID!
  instagram: String!
  jobCategory: String!
  name: String!
  phone: String!
  pro: String!
  updatedAt: DateTime
}

type ModemaAcceleratorConnection {
  """Array of edges."""
  edges: [ModemaAcceleratorEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ModemaAcceleratorDeleteFilter {
  and: [ModemaAcceleratorDeleteFilter!]
  id: IDFilterComparison
  or: [ModemaAcceleratorDeleteFilter!]
}

type ModemaAcceleratorDeleteResponse {
  city: String
  createdAt: DateTime
  details: String
  hasOffice: String
  id: ID
  instagram: String
  jobCategory: String
  name: String
  phone: String
  pro: String
  updatedAt: DateTime
}

type ModemaAcceleratorEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ModemaAccelerator"""
  node: ModemaAccelerator!
}

input ModemaAcceleratorFilter {
  and: [ModemaAcceleratorFilter!]
  id: IDFilterComparison
  or: [ModemaAcceleratorFilter!]
}

type ModemaAcceleratorImage {
  createdAt: DateTime
  filename: String!
  id: ID!
  mime: String!
  modemaAcceleratorId: Float
  originalFilename: String!
  path: String!
  type: String!
  updatedAt: DateTime
  uploadSource: String!
}

type ModemaAcceleratorImageConnection {
  """Array of edges."""
  edges: [ModemaAcceleratorImageEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ModemaAcceleratorImageDeleteFilter {
  and: [ModemaAcceleratorImageDeleteFilter!]
  id: IDFilterComparison
  or: [ModemaAcceleratorImageDeleteFilter!]
}

type ModemaAcceleratorImageDeleteResponse {
  createdAt: DateTime
  filename: String
  id: ID
  mime: String
  modemaAcceleratorId: Float
  originalFilename: String
  path: String
  type: String
  updatedAt: DateTime
  uploadSource: String
}

type ModemaAcceleratorImageEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ModemaAcceleratorImage"""
  node: ModemaAcceleratorImage!
}

input ModemaAcceleratorImageFilter {
  and: [ModemaAcceleratorImageFilter!]
  id: IDFilterComparison
  or: [ModemaAcceleratorImageFilter!]
}

input ModemaAcceleratorImageSort {
  direction: SortDirection!
  field: ModemaAcceleratorImageSortFields!
  nulls: SortNulls
}

enum ModemaAcceleratorImageSortFields {
  id
}

input ModemaAcceleratorImageUpdateFilter {
  and: [ModemaAcceleratorImageUpdateFilter!]
  id: IDFilterComparison
  or: [ModemaAcceleratorImageUpdateFilter!]
}

input ModemaAcceleratorSort {
  direction: SortDirection!
  field: ModemaAcceleratorSortFields!
  nulls: SortNulls
}

enum ModemaAcceleratorSortFields {
  id
}

input ModemaAcceleratorUpdateFilter {
  and: [ModemaAcceleratorUpdateFilter!]
  id: IDFilterComparison
  or: [ModemaAcceleratorUpdateFilter!]
}

type ModemaAcceleratorVideo {
  altText: String
  createdAt: DateTime
  filename: String!
  id: ID!
  mime: String!
  modemaAcceleratorId: Float
  originalFilename: String!
  path: String!
  type: String!
  updatedAt: DateTime
  uploadSource: String!
}

type ModemaAcceleratorVideoConnection {
  """Array of edges."""
  edges: [ModemaAcceleratorVideoEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ModemaAcceleratorVideoDeleteFilter {
  and: [ModemaAcceleratorVideoDeleteFilter!]
  id: IDFilterComparison
  or: [ModemaAcceleratorVideoDeleteFilter!]
}

type ModemaAcceleratorVideoDeleteResponse {
  altText: String
  createdAt: DateTime
  filename: String
  id: ID
  mime: String
  modemaAcceleratorId: Float
  originalFilename: String
  path: String
  type: String
  updatedAt: DateTime
  uploadSource: String
}

type ModemaAcceleratorVideoEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ModemaAcceleratorVideo"""
  node: ModemaAcceleratorVideo!
}

input ModemaAcceleratorVideoFilter {
  and: [ModemaAcceleratorVideoFilter!]
  id: IDFilterComparison
  or: [ModemaAcceleratorVideoFilter!]
}

input ModemaAcceleratorVideoSort {
  direction: SortDirection!
  field: ModemaAcceleratorVideoSortFields!
  nulls: SortNulls
}

enum ModemaAcceleratorVideoSortFields {
  id
}

input ModemaAcceleratorVideoUpdateFilter {
  and: [ModemaAcceleratorVideoUpdateFilter!]
  id: IDFilterComparison
  or: [ModemaAcceleratorVideoUpdateFilter!]
}

type Mutation {
  createAttribute(createAttributeInput: CreateAttributeInput!): Attribute!
  createAttributeAttributeGroup(createAttributeAttributeGroupInput: CreateAttributeAttributeGroupInput!): AttributeAttributeGroup!
  createAttributeItem(createAttributeItemInput: CreateAttributeItemInput!): AttributeItem!
  createAttributeProduct(createAttributeProductInput: CreateAttributeProductInput!): AttributeProduct!
  createAttributeSubproduct(createAttributeSubproductInput: CreateAttributeSubproductInput!): AttributeSubproduct!
  createChaparSettlementStatus(createChaparSettlementStatusInput: CreateChaparSettlementStatusInput!): ChaparSettlementStatus!
  createCity(createCityInput: CreateCityInput!): City!
  createColor(createColorInput: CreateColorInput!): Color!
  createCustomerImageProduct(createCustomerImageProductInput: CreateCustomerImageProductInput!): CustomerImageProduct!
  createCustomerVideoProduct(createCustomerVideoProductInput: CreateCustomerVideoProductInput!): CustomerVideoProduct!
  createDepartment(createDepartmentInput: CreateDepartmentInput!): Department!
  createDiscount(createDiscountInput: CreateDiscountInput!): Discount!
  createExitControl(createExitControlInput: CreateExitControlInput!): ExitControl!
  createExitControlItem(createExitControlItemInput: CreateExitControlItemInput!): ExitControlItem!
  createGoogleFormUtm(createGoogleFormUtmInput: CreateGoogleFormUtmInput!): GoogleFormUtm!
  createHoliday(createHolidayInput: CreateHolidayInput!): Holiday!
  createHomePageCustomerImage(createHomePageCustomerImageInput: CreateHomePageCustomerImageInput!): HomePageCustomerImage!
  createHyper(createHyperInput: CreateHyperInput!): Hyper!
  createImageLayer(createImageLayerInput: CreateImageLayerInput!): ImageLayer!
  createImageSize(createImageSizeInput: CreateImageSizeInput!): ImageSize!
  createImageSubproduct(createImageSubproductInput: CreateImageSubproductInput!): ImageSubproduct!
  createImagesSizeGuidesDetail(createImagesSizeGuidesDetailInput: CreateImagesSizeGuidesDetailInput!): ImagesSizeGuidesDetail!
  createImpersonateHistory(createImpersonateHistoryInput: CreateImpersonateHistoryInput!): ImpersonateHistory!
  createIncredibleOffer(createIncredibleOfferInput: CreateIncredibleOfferInput!): IncredibleOffer!
  createIncredibleOfferSentNotification(createIncredibleOfferSentNotificationInput: CreateIncredibleOfferSentNotificationInput!): IncredibleOfferSentNotification!
  createInstagramFeed(createInstagramFeedInput: CreateInstagramFeedInput!): InstagramFeed!
  createInvitationCode(createInvitationCodeInput: CreateInvitationCodeInput!): InvitationCode!
  createInvoice(createInvoiceInput: CreateInvoiceInput!): Invoice!
  createInvoiceAddress(createInvoiceAddressInput: CreateInvoiceAddressInput!): InvoiceAddress!
  createInvoiceBankGatewayHistory(createInvoiceBankGatewayHistoryInput: CreateInvoiceBankGatewayHistoryInput!): InvoiceBankGatewayHistory!
  createInvoiceHistory(createInvoiceHistoryInput: CreateInvoiceHistoryInput!): InvoiceHistory!
  createInvoiceInvoiceStatus(createInvoiceInvoiceStatusInput: CreateInvoiceInvoiceStatusInput!): InvoiceInvoiceStatus!
  createInvoiceMode(createInvoiceModeInput: CreateInvoiceModeInput!): InvoiceMode!
  createInvoiceNegotiation(createInvoiceNegotiationInput: CreateInvoiceNegotiationInput!): InvoiceNegotiation!
  createInvoicePayment(createInvoicePaymentInput: CreateInvoicePaymentInput!): InvoicePayment!
  createInvoicePaymentHistory(createInvoicePaymentHistoryInput: CreateInvoicePaymentHistoryInput!): InvoicePaymentHistory!
  createInvoicePaymentStatus(createInvoicePaymentStatusInput: CreateInvoicePaymentStatusInput!): InvoicePaymentStatus!
  createInvoicePaymentType(createInvoicePaymentTypeInput: CreateInvoicePaymentTypeInput!): InvoicePaymentType!
  createInvoiceProduct(createInvoiceProductInput: CreateInvoiceProductInput!): InvoiceProduct!
  createInvoiceProductHistory(createInvoiceProductHistoryInput: CreateInvoiceProductHistoryInput!): InvoiceProductHistory!
  createInvoiceProductItem(createInvoiceProductItemInput: CreateInvoiceProductItemInput!): InvoiceProductItem!
  createInvoiceProductItemInvoiceProductStatus(createInvoiceProductItemInvoiceProductStatusInput: CreateInvoiceProductItemInvoiceProductStatusInput!): InvoiceProductItemInvoiceProductStatus!
  createInvoiceProductStatus(createInvoiceProductStatusInput: CreateInvoiceProductStatusInput!): InvoiceProductStatus!
  createInvoiceRatesResult(createInvoiceRatesResultInput: CreateInvoiceRatesResultInput!): InvoiceRatesResult!
  createInvoiceReversal(createInvoiceReversalInput: CreateInvoiceReversalInput!): InvoiceReversal!
  createInvoiceReversalItem(createInvoiceReversalItemInput: CreateInvoiceReversalItemInput!): InvoiceReversalItem!
  createInvoiceShippingRate(createInvoiceShippingRateInput: CreateInvoiceShippingRateInput!): InvoiceShippingRate!
  createInvoiceStatus(createInvoiceStatusInput: CreateInvoiceStatusInput!): InvoiceStatus!
  createInvoiceType(createInvoiceTypeInput: CreateInvoiceTypeInput!): InvoiceType!
  createLabel(createLabelInput: CreateLabelInput!): Label!
  createLabelProduct(createLabelProductInput: CreateLabelProductInput!): LabelProduct!
  createManyActivities(input: CreateManyActivitiesInput!): [Activity!]!
  createManyAddresses(input: CreateManyAddressesInput!): [Address!]!
  createManyAutomationEvents(input: CreateManyAutomationEventsInput!): [AutomationEvent!]!
  createManyAutomationRfmScores(input: CreateManyAutomationRfmScoresInput!): [AutomationRfmScore!]!
  createManyBasicCarpetBorders(input: CreateManyBasicCarpetBordersInput!): [BasicCarpetBorder!]!
  createManyBasicCarpetColors(input: CreateManyBasicCarpetColorsInput!): [BasicCarpetColor!]!
  createManyBasicCarpetDesigners(input: CreateManyBasicCarpetDesignersInput!): [BasicCarpetDesigner!]!
  createManyBasicCarpetDesigns(input: CreateManyBasicCarpetDesignsInput!): [BasicCarpetDesign!]!
  createManyBasicCarpetMaterials(input: CreateManyBasicCarpetMaterialsInput!): [BasicCarpetMaterial!]!
  createManyBasicCarpetSizeDetails(input: CreateManyBasicCarpetSizeDetailsInput!): [BasicCarpetSizeDetail!]!
  createManyBasicCarpetSizes(input: CreateManyBasicCarpetSizesInput!): [BasicCarpetSize!]!
  createManyBasicCarpetTypes(input: CreateManyBasicCarpetTypesInput!): [BasicCarpetType!]!
  createManyBorders(input: CreateManyBordersInput!): [Border!]!
  createManyCampaignFreeOfferSizes(input: CreateManyCampaignFreeOfferSizesInput!): [CampaignFreeOfferSize!]!
  createManyCampaignFreeOffers(input: CreateManyCampaignFreeOffersInput!): [CampaignFreeOffer!]!
  createManyCampaignGoldCoinSubs(input: CreateManyCampaignGoldCoinSubsInput!): [CampaignGoldCoinSub!]!
  createManyCampaignInstagramFollows(input: CreateManyCampaignInstagramFollowsInput!): [CampaignInstagramFollow!]!
  createManyCampaignPetForms(input: CreateManyCampaignPetFormsInput!): [CampaignPetForm!]!
  createManyCampaignRoomvoImages(input: CreateManyCampaignRoomvoImagesInput!): [CampaignRoomvoImage!]!
  createManyCampaignRoomvoVotes(input: CreateManyCampaignRoomvoVotesInput!): [CampaignRoomvoVote!]!
  createManyCampaignSubscriptions(input: CreateManyCampaignSubscriptionsInput!): [CampaignSubscription!]!
  createManyCampaignUefaEuroSubscriberHistories(input: CreateManyCampaignUefaEuroSubscriberHistoriesInput!): [CampaignUefaEuroSubscriberHistory!]!
  createManyCampaignUefaEuroSubscribers(input: CreateManyCampaignUefaEuroSubscribersInput!): [CampaignUefaEuroSubscriber!]!
  createManyCampaignVotingImages(input: CreateManyCampaignVotingImagesInput!): [CampaignVotingImage!]!
  createManyCarpetFeatureUsers(input: CreateManyCarpetFeatureUsersInput!): [CarpetFeatureUser!]!
  createManyCarpetFeatures(input: CreateManyCarpetFeaturesInput!): [CarpetFeature!]!
  createManyCarpetMaterials(input: CreateManyCarpetMaterialsInput!): [CarpetMaterial!]!
  createManyCarpetShapes(input: CreateManyCarpetShapesInput!): [CarpetShape!]!
  createManyCarpetSizes(input: CreateManyCarpetSizesInput!): [CarpetSize!]!
  createManyCarpetUsagePlaceInvoiceProducts(input: CreateManyCarpetUsagePlaceInvoiceProductsInput!): [CarpetUsagePlaceInvoiceProduct!]!
  createManyCarpetUsagePlaceUsers(input: CreateManyCarpetUsagePlaceUsersInput!): [CarpetUsagePlaceUser!]!
  createManyCarpetUsagePlaces(input: CreateManyCarpetUsagePlacesInput!): [CarpetUsagePlace!]!
  createManyChaparSettlementStatuses(input: CreateManyChaparSettlementStatusesInput!): [ChaparSettlementStatus!]!
  createManyChaparTrackingHistories(input: CreateManyChaparTrackingHistoriesInput!): [ChaparTrackingHistory!]!
  createManyCities(input: CreateManyCitiesInput!): [City!]!
  createManyCitiesSepidars(input: CreateManyCitiesSepidarsInput!): [CitiesSepidar!]!
  createManyCity2s(input: CreateManyCity2sInput!): [City2!]!
  createManyColorCategories(input: CreateManyColorCategoriesInput!): [ColorCategory!]!
  createManyColorCategoryDetails(input: CreateManyColorCategoryDetailsInput!): [ColorCategoryDetail!]!
  createManyColorCategorySubproducts(input: CreateManyColorCategorySubproductsInput!): [ColorCategorySubproduct!]!
  createManyColors(input: CreateManyColorsInput!): [Color!]!
  createManyConfigs(input: CreateManyConfigsInput!): [Config!]!
  createManyContactFormHistories(input: CreateManyContactFormHistoriesInput!): [ContactFormHistory!]!
  createManyContactFormStatuses(input: CreateManyContactFormStatusesInput!): [ContactFormStatus!]!
  createManyContactForms(input: CreateManyContactFormsInput!): [ContactForm!]!
  createManyCountries(input: CreateManyCountriesInput!): [Country!]!
  createManyCouponSubjects(input: CreateManyCouponSubjectsInput!): [CouponSubject!]!
  createManyCoupons(input: CreateManyCouponsInput!): [Coupon!]!
  createManyCrmPresentations(input: CreateManyCrmPresentationsInput!): [CrmPresentation!]!
  createManyCustomerImageProducts(input: CreateManyCustomerImageProductsInput!): [CustomerImageProduct!]!
  createManyCustomerRequestFiles(input: CreateManyCustomerRequestFilesInput!): [CustomerRequestFile!]!
  createManyCustomerRequests(input: CreateManyCustomerRequestsInput!): [CustomerRequest!]!
  createManyCustomerVideoProducts(input: CreateManyCustomerVideoProductsInput!): [CustomerVideoProduct!]!
  createManyDamageReasons(input: CreateManyDamageReasonsInput!): [DamageReason!]!
  createManyDepartments(input: CreateManyDepartmentsInput!): [Department!]!
  createManyDesignersProductPriceRanges(input: CreateManyDesignersProductPriceRangesInput!): [DesignersProductPriceRange!]!
  createManyDesigns(input: CreateManyDesignsInput!): [Design!]!
  createManyDiscountNotifications(input: CreateManyDiscountNotificationsInput!): [DiscountNotification!]!
  createManyDiscountSubjects(input: CreateManyDiscountSubjectsInput!): [DiscountSubject!]!
  createManyDiscounts(input: CreateManyDiscountsInput!): [Discount!]!
  createManyExitControlItems(input: CreateManyExitControlItemsInput!): [ExitControlItem!]!
  createManyExitControls(input: CreateManyExitControlsInput!): [ExitControl!]!
  createManyExportProducts(input: CreateManyExportProductsInput!): [ExportProduct!]!
  createManyFailedJobs(input: CreateManyFailedJobsInput!): [FailedJob!]!
  createManyFavoriteProducts(input: CreateManyFavoriteProductsInput!): [FavoriteProduct!]!
  createManyFedexAddressValidationAttributes(input: CreateManyFedexAddressValidationAttributesInput!): [FedexAddressValidationAttribute!]!
  createManyFetchSiteUrls(input: CreateManyFetchSiteUrlsInput!): [FetchSiteUrl!]!
  createManyFileNegotiations(input: CreateManyFileNegotiationsInput!): [FileNegotiation!]!
  createManyFiles(input: CreateManyFilesInput!): [File!]!
  createManyGhazals(input: CreateManyGhazalsInput!): [Ghazal!]!
  createManyGoogleFormUtms(input: CreateManyGoogleFormUtmsInput!): [GoogleFormUtm!]!
  createManyHeardAboutUsOptions(input: CreateManyHeardAboutUsOptionsInput!): [HeardAboutUsOption!]!
  createManyHelpDesks(input: CreateManyHelpDesksInput!): [HelpDesk!]!
  createManyHolidays(input: CreateManyHolidaysInput!): [Holiday!]!
  createManyHomePageCustomerImages(input: CreateManyHomePageCustomerImagesInput!): [HomePageCustomerImage!]!
  createManyHypers(input: CreateManyHypersInput!): [Hyper!]!
  createManyHyperstarCodes(input: CreateManyHyperstarCodesInput!): [HyperstarCode!]!
  createManyImageLayers(input: CreateManyImageLayersInput!): [ImageLayer!]!
  createManyImageProducts(input: CreateManyImageProductsInput!): [ImageProduct!]!
  createManyImageSizes(input: CreateManyImageSizesInput!): [ImageSize!]!
  createManyImageSubproducts(input: CreateManyImageSubproductsInput!): [ImageSubproduct!]!
  createManyImages(input: CreateManyImagesInput!): [Image!]!
  createManyImagesSizeGuidesDetails(input: CreateManyImagesSizeGuidesDetailsInput!): [ImagesSizeGuidesDetail!]!
  createManyImpersonateHistories(input: CreateManyImpersonateHistoriesInput!): [ImpersonateHistory!]!
  createManyIncredibleOfferSentNotifications(input: CreateManyIncredibleOfferSentNotificationsInput!): [IncredibleOfferSentNotification!]!
  createManyIncredibleOffers(input: CreateManyIncredibleOffersInput!): [IncredibleOffer!]!
  createManyInstagramFeeds(input: CreateManyInstagramFeedsInput!): [InstagramFeed!]!
  createManyInvitationCodes(input: CreateManyInvitationCodesInput!): [InvitationCode!]!
  createManyInvoiceAddresses(input: CreateManyInvoiceAddressesInput!): [InvoiceAddress!]!
  createManyInvoiceBankGatewayHistories(input: CreateManyInvoiceBankGatewayHistoriesInput!): [InvoiceBankGatewayHistory!]!
  createManyInvoiceHistories(input: CreateManyInvoiceHistoriesInput!): [InvoiceHistory!]!
  createManyInvoiceInvoiceStatuses(input: CreateManyInvoiceInvoiceStatusesInput!): [InvoiceInvoiceStatus!]!
  createManyInvoiceModes(input: CreateManyInvoiceModesInput!): [InvoiceMode!]!
  createManyInvoiceNegotiations(input: CreateManyInvoiceNegotiationsInput!): [InvoiceNegotiation!]!
  createManyInvoicePaymentHistories(input: CreateManyInvoicePaymentHistoriesInput!): [InvoicePaymentHistory!]!
  createManyInvoicePaymentStatuses(input: CreateManyInvoicePaymentStatusesInput!): [InvoicePaymentStatus!]!
  createManyInvoicePaymentTypes(input: CreateManyInvoicePaymentTypesInput!): [InvoicePaymentType!]!
  createManyInvoicePayments(input: CreateManyInvoicePaymentsInput!): [InvoicePayment!]!
  createManyInvoiceProductHistories(input: CreateManyInvoiceProductHistoriesInput!): [InvoiceProductHistory!]!
  createManyInvoiceProductItemInvoiceProductStatuses(input: CreateManyInvoiceProductItemInvoiceProductStatusesInput!): [InvoiceProductItemInvoiceProductStatus!]!
  createManyInvoiceProductItems(input: CreateManyInvoiceProductItemsInput!): [InvoiceProductItem!]!
  createManyInvoiceProductStatuses(input: CreateManyInvoiceProductStatusesInput!): [InvoiceProductStatus!]!
  createManyInvoiceProducts(input: CreateManyInvoiceProductsInput!): [InvoiceProduct!]!
  createManyInvoiceRatesResults(input: CreateManyInvoiceRatesResultsInput!): [InvoiceRatesResult!]!
  createManyInvoiceReversalItems(input: CreateManyInvoiceReversalItemsInput!): [InvoiceReversalItem!]!
  createManyInvoiceReversals(input: CreateManyInvoiceReversalsInput!): [InvoiceReversal!]!
  createManyInvoiceShippingRates(input: CreateManyInvoiceShippingRatesInput!): [InvoiceShippingRate!]!
  createManyInvoiceStatuses(input: CreateManyInvoiceStatusesInput!): [InvoiceStatus!]!
  createManyInvoiceTypes(input: CreateManyInvoiceTypesInput!): [InvoiceType!]!
  createManyInvoices(input: CreateManyInvoicesInput!): [Invoice!]!
  createManyLabelProducts(input: CreateManyLabelProductsInput!): [LabelProduct!]!
  createManyLabels(input: CreateManyLabelsInput!): [Label!]!
  createManyMellatPaymentErrors(input: CreateManyMellatPaymentErrorsInput!): [MellatPaymentError!]!
  createManyMigrations(input: CreateManyMigrationsInput!): [Migration!]!
  createManyModelHasPermissions(input: CreateManyModelHasPermissionsInput!): [ModelHasPermission!]!
  createManyModelHasRoles(input: CreateManyModelHasRolesInput!): [ModelHasRole!]!
  createManyModelVisits(input: CreateManyModelVisitsInput!): [ModelVisit!]!
  createManyModemaAcceleratorImages(input: CreateManyModemaAcceleratorImagesInput!): [ModemaAcceleratorImage!]!
  createManyModemaAcceleratorVideos(input: CreateManyModemaAcceleratorVideosInput!): [ModemaAcceleratorVideo!]!
  createManyModemaAccelerators(input: CreateManyModemaAcceleratorsInput!): [ModemaAccelerator!]!
  createManyNeedsPhotographySubproducts(input: CreateManyNeedsPhotographySubproductsInput!): [NeedsPhotographySubproduct!]!
  createManyNegotiationHistories(input: CreateManyNegotiationHistoriesInput!): [NegotiationHistory!]!
  createManyNegotiationStatuses(input: CreateManyNegotiationStatusesInput!): [NegotiationStatus!]!
  createManyNegotiationTypes(input: CreateManyNegotiationTypesInput!): [NegotiationType!]!
  createManyNegotiations(input: CreateManyNegotiationsInput!): [Negotiation!]!
  createManyNewBorders(input: CreateManyNewBordersInput!): [NewBorder!]!
  createManyOauthAccessTokens(input: CreateManyOauthAccessTokensInput!): [OauthAccessToken!]!
  createManyOauthAuthCodes(input: CreateManyOauthAuthCodesInput!): [OauthAuthCode!]!
  createManyOauthClients(input: CreateManyOauthClientsInput!): [OauthClient!]!
  createManyOauthPersonalAccessClients(input: CreateManyOauthPersonalAccessClientsInput!): [OauthPersonalAccessClient!]!
  createManyOauthRefreshTokens(input: CreateManyOauthRefreshTokensInput!): [OauthRefreshToken!]!
  createManyOutOfStockButListedProducts(input: CreateManyOutOfStockButListedProductsInput!): [OutOfStockButListedProduct!]!
  createManyPasswordResets(input: CreateManyPasswordResetsInput!): [PasswordReset!]!
  createManyPatternCategories(input: CreateManyPatternCategoriesInput!): [PatternCategory!]!
  createManyPatternLayers(input: CreateManyPatternLayersInput!): [PatternLayer!]!
  createManyPatterns(input: CreateManyPatternsInput!): [Pattern!]!
  createManyPaymentMethodFields(input: CreateManyPaymentMethodFieldsInput!): [PaymentMethodField!]!
  createManyPaymentMethods(input: CreateManyPaymentMethodsInput!): [PaymentMethod!]!
  createManyPaymentRequestStatuses(input: CreateManyPaymentRequestStatusesInput!): [PaymentRequestStatus!]!
  createManyPaymentRequests(input: CreateManyPaymentRequestsInput!): [PaymentRequest!]!
  createManyPermissionGroups(input: CreateManyPermissionGroupsInput!): [PermissionGroup!]!
  createManyPermissions(input: CreateManyPermissionsInput!): [Permission!]!
  createManyPreorderRegisters(input: CreateManyPreorderRegistersInput!): [PreorderRegister!]!
  createManyPreorderStatuses(input: CreateManyPreorderStatusesInput!): [PreorderStatus!]!
  createManyPreorders(input: CreateManyPreordersInput!): [Preorder!]!
  createManyPriceGroupSizes(input: CreateManyPriceGroupSizesInput!): [PriceGroupSize!]!
  createManyPriceGroups(input: CreateManyPriceGroupsInput!): [PriceGroup!]!
  createManyPrintProfiles(input: CreateManyPrintProfilesInput!): [PrintProfile!]!
  createManyProductCategoryDetails(input: CreateManyProductCategoryDetailsInput!): [ProductCategoryDetail!]!
  createManyProductCategoryRates(input: CreateManyProductCategoryRatesInput!): [ProductCategoryRate!]!
  createManyProductColorImages(input: CreateManyProductColorImagesInput!): [ProductColorImage!]!
  createManyProductColorSales(input: CreateManyProductColorSalesInput!): [ProductColorSale!]!
  createManyProductCommentLikes(input: CreateManyProductCommentLikesInput!): [ProductCommentLike!]!
  createManyProductComments(input: CreateManyProductCommentsInput!): [ProductComment!]!
  createManyProductLikes(input: CreateManyProductLikesInput!): [ProductLike!]!
  createManyProducts(input: CreateManyProductsInput!): [Product!]!
  createManyUsers(input: CreateManyUsersInput!): [User!]!
  createMellatPaymentError(createMellatPaymentErrorInput: CreateMellatPaymentErrorInput!): MellatPaymentError!
  createMigration(createMigrationInput: CreateMigrationInput!): Migration!
  createModelHasPermission(createModelHasPermissionInput: CreateModelHasPermissionInput!): ModelHasPermission!
  createModelHasRole(createModelHasRoleInput: CreateModelHasRoleInput!): ModelHasRole!
  createModelVisit(createModelVisitInput: CreateModelVisitInput!): ModelVisit!
  createModemaAccelerator(createModemaAcceleratorInput: CreateModemaAcceleratorInput!): ModemaAccelerator!
  createModemaAcceleratorImage(createModemaAcceleratorImageInput: CreateModemaAcceleratorImageInput!): ModemaAcceleratorImage!
  createModemaAcceleratorVideo(createModemaAcceleratorVideoInput: CreateModemaAcceleratorVideoInput!): ModemaAcceleratorVideo!
  createNeedsPhotographySubproduct(createNeedsPhotographySubproductInput: CreateNeedsPhotographySubproductInput!): NeedsPhotographySubproduct!
  createNegotiation(createNegotiationInput: CreateNegotiationInput!): Negotiation!
  createNegotiationHistory(createNegotiationHistoryInput: CreateNegotiationHistoryInput!): NegotiationHistory!
  createNegotiationStatus(createNegotiationStatusInput: CreateNegotiationStatusInput!): NegotiationStatus!
  createNegotiationType(createNegotiationTypeInput: CreateNegotiationTypeInput!): NegotiationType!
  createNewBorder(createNewBorderInput: CreateNewBorderInput!): NewBorder!
  createOauthAccessToken(createOauthAccessTokenInput: CreateOauthAccessTokenInput!): OauthAccessToken!
  createOauthAuthCode(createOauthAuthCodeInput: CreateOauthAuthCodeInput!): OauthAuthCode!
  createOauthClient(createOauthClientInput: CreateOauthClientInput!): OauthClient!
  createOauthPersonalAccessClient(createOauthPersonalAccessClientInput: CreateOauthPersonalAccessClientInput!): OauthPersonalAccessClient!
  createOauthRefreshToken(createOauthRefreshTokenInput: CreateOauthRefreshTokenInput!): OauthRefreshToken!
  createOneActivity(input: CreateOneActivityInput!): Activity!
  createOneAddress(input: CreateOneAddressInput!): Address!
  createOneAutomationEvent(input: CreateOneAutomationEventInput!): AutomationEvent!
  createOneAutomationRfmScore(input: CreateOneAutomationRfmScoreInput!): AutomationRfmScore!
  createOneBasicCarpetBorder(input: CreateOneBasicCarpetBorderInput!): BasicCarpetBorder!
  createOneBasicCarpetColor(input: CreateOneBasicCarpetColorInput!): BasicCarpetColor!
  createOneBasicCarpetDesign(input: CreateOneBasicCarpetDesignInput!): BasicCarpetDesign!
  createOneBasicCarpetDesigner(input: CreateOneBasicCarpetDesignerInput!): BasicCarpetDesigner!
  createOneBasicCarpetMaterial(input: CreateOneBasicCarpetMaterialInput!): BasicCarpetMaterial!
  createOneBasicCarpetSize(input: CreateOneBasicCarpetSizeInput!): BasicCarpetSize!
  createOneBasicCarpetSizeDetail(input: CreateOneBasicCarpetSizeDetailInput!): BasicCarpetSizeDetail!
  createOneBasicCarpetType(input: CreateOneBasicCarpetTypeInput!): BasicCarpetType!
  createOneBorder(input: CreateOneBorderInput!): Border!
  createOneCampaignFreeOffer(input: CreateOneCampaignFreeOfferInput!): CampaignFreeOffer!
  createOneCampaignFreeOfferSize(input: CreateOneCampaignFreeOfferSizeInput!): CampaignFreeOfferSize!
  createOneCampaignGoldCoinSub(input: CreateOneCampaignGoldCoinSubInput!): CampaignGoldCoinSub!
  createOneCampaignInstagramFollow(input: CreateOneCampaignInstagramFollowInput!): CampaignInstagramFollow!
  createOneCampaignPetForm(input: CreateOneCampaignPetFormInput!): CampaignPetForm!
  createOneCampaignRoomvoImage(input: CreateOneCampaignRoomvoImageInput!): CampaignRoomvoImage!
  createOneCampaignRoomvoVote(input: CreateOneCampaignRoomvoVoteInput!): CampaignRoomvoVote!
  createOneCampaignSubscription(input: CreateOneCampaignSubscriptionInput!): CampaignSubscription!
  createOneCampaignUefaEuroSubscriber(input: CreateOneCampaignUefaEuroSubscriberInput!): CampaignUefaEuroSubscriber!
  createOneCampaignUefaEuroSubscriberHistory(input: CreateOneCampaignUefaEuroSubscriberHistoryInput!): CampaignUefaEuroSubscriberHistory!
  createOneCampaignVotingImage(input: CreateOneCampaignVotingImageInput!): CampaignVotingImage!
  createOneCarpetFeature(input: CreateOneCarpetFeatureInput!): CarpetFeature!
  createOneCarpetFeatureUser(input: CreateOneCarpetFeatureUserInput!): CarpetFeatureUser!
  createOneCarpetMaterial(input: CreateOneCarpetMaterialInput!): CarpetMaterial!
  createOneCarpetShape(input: CreateOneCarpetShapeInput!): CarpetShape!
  createOneCarpetSize(input: CreateOneCarpetSizeInput!): CarpetSize!
  createOneCarpetUsagePlace(input: CreateOneCarpetUsagePlaceInput!): CarpetUsagePlace!
  createOneCarpetUsagePlaceInvoiceProduct(input: CreateOneCarpetUsagePlaceInvoiceProductInput!): CarpetUsagePlaceInvoiceProduct!
  createOneCarpetUsagePlaceUser(input: CreateOneCarpetUsagePlaceUserInput!): CarpetUsagePlaceUser!
  createOneChaparSettlementStatus(input: CreateOneChaparSettlementStatusInput!): ChaparSettlementStatus!
  createOneChaparTrackingHistory(input: CreateOneChaparTrackingHistoryInput!): ChaparTrackingHistory!
  createOneCitiesSepidar(input: CreateOneCitiesSepidarInput!): CitiesSepidar!
  createOneCity(input: CreateOneCityInput!): City!
  createOneCity2(input: CreateOneCity2Input!): City2!
  createOneColor(input: CreateOneColorInput!): Color!
  createOneColorCategory(input: CreateOneColorCategoryInput!): ColorCategory!
  createOneColorCategoryDetail(input: CreateOneColorCategoryDetailInput!): ColorCategoryDetail!
  createOneColorCategorySubproduct(input: CreateOneColorCategorySubproductInput!): ColorCategorySubproduct!
  createOneConfig(input: CreateOneConfigInput!): Config!
  createOneContactForm(input: CreateOneContactFormInput!): ContactForm!
  createOneContactFormHistory(input: CreateOneContactFormHistoryInput!): ContactFormHistory!
  createOneContactFormStatus(input: CreateOneContactFormStatusInput!): ContactFormStatus!
  createOneCountry(input: CreateOneCountryInput!): Country!
  createOneCoupon(input: CreateOneCouponInput!): Coupon!
  createOneCouponSubject(input: CreateOneCouponSubjectInput!): CouponSubject!
  createOneCrmPresentation(input: CreateOneCrmPresentationInput!): CrmPresentation!
  createOneCustomerImageProduct(input: CreateOneCustomerImageProductInput!): CustomerImageProduct!
  createOneCustomerRequest(input: CreateOneCustomerRequestInput!): CustomerRequest!
  createOneCustomerRequestFile(input: CreateOneCustomerRequestFileInput!): CustomerRequestFile!
  createOneCustomerVideoProduct(input: CreateOneCustomerVideoProductInput!): CustomerVideoProduct!
  createOneDamageReason(input: CreateOneDamageReasonInput!): DamageReason!
  createOneDepartment(input: CreateOneDepartmentInput!): Department!
  createOneDesign(input: CreateOneDesignInput!): Design!
  createOneDesignersProductPriceRange(input: CreateOneDesignersProductPriceRangeInput!): DesignersProductPriceRange!
  createOneDiscount(input: CreateOneDiscountInput!): Discount!
  createOneDiscountNotification(input: CreateOneDiscountNotificationInput!): DiscountNotification!
  createOneDiscountSubject(input: CreateOneDiscountSubjectInput!): DiscountSubject!
  createOneExitControl(input: CreateOneExitControlInput!): ExitControl!
  createOneExitControlItem(input: CreateOneExitControlItemInput!): ExitControlItem!
  createOneExportProduct(input: CreateOneExportProductInput!): ExportProduct!
  createOneFailedJob(input: CreateOneFailedJobInput!): FailedJob!
  createOneFavoriteProduct(input: CreateOneFavoriteProductInput!): FavoriteProduct!
  createOneFedexAddressValidationAttribute(input: CreateOneFedexAddressValidationAttributeInput!): FedexAddressValidationAttribute!
  createOneFetchSiteUrl(input: CreateOneFetchSiteUrlInput!): FetchSiteUrl!
  createOneFile(input: CreateOneFileInput!): File!
  createOneFileNegotiation(input: CreateOneFileNegotiationInput!): FileNegotiation!
  createOneGhazal(input: CreateOneGhazalInput!): Ghazal!
  createOneGoogleFormUtm(input: CreateOneGoogleFormUtmInput!): GoogleFormUtm!
  createOneHeardAboutUsOption(input: CreateOneHeardAboutUsOptionInput!): HeardAboutUsOption!
  createOneHelpDesk(input: CreateOneHelpDeskInput!): HelpDesk!
  createOneHoliday(input: CreateOneHolidayInput!): Holiday!
  createOneHomePageCustomerImage(input: CreateOneHomePageCustomerImageInput!): HomePageCustomerImage!
  createOneHyper(input: CreateOneHyperInput!): Hyper!
  createOneHyperstarCode(input: CreateOneHyperstarCodeInput!): HyperstarCode!
  createOneImage(input: CreateOneImageInput!): Image!
  createOneImageLayer(input: CreateOneImageLayerInput!): ImageLayer!
  createOneImageProduct(input: CreateOneImageProductInput!): ImageProduct!
  createOneImageSize(input: CreateOneImageSizeInput!): ImageSize!
  createOneImageSubproduct(input: CreateOneImageSubproductInput!): ImageSubproduct!
  createOneImagesSizeGuidesDetail(input: CreateOneImagesSizeGuidesDetailInput!): ImagesSizeGuidesDetail!
  createOneImpersonateHistory(input: CreateOneImpersonateHistoryInput!): ImpersonateHistory!
  createOneIncredibleOffer(input: CreateOneIncredibleOfferInput!): IncredibleOffer!
  createOneIncredibleOfferSentNotification(input: CreateOneIncredibleOfferSentNotificationInput!): IncredibleOfferSentNotification!
  createOneInstagramFeed(input: CreateOneInstagramFeedInput!): InstagramFeed!
  createOneInvitationCode(input: CreateOneInvitationCodeInput!): InvitationCode!
  createOneInvoice(input: CreateOneInvoiceInput!): Invoice!
  createOneInvoiceAddress(input: CreateOneInvoiceAddressInput!): InvoiceAddress!
  createOneInvoiceBankGatewayHistory(input: CreateOneInvoiceBankGatewayHistoryInput!): InvoiceBankGatewayHistory!
  createOneInvoiceHistory(input: CreateOneInvoiceHistoryInput!): InvoiceHistory!
  createOneInvoiceInvoiceStatus(input: CreateOneInvoiceInvoiceStatusInput!): InvoiceInvoiceStatus!
  createOneInvoiceMode(input: CreateOneInvoiceModeInput!): InvoiceMode!
  createOneInvoiceNegotiation(input: CreateOneInvoiceNegotiationInput!): InvoiceNegotiation!
  createOneInvoicePayment(input: CreateOneInvoicePaymentInput!): InvoicePayment!
  createOneInvoicePaymentHistory(input: CreateOneInvoicePaymentHistoryInput!): InvoicePaymentHistory!
  createOneInvoicePaymentStatus(input: CreateOneInvoicePaymentStatusInput!): InvoicePaymentStatus!
  createOneInvoicePaymentType(input: CreateOneInvoicePaymentTypeInput!): InvoicePaymentType!
  createOneInvoiceProduct(input: CreateOneInvoiceProductInput!): InvoiceProduct!
  createOneInvoiceProductHistory(input: CreateOneInvoiceProductHistoryInput!): InvoiceProductHistory!
  createOneInvoiceProductItem(input: CreateOneInvoiceProductItemInput!): InvoiceProductItem!
  createOneInvoiceProductItemInvoiceProductStatus(input: CreateOneInvoiceProductItemInvoiceProductStatusInput!): InvoiceProductItemInvoiceProductStatus!
  createOneInvoiceProductStatus(input: CreateOneInvoiceProductStatusInput!): InvoiceProductStatus!
  createOneInvoiceRatesResult(input: CreateOneInvoiceRatesResultInput!): InvoiceRatesResult!
  createOneInvoiceReversal(input: CreateOneInvoiceReversalInput!): InvoiceReversal!
  createOneInvoiceReversalItem(input: CreateOneInvoiceReversalItemInput!): InvoiceReversalItem!
  createOneInvoiceShippingRate(input: CreateOneInvoiceShippingRateInput!): InvoiceShippingRate!
  createOneInvoiceStatus(input: CreateOneInvoiceStatusInput!): InvoiceStatus!
  createOneInvoiceType(input: CreateOneInvoiceTypeInput!): InvoiceType!
  createOneLabel(input: CreateOneLabelInput!): Label!
  createOneLabelProduct(input: CreateOneLabelProductInput!): LabelProduct!
  createOneMellatPaymentError(input: CreateOneMellatPaymentErrorInput!): MellatPaymentError!
  createOneMigration(input: CreateOneMigrationInput!): Migration!
  createOneModelHasPermission(input: CreateOneModelHasPermissionInput!): ModelHasPermission!
  createOneModelHasRole(input: CreateOneModelHasRoleInput!): ModelHasRole!
  createOneModelVisit(input: CreateOneModelVisitInput!): ModelVisit!
  createOneModemaAccelerator(input: CreateOneModemaAcceleratorInput!): ModemaAccelerator!
  createOneModemaAcceleratorImage(input: CreateOneModemaAcceleratorImageInput!): ModemaAcceleratorImage!
  createOneModemaAcceleratorVideo(input: CreateOneModemaAcceleratorVideoInput!): ModemaAcceleratorVideo!
  createOneNeedsPhotographySubproduct(input: CreateOneNeedsPhotographySubproductInput!): NeedsPhotographySubproduct!
  createOneNegotiation(input: CreateOneNegotiationInput!): Negotiation!
  createOneNegotiationHistory(input: CreateOneNegotiationHistoryInput!): NegotiationHistory!
  createOneNegotiationStatus(input: CreateOneNegotiationStatusInput!): NegotiationStatus!
  createOneNegotiationType(input: CreateOneNegotiationTypeInput!): NegotiationType!
  createOneNewBorder(input: CreateOneNewBorderInput!): NewBorder!
  createOneOauthAccessToken(input: CreateOneOauthAccessTokenInput!): OauthAccessToken!
  createOneOauthAuthCode(input: CreateOneOauthAuthCodeInput!): OauthAuthCode!
  createOneOauthClient(input: CreateOneOauthClientInput!): OauthClient!
  createOneOauthPersonalAccessClient(input: CreateOneOauthPersonalAccessClientInput!): OauthPersonalAccessClient!
  createOneOauthRefreshToken(input: CreateOneOauthRefreshTokenInput!): OauthRefreshToken!
  createOneOutOfStockButListedProduct(input: CreateOneOutOfStockButListedProductInput!): OutOfStockButListedProduct!
  createOnePasswordReset(input: CreateOnePasswordResetInput!): PasswordReset!
  createOnePattern(input: CreateOnePatternInput!): Pattern!
  createOnePatternCategory(input: CreateOnePatternCategoryInput!): PatternCategory!
  createOnePatternLayer(input: CreateOnePatternLayerInput!): PatternLayer!
  createOnePaymentMethod(input: CreateOnePaymentMethodInput!): PaymentMethod!
  createOnePaymentMethodField(input: CreateOnePaymentMethodFieldInput!): PaymentMethodField!
  createOnePaymentRequest(input: CreateOnePaymentRequestInput!): PaymentRequest!
  createOnePaymentRequestStatus(input: CreateOnePaymentRequestStatusInput!): PaymentRequestStatus!
  createOnePermission(input: CreateOnePermissionInput!): Permission!
  createOnePermissionGroup(input: CreateOnePermissionGroupInput!): PermissionGroup!
  createOnePreorder(input: CreateOnePreorderInput!): Preorder!
  createOnePreorderRegister(input: CreateOnePreorderRegisterInput!): PreorderRegister!
  createOnePreorderStatus(input: CreateOnePreorderStatusInput!): PreorderStatus!
  createOnePriceGroup(input: CreateOnePriceGroupInput!): PriceGroup!
  createOnePriceGroupSize(input: CreateOnePriceGroupSizeInput!): PriceGroupSize!
  createOnePrintProfile(input: CreateOnePrintProfileInput!): PrintProfile!
  createOneProduct(input: CreateOneProductInput!): Product!
  createOneProductCategoryDetail(input: CreateOneProductCategoryDetailInput!): ProductCategoryDetail!
  createOneProductCategoryRate(input: CreateOneProductCategoryRateInput!): ProductCategoryRate!
  createOneProductColorImage(input: CreateOneProductColorImageInput!): ProductColorImage!
  createOneProductColorSale(input: CreateOneProductColorSaleInput!): ProductColorSale!
  createOneProductComment(input: CreateOneProductCommentInput!): ProductComment!
  createOneProductCommentLike(input: CreateOneProductCommentLikeInput!): ProductCommentLike!
  createOneProductLike(input: CreateOneProductLikeInput!): ProductLike!
  createOneUser(input: CreateOneUserInput!): User!
  createOutOfStockButListedProduct(createOutOfStockButListedProductInput: CreateOutOfStockButListedProductInput!): OutOfStockButListedProduct!
  createPasswordReset(createPasswordResetInput: CreatePasswordResetInput!): PasswordReset!
  createPattern(createPatternInput: CreatePatternInput!): Pattern!
  createPatternCategory(createPatternCategoryInput: CreatePatternCategoryInput!): PatternCategory!
  createPatternLayer(createPatternLayerInput: CreatePatternLayerInput!): PatternLayer!
  createPaymentMethod(createPaymentMethodInput: CreatePaymentMethodInput!): PaymentMethod!
  createPaymentMethodField(createPaymentMethodFieldInput: CreatePaymentMethodFieldInput!): PaymentMethodField!
  createPaymentRequest(createPaymentRequestInput: CreatePaymentRequestInput!): PaymentRequest!
  createPaymentRequestStatus(createPaymentRequestStatusInput: CreatePaymentRequestStatusInput!): PaymentRequestStatus!
  createPermission(createPermissionInput: CreatePermissionInput!): Permission!
  createPermissionGroup(createPermissionGroupInput: CreatePermissionGroupInput!): PermissionGroup!
  createPreorderPreorderStatus(createPreorderPreorderStatusInput: CreatePreorderPreorderStatusInput!): PreorderPreorderStatus!
  createPreorderRegister(createPreorderRegisterInput: CreatePreorderRegisterInput!): PreorderRegister!
  createPreorderStatus(createPreorderStatusInput: CreatePreorderStatusInput!): PreorderStatus!
  createPriceGroup(createPriceGroupInput: CreatePriceGroupInput!): PriceGroup!
  createPriceGroupSize(createPriceGroupSizeInput: CreatePriceGroupSizeInput!): PriceGroupSize!
  createPrintProfile(createPrintProfileInput: CreatePrintProfileInput!): PrintProfile!
  createProduct(createProductInput: CreateProductInput!): Product!
  createProductCategoryDetail(createProductCategoryDetailInput: CreateProductCategoryDetailInput!): ProductCategoryDetail!
  createProductCategoryRate(createProductCategoryRateInput: CreateProductCategoryRateInput!): ProductCategoryRate!
  createProductColorImage(createProductColorImageInput: CreateProductColorImageInput!): ProductColorImage!
  createProductColorSale(createProductColorSaleInput: CreateProductColorSaleInput!): ProductColorSale!
  createProductComment(createProductCommentInput: CreateProductCommentInput!): ProductComment!
  createProductCommentLike(createProductCommentLikeInput: CreateProductCommentLikeInput!): ProductCommentLike!
  createProductLike(createProductLikeInput: CreateProductLikeInput!): ProductLike!
  createUser(createUserInput: CreateUserInput!): User!
  deleteManyActivities(input: DeleteManyActivitiesInput!): DeleteManyResponse!
  deleteManyAddresses(input: DeleteManyAddressesInput!): DeleteManyResponse!
  deleteManyAutomationEvents(input: DeleteManyAutomationEventsInput!): DeleteManyResponse!
  deleteManyAutomationRfmScores(input: DeleteManyAutomationRfmScoresInput!): DeleteManyResponse!
  deleteManyBasicCarpetBorders(input: DeleteManyBasicCarpetBordersInput!): DeleteManyResponse!
  deleteManyBasicCarpetColors(input: DeleteManyBasicCarpetColorsInput!): DeleteManyResponse!
  deleteManyBasicCarpetDesigners(input: DeleteManyBasicCarpetDesignersInput!): DeleteManyResponse!
  deleteManyBasicCarpetDesigns(input: DeleteManyBasicCarpetDesignsInput!): DeleteManyResponse!
  deleteManyBasicCarpetMaterials(input: DeleteManyBasicCarpetMaterialsInput!): DeleteManyResponse!
  deleteManyBasicCarpetSizeDetails(input: DeleteManyBasicCarpetSizeDetailsInput!): DeleteManyResponse!
  deleteManyBasicCarpetSizes(input: DeleteManyBasicCarpetSizesInput!): DeleteManyResponse!
  deleteManyBasicCarpetTypes(input: DeleteManyBasicCarpetTypesInput!): DeleteManyResponse!
  deleteManyBorders(input: DeleteManyBordersInput!): DeleteManyResponse!
  deleteManyCampaignFreeOfferSizes(input: DeleteManyCampaignFreeOfferSizesInput!): DeleteManyResponse!
  deleteManyCampaignFreeOffers(input: DeleteManyCampaignFreeOffersInput!): DeleteManyResponse!
  deleteManyCampaignGoldCoinSubs(input: DeleteManyCampaignGoldCoinSubsInput!): DeleteManyResponse!
  deleteManyCampaignInstagramFollows(input: DeleteManyCampaignInstagramFollowsInput!): DeleteManyResponse!
  deleteManyCampaignPetForms(input: DeleteManyCampaignPetFormsInput!): DeleteManyResponse!
  deleteManyCampaignRoomvoImages(input: DeleteManyCampaignRoomvoImagesInput!): DeleteManyResponse!
  deleteManyCampaignRoomvoVotes(input: DeleteManyCampaignRoomvoVotesInput!): DeleteManyResponse!
  deleteManyCampaignSubscriptions(input: DeleteManyCampaignSubscriptionsInput!): DeleteManyResponse!
  deleteManyCampaignUefaEuroSubscriberHistories(input: DeleteManyCampaignUefaEuroSubscriberHistoriesInput!): DeleteManyResponse!
  deleteManyCampaignUefaEuroSubscribers(input: DeleteManyCampaignUefaEuroSubscribersInput!): DeleteManyResponse!
  deleteManyCampaignVotingImages(input: DeleteManyCampaignVotingImagesInput!): DeleteManyResponse!
  deleteManyCarpetFeatureUsers(input: DeleteManyCarpetFeatureUsersInput!): DeleteManyResponse!
  deleteManyCarpetFeatures(input: DeleteManyCarpetFeaturesInput!): DeleteManyResponse!
  deleteManyCarpetMaterials(input: DeleteManyCarpetMaterialsInput!): DeleteManyResponse!
  deleteManyCarpetShapes(input: DeleteManyCarpetShapesInput!): DeleteManyResponse!
  deleteManyCarpetSizes(input: DeleteManyCarpetSizesInput!): DeleteManyResponse!
  deleteManyCarpetUsagePlaceInvoiceProducts(input: DeleteManyCarpetUsagePlaceInvoiceProductsInput!): DeleteManyResponse!
  deleteManyCarpetUsagePlaceUsers(input: DeleteManyCarpetUsagePlaceUsersInput!): DeleteManyResponse!
  deleteManyCarpetUsagePlaces(input: DeleteManyCarpetUsagePlacesInput!): DeleteManyResponse!
  deleteManyChaparSettlementStatuses(input: DeleteManyChaparSettlementStatusesInput!): DeleteManyResponse!
  deleteManyChaparTrackingHistories(input: DeleteManyChaparTrackingHistoriesInput!): DeleteManyResponse!
  deleteManyCities(input: DeleteManyCitiesInput!): DeleteManyResponse!
  deleteManyCitiesSepidars(input: DeleteManyCitiesSepidarsInput!): DeleteManyResponse!
  deleteManyCity2s(input: DeleteManyCity2sInput!): DeleteManyResponse!
  deleteManyColorCategories(input: DeleteManyColorCategoriesInput!): DeleteManyResponse!
  deleteManyColorCategoryDetails(input: DeleteManyColorCategoryDetailsInput!): DeleteManyResponse!
  deleteManyColorCategorySubproducts(input: DeleteManyColorCategorySubproductsInput!): DeleteManyResponse!
  deleteManyColors(input: DeleteManyColorsInput!): DeleteManyResponse!
  deleteManyConfigs(input: DeleteManyConfigsInput!): DeleteManyResponse!
  deleteManyContactFormHistories(input: DeleteManyContactFormHistoriesInput!): DeleteManyResponse!
  deleteManyContactFormStatuses(input: DeleteManyContactFormStatusesInput!): DeleteManyResponse!
  deleteManyContactForms(input: DeleteManyContactFormsInput!): DeleteManyResponse!
  deleteManyCountries(input: DeleteManyCountriesInput!): DeleteManyResponse!
  deleteManyCouponSubjects(input: DeleteManyCouponSubjectsInput!): DeleteManyResponse!
  deleteManyCoupons(input: DeleteManyCouponsInput!): DeleteManyResponse!
  deleteManyCrmPresentations(input: DeleteManyCrmPresentationsInput!): DeleteManyResponse!
  deleteManyCustomerImageProducts(input: DeleteManyCustomerImageProductsInput!): DeleteManyResponse!
  deleteManyCustomerRequestFiles(input: DeleteManyCustomerRequestFilesInput!): DeleteManyResponse!
  deleteManyCustomerRequests(input: DeleteManyCustomerRequestsInput!): DeleteManyResponse!
  deleteManyCustomerVideoProducts(input: DeleteManyCustomerVideoProductsInput!): DeleteManyResponse!
  deleteManyDamageReasons(input: DeleteManyDamageReasonsInput!): DeleteManyResponse!
  deleteManyDepartments(input: DeleteManyDepartmentsInput!): DeleteManyResponse!
  deleteManyDesignersProductPriceRanges(input: DeleteManyDesignersProductPriceRangesInput!): DeleteManyResponse!
  deleteManyDesigns(input: DeleteManyDesignsInput!): DeleteManyResponse!
  deleteManyDiscountNotifications(input: DeleteManyDiscountNotificationsInput!): DeleteManyResponse!
  deleteManyDiscountSubjects(input: DeleteManyDiscountSubjectsInput!): DeleteManyResponse!
  deleteManyDiscounts(input: DeleteManyDiscountsInput!): DeleteManyResponse!
  deleteManyExitControlItems(input: DeleteManyExitControlItemsInput!): DeleteManyResponse!
  deleteManyExitControls(input: DeleteManyExitControlsInput!): DeleteManyResponse!
  deleteManyExportProducts(input: DeleteManyExportProductsInput!): DeleteManyResponse!
  deleteManyFailedJobs(input: DeleteManyFailedJobsInput!): DeleteManyResponse!
  deleteManyFavoriteProducts(input: DeleteManyFavoriteProductsInput!): DeleteManyResponse!
  deleteManyFedexAddressValidationAttributes(input: DeleteManyFedexAddressValidationAttributesInput!): DeleteManyResponse!
  deleteManyFetchSiteUrls(input: DeleteManyFetchSiteUrlsInput!): DeleteManyResponse!
  deleteManyFileNegotiations(input: DeleteManyFileNegotiationsInput!): DeleteManyResponse!
  deleteManyFiles(input: DeleteManyFilesInput!): DeleteManyResponse!
  deleteManyGhazals(input: DeleteManyGhazalsInput!): DeleteManyResponse!
  deleteManyGoogleFormUtms(input: DeleteManyGoogleFormUtmsInput!): DeleteManyResponse!
  deleteManyHeardAboutUsOptions(input: DeleteManyHeardAboutUsOptionsInput!): DeleteManyResponse!
  deleteManyHelpDesks(input: DeleteManyHelpDesksInput!): DeleteManyResponse!
  deleteManyHolidays(input: DeleteManyHolidaysInput!): DeleteManyResponse!
  deleteManyHomePageCustomerImages(input: DeleteManyHomePageCustomerImagesInput!): DeleteManyResponse!
  deleteManyHypers(input: DeleteManyHypersInput!): DeleteManyResponse!
  deleteManyHyperstarCodes(input: DeleteManyHyperstarCodesInput!): DeleteManyResponse!
  deleteManyImageLayers(input: DeleteManyImageLayersInput!): DeleteManyResponse!
  deleteManyImageProducts(input: DeleteManyImageProductsInput!): DeleteManyResponse!
  deleteManyImageSizes(input: DeleteManyImageSizesInput!): DeleteManyResponse!
  deleteManyImageSubproducts(input: DeleteManyImageSubproductsInput!): DeleteManyResponse!
  deleteManyImages(input: DeleteManyImagesInput!): DeleteManyResponse!
  deleteManyImagesSizeGuidesDetails(input: DeleteManyImagesSizeGuidesDetailsInput!): DeleteManyResponse!
  deleteManyImpersonateHistories(input: DeleteManyImpersonateHistoriesInput!): DeleteManyResponse!
  deleteManyIncredibleOfferSentNotifications(input: DeleteManyIncredibleOfferSentNotificationsInput!): DeleteManyResponse!
  deleteManyIncredibleOffers(input: DeleteManyIncredibleOffersInput!): DeleteManyResponse!
  deleteManyInstagramFeeds(input: DeleteManyInstagramFeedsInput!): DeleteManyResponse!
  deleteManyInvitationCodes(input: DeleteManyInvitationCodesInput!): DeleteManyResponse!
  deleteManyInvoiceAddresses(input: DeleteManyInvoiceAddressesInput!): DeleteManyResponse!
  deleteManyInvoiceBankGatewayHistories(input: DeleteManyInvoiceBankGatewayHistoriesInput!): DeleteManyResponse!
  deleteManyInvoiceHistories(input: DeleteManyInvoiceHistoriesInput!): DeleteManyResponse!
  deleteManyInvoiceInvoiceStatuses(input: DeleteManyInvoiceInvoiceStatusesInput!): DeleteManyResponse!
  deleteManyInvoiceModes(input: DeleteManyInvoiceModesInput!): DeleteManyResponse!
  deleteManyInvoiceNegotiations(input: DeleteManyInvoiceNegotiationsInput!): DeleteManyResponse!
  deleteManyInvoicePaymentHistories(input: DeleteManyInvoicePaymentHistoriesInput!): DeleteManyResponse!
  deleteManyInvoicePaymentStatuses(input: DeleteManyInvoicePaymentStatusesInput!): DeleteManyResponse!
  deleteManyInvoicePaymentTypes(input: DeleteManyInvoicePaymentTypesInput!): DeleteManyResponse!
  deleteManyInvoicePayments(input: DeleteManyInvoicePaymentsInput!): DeleteManyResponse!
  deleteManyInvoiceProductHistories(input: DeleteManyInvoiceProductHistoriesInput!): DeleteManyResponse!
  deleteManyInvoiceProductItemInvoiceProductStatuses(input: DeleteManyInvoiceProductItemInvoiceProductStatusesInput!): DeleteManyResponse!
  deleteManyInvoiceProductItems(input: DeleteManyInvoiceProductItemsInput!): DeleteManyResponse!
  deleteManyInvoiceProductStatuses(input: DeleteManyInvoiceProductStatusesInput!): DeleteManyResponse!
  deleteManyInvoiceProducts(input: DeleteManyInvoiceProductsInput!): DeleteManyResponse!
  deleteManyInvoiceRatesResults(input: DeleteManyInvoiceRatesResultsInput!): DeleteManyResponse!
  deleteManyInvoiceReversalItems(input: DeleteManyInvoiceReversalItemsInput!): DeleteManyResponse!
  deleteManyInvoiceReversals(input: DeleteManyInvoiceReversalsInput!): DeleteManyResponse!
  deleteManyInvoiceShippingRates(input: DeleteManyInvoiceShippingRatesInput!): DeleteManyResponse!
  deleteManyInvoiceStatuses(input: DeleteManyInvoiceStatusesInput!): DeleteManyResponse!
  deleteManyInvoiceTypes(input: DeleteManyInvoiceTypesInput!): DeleteManyResponse!
  deleteManyInvoices(input: DeleteManyInvoicesInput!): DeleteManyResponse!
  deleteManyLabelProducts(input: DeleteManyLabelProductsInput!): DeleteManyResponse!
  deleteManyLabels(input: DeleteManyLabelsInput!): DeleteManyResponse!
  deleteManyMellatPaymentErrors(input: DeleteManyMellatPaymentErrorsInput!): DeleteManyResponse!
  deleteManyMigrations(input: DeleteManyMigrationsInput!): DeleteManyResponse!
  deleteManyModelHasPermissions(input: DeleteManyModelHasPermissionsInput!): DeleteManyResponse!
  deleteManyModelHasRoles(input: DeleteManyModelHasRolesInput!): DeleteManyResponse!
  deleteManyModelVisits(input: DeleteManyModelVisitsInput!): DeleteManyResponse!
  deleteManyModemaAcceleratorImages(input: DeleteManyModemaAcceleratorImagesInput!): DeleteManyResponse!
  deleteManyModemaAcceleratorVideos(input: DeleteManyModemaAcceleratorVideosInput!): DeleteManyResponse!
  deleteManyModemaAccelerators(input: DeleteManyModemaAcceleratorsInput!): DeleteManyResponse!
  deleteManyNeedsPhotographySubproducts(input: DeleteManyNeedsPhotographySubproductsInput!): DeleteManyResponse!
  deleteManyNegotiationHistories(input: DeleteManyNegotiationHistoriesInput!): DeleteManyResponse!
  deleteManyNegotiationStatuses(input: DeleteManyNegotiationStatusesInput!): DeleteManyResponse!
  deleteManyNegotiationTypes(input: DeleteManyNegotiationTypesInput!): DeleteManyResponse!
  deleteManyNegotiations(input: DeleteManyNegotiationsInput!): DeleteManyResponse!
  deleteManyNewBorders(input: DeleteManyNewBordersInput!): DeleteManyResponse!
  deleteManyOauthAccessTokens(input: DeleteManyOauthAccessTokensInput!): DeleteManyResponse!
  deleteManyOauthAuthCodes(input: DeleteManyOauthAuthCodesInput!): DeleteManyResponse!
  deleteManyOauthClients(input: DeleteManyOauthClientsInput!): DeleteManyResponse!
  deleteManyOauthPersonalAccessClients(input: DeleteManyOauthPersonalAccessClientsInput!): DeleteManyResponse!
  deleteManyOauthRefreshTokens(input: DeleteManyOauthRefreshTokensInput!): DeleteManyResponse!
  deleteManyOutOfStockButListedProducts(input: DeleteManyOutOfStockButListedProductsInput!): DeleteManyResponse!
  deleteManyPasswordResets(input: DeleteManyPasswordResetsInput!): DeleteManyResponse!
  deleteManyPatternCategories(input: DeleteManyPatternCategoriesInput!): DeleteManyResponse!
  deleteManyPatternLayers(input: DeleteManyPatternLayersInput!): DeleteManyResponse!
  deleteManyPatterns(input: DeleteManyPatternsInput!): DeleteManyResponse!
  deleteManyPaymentMethodFields(input: DeleteManyPaymentMethodFieldsInput!): DeleteManyResponse!
  deleteManyPaymentMethods(input: DeleteManyPaymentMethodsInput!): DeleteManyResponse!
  deleteManyPaymentRequestStatuses(input: DeleteManyPaymentRequestStatusesInput!): DeleteManyResponse!
  deleteManyPaymentRequests(input: DeleteManyPaymentRequestsInput!): DeleteManyResponse!
  deleteManyPermissionGroups(input: DeleteManyPermissionGroupsInput!): DeleteManyResponse!
  deleteManyPermissions(input: DeleteManyPermissionsInput!): DeleteManyResponse!
  deleteManyPreorderRegisters(input: DeleteManyPreorderRegistersInput!): DeleteManyResponse!
  deleteManyPreorderStatuses(input: DeleteManyPreorderStatusesInput!): DeleteManyResponse!
  deleteManyPreorders(input: DeleteManyPreordersInput!): DeleteManyResponse!
  deleteManyPriceGroupSizes(input: DeleteManyPriceGroupSizesInput!): DeleteManyResponse!
  deleteManyPriceGroups(input: DeleteManyPriceGroupsInput!): DeleteManyResponse!
  deleteManyPrintProfiles(input: DeleteManyPrintProfilesInput!): DeleteManyResponse!
  deleteManyProductCategoryDetails(input: DeleteManyProductCategoryDetailsInput!): DeleteManyResponse!
  deleteManyProductCategoryRates(input: DeleteManyProductCategoryRatesInput!): DeleteManyResponse!
  deleteManyProductColorImages(input: DeleteManyProductColorImagesInput!): DeleteManyResponse!
  deleteManyProductColorSales(input: DeleteManyProductColorSalesInput!): DeleteManyResponse!
  deleteManyProductCommentLikes(input: DeleteManyProductCommentLikesInput!): DeleteManyResponse!
  deleteManyProductComments(input: DeleteManyProductCommentsInput!): DeleteManyResponse!
  deleteManyProductLikes(input: DeleteManyProductLikesInput!): DeleteManyResponse!
  deleteManyProducts(input: DeleteManyProductsInput!): DeleteManyResponse!
  deleteManyUsers(input: DeleteManyUsersInput!): DeleteManyResponse!
  deleteOneActivity(input: DeleteOneActivityInput!): ActivityDeleteResponse!
  deleteOneAddress(input: DeleteOneAddressInput!): AddressDeleteResponse!
  deleteOneAutomationEvent(input: DeleteOneAutomationEventInput!): AutomationEventDeleteResponse!
  deleteOneAutomationRfmScore(input: DeleteOneAutomationRfmScoreInput!): AutomationRfmScoreDeleteResponse!
  deleteOneBasicCarpetBorder(input: DeleteOneBasicCarpetBorderInput!): BasicCarpetBorderDeleteResponse!
  deleteOneBasicCarpetColor(input: DeleteOneBasicCarpetColorInput!): BasicCarpetColorDeleteResponse!
  deleteOneBasicCarpetDesign(input: DeleteOneBasicCarpetDesignInput!): BasicCarpetDesignDeleteResponse!
  deleteOneBasicCarpetDesigner(input: DeleteOneBasicCarpetDesignerInput!): BasicCarpetDesignerDeleteResponse!
  deleteOneBasicCarpetMaterial(input: DeleteOneBasicCarpetMaterialInput!): BasicCarpetMaterialDeleteResponse!
  deleteOneBasicCarpetSize(input: DeleteOneBasicCarpetSizeInput!): BasicCarpetSizeDeleteResponse!
  deleteOneBasicCarpetSizeDetail(input: DeleteOneBasicCarpetSizeDetailInput!): BasicCarpetSizeDetailDeleteResponse!
  deleteOneBasicCarpetType(input: DeleteOneBasicCarpetTypeInput!): BasicCarpetTypeDeleteResponse!
  deleteOneBorder(input: DeleteOneBorderInput!): BorderDeleteResponse!
  deleteOneCampaignFreeOffer(input: DeleteOneCampaignFreeOfferInput!): CampaignFreeOfferDeleteResponse!
  deleteOneCampaignFreeOfferSize(input: DeleteOneCampaignFreeOfferSizeInput!): CampaignFreeOfferSizeDeleteResponse!
  deleteOneCampaignGoldCoinSub(input: DeleteOneCampaignGoldCoinSubInput!): CampaignGoldCoinSubDeleteResponse!
  deleteOneCampaignInstagramFollow(input: DeleteOneCampaignInstagramFollowInput!): CampaignInstagramFollowDeleteResponse!
  deleteOneCampaignPetForm(input: DeleteOneCampaignPetFormInput!): CampaignPetFormDeleteResponse!
  deleteOneCampaignRoomvoImage(input: DeleteOneCampaignRoomvoImageInput!): CampaignRoomvoImageDeleteResponse!
  deleteOneCampaignRoomvoVote(input: DeleteOneCampaignRoomvoVoteInput!): CampaignRoomvoVoteDeleteResponse!
  deleteOneCampaignSubscription(input: DeleteOneCampaignSubscriptionInput!): CampaignSubscriptionDeleteResponse!
  deleteOneCampaignUefaEuroSubscriber(input: DeleteOneCampaignUefaEuroSubscriberInput!): CampaignUefaEuroSubscriberDeleteResponse!
  deleteOneCampaignUefaEuroSubscriberHistory(input: DeleteOneCampaignUefaEuroSubscriberHistoryInput!): CampaignUefaEuroSubscriberHistoryDeleteResponse!
  deleteOneCampaignVotingImage(input: DeleteOneCampaignVotingImageInput!): CampaignVotingImageDeleteResponse!
  deleteOneCarpetFeature(input: DeleteOneCarpetFeatureInput!): CarpetFeatureDeleteResponse!
  deleteOneCarpetFeatureUser(input: DeleteOneCarpetFeatureUserInput!): CarpetFeatureUserDeleteResponse!
  deleteOneCarpetMaterial(input: DeleteOneCarpetMaterialInput!): CarpetMaterialDeleteResponse!
  deleteOneCarpetShape(input: DeleteOneCarpetShapeInput!): CarpetShapeDeleteResponse!
  deleteOneCarpetSize(input: DeleteOneCarpetSizeInput!): CarpetSizeDeleteResponse!
  deleteOneCarpetUsagePlace(input: DeleteOneCarpetUsagePlaceInput!): CarpetUsagePlaceDeleteResponse!
  deleteOneCarpetUsagePlaceInvoiceProduct(input: DeleteOneCarpetUsagePlaceInvoiceProductInput!): CarpetUsagePlaceInvoiceProductDeleteResponse!
  deleteOneCarpetUsagePlaceUser(input: DeleteOneCarpetUsagePlaceUserInput!): CarpetUsagePlaceUserDeleteResponse!
  deleteOneChaparSettlementStatus(input: DeleteOneChaparSettlementStatusInput!): ChaparSettlementStatusDeleteResponse!
  deleteOneChaparTrackingHistory(input: DeleteOneChaparTrackingHistoryInput!): ChaparTrackingHistoryDeleteResponse!
  deleteOneCitiesSepidar(input: DeleteOneCitiesSepidarInput!): CitiesSepidarDeleteResponse!
  deleteOneCity(input: DeleteOneCityInput!): CityDeleteResponse!
  deleteOneCity2(input: DeleteOneCity2Input!): City2DeleteResponse!
  deleteOneColor(input: DeleteOneColorInput!): ColorDeleteResponse!
  deleteOneColorCategory(input: DeleteOneColorCategoryInput!): ColorCategoryDeleteResponse!
  deleteOneColorCategoryDetail(input: DeleteOneColorCategoryDetailInput!): ColorCategoryDetailDeleteResponse!
  deleteOneColorCategorySubproduct(input: DeleteOneColorCategorySubproductInput!): ColorCategorySubproductDeleteResponse!
  deleteOneConfig(input: DeleteOneConfigInput!): ConfigDeleteResponse!
  deleteOneContactForm(input: DeleteOneContactFormInput!): ContactFormDeleteResponse!
  deleteOneContactFormHistory(input: DeleteOneContactFormHistoryInput!): ContactFormHistoryDeleteResponse!
  deleteOneContactFormStatus(input: DeleteOneContactFormStatusInput!): ContactFormStatusDeleteResponse!
  deleteOneCountry(input: DeleteOneCountryInput!): CountryDeleteResponse!
  deleteOneCoupon(input: DeleteOneCouponInput!): CouponDeleteResponse!
  deleteOneCouponSubject(input: DeleteOneCouponSubjectInput!): CouponSubjectDeleteResponse!
  deleteOneCrmPresentation(input: DeleteOneCrmPresentationInput!): CrmPresentationDeleteResponse!
  deleteOneCustomerImageProduct(input: DeleteOneCustomerImageProductInput!): CustomerImageProductDeleteResponse!
  deleteOneCustomerRequest(input: DeleteOneCustomerRequestInput!): CustomerRequestDeleteResponse!
  deleteOneCustomerRequestFile(input: DeleteOneCustomerRequestFileInput!): CustomerRequestFileDeleteResponse!
  deleteOneCustomerVideoProduct(input: DeleteOneCustomerVideoProductInput!): CustomerVideoProductDeleteResponse!
  deleteOneDamageReason(input: DeleteOneDamageReasonInput!): DamageReasonDeleteResponse!
  deleteOneDepartment(input: DeleteOneDepartmentInput!): DepartmentDeleteResponse!
  deleteOneDesign(input: DeleteOneDesignInput!): DesignDeleteResponse!
  deleteOneDesignersProductPriceRange(input: DeleteOneDesignersProductPriceRangeInput!): DesignersProductPriceRangeDeleteResponse!
  deleteOneDiscount(input: DeleteOneDiscountInput!): DiscountDeleteResponse!
  deleteOneDiscountNotification(input: DeleteOneDiscountNotificationInput!): DiscountNotificationDeleteResponse!
  deleteOneDiscountSubject(input: DeleteOneDiscountSubjectInput!): DiscountSubjectDeleteResponse!
  deleteOneExitControl(input: DeleteOneExitControlInput!): ExitControlDeleteResponse!
  deleteOneExitControlItem(input: DeleteOneExitControlItemInput!): ExitControlItemDeleteResponse!
  deleteOneExportProduct(input: DeleteOneExportProductInput!): ExportProductDeleteResponse!
  deleteOneFailedJob(input: DeleteOneFailedJobInput!): FailedJobDeleteResponse!
  deleteOneFavoriteProduct(input: DeleteOneFavoriteProductInput!): FavoriteProductDeleteResponse!
  deleteOneFedexAddressValidationAttribute(input: DeleteOneFedexAddressValidationAttributeInput!): FedexAddressValidationAttributeDeleteResponse!
  deleteOneFetchSiteUrl(input: DeleteOneFetchSiteUrlInput!): FetchSiteUrlDeleteResponse!
  deleteOneFile(input: DeleteOneFileInput!): FileDeleteResponse!
  deleteOneFileNegotiation(input: DeleteOneFileNegotiationInput!): FileNegotiationDeleteResponse!
  deleteOneGhazal(input: DeleteOneGhazalInput!): GhazalDeleteResponse!
  deleteOneGoogleFormUtm(input: DeleteOneGoogleFormUtmInput!): GoogleFormUtmDeleteResponse!
  deleteOneHeardAboutUsOption(input: DeleteOneHeardAboutUsOptionInput!): HeardAboutUsOptionDeleteResponse!
  deleteOneHelpDesk(input: DeleteOneHelpDeskInput!): HelpDeskDeleteResponse!
  deleteOneHoliday(input: DeleteOneHolidayInput!): HolidayDeleteResponse!
  deleteOneHomePageCustomerImage(input: DeleteOneHomePageCustomerImageInput!): HomePageCustomerImageDeleteResponse!
  deleteOneHyper(input: DeleteOneHyperInput!): HyperDeleteResponse!
  deleteOneHyperstarCode(input: DeleteOneHyperstarCodeInput!): HyperstarCodeDeleteResponse!
  deleteOneImage(input: DeleteOneImageInput!): ImageDeleteResponse!
  deleteOneImageLayer(input: DeleteOneImageLayerInput!): ImageLayerDeleteResponse!
  deleteOneImageProduct(input: DeleteOneImageProductInput!): ImageProductDeleteResponse!
  deleteOneImageSize(input: DeleteOneImageSizeInput!): ImageSizeDeleteResponse!
  deleteOneImageSubproduct(input: DeleteOneImageSubproductInput!): ImageSubproductDeleteResponse!
  deleteOneImagesSizeGuidesDetail(input: DeleteOneImagesSizeGuidesDetailInput!): ImagesSizeGuidesDetailDeleteResponse!
  deleteOneImpersonateHistory(input: DeleteOneImpersonateHistoryInput!): ImpersonateHistoryDeleteResponse!
  deleteOneIncredibleOffer(input: DeleteOneIncredibleOfferInput!): IncredibleOfferDeleteResponse!
  deleteOneIncredibleOfferSentNotification(input: DeleteOneIncredibleOfferSentNotificationInput!): IncredibleOfferSentNotificationDeleteResponse!
  deleteOneInstagramFeed(input: DeleteOneInstagramFeedInput!): InstagramFeedDeleteResponse!
  deleteOneInvitationCode(input: DeleteOneInvitationCodeInput!): InvitationCodeDeleteResponse!
  deleteOneInvoice(input: DeleteOneInvoiceInput!): InvoiceDeleteResponse!
  deleteOneInvoiceAddress(input: DeleteOneInvoiceAddressInput!): InvoiceAddressDeleteResponse!
  deleteOneInvoiceBankGatewayHistory(input: DeleteOneInvoiceBankGatewayHistoryInput!): InvoiceBankGatewayHistoryDeleteResponse!
  deleteOneInvoiceHistory(input: DeleteOneInvoiceHistoryInput!): InvoiceHistoryDeleteResponse!
  deleteOneInvoiceInvoiceStatus(input: DeleteOneInvoiceInvoiceStatusInput!): InvoiceInvoiceStatusDeleteResponse!
  deleteOneInvoiceMode(input: DeleteOneInvoiceModeInput!): InvoiceModeDeleteResponse!
  deleteOneInvoiceNegotiation(input: DeleteOneInvoiceNegotiationInput!): InvoiceNegotiationDeleteResponse!
  deleteOneInvoicePayment(input: DeleteOneInvoicePaymentInput!): InvoicePaymentDeleteResponse!
  deleteOneInvoicePaymentHistory(input: DeleteOneInvoicePaymentHistoryInput!): InvoicePaymentHistoryDeleteResponse!
  deleteOneInvoicePaymentStatus(input: DeleteOneInvoicePaymentStatusInput!): InvoicePaymentStatusDeleteResponse!
  deleteOneInvoicePaymentType(input: DeleteOneInvoicePaymentTypeInput!): InvoicePaymentTypeDeleteResponse!
  deleteOneInvoiceProduct(input: DeleteOneInvoiceProductInput!): InvoiceProductDeleteResponse!
  deleteOneInvoiceProductHistory(input: DeleteOneInvoiceProductHistoryInput!): InvoiceProductHistoryDeleteResponse!
  deleteOneInvoiceProductItem(input: DeleteOneInvoiceProductItemInput!): InvoiceProductItemDeleteResponse!
  deleteOneInvoiceProductItemInvoiceProductStatus(input: DeleteOneInvoiceProductItemInvoiceProductStatusInput!): InvoiceProductItemInvoiceProductStatusDeleteResponse!
  deleteOneInvoiceProductStatus(input: DeleteOneInvoiceProductStatusInput!): InvoiceProductStatusDeleteResponse!
  deleteOneInvoiceRatesResult(input: DeleteOneInvoiceRatesResultInput!): InvoiceRatesResultDeleteResponse!
  deleteOneInvoiceReversal(input: DeleteOneInvoiceReversalInput!): InvoiceReversalDeleteResponse!
  deleteOneInvoiceReversalItem(input: DeleteOneInvoiceReversalItemInput!): InvoiceReversalItemDeleteResponse!
  deleteOneInvoiceShippingRate(input: DeleteOneInvoiceShippingRateInput!): InvoiceShippingRateDeleteResponse!
  deleteOneInvoiceStatus(input: DeleteOneInvoiceStatusInput!): InvoiceStatusDeleteResponse!
  deleteOneInvoiceType(input: DeleteOneInvoiceTypeInput!): InvoiceTypeDeleteResponse!
  deleteOneLabel(input: DeleteOneLabelInput!): LabelDeleteResponse!
  deleteOneLabelProduct(input: DeleteOneLabelProductInput!): LabelProductDeleteResponse!
  deleteOneMellatPaymentError(input: DeleteOneMellatPaymentErrorInput!): MellatPaymentErrorDeleteResponse!
  deleteOneMigration(input: DeleteOneMigrationInput!): MigrationDeleteResponse!
  deleteOneModelHasPermission(input: DeleteOneModelHasPermissionInput!): ModelHasPermissionDeleteResponse!
  deleteOneModelHasRole(input: DeleteOneModelHasRoleInput!): ModelHasRoleDeleteResponse!
  deleteOneModelVisit(input: DeleteOneModelVisitInput!): ModelVisitDeleteResponse!
  deleteOneModemaAccelerator(input: DeleteOneModemaAcceleratorInput!): ModemaAcceleratorDeleteResponse!
  deleteOneModemaAcceleratorImage(input: DeleteOneModemaAcceleratorImageInput!): ModemaAcceleratorImageDeleteResponse!
  deleteOneModemaAcceleratorVideo(input: DeleteOneModemaAcceleratorVideoInput!): ModemaAcceleratorVideoDeleteResponse!
  deleteOneNeedsPhotographySubproduct(input: DeleteOneNeedsPhotographySubproductInput!): NeedsPhotographySubproductDeleteResponse!
  deleteOneNegotiation(input: DeleteOneNegotiationInput!): NegotiationDeleteResponse!
  deleteOneNegotiationHistory(input: DeleteOneNegotiationHistoryInput!): NegotiationHistoryDeleteResponse!
  deleteOneNegotiationStatus(input: DeleteOneNegotiationStatusInput!): NegotiationStatusDeleteResponse!
  deleteOneNegotiationType(input: DeleteOneNegotiationTypeInput!): NegotiationTypeDeleteResponse!
  deleteOneNewBorder(input: DeleteOneNewBorderInput!): NewBorderDeleteResponse!
  deleteOneOauthAccessToken(input: DeleteOneOauthAccessTokenInput!): OauthAccessTokenDeleteResponse!
  deleteOneOauthAuthCode(input: DeleteOneOauthAuthCodeInput!): OauthAuthCodeDeleteResponse!
  deleteOneOauthClient(input: DeleteOneOauthClientInput!): OauthClientDeleteResponse!
  deleteOneOauthPersonalAccessClient(input: DeleteOneOauthPersonalAccessClientInput!): OauthPersonalAccessClientDeleteResponse!
  deleteOneOauthRefreshToken(input: DeleteOneOauthRefreshTokenInput!): OauthRefreshTokenDeleteResponse!
  deleteOneOutOfStockButListedProduct(input: DeleteOneOutOfStockButListedProductInput!): OutOfStockButListedProductDeleteResponse!
  deleteOnePasswordReset(input: DeleteOnePasswordResetInput!): PasswordResetDeleteResponse!
  deleteOnePattern(input: DeleteOnePatternInput!): PatternDeleteResponse!
  deleteOnePatternCategory(input: DeleteOnePatternCategoryInput!): PatternCategoryDeleteResponse!
  deleteOnePatternLayer(input: DeleteOnePatternLayerInput!): PatternLayerDeleteResponse!
  deleteOnePaymentMethod(input: DeleteOnePaymentMethodInput!): PaymentMethodDeleteResponse!
  deleteOnePaymentMethodField(input: DeleteOnePaymentMethodFieldInput!): PaymentMethodFieldDeleteResponse!
  deleteOnePaymentRequest(input: DeleteOnePaymentRequestInput!): PaymentRequestDeleteResponse!
  deleteOnePaymentRequestStatus(input: DeleteOnePaymentRequestStatusInput!): PaymentRequestStatusDeleteResponse!
  deleteOnePermission(input: DeleteOnePermissionInput!): PermissionDeleteResponse!
  deleteOnePermissionGroup(input: DeleteOnePermissionGroupInput!): PermissionGroupDeleteResponse!
  deleteOnePreorder(input: DeleteOnePreorderInput!): PreorderDeleteResponse!
  deleteOnePreorderRegister(input: DeleteOnePreorderRegisterInput!): PreorderRegisterDeleteResponse!
  deleteOnePreorderStatus(input: DeleteOnePreorderStatusInput!): PreorderStatusDeleteResponse!
  deleteOnePriceGroup(input: DeleteOnePriceGroupInput!): PriceGroupDeleteResponse!
  deleteOnePriceGroupSize(input: DeleteOnePriceGroupSizeInput!): PriceGroupSizeDeleteResponse!
  deleteOnePrintProfile(input: DeleteOnePrintProfileInput!): PrintProfileDeleteResponse!
  deleteOneProduct(input: DeleteOneProductInput!): ProductDeleteResponse!
  deleteOneProductCategoryDetail(input: DeleteOneProductCategoryDetailInput!): ProductCategoryDetailDeleteResponse!
  deleteOneProductCategoryRate(input: DeleteOneProductCategoryRateInput!): ProductCategoryRateDeleteResponse!
  deleteOneProductColorImage(input: DeleteOneProductColorImageInput!): ProductColorImageDeleteResponse!
  deleteOneProductColorSale(input: DeleteOneProductColorSaleInput!): ProductColorSaleDeleteResponse!
  deleteOneProductComment(input: DeleteOneProductCommentInput!): ProductCommentDeleteResponse!
  deleteOneProductCommentLike(input: DeleteOneProductCommentLikeInput!): ProductCommentLikeDeleteResponse!
  deleteOneProductLike(input: DeleteOneProductLikeInput!): ProductLikeDeleteResponse!
  deleteOneUser(input: DeleteOneUserInput!): UserDeleteResponse!
  removeAttribute(id: Int!): Attribute!
  removeAttributeAttributeGroup(id: Int!): AttributeAttributeGroup!
  removeAttributeItem(id: Int!): AttributeItem!
  removeAttributeProduct(id: Int!): AttributeProduct!
  removeAttributeSubproduct(id: Int!): AttributeSubproduct!
  removeChaparSettlementStatus(id: Int!): ChaparSettlementStatus!
  removeCity(id: Int!): City!
  removeColor(id: Int!): Color!
  removeCustomerImageProduct(id: Int!): CustomerImageProduct!
  removeCustomerVideoProduct(id: Int!): CustomerVideoProduct!
  removeDepartment(id: Int!): Department!
  removeDiscount(id: Int!): Discount!
  removeExitControl(id: Int!): ExitControl!
  removeExitControlItem(id: Int!): ExitControlItem!
  removeGoogleFormUtm(id: Int!): GoogleFormUtm!
  removeHoliday(id: Int!): Holiday!
  removeHomePageCustomerImage(id: Int!): HomePageCustomerImage!
  removeHyper(id: Int!): Hyper!
  removeImageLayer(id: Int!): ImageLayer!
  removeImageSize(id: Int!): ImageSize!
  removeImageSubproduct(id: Int!): ImageSubproduct!
  removeImagesSizeGuidesDetail(id: Int!): ImagesSizeGuidesDetail!
  removeImpersonateHistory(id: Int!): ImpersonateHistory!
  removeIncredibleOffer(id: Int!): IncredibleOffer!
  removeIncredibleOfferSentNotification(id: Int!): IncredibleOfferSentNotification!
  removeInstagramFeed(id: Int!): InstagramFeed!
  removeInvitationCode(id: Int!): InvitationCode!
  removeInvoice(id: Int!): Invoice!
  removeInvoiceAddress(id: Int!): InvoiceAddress!
  removeInvoiceBankGatewayHistory(id: Int!): InvoiceBankGatewayHistory!
  removeInvoiceHistory(id: Int!): InvoiceHistory!
  removeInvoiceInvoiceStatus(id: Int!): InvoiceInvoiceStatus!
  removeInvoiceMode(id: Int!): InvoiceMode!
  removeInvoiceNegotiation(id: Int!): InvoiceNegotiation!
  removeInvoicePayment(id: Int!): InvoicePayment!
  removeInvoicePaymentHistory(id: Int!): InvoicePaymentHistory!
  removeInvoicePaymentStatus(id: Int!): InvoicePaymentStatus!
  removeInvoicePaymentType(id: Int!): InvoicePaymentType!
  removeInvoiceProduct(id: Int!): InvoiceProduct!
  removeInvoiceProductHistory(id: Int!): InvoiceProductHistory!
  removeInvoiceProductItem(id: Int!): InvoiceProductItem!
  removeInvoiceProductItemInvoiceProductStatus(id: Int!): InvoiceProductItemInvoiceProductStatus!
  removeInvoiceProductStatus(id: Int!): InvoiceProductStatus!
  removeInvoiceRatesResult(id: Int!): InvoiceRatesResult!
  removeInvoiceReversal(id: Int!): InvoiceReversal!
  removeInvoiceReversalItem(id: Int!): InvoiceReversalItem!
  removeInvoiceShippingRate(id: Int!): InvoiceShippingRate!
  removeInvoiceStatus(id: Int!): InvoiceStatus!
  removeInvoiceType(id: Int!): InvoiceType!
  removeLabel(id: Int!): Label!
  removeLabelProduct(id: Int!): LabelProduct!
  removeMellatPaymentError(id: Int!): MellatPaymentError!
  removeMigration(id: Int!): Migration!
  removeModelHasPermission(id: Int!): ModelHasPermission!
  removeModelHasRole(id: Int!): ModelHasRole!
  removeModelVisit(id: Int!): ModelVisit!
  removeModemaAccelerator(id: Int!): ModemaAccelerator!
  removeModemaAcceleratorImage(id: Int!): ModemaAcceleratorImage!
  removeModemaAcceleratorVideo(id: Int!): ModemaAcceleratorVideo!
  removeNeedsPhotographySubproduct(id: Int!): NeedsPhotographySubproduct!
  removeNegotiation(id: Int!): Negotiation!
  removeNegotiationHistory(id: Int!): NegotiationHistory!
  removeNegotiationStatus(id: Int!): NegotiationStatus!
  removeNegotiationType(id: Int!): NegotiationType!
  removeNewBorder(id: Int!): NewBorder!
  removeOauthAccessToken(id: Int!): OauthAccessToken!
  removeOauthAuthCode(id: Int!): OauthAuthCode!
  removeOauthClient(id: Int!): OauthClient!
  removeOauthPersonalAccessClient(id: Int!): OauthPersonalAccessClient!
  removeOauthRefreshToken(id: Int!): OauthRefreshToken!
  removeOutOfStockButListedProduct(id: Int!): OutOfStockButListedProduct!
  removePasswordReset(id: Int!): PasswordReset!
  removePattern(id: Int!): Pattern!
  removePatternCategory(id: Int!): PatternCategory!
  removePatternLayer(id: Int!): PatternLayer!
  removePaymentMethod(id: Int!): PaymentMethod!
  removePaymentMethodField(id: Int!): PaymentMethodField!
  removePaymentRequest(id: Int!): PaymentRequest!
  removePaymentRequestStatus(id: Int!): PaymentRequestStatus!
  removePermission(id: Int!): Permission!
  removePermissionGroup(id: Int!): PermissionGroup!
  removePreorderPreorderStatus(id: Int!): PreorderPreorderStatus!
  removePreorderRegister(id: Int!): PreorderRegister!
  removePreorderStatus(id: Int!): PreorderStatus!
  removePriceGroup(id: Int!): PriceGroup!
  removePriceGroupSize(id: Int!): PriceGroupSize!
  removePrintProfile(id: Int!): PrintProfile!
  removeProduct(id: Int!): Product!
  removeProductCategoryDetail(id: Int!): ProductCategoryDetail!
  removeProductCategoryRate(id: Int!): ProductCategoryRate!
  removeProductColorImage(id: Int!): ProductColorImage!
  removeProductColorSale(id: Int!): ProductColorSale!
  removeProductComment(id: Int!): ProductComment!
  removeProductCommentLike(id: Int!): ProductCommentLike!
  removeProductLike(id: Int!): ProductLike!
  removeUser(id: Int!): User!
  updateAttribute(updateAttributeInput: UpdateAttributeInput!): Attribute!
  updateAttributeAttributeGroup(updateAttributeAttributeGroupInput: UpdateAttributeAttributeGroupInput!): AttributeAttributeGroup!
  updateAttributeItem(updateAttributeItemInput: UpdateAttributeItemInput!): AttributeItem!
  updateAttributeProduct(updateAttributeProductInput: UpdateAttributeProductInput!): AttributeProduct!
  updateAttributeSubproduct(updateAttributeSubproductInput: UpdateAttributeSubproductInput!): AttributeSubproduct!
  updateChaparSettlementStatus(updateChaparSettlementStatusInput: UpdateChaparSettlementStatusInput!): ChaparSettlementStatus!
  updateCity(updateCityInput: UpdateCityInput!): City!
  updateColor(updateColorInput: UpdateColorInput!): Color!
  updateCustomerImageProduct(updateCustomerImageProductInput: UpdateCustomerImageProductInput!): CustomerImageProduct!
  updateCustomerVideoProduct(updateCustomerVideoProductInput: UpdateCustomerVideoProductInput!): CustomerVideoProduct!
  updateDepartment(updateDepartmentInput: UpdateDepartmentInput!): Department!
  updateDiscount(updateDiscountInput: UpdateDiscountInput!): Discount!
  updateExitControl(updateExitControlInput: UpdateExitControlInput!): ExitControl!
  updateExitControlItem(updateExitControlItemInput: UpdateExitControlItemInput!): ExitControlItem!
  updateGoogleFormUtm(updateGoogleFormUtmInput: UpdateGoogleFormUtmInput!): GoogleFormUtm!
  updateHoliday(updateHolidayInput: UpdateHolidayInput!): Holiday!
  updateHomePageCustomerImage(updateHomePageCustomerImageInput: UpdateHomePageCustomerImageInput!): HomePageCustomerImage!
  updateHyper(updateHyperInput: UpdateHyperInput!): Hyper!
  updateImageLayer(updateImageLayerInput: UpdateImageLayerInput!): ImageLayer!
  updateImageSize(updateImageSizeInput: UpdateImageSizeInput!): ImageSize!
  updateImageSubproduct(updateImageSubproductInput: UpdateImageSubproductInput!): ImageSubproduct!
  updateImagesSizeGuidesDetail(updateImagesSizeGuidesDetailInput: UpdateImagesSizeGuidesDetailInput!): ImagesSizeGuidesDetail!
  updateIncredibleOffer(updateIncredibleOfferInput: UpdateIncredibleOfferInput!): IncredibleOffer!
  updateIncredibleOfferSentNotification(updateIncredibleOfferSentNotificationInput: UpdateIncredibleOfferSentNotificationInput!): IncredibleOfferSentNotification!
  updateInstagramFeed(updateInstagramFeedInput: UpdateInstagramFeedInput!): InstagramFeed!
  updateInvitationCode(updateInvitationCodeInput: UpdateInvitationCodeInput!): InvitationCode!
  updateInvoice(updateInvoiceInput: UpdateInvoiceInput!): Invoice!
  updateInvoiceAddress(updateInvoiceAddressInput: UpdateInvoiceAddressInput!): InvoiceAddress!
  updateInvoiceBankGatewayHistory(updateInvoiceBankGatewayHistoryInput: UpdateInvoiceBankGatewayHistoryInput!): InvoiceBankGatewayHistory!
  updateInvoiceHistory(updateInvoiceHistoryInput: UpdateInvoiceHistoryInput!): InvoiceHistory!
  updateInvoiceInvoiceStatus(updateInvoiceInvoiceStatusInput: UpdateInvoiceInvoiceStatusInput!): InvoiceInvoiceStatus!
  updateInvoiceMode(updateInvoiceModeInput: UpdateInvoiceModeInput!): InvoiceMode!
  updateInvoiceNegotiation(updateInvoiceNegotiationInput: UpdateInvoiceNegotiationInput!): InvoiceNegotiation!
  updateInvoicePayment(updateInvoicePaymentInput: UpdateInvoicePaymentInput!): InvoicePayment!
  updateInvoicePaymentHistory(updateInvoicePaymentHistoryInput: UpdateInvoicePaymentHistoryInput!): InvoicePaymentHistory!
  updateInvoicePaymentStatus(updateInvoicePaymentStatusInput: UpdateInvoicePaymentStatusInput!): InvoicePaymentStatus!
  updateInvoicePaymentType(updateInvoicePaymentTypeInput: UpdateInvoicePaymentTypeInput!): InvoicePaymentType!
  updateInvoiceProduct(updateInvoiceProductInput: UpdateInvoiceProductInput!): InvoiceProduct!
  updateInvoiceProductHistory(updateInvoiceProductHistoryInput: UpdateInvoiceProductHistoryInput!): InvoiceProductHistory!
  updateInvoiceProductItem(updateInvoiceProductItemInput: UpdateInvoiceProductItemInput!): InvoiceProductItem!
  updateInvoiceProductItemInvoiceProductStatus(updateInvoiceProductItemInvoiceProductStatusInput: UpdateInvoiceProductItemInvoiceProductStatusInput!): InvoiceProductItemInvoiceProductStatus!
  updateInvoiceProductStatus(updateInvoiceProductStatusInput: UpdateInvoiceProductStatusInput!): InvoiceProductStatus!
  updateInvoiceRatesResult(updateInvoiceRatesResultInput: UpdateInvoiceRatesResultInput!): InvoiceRatesResult!
  updateInvoiceReversal(updateInvoiceReversalInput: UpdateInvoiceReversalInput!): InvoiceReversal!
  updateInvoiceReversalItem(updateInvoiceReversalItemInput: UpdateInvoiceReversalItemInput!): InvoiceReversalItem!
  updateInvoiceShippingRate(updateInvoiceShippingRateInput: UpdateInvoiceShippingRateInput!): InvoiceShippingRate!
  updateInvoiceStatus(updateInvoiceStatusInput: UpdateInvoiceStatusInput!): InvoiceStatus!
  updateInvoiceType(updateInvoiceTypeInput: UpdateInvoiceTypeInput!): InvoiceType!
  updateLabel(updateLabelInput: UpdateLabelInput!): Label!
  updateLabelProduct(updateLabelProductInput: UpdateLabelProductInput!): LabelProduct!
  updateManyActivities(input: UpdateManyActivitiesInput!): UpdateManyResponse!
  updateManyAddresses(input: UpdateManyAddressesInput!): UpdateManyResponse!
  updateManyAutomationEvents(input: UpdateManyAutomationEventsInput!): UpdateManyResponse!
  updateManyAutomationRfmScores(input: UpdateManyAutomationRfmScoresInput!): UpdateManyResponse!
  updateManyBasicCarpetBorders(input: UpdateManyBasicCarpetBordersInput!): UpdateManyResponse!
  updateManyBasicCarpetColors(input: UpdateManyBasicCarpetColorsInput!): UpdateManyResponse!
  updateManyBasicCarpetDesigners(input: UpdateManyBasicCarpetDesignersInput!): UpdateManyResponse!
  updateManyBasicCarpetDesigns(input: UpdateManyBasicCarpetDesignsInput!): UpdateManyResponse!
  updateManyBasicCarpetMaterials(input: UpdateManyBasicCarpetMaterialsInput!): UpdateManyResponse!
  updateManyBasicCarpetSizeDetails(input: UpdateManyBasicCarpetSizeDetailsInput!): UpdateManyResponse!
  updateManyBasicCarpetSizes(input: UpdateManyBasicCarpetSizesInput!): UpdateManyResponse!
  updateManyBasicCarpetTypes(input: UpdateManyBasicCarpetTypesInput!): UpdateManyResponse!
  updateManyBorders(input: UpdateManyBordersInput!): UpdateManyResponse!
  updateManyCampaignFreeOfferSizes(input: UpdateManyCampaignFreeOfferSizesInput!): UpdateManyResponse!
  updateManyCampaignFreeOffers(input: UpdateManyCampaignFreeOffersInput!): UpdateManyResponse!
  updateManyCampaignGoldCoinSubs(input: UpdateManyCampaignGoldCoinSubsInput!): UpdateManyResponse!
  updateManyCampaignInstagramFollows(input: UpdateManyCampaignInstagramFollowsInput!): UpdateManyResponse!
  updateManyCampaignPetForms(input: UpdateManyCampaignPetFormsInput!): UpdateManyResponse!
  updateManyCampaignRoomvoImages(input: UpdateManyCampaignRoomvoImagesInput!): UpdateManyResponse!
  updateManyCampaignRoomvoVotes(input: UpdateManyCampaignRoomvoVotesInput!): UpdateManyResponse!
  updateManyCampaignSubscriptions(input: UpdateManyCampaignSubscriptionsInput!): UpdateManyResponse!
  updateManyCampaignUefaEuroSubscriberHistories(input: UpdateManyCampaignUefaEuroSubscriberHistoriesInput!): UpdateManyResponse!
  updateManyCampaignUefaEuroSubscribers(input: UpdateManyCampaignUefaEuroSubscribersInput!): UpdateManyResponse!
  updateManyCampaignVotingImages(input: UpdateManyCampaignVotingImagesInput!): UpdateManyResponse!
  updateManyCarpetFeatureUsers(input: UpdateManyCarpetFeatureUsersInput!): UpdateManyResponse!
  updateManyCarpetFeatures(input: UpdateManyCarpetFeaturesInput!): UpdateManyResponse!
  updateManyCarpetMaterials(input: UpdateManyCarpetMaterialsInput!): UpdateManyResponse!
  updateManyCarpetShapes(input: UpdateManyCarpetShapesInput!): UpdateManyResponse!
  updateManyCarpetSizes(input: UpdateManyCarpetSizesInput!): UpdateManyResponse!
  updateManyCarpetUsagePlaceInvoiceProducts(input: UpdateManyCarpetUsagePlaceInvoiceProductsInput!): UpdateManyResponse!
  updateManyCarpetUsagePlaceUsers(input: UpdateManyCarpetUsagePlaceUsersInput!): UpdateManyResponse!
  updateManyCarpetUsagePlaces(input: UpdateManyCarpetUsagePlacesInput!): UpdateManyResponse!
  updateManyChaparSettlementStatuses(input: UpdateManyChaparSettlementStatusesInput!): UpdateManyResponse!
  updateManyChaparTrackingHistories(input: UpdateManyChaparTrackingHistoriesInput!): UpdateManyResponse!
  updateManyCities(input: UpdateManyCitiesInput!): UpdateManyResponse!
  updateManyCitiesSepidars(input: UpdateManyCitiesSepidarsInput!): UpdateManyResponse!
  updateManyCity2s(input: UpdateManyCity2sInput!): UpdateManyResponse!
  updateManyColorCategories(input: UpdateManyColorCategoriesInput!): UpdateManyResponse!
  updateManyColorCategoryDetails(input: UpdateManyColorCategoryDetailsInput!): UpdateManyResponse!
  updateManyColorCategorySubproducts(input: UpdateManyColorCategorySubproductsInput!): UpdateManyResponse!
  updateManyColors(input: UpdateManyColorsInput!): UpdateManyResponse!
  updateManyConfigs(input: UpdateManyConfigsInput!): UpdateManyResponse!
  updateManyContactFormHistories(input: UpdateManyContactFormHistoriesInput!): UpdateManyResponse!
  updateManyContactFormStatuses(input: UpdateManyContactFormStatusesInput!): UpdateManyResponse!
  updateManyContactForms(input: UpdateManyContactFormsInput!): UpdateManyResponse!
  updateManyCountries(input: UpdateManyCountriesInput!): UpdateManyResponse!
  updateManyCouponSubjects(input: UpdateManyCouponSubjectsInput!): UpdateManyResponse!
  updateManyCoupons(input: UpdateManyCouponsInput!): UpdateManyResponse!
  updateManyCrmPresentations(input: UpdateManyCrmPresentationsInput!): UpdateManyResponse!
  updateManyCustomerImageProducts(input: UpdateManyCustomerImageProductsInput!): UpdateManyResponse!
  updateManyCustomerRequestFiles(input: UpdateManyCustomerRequestFilesInput!): UpdateManyResponse!
  updateManyCustomerRequests(input: UpdateManyCustomerRequestsInput!): UpdateManyResponse!
  updateManyCustomerVideoProducts(input: UpdateManyCustomerVideoProductsInput!): UpdateManyResponse!
  updateManyDamageReasons(input: UpdateManyDamageReasonsInput!): UpdateManyResponse!
  updateManyDepartments(input: UpdateManyDepartmentsInput!): UpdateManyResponse!
  updateManyDesignersProductPriceRanges(input: UpdateManyDesignersProductPriceRangesInput!): UpdateManyResponse!
  updateManyDesigns(input: UpdateManyDesignsInput!): UpdateManyResponse!
  updateManyDiscountNotifications(input: UpdateManyDiscountNotificationsInput!): UpdateManyResponse!
  updateManyDiscountSubjects(input: UpdateManyDiscountSubjectsInput!): UpdateManyResponse!
  updateManyDiscounts(input: UpdateManyDiscountsInput!): UpdateManyResponse!
  updateManyExitControlItems(input: UpdateManyExitControlItemsInput!): UpdateManyResponse!
  updateManyExitControls(input: UpdateManyExitControlsInput!): UpdateManyResponse!
  updateManyExportProducts(input: UpdateManyExportProductsInput!): UpdateManyResponse!
  updateManyFailedJobs(input: UpdateManyFailedJobsInput!): UpdateManyResponse!
  updateManyFavoriteProducts(input: UpdateManyFavoriteProductsInput!): UpdateManyResponse!
  updateManyFedexAddressValidationAttributes(input: UpdateManyFedexAddressValidationAttributesInput!): UpdateManyResponse!
  updateManyFetchSiteUrls(input: UpdateManyFetchSiteUrlsInput!): UpdateManyResponse!
  updateManyFileNegotiations(input: UpdateManyFileNegotiationsInput!): UpdateManyResponse!
  updateManyFiles(input: UpdateManyFilesInput!): UpdateManyResponse!
  updateManyGhazals(input: UpdateManyGhazalsInput!): UpdateManyResponse!
  updateManyGoogleFormUtms(input: UpdateManyGoogleFormUtmsInput!): UpdateManyResponse!
  updateManyHeardAboutUsOptions(input: UpdateManyHeardAboutUsOptionsInput!): UpdateManyResponse!
  updateManyHelpDesks(input: UpdateManyHelpDesksInput!): UpdateManyResponse!
  updateManyHolidays(input: UpdateManyHolidaysInput!): UpdateManyResponse!
  updateManyHomePageCustomerImages(input: UpdateManyHomePageCustomerImagesInput!): UpdateManyResponse!
  updateManyHypers(input: UpdateManyHypersInput!): UpdateManyResponse!
  updateManyHyperstarCodes(input: UpdateManyHyperstarCodesInput!): UpdateManyResponse!
  updateManyImageLayers(input: UpdateManyImageLayersInput!): UpdateManyResponse!
  updateManyImageProducts(input: UpdateManyImageProductsInput!): UpdateManyResponse!
  updateManyImageSizes(input: UpdateManyImageSizesInput!): UpdateManyResponse!
  updateManyImageSubproducts(input: UpdateManyImageSubproductsInput!): UpdateManyResponse!
  updateManyImages(input: UpdateManyImagesInput!): UpdateManyResponse!
  updateManyImagesSizeGuidesDetails(input: UpdateManyImagesSizeGuidesDetailsInput!): UpdateManyResponse!
  updateManyImpersonateHistories(input: UpdateManyImpersonateHistoriesInput!): UpdateManyResponse!
  updateManyIncredibleOfferSentNotifications(input: UpdateManyIncredibleOfferSentNotificationsInput!): UpdateManyResponse!
  updateManyIncredibleOffers(input: UpdateManyIncredibleOffersInput!): UpdateManyResponse!
  updateManyInstagramFeeds(input: UpdateManyInstagramFeedsInput!): UpdateManyResponse!
  updateManyInvitationCodes(input: UpdateManyInvitationCodesInput!): UpdateManyResponse!
  updateManyInvoiceAddresses(input: UpdateManyInvoiceAddressesInput!): UpdateManyResponse!
  updateManyInvoiceBankGatewayHistories(input: UpdateManyInvoiceBankGatewayHistoriesInput!): UpdateManyResponse!
  updateManyInvoiceHistories(input: UpdateManyInvoiceHistoriesInput!): UpdateManyResponse!
  updateManyInvoiceInvoiceStatuses(input: UpdateManyInvoiceInvoiceStatusesInput!): UpdateManyResponse!
  updateManyInvoiceModes(input: UpdateManyInvoiceModesInput!): UpdateManyResponse!
  updateManyInvoiceNegotiations(input: UpdateManyInvoiceNegotiationsInput!): UpdateManyResponse!
  updateManyInvoicePaymentHistories(input: UpdateManyInvoicePaymentHistoriesInput!): UpdateManyResponse!
  updateManyInvoicePaymentStatuses(input: UpdateManyInvoicePaymentStatusesInput!): UpdateManyResponse!
  updateManyInvoicePaymentTypes(input: UpdateManyInvoicePaymentTypesInput!): UpdateManyResponse!
  updateManyInvoicePayments(input: UpdateManyInvoicePaymentsInput!): UpdateManyResponse!
  updateManyInvoiceProductHistories(input: UpdateManyInvoiceProductHistoriesInput!): UpdateManyResponse!
  updateManyInvoiceProductItemInvoiceProductStatuses(input: UpdateManyInvoiceProductItemInvoiceProductStatusesInput!): UpdateManyResponse!
  updateManyInvoiceProductItems(input: UpdateManyInvoiceProductItemsInput!): UpdateManyResponse!
  updateManyInvoiceProductStatuses(input: UpdateManyInvoiceProductStatusesInput!): UpdateManyResponse!
  updateManyInvoiceProducts(input: UpdateManyInvoiceProductsInput!): UpdateManyResponse!
  updateManyInvoiceRatesResults(input: UpdateManyInvoiceRatesResultsInput!): UpdateManyResponse!
  updateManyInvoiceReversalItems(input: UpdateManyInvoiceReversalItemsInput!): UpdateManyResponse!
  updateManyInvoiceReversals(input: UpdateManyInvoiceReversalsInput!): UpdateManyResponse!
  updateManyInvoiceShippingRates(input: UpdateManyInvoiceShippingRatesInput!): UpdateManyResponse!
  updateManyInvoiceStatuses(input: UpdateManyInvoiceStatusesInput!): UpdateManyResponse!
  updateManyInvoiceTypes(input: UpdateManyInvoiceTypesInput!): UpdateManyResponse!
  updateManyInvoices(input: UpdateManyInvoicesInput!): UpdateManyResponse!
  updateManyLabelProducts(input: UpdateManyLabelProductsInput!): UpdateManyResponse!
  updateManyLabels(input: UpdateManyLabelsInput!): UpdateManyResponse!
  updateManyMellatPaymentErrors(input: UpdateManyMellatPaymentErrorsInput!): UpdateManyResponse!
  updateManyMigrations(input: UpdateManyMigrationsInput!): UpdateManyResponse!
  updateManyModelHasPermissions(input: UpdateManyModelHasPermissionsInput!): UpdateManyResponse!
  updateManyModelHasRoles(input: UpdateManyModelHasRolesInput!): UpdateManyResponse!
  updateManyModelVisits(input: UpdateManyModelVisitsInput!): UpdateManyResponse!
  updateManyModemaAcceleratorImages(input: UpdateManyModemaAcceleratorImagesInput!): UpdateManyResponse!
  updateManyModemaAcceleratorVideos(input: UpdateManyModemaAcceleratorVideosInput!): UpdateManyResponse!
  updateManyModemaAccelerators(input: UpdateManyModemaAcceleratorsInput!): UpdateManyResponse!
  updateManyNeedsPhotographySubproducts(input: UpdateManyNeedsPhotographySubproductsInput!): UpdateManyResponse!
  updateManyNegotiationHistories(input: UpdateManyNegotiationHistoriesInput!): UpdateManyResponse!
  updateManyNegotiationStatuses(input: UpdateManyNegotiationStatusesInput!): UpdateManyResponse!
  updateManyNegotiationTypes(input: UpdateManyNegotiationTypesInput!): UpdateManyResponse!
  updateManyNegotiations(input: UpdateManyNegotiationsInput!): UpdateManyResponse!
  updateManyNewBorders(input: UpdateManyNewBordersInput!): UpdateManyResponse!
  updateManyOauthAccessTokens(input: UpdateManyOauthAccessTokensInput!): UpdateManyResponse!
  updateManyOauthAuthCodes(input: UpdateManyOauthAuthCodesInput!): UpdateManyResponse!
  updateManyOauthClients(input: UpdateManyOauthClientsInput!): UpdateManyResponse!
  updateManyOauthPersonalAccessClients(input: UpdateManyOauthPersonalAccessClientsInput!): UpdateManyResponse!
  updateManyOauthRefreshTokens(input: UpdateManyOauthRefreshTokensInput!): UpdateManyResponse!
  updateManyOutOfStockButListedProducts(input: UpdateManyOutOfStockButListedProductsInput!): UpdateManyResponse!
  updateManyPasswordResets(input: UpdateManyPasswordResetsInput!): UpdateManyResponse!
  updateManyPatternCategories(input: UpdateManyPatternCategoriesInput!): UpdateManyResponse!
  updateManyPatternLayers(input: UpdateManyPatternLayersInput!): UpdateManyResponse!
  updateManyPatterns(input: UpdateManyPatternsInput!): UpdateManyResponse!
  updateManyPaymentMethodFields(input: UpdateManyPaymentMethodFieldsInput!): UpdateManyResponse!
  updateManyPaymentMethods(input: UpdateManyPaymentMethodsInput!): UpdateManyResponse!
  updateManyPaymentRequestStatuses(input: UpdateManyPaymentRequestStatusesInput!): UpdateManyResponse!
  updateManyPaymentRequests(input: UpdateManyPaymentRequestsInput!): UpdateManyResponse!
  updateManyPermissionGroups(input: UpdateManyPermissionGroupsInput!): UpdateManyResponse!
  updateManyPermissions(input: UpdateManyPermissionsInput!): UpdateManyResponse!
  updateManyPreorderRegisters(input: UpdateManyPreorderRegistersInput!): UpdateManyResponse!
  updateManyPreorderStatuses(input: UpdateManyPreorderStatusesInput!): UpdateManyResponse!
  updateManyPreorders(input: UpdateManyPreordersInput!): UpdateManyResponse!
  updateManyPriceGroupSizes(input: UpdateManyPriceGroupSizesInput!): UpdateManyResponse!
  updateManyPriceGroups(input: UpdateManyPriceGroupsInput!): UpdateManyResponse!
  updateManyPrintProfiles(input: UpdateManyPrintProfilesInput!): UpdateManyResponse!
  updateManyProductCategoryDetails(input: UpdateManyProductCategoryDetailsInput!): UpdateManyResponse!
  updateManyProductCategoryRates(input: UpdateManyProductCategoryRatesInput!): UpdateManyResponse!
  updateManyProductColorImages(input: UpdateManyProductColorImagesInput!): UpdateManyResponse!
  updateManyProductColorSales(input: UpdateManyProductColorSalesInput!): UpdateManyResponse!
  updateManyProductCommentLikes(input: UpdateManyProductCommentLikesInput!): UpdateManyResponse!
  updateManyProductComments(input: UpdateManyProductCommentsInput!): UpdateManyResponse!
  updateManyProductLikes(input: UpdateManyProductLikesInput!): UpdateManyResponse!
  updateManyProducts(input: UpdateManyProductsInput!): UpdateManyResponse!
  updateManyUsers(input: UpdateManyUsersInput!): UpdateManyResponse!
  updateMigration(updateMigrationInput: UpdateMigrationInput!): Migration!
  updateModelHasPermission(updateModelHasPermissionInput: UpdateModelHasPermissionInput!): ModelHasPermission!
  updateModelHasRole(updateModelHasRoleInput: UpdateModelHasRoleInput!): ModelHasRole!
  updateModelVisit(updateModelVisitInput: UpdateModelVisitInput!): ModelVisit!
  updateModemaAccelerator(updateModemaAcceleratorInput: UpdateModemaAcceleratorInput!): ModemaAccelerator!
  updateModemaAcceleratorImage(updateModemaAcceleratorImageInput: UpdateModemaAcceleratorImageInput!): ModemaAcceleratorImage!
  updateModemaAcceleratorVideo(updateModemaAcceleratorVideoInput: UpdateModemaAcceleratorVideoInput!): ModemaAcceleratorVideo!
  updateNeedsPhotographySubproduct(updateNeedsPhotographySubproductInput: UpdateNeedsPhotographySubproductInput!): NeedsPhotographySubproduct!
  updateNegotiation(updateNegotiationInput: UpdateNegotiationInput!): Negotiation!
  updateNegotiationHistory(updateNegotiationHistoryInput: UpdateNegotiationHistoryInput!): NegotiationHistory!
  updateNegotiationStatus(updateNegotiationStatusInput: UpdateNegotiationStatusInput!): NegotiationStatus!
  updateNegotiationType(updateNegotiationTypeInput: UpdateNegotiationTypeInput!): NegotiationType!
  updateNewBorder(updateNewBorderInput: UpdateNewBorderInput!): NewBorder!
  updateOauthClient(updateOauthClientInput: UpdateOauthClientInput!): OauthClient!
  updateOauthPersonalAccessClient(updateOauthPersonalAccessClientInput: UpdateOauthPersonalAccessClientInput!): OauthPersonalAccessClient!
  updateOneActivity(input: UpdateOneActivityInput!): Activity!
  updateOneAddress(input: UpdateOneAddressInput!): Address!
  updateOneAutomationEvent(input: UpdateOneAutomationEventInput!): AutomationEvent!
  updateOneAutomationRfmScore(input: UpdateOneAutomationRfmScoreInput!): AutomationRfmScore!
  updateOneBasicCarpetBorder(input: UpdateOneBasicCarpetBorderInput!): BasicCarpetBorder!
  updateOneBasicCarpetColor(input: UpdateOneBasicCarpetColorInput!): BasicCarpetColor!
  updateOneBasicCarpetDesign(input: UpdateOneBasicCarpetDesignInput!): BasicCarpetDesign!
  updateOneBasicCarpetDesigner(input: UpdateOneBasicCarpetDesignerInput!): BasicCarpetDesigner!
  updateOneBasicCarpetMaterial(input: UpdateOneBasicCarpetMaterialInput!): BasicCarpetMaterial!
  updateOneBasicCarpetSize(input: UpdateOneBasicCarpetSizeInput!): BasicCarpetSize!
  updateOneBasicCarpetSizeDetail(input: UpdateOneBasicCarpetSizeDetailInput!): BasicCarpetSizeDetail!
  updateOneBasicCarpetType(input: UpdateOneBasicCarpetTypeInput!): BasicCarpetType!
  updateOneBorder(input: UpdateOneBorderInput!): Border!
  updateOneCampaignFreeOffer(input: UpdateOneCampaignFreeOfferInput!): CampaignFreeOffer!
  updateOneCampaignFreeOfferSize(input: UpdateOneCampaignFreeOfferSizeInput!): CampaignFreeOfferSize!
  updateOneCampaignGoldCoinSub(input: UpdateOneCampaignGoldCoinSubInput!): CampaignGoldCoinSub!
  updateOneCampaignInstagramFollow(input: UpdateOneCampaignInstagramFollowInput!): CampaignInstagramFollow!
  updateOneCampaignPetForm(input: UpdateOneCampaignPetFormInput!): CampaignPetForm!
  updateOneCampaignRoomvoImage(input: UpdateOneCampaignRoomvoImageInput!): CampaignRoomvoImage!
  updateOneCampaignRoomvoVote(input: UpdateOneCampaignRoomvoVoteInput!): CampaignRoomvoVote!
  updateOneCampaignSubscription(input: UpdateOneCampaignSubscriptionInput!): CampaignSubscription!
  updateOneCampaignUefaEuroSubscriber(input: UpdateOneCampaignUefaEuroSubscriberInput!): CampaignUefaEuroSubscriber!
  updateOneCampaignUefaEuroSubscriberHistory(input: UpdateOneCampaignUefaEuroSubscriberHistoryInput!): CampaignUefaEuroSubscriberHistory!
  updateOneCampaignVotingImage(input: UpdateOneCampaignVotingImageInput!): CampaignVotingImage!
  updateOneCarpetFeature(input: UpdateOneCarpetFeatureInput!): CarpetFeature!
  updateOneCarpetFeatureUser(input: UpdateOneCarpetFeatureUserInput!): CarpetFeatureUser!
  updateOneCarpetMaterial(input: UpdateOneCarpetMaterialInput!): CarpetMaterial!
  updateOneCarpetShape(input: UpdateOneCarpetShapeInput!): CarpetShape!
  updateOneCarpetSize(input: UpdateOneCarpetSizeInput!): CarpetSize!
  updateOneCarpetUsagePlace(input: UpdateOneCarpetUsagePlaceInput!): CarpetUsagePlace!
  updateOneCarpetUsagePlaceInvoiceProduct(input: UpdateOneCarpetUsagePlaceInvoiceProductInput!): CarpetUsagePlaceInvoiceProduct!
  updateOneCarpetUsagePlaceUser(input: UpdateOneCarpetUsagePlaceUserInput!): CarpetUsagePlaceUser!
  updateOneChaparSettlementStatus(input: UpdateOneChaparSettlementStatusInput!): ChaparSettlementStatus!
  updateOneChaparTrackingHistory(input: UpdateOneChaparTrackingHistoryInput!): ChaparTrackingHistory!
  updateOneCitiesSepidar(input: UpdateOneCitiesSepidarInput!): CitiesSepidar!
  updateOneCity(input: UpdateOneCityInput!): City!
  updateOneCity2(input: UpdateOneCity2Input!): City2!
  updateOneColor(input: UpdateOneColorInput!): Color!
  updateOneColorCategory(input: UpdateOneColorCategoryInput!): ColorCategory!
  updateOneColorCategoryDetail(input: UpdateOneColorCategoryDetailInput!): ColorCategoryDetail!
  updateOneColorCategorySubproduct(input: UpdateOneColorCategorySubproductInput!): ColorCategorySubproduct!
  updateOneConfig(input: UpdateOneConfigInput!): Config!
  updateOneContactForm(input: UpdateOneContactFormInput!): ContactForm!
  updateOneContactFormHistory(input: UpdateOneContactFormHistoryInput!): ContactFormHistory!
  updateOneContactFormStatus(input: UpdateOneContactFormStatusInput!): ContactFormStatus!
  updateOneCountry(input: UpdateOneCountryInput!): Country!
  updateOneCoupon(input: UpdateOneCouponInput!): Coupon!
  updateOneCouponSubject(input: UpdateOneCouponSubjectInput!): CouponSubject!
  updateOneCrmPresentation(input: UpdateOneCrmPresentationInput!): CrmPresentation!
  updateOneCustomerImageProduct(input: UpdateOneCustomerImageProductInput!): CustomerImageProduct!
  updateOneCustomerRequest(input: UpdateOneCustomerRequestInput!): CustomerRequest!
  updateOneCustomerRequestFile(input: UpdateOneCustomerRequestFileInput!): CustomerRequestFile!
  updateOneCustomerVideoProduct(input: UpdateOneCustomerVideoProductInput!): CustomerVideoProduct!
  updateOneDamageReason(input: UpdateOneDamageReasonInput!): DamageReason!
  updateOneDepartment(input: UpdateOneDepartmentInput!): Department!
  updateOneDesign(input: UpdateOneDesignInput!): Design!
  updateOneDesignersProductPriceRange(input: UpdateOneDesignersProductPriceRangeInput!): DesignersProductPriceRange!
  updateOneDiscount(input: UpdateOneDiscountInput!): Discount!
  updateOneDiscountNotification(input: UpdateOneDiscountNotificationInput!): DiscountNotification!
  updateOneDiscountSubject(input: UpdateOneDiscountSubjectInput!): DiscountSubject!
  updateOneExitControl(input: UpdateOneExitControlInput!): ExitControl!
  updateOneExitControlItem(input: UpdateOneExitControlItemInput!): ExitControlItem!
  updateOneExportProduct(input: UpdateOneExportProductInput!): ExportProduct!
  updateOneFailedJob(input: UpdateOneFailedJobInput!): FailedJob!
  updateOneFavoriteProduct(input: UpdateOneFavoriteProductInput!): FavoriteProduct!
  updateOneFedexAddressValidationAttribute(input: UpdateOneFedexAddressValidationAttributeInput!): FedexAddressValidationAttribute!
  updateOneFetchSiteUrl(input: UpdateOneFetchSiteUrlInput!): FetchSiteUrl!
  updateOneFile(input: UpdateOneFileInput!): File!
  updateOneFileNegotiation(input: UpdateOneFileNegotiationInput!): FileNegotiation!
  updateOneGhazal(input: UpdateOneGhazalInput!): Ghazal!
  updateOneGoogleFormUtm(input: UpdateOneGoogleFormUtmInput!): GoogleFormUtm!
  updateOneHeardAboutUsOption(input: UpdateOneHeardAboutUsOptionInput!): HeardAboutUsOption!
  updateOneHelpDesk(input: UpdateOneHelpDeskInput!): HelpDesk!
  updateOneHoliday(input: UpdateOneHolidayInput!): Holiday!
  updateOneHomePageCustomerImage(input: UpdateOneHomePageCustomerImageInput!): HomePageCustomerImage!
  updateOneHyper(input: UpdateOneHyperInput!): Hyper!
  updateOneHyperstarCode(input: UpdateOneHyperstarCodeInput!): HyperstarCode!
  updateOneImage(input: UpdateOneImageInput!): Image!
  updateOneImageLayer(input: UpdateOneImageLayerInput!): ImageLayer!
  updateOneImageProduct(input: UpdateOneImageProductInput!): ImageProduct!
  updateOneImageSize(input: UpdateOneImageSizeInput!): ImageSize!
  updateOneImageSubproduct(input: UpdateOneImageSubproductInput!): ImageSubproduct!
  updateOneImagesSizeGuidesDetail(input: UpdateOneImagesSizeGuidesDetailInput!): ImagesSizeGuidesDetail!
  updateOneImpersonateHistory(input: UpdateOneImpersonateHistoryInput!): ImpersonateHistory!
  updateOneIncredibleOffer(input: UpdateOneIncredibleOfferInput!): IncredibleOffer!
  updateOneIncredibleOfferSentNotification(input: UpdateOneIncredibleOfferSentNotificationInput!): IncredibleOfferSentNotification!
  updateOneInstagramFeed(input: UpdateOneInstagramFeedInput!): InstagramFeed!
  updateOneInvitationCode(input: UpdateOneInvitationCodeInput!): InvitationCode!
  updateOneInvoice(input: UpdateOneInvoiceInput!): Invoice!
  updateOneInvoiceAddress(input: UpdateOneInvoiceAddressInput!): InvoiceAddress!
  updateOneInvoiceBankGatewayHistory(input: UpdateOneInvoiceBankGatewayHistoryInput!): InvoiceBankGatewayHistory!
  updateOneInvoiceHistory(input: UpdateOneInvoiceHistoryInput!): InvoiceHistory!
  updateOneInvoiceInvoiceStatus(input: UpdateOneInvoiceInvoiceStatusInput!): InvoiceInvoiceStatus!
  updateOneInvoiceMode(input: UpdateOneInvoiceModeInput!): InvoiceMode!
  updateOneInvoiceNegotiation(input: UpdateOneInvoiceNegotiationInput!): InvoiceNegotiation!
  updateOneInvoicePayment(input: UpdateOneInvoicePaymentInput!): InvoicePayment!
  updateOneInvoicePaymentHistory(input: UpdateOneInvoicePaymentHistoryInput!): InvoicePaymentHistory!
  updateOneInvoicePaymentStatus(input: UpdateOneInvoicePaymentStatusInput!): InvoicePaymentStatus!
  updateOneInvoicePaymentType(input: UpdateOneInvoicePaymentTypeInput!): InvoicePaymentType!
  updateOneInvoiceProduct(input: UpdateOneInvoiceProductInput!): InvoiceProduct!
  updateOneInvoiceProductHistory(input: UpdateOneInvoiceProductHistoryInput!): InvoiceProductHistory!
  updateOneInvoiceProductItem(input: UpdateOneInvoiceProductItemInput!): InvoiceProductItem!
  updateOneInvoiceProductItemInvoiceProductStatus(input: UpdateOneInvoiceProductItemInvoiceProductStatusInput!): InvoiceProductItemInvoiceProductStatus!
  updateOneInvoiceProductStatus(input: UpdateOneInvoiceProductStatusInput!): InvoiceProductStatus!
  updateOneInvoiceRatesResult(input: UpdateOneInvoiceRatesResultInput!): InvoiceRatesResult!
  updateOneInvoiceReversal(input: UpdateOneInvoiceReversalInput!): InvoiceReversal!
  updateOneInvoiceReversalItem(input: UpdateOneInvoiceReversalItemInput!): InvoiceReversalItem!
  updateOneInvoiceShippingRate(input: UpdateOneInvoiceShippingRateInput!): InvoiceShippingRate!
  updateOneInvoiceStatus(input: UpdateOneInvoiceStatusInput!): InvoiceStatus!
  updateOneInvoiceType(input: UpdateOneInvoiceTypeInput!): InvoiceType!
  updateOneLabel(input: UpdateOneLabelInput!): Label!
  updateOneLabelProduct(input: UpdateOneLabelProductInput!): LabelProduct!
  updateOneMellatPaymentError(input: UpdateOneMellatPaymentErrorInput!): MellatPaymentError!
  updateOneMigration(input: UpdateOneMigrationInput!): Migration!
  updateOneModelHasPermission(input: UpdateOneModelHasPermissionInput!): ModelHasPermission!
  updateOneModelHasRole(input: UpdateOneModelHasRoleInput!): ModelHasRole!
  updateOneModelVisit(input: UpdateOneModelVisitInput!): ModelVisit!
  updateOneModemaAccelerator(input: UpdateOneModemaAcceleratorInput!): ModemaAccelerator!
  updateOneModemaAcceleratorImage(input: UpdateOneModemaAcceleratorImageInput!): ModemaAcceleratorImage!
  updateOneModemaAcceleratorVideo(input: UpdateOneModemaAcceleratorVideoInput!): ModemaAcceleratorVideo!
  updateOneNeedsPhotographySubproduct(input: UpdateOneNeedsPhotographySubproductInput!): NeedsPhotographySubproduct!
  updateOneNegotiation(input: UpdateOneNegotiationInput!): Negotiation!
  updateOneNegotiationHistory(input: UpdateOneNegotiationHistoryInput!): NegotiationHistory!
  updateOneNegotiationStatus(input: UpdateOneNegotiationStatusInput!): NegotiationStatus!
  updateOneNegotiationType(input: UpdateOneNegotiationTypeInput!): NegotiationType!
  updateOneNewBorder(input: UpdateOneNewBorderInput!): NewBorder!
  updateOneOauthAccessToken(input: UpdateOneOauthAccessTokenInput!): OauthAccessToken!
  updateOneOauthAuthCode(input: UpdateOneOauthAuthCodeInput!): OauthAuthCode!
  updateOneOauthClient(input: UpdateOneOauthClientInput!): OauthClient!
  updateOneOauthPersonalAccessClient(input: UpdateOneOauthPersonalAccessClientInput!): OauthPersonalAccessClient!
  updateOneOauthRefreshToken(input: UpdateOneOauthRefreshTokenInput!): OauthRefreshToken!
  updateOneOutOfStockButListedProduct(input: UpdateOneOutOfStockButListedProductInput!): OutOfStockButListedProduct!
  updateOnePasswordReset(input: UpdateOnePasswordResetInput!): PasswordReset!
  updateOnePattern(input: UpdateOnePatternInput!): Pattern!
  updateOnePatternCategory(input: UpdateOnePatternCategoryInput!): PatternCategory!
  updateOnePatternLayer(input: UpdateOnePatternLayerInput!): PatternLayer!
  updateOnePaymentMethod(input: UpdateOnePaymentMethodInput!): PaymentMethod!
  updateOnePaymentMethodField(input: UpdateOnePaymentMethodFieldInput!): PaymentMethodField!
  updateOnePaymentRequest(input: UpdateOnePaymentRequestInput!): PaymentRequest!
  updateOnePaymentRequestStatus(input: UpdateOnePaymentRequestStatusInput!): PaymentRequestStatus!
  updateOnePermission(input: UpdateOnePermissionInput!): Permission!
  updateOnePermissionGroup(input: UpdateOnePermissionGroupInput!): PermissionGroup!
  updateOnePreorder(input: UpdateOnePreorderInput!): Preorder!
  updateOnePreorderRegister(input: UpdateOnePreorderRegisterInput!): PreorderRegister!
  updateOnePreorderStatus(input: UpdateOnePreorderStatusInput!): PreorderStatus!
  updateOnePriceGroup(input: UpdateOnePriceGroupInput!): PriceGroup!
  updateOnePriceGroupSize(input: UpdateOnePriceGroupSizeInput!): PriceGroupSize!
  updateOnePrintProfile(input: UpdateOnePrintProfileInput!): PrintProfile!
  updateOneProduct(input: UpdateOneProductInput!): Product!
  updateOneProductCategoryDetail(input: UpdateOneProductCategoryDetailInput!): ProductCategoryDetail!
  updateOneProductCategoryRate(input: UpdateOneProductCategoryRateInput!): ProductCategoryRate!
  updateOneProductColorImage(input: UpdateOneProductColorImageInput!): ProductColorImage!
  updateOneProductColorSale(input: UpdateOneProductColorSaleInput!): ProductColorSale!
  updateOneProductComment(input: UpdateOneProductCommentInput!): ProductComment!
  updateOneProductCommentLike(input: UpdateOneProductCommentLikeInput!): ProductCommentLike!
  updateOneProductLike(input: UpdateOneProductLikeInput!): ProductLike!
  updateOneUser(input: UpdateOneUserInput!): User!
  updateOutOfStockButListedProduct(updateOutOfStockButListedProductInput: UpdateOutOfStockButListedProductInput!): OutOfStockButListedProduct!
  updatePasswordReset(updatePasswordResetInput: UpdatePasswordResetInput!): PasswordReset!
  updatePattern(updatePatternInput: UpdatePatternInput!): Pattern!
  updatePatternCategory(updatePatternCategoryInput: UpdatePatternCategoryInput!): PatternCategory!
  updatePatternLayer(updatePatternLayerInput: UpdatePatternLayerInput!): PatternLayer!
  updatePaymentMethod(updatePaymentMethodInput: UpdatePaymentMethodInput!): PaymentMethod!
  updatePaymentMethodField(updatePaymentMethodFieldInput: UpdatePaymentMethodFieldInput!): PaymentMethodField!
  updatePaymentRequest(updatePaymentRequestInput: UpdatePaymentRequestInput!): PaymentRequest!
  updatePaymentRequestStatus(updatePaymentRequestStatusInput: UpdatePaymentRequestStatusInput!): PaymentRequestStatus!
  updatePermission(updatePermissionInput: UpdatePermissionInput!): Permission!
  updatePermissionGroup(updatePermissionGroupInput: UpdatePermissionGroupInput!): PermissionGroup!
  updatePreorderPreorderStatus(updatePreorderPreorderStatusInput: UpdatePreorderPreorderStatusInput!): PreorderPreorderStatus!
  updatePreorderRegister(updatePreorderRegisterInput: UpdatePreorderRegisterInput!): PreorderRegister!
  updatePreorderStatus(updatePreorderStatusInput: UpdatePreorderStatusInput!): PreorderStatus!
  updatePriceGroup(updatePriceGroupInput: UpdatePriceGroupInput!): PriceGroup!
  updatePriceGroupSize(updatePriceGroupSizeInput: UpdatePriceGroupSizeInput!): PriceGroupSize!
  updatePrintProfile(updatePrintProfileInput: UpdatePrintProfileInput!): PrintProfile!
  updateProduct(updateProductInput: UpdateProductInput!): Product!
  updateProductCategoryDetail(updateProductCategoryDetailInput: UpdateProductCategoryDetailInput!): ProductCategoryDetail!
  updateProductCategoryRate(updateProductCategoryRateInput: UpdateProductCategoryRateInput!): ProductCategoryRate!
  updateProductColorImage(updateProductColorImageInput: UpdateProductColorImageInput!): ProductColorImage!
  updateProductColorSale(updateProductColorSaleInput: UpdateProductColorSaleInput!): ProductColorSale!
  updateProductComment(updateProductCommentInput: UpdateProductCommentInput!): ProductComment!
  updateProductCommentLike(updateProductCommentLikeInput: UpdateProductCommentLikeInput!): ProductCommentLike!
  updateProductLike(updateProductLikeInput: UpdateProductLikeInput!): ProductLike!
  updateUser(updateUserInput: UpdateUserInput!): User!
}

type NeedsPhotographySubproduct {
  announcedDate: DateTime
  announcedUserId: Float
  createdAt: DateTime
  deletedAt: DateTime
  id: ID!
  photographyDate: DateTime
  photographyUserId: Float
  subproductId: Float!
  updatedAt: DateTime
}

type NeedsPhotographySubproductConnection {
  """Array of edges."""
  edges: [NeedsPhotographySubproductEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input NeedsPhotographySubproductDeleteFilter {
  and: [NeedsPhotographySubproductDeleteFilter!]
  id: IDFilterComparison
  or: [NeedsPhotographySubproductDeleteFilter!]
}

type NeedsPhotographySubproductDeleteResponse {
  announcedDate: DateTime
  announcedUserId: Float
  createdAt: DateTime
  deletedAt: DateTime
  id: ID
  photographyDate: DateTime
  photographyUserId: Float
  subproductId: Float
  updatedAt: DateTime
}

type NeedsPhotographySubproductEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the NeedsPhotographySubproduct"""
  node: NeedsPhotographySubproduct!
}

input NeedsPhotographySubproductFilter {
  and: [NeedsPhotographySubproductFilter!]
  id: IDFilterComparison
  or: [NeedsPhotographySubproductFilter!]
}

input NeedsPhotographySubproductSort {
  direction: SortDirection!
  field: NeedsPhotographySubproductSortFields!
  nulls: SortNulls
}

enum NeedsPhotographySubproductSortFields {
  id
}

input NeedsPhotographySubproductUpdateFilter {
  and: [NeedsPhotographySubproductUpdateFilter!]
  id: IDFilterComparison
  or: [NeedsPhotographySubproductUpdateFilter!]
}

type Negotiation {
  createdAt: DateTime
  customerId: Float
  dateTime: DateTime!
  id: ID!
  isRead: Boolean!
  name: String
  negotiationStatusId: Float!
  negotiatorId: Float!
  priority: Float!
  submittedBy: Float!
  tel: String
  updatedAt: DateTime
}

type NegotiationConnection {
  """Array of edges."""
  edges: [NegotiationEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input NegotiationDeleteFilter {
  and: [NegotiationDeleteFilter!]
  id: IDFilterComparison
  or: [NegotiationDeleteFilter!]
}

type NegotiationDeleteResponse {
  createdAt: DateTime
  customerId: Float
  dateTime: DateTime
  id: ID
  isRead: Boolean
  name: String
  negotiationStatusId: Float
  negotiatorId: Float
  priority: Float
  submittedBy: Float
  tel: String
  updatedAt: DateTime
}

type NegotiationEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Negotiation"""
  node: Negotiation!
}

input NegotiationFilter {
  and: [NegotiationFilter!]
  id: IDFilterComparison
  or: [NegotiationFilter!]
}

type NegotiationHistory {
  createdAt: DateTime
  id: ID!
  negotiationId: Float!
  negotiationStatusId: Float!
  newNegotiatorId: Float!
  oldNegotiatorId: Float!
  submittedBy: Float!
  updatedAt: DateTime
}

type NegotiationHistoryConnection {
  """Array of edges."""
  edges: [NegotiationHistoryEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input NegotiationHistoryDeleteFilter {
  and: [NegotiationHistoryDeleteFilter!]
  id: IDFilterComparison
  or: [NegotiationHistoryDeleteFilter!]
}

type NegotiationHistoryDeleteResponse {
  createdAt: DateTime
  id: ID
  negotiationId: Float
  negotiationStatusId: Float
  newNegotiatorId: Float
  oldNegotiatorId: Float
  submittedBy: Float
  updatedAt: DateTime
}

type NegotiationHistoryEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the NegotiationHistory"""
  node: NegotiationHistory!
}

input NegotiationHistoryFilter {
  and: [NegotiationHistoryFilter!]
  id: IDFilterComparison
  or: [NegotiationHistoryFilter!]
}

input NegotiationHistorySort {
  direction: SortDirection!
  field: NegotiationHistorySortFields!
  nulls: SortNulls
}

enum NegotiationHistorySortFields {
  id
}

input NegotiationHistoryUpdateFilter {
  and: [NegotiationHistoryUpdateFilter!]
  id: IDFilterComparison
  or: [NegotiationHistoryUpdateFilter!]
}

input NegotiationSort {
  direction: SortDirection!
  field: NegotiationSortFields!
  nulls: SortNulls
}

enum NegotiationSortFields {
  id
}

type NegotiationStatus {
  createdAt: DateTime
  id: ID!
  name: String
  updatedAt: DateTime
}

type NegotiationStatusConnection {
  """Array of edges."""
  edges: [NegotiationStatusEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input NegotiationStatusDeleteFilter {
  and: [NegotiationStatusDeleteFilter!]
  id: IDFilterComparison
  or: [NegotiationStatusDeleteFilter!]
}

type NegotiationStatusDeleteResponse {
  createdAt: DateTime
  id: ID
  name: String
  updatedAt: DateTime
}

type NegotiationStatusEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the NegotiationStatus"""
  node: NegotiationStatus!
}

input NegotiationStatusFilter {
  and: [NegotiationStatusFilter!]
  id: IDFilterComparison
  or: [NegotiationStatusFilter!]
}

input NegotiationStatusSort {
  direction: SortDirection!
  field: NegotiationStatusSortFields!
  nulls: SortNulls
}

enum NegotiationStatusSortFields {
  id
}

input NegotiationStatusUpdateFilter {
  and: [NegotiationStatusUpdateFilter!]
  id: IDFilterComparison
  or: [NegotiationStatusUpdateFilter!]
}

type NegotiationType {
  createdAt: DateTime
  id: ID!
  name: String
  updatedAt: DateTime
}

type NegotiationTypeConnection {
  """Array of edges."""
  edges: [NegotiationTypeEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input NegotiationTypeDeleteFilter {
  and: [NegotiationTypeDeleteFilter!]
  id: IDFilterComparison
  or: [NegotiationTypeDeleteFilter!]
}

type NegotiationTypeDeleteResponse {
  createdAt: DateTime
  id: ID
  name: String
  updatedAt: DateTime
}

type NegotiationTypeEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the NegotiationType"""
  node: NegotiationType!
}

input NegotiationTypeFilter {
  and: [NegotiationTypeFilter!]
  id: IDFilterComparison
  or: [NegotiationTypeFilter!]
}

input NegotiationTypeSort {
  direction: SortDirection!
  field: NegotiationTypeSortFields!
  nulls: SortNulls
}

enum NegotiationTypeSortFields {
  id
}

input NegotiationTypeUpdateFilter {
  and: [NegotiationTypeUpdateFilter!]
  id: IDFilterComparison
  or: [NegotiationTypeUpdateFilter!]
}

input NegotiationUpdateFilter {
  and: [NegotiationUpdateFilter!]
  id: IDFilterComparison
  or: [NegotiationUpdateFilter!]
}

type NewBorder {
  brand: String
  color: String
  design: String
  designer: String
  id: ID!
  material: String
  name: String
  newBorder: String
  oldBorder: String
  sizes: String
  type: String
}

type NewBorderConnection {
  """Array of edges."""
  edges: [NewBorderEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input NewBorderDeleteFilter {
  and: [NewBorderDeleteFilter!]
  id: IDFilterComparison
  or: [NewBorderDeleteFilter!]
}

type NewBorderDeleteResponse {
  brand: String
  color: String
  design: String
  designer: String
  id: ID
  material: String
  name: String
  newBorder: String
  oldBorder: String
  sizes: String
  type: String
}

type NewBorderEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the NewBorder"""
  node: NewBorder!
}

input NewBorderFilter {
  and: [NewBorderFilter!]
  id: IDFilterComparison
  or: [NewBorderFilter!]
}

input NewBorderSort {
  direction: SortDirection!
  field: NewBorderSortFields!
  nulls: SortNulls
}

enum NewBorderSortFields {
  id
}

input NewBorderUpdateFilter {
  and: [NewBorderUpdateFilter!]
  id: IDFilterComparison
  or: [NewBorderUpdateFilter!]
}

type OauthAccessToken {
  clientId: Float!
  createdAt: DateTime
  expiresAt: DateTime
  id: ID!
  name: String
  revoked: Boolean!
  scopes: String
  updatedAt: DateTime
  userId: Float
}

type OauthAccessTokenConnection {
  """Array of edges."""
  edges: [OauthAccessTokenEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input OauthAccessTokenDeleteFilter {
  and: [OauthAccessTokenDeleteFilter!]
  id: IDFilterComparison
  or: [OauthAccessTokenDeleteFilter!]
}

type OauthAccessTokenDeleteResponse {
  clientId: Float
  createdAt: DateTime
  expiresAt: DateTime
  id: ID
  name: String
  revoked: Boolean
  scopes: String
  updatedAt: DateTime
  userId: Float
}

type OauthAccessTokenEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the OauthAccessToken"""
  node: OauthAccessToken!
}

input OauthAccessTokenFilter {
  and: [OauthAccessTokenFilter!]
  id: IDFilterComparison
  or: [OauthAccessTokenFilter!]
}

input OauthAccessTokenSort {
  direction: SortDirection!
  field: OauthAccessTokenSortFields!
  nulls: SortNulls
}

enum OauthAccessTokenSortFields {
  id
}

input OauthAccessTokenUpdateFilter {
  and: [OauthAccessTokenUpdateFilter!]
  id: IDFilterComparison
  or: [OauthAccessTokenUpdateFilter!]
}

type OauthAuthCode {
  clientId: Float!
  expiresAt: DateTime
  id: ID!
  revoked: Boolean!
  scopes: String
  userId: Float!
}

type OauthAuthCodeConnection {
  """Array of edges."""
  edges: [OauthAuthCodeEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input OauthAuthCodeDeleteFilter {
  and: [OauthAuthCodeDeleteFilter!]
  id: IDFilterComparison
  or: [OauthAuthCodeDeleteFilter!]
}

type OauthAuthCodeDeleteResponse {
  clientId: Float
  expiresAt: DateTime
  id: ID
  revoked: Boolean
  scopes: String
  userId: Float
}

type OauthAuthCodeEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the OauthAuthCode"""
  node: OauthAuthCode!
}

input OauthAuthCodeFilter {
  and: [OauthAuthCodeFilter!]
  id: IDFilterComparison
  or: [OauthAuthCodeFilter!]
}

input OauthAuthCodeSort {
  direction: SortDirection!
  field: OauthAuthCodeSortFields!
  nulls: SortNulls
}

enum OauthAuthCodeSortFields {
  id
}

input OauthAuthCodeUpdateFilter {
  and: [OauthAuthCodeUpdateFilter!]
  id: IDFilterComparison
  or: [OauthAuthCodeUpdateFilter!]
}

type OauthClient {
  createdAt: DateTime
  id: ID!
  name: String!
  passwordClient: Boolean!
  personalAccessClient: Boolean!
  provider: String
  redirect: String!
  revoked: Boolean!
  secret: String
  updatedAt: DateTime
  userId: Float
}

type OauthClientConnection {
  """Array of edges."""
  edges: [OauthClientEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input OauthClientDeleteFilter {
  and: [OauthClientDeleteFilter!]
  id: IDFilterComparison
  or: [OauthClientDeleteFilter!]
}

type OauthClientDeleteResponse {
  createdAt: DateTime
  id: ID
  name: String
  passwordClient: Boolean
  personalAccessClient: Boolean
  provider: String
  redirect: String
  revoked: Boolean
  secret: String
  updatedAt: DateTime
  userId: Float
}

type OauthClientEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the OauthClient"""
  node: OauthClient!
}

input OauthClientFilter {
  and: [OauthClientFilter!]
  id: IDFilterComparison
  or: [OauthClientFilter!]
}

input OauthClientSort {
  direction: SortDirection!
  field: OauthClientSortFields!
  nulls: SortNulls
}

enum OauthClientSortFields {
  id
}

input OauthClientUpdateFilter {
  and: [OauthClientUpdateFilter!]
  id: IDFilterComparison
  or: [OauthClientUpdateFilter!]
}

type OauthPersonalAccessClient {
  clientId: Float!
  createdAt: DateTime
  id: ID!
  updatedAt: DateTime
}

type OauthPersonalAccessClientConnection {
  """Array of edges."""
  edges: [OauthPersonalAccessClientEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input OauthPersonalAccessClientDeleteFilter {
  and: [OauthPersonalAccessClientDeleteFilter!]
  id: IDFilterComparison
  or: [OauthPersonalAccessClientDeleteFilter!]
}

type OauthPersonalAccessClientDeleteResponse {
  clientId: Float
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
}

type OauthPersonalAccessClientEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the OauthPersonalAccessClient"""
  node: OauthPersonalAccessClient!
}

input OauthPersonalAccessClientFilter {
  and: [OauthPersonalAccessClientFilter!]
  id: IDFilterComparison
  or: [OauthPersonalAccessClientFilter!]
}

input OauthPersonalAccessClientSort {
  direction: SortDirection!
  field: OauthPersonalAccessClientSortFields!
  nulls: SortNulls
}

enum OauthPersonalAccessClientSortFields {
  id
}

input OauthPersonalAccessClientUpdateFilter {
  and: [OauthPersonalAccessClientUpdateFilter!]
  id: IDFilterComparison
  or: [OauthPersonalAccessClientUpdateFilter!]
}

type OauthRefreshToken {
  accessTokenId: String!
  expiresAt: DateTime
  id: ID!
  revoked: Boolean!
}

type OauthRefreshTokenConnection {
  """Array of edges."""
  edges: [OauthRefreshTokenEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input OauthRefreshTokenDeleteFilter {
  and: [OauthRefreshTokenDeleteFilter!]
  id: IDFilterComparison
  or: [OauthRefreshTokenDeleteFilter!]
}

type OauthRefreshTokenDeleteResponse {
  accessTokenId: String
  expiresAt: DateTime
  id: ID
  revoked: Boolean
}

type OauthRefreshTokenEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the OauthRefreshToken"""
  node: OauthRefreshToken!
}

input OauthRefreshTokenFilter {
  and: [OauthRefreshTokenFilter!]
  id: IDFilterComparison
  or: [OauthRefreshTokenFilter!]
}

input OauthRefreshTokenSort {
  direction: SortDirection!
  field: OauthRefreshTokenSortFields!
  nulls: SortNulls
}

enum OauthRefreshTokenSortFields {
  id
}

input OauthRefreshTokenUpdateFilter {
  and: [OauthRefreshTokenUpdateFilter!]
  id: IDFilterComparison
  or: [OauthRefreshTokenUpdateFilter!]
}

type OutOfStockButListedProduct {
  createdAt: DateTime
  id: ID!
  productId: Float!
  updatedAt: DateTime
}

type OutOfStockButListedProductConnection {
  """Array of edges."""
  edges: [OutOfStockButListedProductEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input OutOfStockButListedProductDeleteFilter {
  and: [OutOfStockButListedProductDeleteFilter!]
  id: IDFilterComparison
  or: [OutOfStockButListedProductDeleteFilter!]
}

type OutOfStockButListedProductDeleteResponse {
  createdAt: DateTime
  id: ID
  productId: Float
  updatedAt: DateTime
}

type OutOfStockButListedProductEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the OutOfStockButListedProduct"""
  node: OutOfStockButListedProduct!
}

input OutOfStockButListedProductFilter {
  and: [OutOfStockButListedProductFilter!]
  id: IDFilterComparison
  or: [OutOfStockButListedProductFilter!]
}

input OutOfStockButListedProductSort {
  direction: SortDirection!
  field: OutOfStockButListedProductSortFields!
  nulls: SortNulls
}

enum OutOfStockButListedProductSortFields {
  id
}

input OutOfStockButListedProductUpdateFilter {
  and: [OutOfStockButListedProductUpdateFilter!]
  id: IDFilterComparison
  or: [OutOfStockButListedProductUpdateFilter!]
}

type PageInfo {
  """The cursor of the last returned record."""
  endCursor: ConnectionCursor

  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean

  """The cursor of the first returned record."""
  startCursor: ConnectionCursor
}

type PasswordReset {
  createdAt: DateTime
  email: ID!
  token: String!
}

type PasswordResetConnection {
  """Array of edges."""
  edges: [PasswordResetEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input PasswordResetDeleteFilter {
  and: [PasswordResetDeleteFilter!]
  email: IDFilterComparison
  or: [PasswordResetDeleteFilter!]
}

type PasswordResetDeleteResponse {
  createdAt: DateTime
  email: ID
  token: String
}

type PasswordResetEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the PasswordReset"""
  node: PasswordReset!
}

input PasswordResetFilter {
  and: [PasswordResetFilter!]
  email: IDFilterComparison
  or: [PasswordResetFilter!]
}

input PasswordResetSort {
  direction: SortDirection!
  field: PasswordResetSortFields!
  nulls: SortNulls
}

enum PasswordResetSortFields {
  email
}

input PasswordResetUpdateFilter {
  and: [PasswordResetUpdateFilter!]
  email: IDFilterComparison
  or: [PasswordResetUpdateFilter!]
}

type Pattern {
  createdAt: DateTime
  filename: String
  id: ID!
  isActive: Float
  keywords: String
  mime: String
  name: String!
  originalFilename: String
  path: String!
  patternCategoryId: Float!
  sortOrder: Float
  thumbnailFilename: String
  updatedAt: DateTime
  viewCounter: Float
}

type PatternCategory {
  createdAt: DateTime
  id: ID!
  imageId: Float
  isActive: Float
  name: String!
  sortOrder: Float
  updatedAt: DateTime
  viewCounter: Float
}

type PatternCategoryConnection {
  """Array of edges."""
  edges: [PatternCategoryEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input PatternCategoryDeleteFilter {
  and: [PatternCategoryDeleteFilter!]
  id: IDFilterComparison
  or: [PatternCategoryDeleteFilter!]
}

type PatternCategoryDeleteResponse {
  createdAt: DateTime
  id: ID
  imageId: Float
  isActive: Float
  name: String
  sortOrder: Float
  updatedAt: DateTime
  viewCounter: Float
}

type PatternCategoryEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the PatternCategory"""
  node: PatternCategory!
}

input PatternCategoryFilter {
  and: [PatternCategoryFilter!]
  id: IDFilterComparison
  or: [PatternCategoryFilter!]
}

input PatternCategorySort {
  direction: SortDirection!
  field: PatternCategorySortFields!
  nulls: SortNulls
}

enum PatternCategorySortFields {
  id
}

input PatternCategoryUpdateFilter {
  and: [PatternCategoryUpdateFilter!]
  id: IDFilterComparison
  or: [PatternCategoryUpdateFilter!]
}

type PatternConnection {
  """Array of edges."""
  edges: [PatternEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input PatternDeleteFilter {
  and: [PatternDeleteFilter!]
  id: IDFilterComparison
  or: [PatternDeleteFilter!]
}

type PatternDeleteResponse {
  createdAt: DateTime
  filename: String
  id: ID
  isActive: Float
  keywords: String
  mime: String
  name: String
  originalFilename: String
  path: String
  patternCategoryId: Float
  sortOrder: Float
  thumbnailFilename: String
  updatedAt: DateTime
  viewCounter: Float
}

type PatternEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Pattern"""
  node: Pattern!
}

input PatternFilter {
  and: [PatternFilter!]
  id: IDFilterComparison
  or: [PatternFilter!]
}

type PatternLayer {
  centerX: Float!
  centerY: Float!
  createdAt: DateTime
  designId: Float!
  filename: String!
  id: ID!
  path: String!
  patternId: Float!
  repeat: Float!
  rotation: Float!
  scaleX: Float!
  scaleY: Float!
  sortOrder: Float!
  updatedAt: DateTime
}

type PatternLayerConnection {
  """Array of edges."""
  edges: [PatternLayerEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input PatternLayerDeleteFilter {
  and: [PatternLayerDeleteFilter!]
  id: IDFilterComparison
  or: [PatternLayerDeleteFilter!]
}

type PatternLayerDeleteResponse {
  centerX: Float
  centerY: Float
  createdAt: DateTime
  designId: Float
  filename: String
  id: ID
  path: String
  patternId: Float
  repeat: Float
  rotation: Float
  scaleX: Float
  scaleY: Float
  sortOrder: Float
  updatedAt: DateTime
}

type PatternLayerEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the PatternLayer"""
  node: PatternLayer!
}

input PatternLayerFilter {
  and: [PatternLayerFilter!]
  id: IDFilterComparison
  or: [PatternLayerFilter!]
}

input PatternLayerSort {
  direction: SortDirection!
  field: PatternLayerSortFields!
  nulls: SortNulls
}

enum PatternLayerSortFields {
  id
}

input PatternLayerUpdateFilter {
  and: [PatternLayerUpdateFilter!]
  id: IDFilterComparison
  or: [PatternLayerUpdateFilter!]
}

input PatternSort {
  direction: SortDirection!
  field: PatternSortFields!
  nulls: SortNulls
}

enum PatternSortFields {
  id
}

input PatternUpdateFilter {
  and: [PatternUpdateFilter!]
  id: IDFilterComparison
  or: [PatternUpdateFilter!]
}

type PaymentMethod {
  id: ID!
  name: String!
}

type PaymentMethodConnection {
  """Array of edges."""
  edges: [PaymentMethodEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input PaymentMethodDeleteFilter {
  and: [PaymentMethodDeleteFilter!]
  id: IDFilterComparison
  or: [PaymentMethodDeleteFilter!]
}

type PaymentMethodDeleteResponse {
  id: ID
  name: String
}

type PaymentMethodEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the PaymentMethod"""
  node: PaymentMethod!
}

type PaymentMethodField {
  createdAt: DateTime
  id: ID!
  invoiceId: Float!
  name: String!
  paymentIdentifier: String!
  paymentMethodId: Float!
  updatedAt: DateTime
  value: String!
}

type PaymentMethodFieldConnection {
  """Array of edges."""
  edges: [PaymentMethodFieldEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input PaymentMethodFieldDeleteFilter {
  and: [PaymentMethodFieldDeleteFilter!]
  id: IDFilterComparison
  or: [PaymentMethodFieldDeleteFilter!]
}

type PaymentMethodFieldDeleteResponse {
  createdAt: DateTime
  id: ID
  invoiceId: Float
  name: String
  paymentIdentifier: String
  paymentMethodId: Float
  updatedAt: DateTime
  value: String
}

type PaymentMethodFieldEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the PaymentMethodField"""
  node: PaymentMethodField!
}

input PaymentMethodFieldFilter {
  and: [PaymentMethodFieldFilter!]
  id: IDFilterComparison
  or: [PaymentMethodFieldFilter!]
}

input PaymentMethodFieldSort {
  direction: SortDirection!
  field: PaymentMethodFieldSortFields!
  nulls: SortNulls
}

enum PaymentMethodFieldSortFields {
  id
}

input PaymentMethodFieldUpdateFilter {
  and: [PaymentMethodFieldUpdateFilter!]
  id: IDFilterComparison
  or: [PaymentMethodFieldUpdateFilter!]
}

input PaymentMethodFilter {
  and: [PaymentMethodFilter!]
  id: IDFilterComparison
  or: [PaymentMethodFilter!]
}

input PaymentMethodSort {
  direction: SortDirection!
  field: PaymentMethodSortFields!
  nulls: SortNulls
}

enum PaymentMethodSortFields {
  id
}

input PaymentMethodUpdateFilter {
  and: [PaymentMethodUpdateFilter!]
  id: IDFilterComparison
  or: [PaymentMethodUpdateFilter!]
}

type PaymentRequest {
  adminUserId: Float
  amount: String
  bankAccountNumber: String
  createdAt: DateTime!
  id: ID!
  message: String
  paymentRequestStatusId: Float!
  updatedAt: DateTime
  visitorId: Float!
}

type PaymentRequestConnection {
  """Array of edges."""
  edges: [PaymentRequestEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input PaymentRequestDeleteFilter {
  and: [PaymentRequestDeleteFilter!]
  id: IDFilterComparison
  or: [PaymentRequestDeleteFilter!]
}

type PaymentRequestDeleteResponse {
  adminUserId: Float
  amount: String
  bankAccountNumber: String
  createdAt: DateTime
  id: ID
  message: String
  paymentRequestStatusId: Float
  updatedAt: DateTime
  visitorId: Float
}

type PaymentRequestEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the PaymentRequest"""
  node: PaymentRequest!
}

input PaymentRequestFilter {
  and: [PaymentRequestFilter!]
  id: IDFilterComparison
  or: [PaymentRequestFilter!]
}

input PaymentRequestSort {
  direction: SortDirection!
  field: PaymentRequestSortFields!
  nulls: SortNulls
}

enum PaymentRequestSortFields {
  id
}

type PaymentRequestStatus {
  createdAt: DateTime!
  id: ID!
  name: String!
  updatedAt: DateTime!
}

type PaymentRequestStatusConnection {
  """Array of edges."""
  edges: [PaymentRequestStatusEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input PaymentRequestStatusDeleteFilter {
  and: [PaymentRequestStatusDeleteFilter!]
  id: IDFilterComparison
  or: [PaymentRequestStatusDeleteFilter!]
}

type PaymentRequestStatusDeleteResponse {
  createdAt: DateTime
  id: ID
  name: String
  updatedAt: DateTime
}

type PaymentRequestStatusEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the PaymentRequestStatus"""
  node: PaymentRequestStatus!
}

input PaymentRequestStatusFilter {
  and: [PaymentRequestStatusFilter!]
  id: IDFilterComparison
  or: [PaymentRequestStatusFilter!]
}

input PaymentRequestStatusSort {
  direction: SortDirection!
  field: PaymentRequestStatusSortFields!
  nulls: SortNulls
}

enum PaymentRequestStatusSortFields {
  id
}

input PaymentRequestStatusUpdateFilter {
  and: [PaymentRequestStatusUpdateFilter!]
  id: IDFilterComparison
  or: [PaymentRequestStatusUpdateFilter!]
}

input PaymentRequestUpdateFilter {
  and: [PaymentRequestUpdateFilter!]
  id: IDFilterComparison
  or: [PaymentRequestUpdateFilter!]
}

type Permission {
  createdAt: DateTime
  guardName: String!
  id: ID!
  name: String!
  parentId: Float
  permissionGroupId: Float
  updatedAt: DateTime
}

type PermissionConnection {
  """Array of edges."""
  edges: [PermissionEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input PermissionDeleteFilter {
  and: [PermissionDeleteFilter!]
  id: IDFilterComparison
  or: [PermissionDeleteFilter!]
}

type PermissionDeleteResponse {
  createdAt: DateTime
  guardName: String
  id: ID
  name: String
  parentId: Float
  permissionGroupId: Float
  updatedAt: DateTime
}

type PermissionEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Permission"""
  node: Permission!
}

input PermissionFilter {
  and: [PermissionFilter!]
  id: IDFilterComparison
  or: [PermissionFilter!]
}

type PermissionGroup {
  createdAt: DateTime
  id: ID!
  name: String!
  updatedAt: DateTime
}

type PermissionGroupConnection {
  """Array of edges."""
  edges: [PermissionGroupEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input PermissionGroupDeleteFilter {
  and: [PermissionGroupDeleteFilter!]
  id: IDFilterComparison
  or: [PermissionGroupDeleteFilter!]
}

type PermissionGroupDeleteResponse {
  createdAt: DateTime
  id: ID
  name: String
  updatedAt: DateTime
}

type PermissionGroupEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the PermissionGroup"""
  node: PermissionGroup!
}

input PermissionGroupFilter {
  and: [PermissionGroupFilter!]
  id: IDFilterComparison
  or: [PermissionGroupFilter!]
}

input PermissionGroupSort {
  direction: SortDirection!
  field: PermissionGroupSortFields!
  nulls: SortNulls
}

enum PermissionGroupSortFields {
  id
}

input PermissionGroupUpdateFilter {
  and: [PermissionGroupUpdateFilter!]
  id: IDFilterComparison
  or: [PermissionGroupUpdateFilter!]
}

input PermissionSort {
  direction: SortDirection!
  field: PermissionSortFields!
  nulls: SortNulls
}

enum PermissionSortFields {
  id
}

input PermissionUpdateFilter {
  and: [PermissionUpdateFilter!]
  id: IDFilterComparison
  or: [PermissionUpdateFilter!]
}

type Preorder {
  activationCode: String
  activationSendDate: DateTime
  activationSendDateP: String
  activationSendTurn: Float!
  assignedUserId: Float
  companyDescription: String
  createdAt: DateTime
  createdAtP: String
  customerDescription: String
  dateOfTurn: String
  dateOfTurnP: String
  deletedAt: DateTime
  expirationDate: DateTime
  expirationDateP: String
  id: ID!
  isActivated: Boolean!
  lastCallDate: DateTime
  lastCallDateP: String
  name: String
  phone: String
  phone2: String
  preorderStatusId: Float!
  productId: Float
  salesPersonId: Float
  subproductId: Float
  trackingCode: String
  updatedAt: DateTime
  userId: Float
}

type PreorderConnection {
  """Array of edges."""
  edges: [PreorderEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input PreorderDeleteFilter {
  and: [PreorderDeleteFilter!]
  id: IDFilterComparison
  or: [PreorderDeleteFilter!]
}

type PreorderDeleteResponse {
  activationCode: String
  activationSendDate: DateTime
  activationSendDateP: String
  activationSendTurn: Float
  assignedUserId: Float
  companyDescription: String
  createdAt: DateTime
  createdAtP: String
  customerDescription: String
  dateOfTurn: String
  dateOfTurnP: String
  deletedAt: DateTime
  expirationDate: DateTime
  expirationDateP: String
  id: ID
  isActivated: Boolean
  lastCallDate: DateTime
  lastCallDateP: String
  name: String
  phone: String
  phone2: String
  preorderStatusId: Float
  productId: Float
  salesPersonId: Float
  subproductId: Float
  trackingCode: String
  updatedAt: DateTime
  userId: Float
}

type PreorderEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Preorder"""
  node: Preorder!
}

input PreorderFilter {
  and: [PreorderFilter!]
  id: IDFilterComparison
  or: [PreorderFilter!]
}

type PreorderPreorderStatus {
  companyDescription: String
  createdAt: DateTime
  id: Float!
  preorderId: Float!
  preorderStatusId: Float!
  updatedAt: DateTime
  userId: Float
}

type PreorderRegister {
  createdAt: DateTime
  id: ID!
  isConfirmed: Boolean!
  isPaid: Boolean!
  moneyTransferConfirmedBy: Float
  moneyTransferRefCode: String
  orderId: String
  paymentAmount: String!
  paymentTypeId: Float
  preorderDate: DateTime
  preorderNumber: String
  refCodeSales: String
  refId: String
  saleRefId: String
  updatedAt: DateTime
  userId: Float!
  withdrawnAmount: String!
}

type PreorderRegisterConnection {
  """Array of edges."""
  edges: [PreorderRegisterEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input PreorderRegisterDeleteFilter {
  and: [PreorderRegisterDeleteFilter!]
  id: IDFilterComparison
  or: [PreorderRegisterDeleteFilter!]
}

type PreorderRegisterDeleteResponse {
  createdAt: DateTime
  id: ID
  isConfirmed: Boolean
  isPaid: Boolean
  moneyTransferConfirmedBy: Float
  moneyTransferRefCode: String
  orderId: String
  paymentAmount: String
  paymentTypeId: Float
  preorderDate: DateTime
  preorderNumber: String
  refCodeSales: String
  refId: String
  saleRefId: String
  updatedAt: DateTime
  userId: Float
  withdrawnAmount: String
}

type PreorderRegisterEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the PreorderRegister"""
  node: PreorderRegister!
}

input PreorderRegisterFilter {
  and: [PreorderRegisterFilter!]
  id: IDFilterComparison
  or: [PreorderRegisterFilter!]
}

input PreorderRegisterSort {
  direction: SortDirection!
  field: PreorderRegisterSortFields!
  nulls: SortNulls
}

enum PreorderRegisterSortFields {
  id
}

input PreorderRegisterUpdateFilter {
  and: [PreorderRegisterUpdateFilter!]
  id: IDFilterComparison
  or: [PreorderRegisterUpdateFilter!]
}

input PreorderSort {
  direction: SortDirection!
  field: PreorderSortFields!
  nulls: SortNulls
}

enum PreorderSortFields {
  id
}

type PreorderStatus {
  createdAt: DateTime
  id: ID!
  status: String!
  updatedAt: DateTime
}

type PreorderStatusConnection {
  """Array of edges."""
  edges: [PreorderStatusEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input PreorderStatusDeleteFilter {
  and: [PreorderStatusDeleteFilter!]
  id: IDFilterComparison
  or: [PreorderStatusDeleteFilter!]
}

type PreorderStatusDeleteResponse {
  createdAt: DateTime
  id: ID
  status: String
  updatedAt: DateTime
}

type PreorderStatusEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the PreorderStatus"""
  node: PreorderStatus!
}

input PreorderStatusFilter {
  and: [PreorderStatusFilter!]
  id: IDFilterComparison
  or: [PreorderStatusFilter!]
}

input PreorderStatusSort {
  direction: SortDirection!
  field: PreorderStatusSortFields!
  nulls: SortNulls
}

enum PreorderStatusSortFields {
  id
}

input PreorderStatusUpdateFilter {
  and: [PreorderStatusUpdateFilter!]
  id: IDFilterComparison
  or: [PreorderStatusUpdateFilter!]
}

input PreorderUpdateFilter {
  and: [PreorderUpdateFilter!]
  id: IDFilterComparison
  or: [PreorderUpdateFilter!]
}

type PriceGroup {
  createdAt: DateTime
  id: ID!
  name: String!
  updatedAt: DateTime
}

type PriceGroupConnection {
  """Array of edges."""
  edges: [PriceGroupEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input PriceGroupDeleteFilter {
  and: [PriceGroupDeleteFilter!]
  id: IDFilterComparison
  or: [PriceGroupDeleteFilter!]
}

type PriceGroupDeleteResponse {
  createdAt: DateTime
  id: ID
  name: String
  updatedAt: DateTime
}

type PriceGroupEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the PriceGroup"""
  node: PriceGroup!
}

input PriceGroupFilter {
  and: [PriceGroupFilter!]
  id: IDFilterComparison
  or: [PriceGroupFilter!]
}

type PriceGroupSize {
  basicCarpetSizeId: Float!
  bundlePadPrice: String
  bundlePrice: String
  createdAt: DateTime
  id: ID!
  padPrice: String!
  price: String!
  priceGroupId: Float!
  updatedAt: DateTime
}

type PriceGroupSizeConnection {
  """Array of edges."""
  edges: [PriceGroupSizeEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input PriceGroupSizeDeleteFilter {
  and: [PriceGroupSizeDeleteFilter!]
  id: IDFilterComparison
  or: [PriceGroupSizeDeleteFilter!]
}

type PriceGroupSizeDeleteResponse {
  basicCarpetSizeId: Float
  bundlePadPrice: String
  bundlePrice: String
  createdAt: DateTime
  id: ID
  padPrice: String
  price: String
  priceGroupId: Float
  updatedAt: DateTime
}

type PriceGroupSizeEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the PriceGroupSize"""
  node: PriceGroupSize!
}

input PriceGroupSizeFilter {
  and: [PriceGroupSizeFilter!]
  id: IDFilterComparison
  or: [PriceGroupSizeFilter!]
}

input PriceGroupSizeSort {
  direction: SortDirection!
  field: PriceGroupSizeSortFields!
  nulls: SortNulls
}

enum PriceGroupSizeSortFields {
  id
}

input PriceGroupSizeUpdateFilter {
  and: [PriceGroupSizeUpdateFilter!]
  id: IDFilterComparison
  or: [PriceGroupSizeUpdateFilter!]
}

input PriceGroupSort {
  direction: SortDirection!
  field: PriceGroupSortFields!
  nulls: SortNulls
}

enum PriceGroupSortFields {
  id
}

input PriceGroupUpdateFilter {
  and: [PriceGroupUpdateFilter!]
  id: IDFilterComparison
  or: [PriceGroupUpdateFilter!]
}

type PrintProfile {
  blackCurve: String
  blackGain: String
  createdAt: DateTime
  createdBy: Float
  cyanCurve: String
  cyanGain: String
  fabricsBackgroundColor: String
  fabricsPerSquareMeterWeight: String
  fabricsTextureGrade: String
  headHeight: String
  heatSpeed: String
  heatTemperature: String
  id: ID!
  inkCode: String
  isActive: Boolean!
  laminateGlueType: String
  magentaCurve: String
  magentaGain: String
  passCount: String
  totalInkLimit: String
  updatedAt: DateTime
  updatedBy: Float
  versionChangeDate: DateTime!
  versionNo: String!
  yellowCurve: String
  yellowGain: String
}

type PrintProfileConnection {
  """Array of edges."""
  edges: [PrintProfileEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input PrintProfileDeleteFilter {
  and: [PrintProfileDeleteFilter!]
  id: IDFilterComparison
  or: [PrintProfileDeleteFilter!]
}

type PrintProfileDeleteResponse {
  blackCurve: String
  blackGain: String
  createdAt: DateTime
  createdBy: Float
  cyanCurve: String
  cyanGain: String
  fabricsBackgroundColor: String
  fabricsPerSquareMeterWeight: String
  fabricsTextureGrade: String
  headHeight: String
  heatSpeed: String
  heatTemperature: String
  id: ID
  inkCode: String
  isActive: Boolean
  laminateGlueType: String
  magentaCurve: String
  magentaGain: String
  passCount: String
  totalInkLimit: String
  updatedAt: DateTime
  updatedBy: Float
  versionChangeDate: DateTime
  versionNo: String
  yellowCurve: String
  yellowGain: String
}

type PrintProfileEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the PrintProfile"""
  node: PrintProfile!
}

input PrintProfileFilter {
  and: [PrintProfileFilter!]
  id: IDFilterComparison
  or: [PrintProfileFilter!]
}

input PrintProfileSort {
  direction: SortDirection!
  field: PrintProfileSortFields!
  nulls: SortNulls
}

enum PrintProfileSortFields {
  id
}

input PrintProfileUpdateFilter {
  and: [PrintProfileUpdateFilter!]
  id: IDFilterComparison
  or: [PrintProfileUpdateFilter!]
}

type Product {
  activeUpdatedAt: DateTime!
  bestSellerColorId: Float
  carpetHasRoots: Boolean!
  code: String
  collectionName: String
  colors: String
  createdAt: DateTime
  description: String
  descriptionEn: String
  designerIsGeneral: Float!
  emallsActive: Boolean!
  emallsTitle: String
  id: ID!
  imageId: Float
  isActive: Boolean!
  isCarpetPad: Boolean
  isSelfEmployedDesigner: Float!
  isShaggy: Boolean!
  length: Float
  metaTags: String
  metaTagsEn: String
  minBasicCarpetSizeId: Float
  name: String!
  nameEn: String
  nameEs: String
  newSubproductsCreated: Float!
  pageTitle: String
  pageTitleEn: String
  parentProductId: Float
  price: String
  priceGroupId: Float
  rate: Float!
  rateCount: Float
  russianName: String
  saleCount: Float!
  saleCountDaily: Float!
  searchName: String
  searchNameEn: String
  size: Float!
  sizeIsCustomizable: Float!
  snapppayActive: Boolean!
  snapppaySortOrder: Boolean
  sortOrder: Float
  totalDislike: Float!
  totalLike: Float!
  updatedAt: DateTime
  urlSlug: String
  urlSlugEn: String
  viewCounter: Float
  width: Float
}

type ProductCategoryDetail {
  createdAt: DateTime
  detailText: String
  detailTextEn: String
  id: ID!
  isActive: Boolean!
  productCategoryId: Float
  sortOrder: Float
  title: String
  titleEn: String
  updatedAt: DateTime
}

type ProductCategoryDetailConnection {
  """Array of edges."""
  edges: [ProductCategoryDetailEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ProductCategoryDetailDeleteFilter {
  and: [ProductCategoryDetailDeleteFilter!]
  id: IDFilterComparison
  or: [ProductCategoryDetailDeleteFilter!]
}

type ProductCategoryDetailDeleteResponse {
  createdAt: DateTime
  detailText: String
  detailTextEn: String
  id: ID
  isActive: Boolean
  productCategoryId: Float
  sortOrder: Float
  title: String
  titleEn: String
  updatedAt: DateTime
}

type ProductCategoryDetailEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ProductCategoryDetail"""
  node: ProductCategoryDetail!
}

input ProductCategoryDetailFilter {
  and: [ProductCategoryDetailFilter!]
  id: IDFilterComparison
  or: [ProductCategoryDetailFilter!]
}

input ProductCategoryDetailSort {
  direction: SortDirection!
  field: ProductCategoryDetailSortFields!
  nulls: SortNulls
}

enum ProductCategoryDetailSortFields {
  id
}

input ProductCategoryDetailUpdateFilter {
  and: [ProductCategoryDetailUpdateFilter!]
  id: IDFilterComparison
  or: [ProductCategoryDetailUpdateFilter!]
}

type ProductCategoryRate {
  createdAt: DateTime
  id: ID!
  productCategoryId: Float!
  rateId: Float!
  updatedAt: DateTime
}

type ProductCategoryRateConnection {
  """Array of edges."""
  edges: [ProductCategoryRateEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ProductCategoryRateDeleteFilter {
  and: [ProductCategoryRateDeleteFilter!]
  id: IDFilterComparison
  or: [ProductCategoryRateDeleteFilter!]
}

type ProductCategoryRateDeleteResponse {
  createdAt: DateTime
  id: ID
  productCategoryId: Float
  rateId: Float
  updatedAt: DateTime
}

type ProductCategoryRateEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ProductCategoryRate"""
  node: ProductCategoryRate!
}

input ProductCategoryRateFilter {
  and: [ProductCategoryRateFilter!]
  id: IDFilterComparison
  or: [ProductCategoryRateFilter!]
}

input ProductCategoryRateSort {
  direction: SortDirection!
  field: ProductCategoryRateSortFields!
  nulls: SortNulls
}

enum ProductCategoryRateSortFields {
  id
}

input ProductCategoryRateUpdateFilter {
  and: [ProductCategoryRateUpdateFilter!]
  id: IDFilterComparison
  or: [ProductCategoryRateUpdateFilter!]
}

type ProductColorImage {
  basicCarpetColorId: Float
  createdAt: DateTime
  id: ID!
  imageId: Float!
  productId: Float!
  sortOrder: Float
  updatedAt: DateTime
}

type ProductColorImageConnection {
  """Array of edges."""
  edges: [ProductColorImageEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ProductColorImageDeleteFilter {
  and: [ProductColorImageDeleteFilter!]
  id: IDFilterComparison
  or: [ProductColorImageDeleteFilter!]
}

type ProductColorImageDeleteResponse {
  basicCarpetColorId: Float
  createdAt: DateTime
  id: ID
  imageId: Float
  productId: Float
  sortOrder: Float
  updatedAt: DateTime
}

type ProductColorImageEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ProductColorImage"""
  node: ProductColorImage!
}

input ProductColorImageFilter {
  and: [ProductColorImageFilter!]
  id: IDFilterComparison
  or: [ProductColorImageFilter!]
}

input ProductColorImageSort {
  direction: SortDirection!
  field: ProductColorImageSortFields!
  nulls: SortNulls
}

enum ProductColorImageSortFields {
  id
}

input ProductColorImageUpdateFilter {
  and: [ProductColorImageUpdateFilter!]
  id: IDFilterComparison
  or: [ProductColorImageUpdateFilter!]
}

type ProductColorSale {
  averageSaleCount: Float!
  basicCarpetColorId: Float!
  createdAt: DateTime
  id: ID!
  productId: Float!
  saleCount: Float!
  saleCountYear: Float!
  updatedAt: DateTime
}

type ProductColorSaleConnection {
  """Array of edges."""
  edges: [ProductColorSaleEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ProductColorSaleDeleteFilter {
  and: [ProductColorSaleDeleteFilter!]
  id: IDFilterComparison
  or: [ProductColorSaleDeleteFilter!]
}

type ProductColorSaleDeleteResponse {
  averageSaleCount: Float
  basicCarpetColorId: Float
  createdAt: DateTime
  id: ID
  productId: Float
  saleCount: Float
  saleCountYear: Float
  updatedAt: DateTime
}

type ProductColorSaleEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ProductColorSale"""
  node: ProductColorSale!
}

input ProductColorSaleFilter {
  and: [ProductColorSaleFilter!]
  id: IDFilterComparison
  or: [ProductColorSaleFilter!]
}

input ProductColorSaleSort {
  direction: SortDirection!
  field: ProductColorSaleSortFields!
  nulls: SortNulls
}

enum ProductColorSaleSortFields {
  id
}

input ProductColorSaleUpdateFilter {
  and: [ProductColorSaleUpdateFilter!]
  id: IDFilterComparison
  or: [ProductColorSaleUpdateFilter!]
}

type ProductComment {
  approved: Boolean!
  approvedBy: Float
  comment: String!
  createdAt: DateTime
  id: ID!
  isBuyer: Boolean
  parentCommentId: Float
  productId: Float!
  recommended: Boolean
  starred: Boolean!
  subproductId: Float
  totalDislikes: Float!
  totalLikes: Float!
  updatedAt: DateTime
  userId: Float!
}

type ProductCommentConnection {
  """Array of edges."""
  edges: [ProductCommentEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ProductCommentDeleteFilter {
  and: [ProductCommentDeleteFilter!]
  id: IDFilterComparison
  or: [ProductCommentDeleteFilter!]
}

type ProductCommentDeleteResponse {
  approved: Boolean
  approvedBy: Float
  comment: String
  createdAt: DateTime
  id: ID
  isBuyer: Boolean
  parentCommentId: Float
  productId: Float
  recommended: Boolean
  starred: Boolean
  subproductId: Float
  totalDislikes: Float
  totalLikes: Float
  updatedAt: DateTime
  userId: Float
}

type ProductCommentEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ProductComment"""
  node: ProductComment!
}

input ProductCommentFilter {
  and: [ProductCommentFilter!]
  id: IDFilterComparison
  or: [ProductCommentFilter!]
}

type ProductCommentLike {
  createdAt: DateTime
  id: ID!
  isDisliked: Boolean
  isLiked: Boolean
  productCommentId: Float!
  updatedAt: DateTime
  userId: Float!
}

type ProductCommentLikeConnection {
  """Array of edges."""
  edges: [ProductCommentLikeEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ProductCommentLikeDeleteFilter {
  and: [ProductCommentLikeDeleteFilter!]
  id: IDFilterComparison
  or: [ProductCommentLikeDeleteFilter!]
}

type ProductCommentLikeDeleteResponse {
  createdAt: DateTime
  id: ID
  isDisliked: Boolean
  isLiked: Boolean
  productCommentId: Float
  updatedAt: DateTime
  userId: Float
}

type ProductCommentLikeEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ProductCommentLike"""
  node: ProductCommentLike!
}

input ProductCommentLikeFilter {
  and: [ProductCommentLikeFilter!]
  id: IDFilterComparison
  or: [ProductCommentLikeFilter!]
}

input ProductCommentLikeSort {
  direction: SortDirection!
  field: ProductCommentLikeSortFields!
  nulls: SortNulls
}

enum ProductCommentLikeSortFields {
  id
}

input ProductCommentLikeUpdateFilter {
  and: [ProductCommentLikeUpdateFilter!]
  id: IDFilterComparison
  or: [ProductCommentLikeUpdateFilter!]
}

input ProductCommentSort {
  direction: SortDirection!
  field: ProductCommentSortFields!
  nulls: SortNulls
}

enum ProductCommentSortFields {
  id
}

input ProductCommentUpdateFilter {
  and: [ProductCommentUpdateFilter!]
  id: IDFilterComparison
  or: [ProductCommentUpdateFilter!]
}

type ProductConnection {
  """Array of edges."""
  edges: [ProductEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ProductDeleteFilter {
  and: [ProductDeleteFilter!]
  id: IDFilterComparison
  or: [ProductDeleteFilter!]
}

type ProductDeleteResponse {
  activeUpdatedAt: DateTime
  bestSellerColorId: Float
  carpetHasRoots: Boolean
  code: String
  collectionName: String
  colors: String
  createdAt: DateTime
  description: String
  descriptionEn: String
  designerIsGeneral: Float
  emallsActive: Boolean
  emallsTitle: String
  id: ID
  imageId: Float
  isActive: Boolean
  isCarpetPad: Boolean
  isSelfEmployedDesigner: Float
  isShaggy: Boolean
  length: Float
  metaTags: String
  metaTagsEn: String
  minBasicCarpetSizeId: Float
  name: String
  nameEn: String
  nameEs: String
  newSubproductsCreated: Float
  pageTitle: String
  pageTitleEn: String
  parentProductId: Float
  price: String
  priceGroupId: Float
  rate: Float
  rateCount: Float
  russianName: String
  saleCount: Float
  saleCountDaily: Float
  searchName: String
  searchNameEn: String
  size: Float
  sizeIsCustomizable: Float
  snapppayActive: Boolean
  snapppaySortOrder: Boolean
  sortOrder: Float
  totalDislike: Float
  totalLike: Float
  updatedAt: DateTime
  urlSlug: String
  urlSlugEn: String
  viewCounter: Float
  width: Float
}

type ProductEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Product"""
  node: Product!
}

input ProductFilter {
  and: [ProductFilter!]
  id: IDFilterComparison
  or: [ProductFilter!]
}

type ProductLike {
  createdAt: DateTime
  id: ID!
  isLike: Boolean!
  productId: Float!
  subproductId: Float
  updatedAt: DateTime
  userId: Float!
}

type ProductLikeConnection {
  """Array of edges."""
  edges: [ProductLikeEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ProductLikeDeleteFilter {
  and: [ProductLikeDeleteFilter!]
  id: IDFilterComparison
  or: [ProductLikeDeleteFilter!]
}

type ProductLikeDeleteResponse {
  createdAt: DateTime
  id: ID
  isLike: Boolean
  productId: Float
  subproductId: Float
  updatedAt: DateTime
  userId: Float
}

type ProductLikeEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ProductLike"""
  node: ProductLike!
}

input ProductLikeFilter {
  and: [ProductLikeFilter!]
  id: IDFilterComparison
  or: [ProductLikeFilter!]
}

input ProductLikeSort {
  direction: SortDirection!
  field: ProductLikeSortFields!
  nulls: SortNulls
}

enum ProductLikeSortFields {
  id
}

input ProductLikeUpdateFilter {
  and: [ProductLikeUpdateFilter!]
  id: IDFilterComparison
  or: [ProductLikeUpdateFilter!]
}

input ProductSort {
  direction: SortDirection!
  field: ProductSortFields!
  nulls: SortNulls
}

enum ProductSortFields {
  id
}

input ProductUpdateFilter {
  and: [ProductUpdateFilter!]
  id: IDFilterComparison
  or: [ProductUpdateFilter!]
}

type Query {
  activities(
    """Specify to filter the records returned."""
    filter: ActivityFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ActivitySort!]! = []
  ): ActivityConnection!
  activity(
    """The id of the record to find."""
    id: ID!
  ): Activity!
  address(
    """The id of the record to find."""
    id: ID!
  ): Address!
  addresses(
    """Specify to filter the records returned."""
    filter: AddressFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [AddressSort!]! = []
  ): AddressConnection!
  attribute(id: Int!): Attribute!
  attributeAttributeGroup(id: Int!): AttributeAttributeGroup!
  attributeGroup(id: Int!): AttributeGroup!
  attributeItem(id: Int!): AttributeItem!
  attributeProduct(id: Int!): AttributeProduct!
  attributeSubproduct(id: Int!): AttributeSubproduct!
  automationEvent(
    """The id of the record to find."""
    id: ID!
  ): AutomationEvent!
  automationEvents(
    """Specify to filter the records returned."""
    filter: AutomationEventFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [AutomationEventSort!]! = []
  ): AutomationEventConnection!
  automationRfmScore(
    """The id of the record to find."""
    id: ID!
  ): AutomationRfmScore!
  automationRfmScores(
    """Specify to filter the records returned."""
    filter: AutomationRfmScoreFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [AutomationRfmScoreSort!]! = []
  ): AutomationRfmScoreConnection!
  basicCarpetBorder(
    """The id of the record to find."""
    id: ID!
  ): BasicCarpetBorder!
  basicCarpetBorders(
    """Specify to filter the records returned."""
    filter: BasicCarpetBorderFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [BasicCarpetBorderSort!]! = []
  ): BasicCarpetBorderConnection!
  basicCarpetColor(
    """The id of the record to find."""
    id: ID!
  ): BasicCarpetColor!
  basicCarpetColors(
    """Specify to filter the records returned."""
    filter: BasicCarpetColorFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [BasicCarpetColorSort!]! = []
  ): BasicCarpetColorConnection!
  basicCarpetDesign(
    """The id of the record to find."""
    id: ID!
  ): BasicCarpetDesign!
  basicCarpetDesigner(
    """The id of the record to find."""
    id: ID!
  ): BasicCarpetDesigner!
  basicCarpetDesigners(
    """Specify to filter the records returned."""
    filter: BasicCarpetDesignerFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [BasicCarpetDesignerSort!]! = []
  ): BasicCarpetDesignerConnection!
  basicCarpetDesigns(
    """Specify to filter the records returned."""
    filter: BasicCarpetDesignFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [BasicCarpetDesignSort!]! = []
  ): BasicCarpetDesignConnection!
  basicCarpetMaterial(
    """The id of the record to find."""
    id: ID!
  ): BasicCarpetMaterial!
  basicCarpetMaterials(
    """Specify to filter the records returned."""
    filter: BasicCarpetMaterialFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [BasicCarpetMaterialSort!]! = []
  ): BasicCarpetMaterialConnection!
  basicCarpetSize(
    """The id of the record to find."""
    id: ID!
  ): BasicCarpetSize!
  basicCarpetSizeDetail(
    """The id of the record to find."""
    id: ID!
  ): BasicCarpetSizeDetail!
  basicCarpetSizeDetails(
    """Specify to filter the records returned."""
    filter: BasicCarpetSizeDetailFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [BasicCarpetSizeDetailSort!]! = []
  ): BasicCarpetSizeDetailConnection!
  basicCarpetSizes(
    """Specify to filter the records returned."""
    filter: BasicCarpetSizeFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [BasicCarpetSizeSort!]! = []
  ): BasicCarpetSizeConnection!
  basicCarpetType(
    """The id of the record to find."""
    id: ID!
  ): BasicCarpetType!
  basicCarpetTypes(
    """Specify to filter the records returned."""
    filter: BasicCarpetTypeFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [BasicCarpetTypeSort!]! = []
  ): BasicCarpetTypeConnection!
  border(
    """The id of the record to find."""
    id: ID!
  ): Border!
  borders(
    """Specify to filter the records returned."""
    filter: BorderFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [BorderSort!]! = []
  ): BorderConnection!
  campaignFreeOffer(
    """The id of the record to find."""
    id: ID!
  ): CampaignFreeOffer!
  campaignFreeOfferSize(
    """The id of the record to find."""
    id: ID!
  ): CampaignFreeOfferSize!
  campaignFreeOfferSizes(
    """Specify to filter the records returned."""
    filter: CampaignFreeOfferSizeFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [CampaignFreeOfferSizeSort!]! = []
  ): CampaignFreeOfferSizeConnection!
  campaignFreeOffers(
    """Specify to filter the records returned."""
    filter: CampaignFreeOfferFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [CampaignFreeOfferSort!]! = []
  ): CampaignFreeOfferConnection!
  campaignGoldCoinSub(
    """The id of the record to find."""
    id: ID!
  ): CampaignGoldCoinSub!
  campaignGoldCoinSubs(
    """Specify to filter the records returned."""
    filter: CampaignGoldCoinSubFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [CampaignGoldCoinSubSort!]! = []
  ): CampaignGoldCoinSubConnection!
  campaignInstagramFollow(
    """The id of the record to find."""
    id: ID!
  ): CampaignInstagramFollow!
  campaignInstagramFollows(
    """Specify to filter the records returned."""
    filter: CampaignInstagramFollowFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [CampaignInstagramFollowSort!]! = []
  ): CampaignInstagramFollowConnection!
  campaignPetForm(
    """The id of the record to find."""
    id: ID!
  ): CampaignPetForm!
  campaignPetForms(
    """Specify to filter the records returned."""
    filter: CampaignPetFormFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [CampaignPetFormSort!]! = []
  ): CampaignPetFormConnection!
  campaignRoomvoImage(
    """The id of the record to find."""
    id: ID!
  ): CampaignRoomvoImage!
  campaignRoomvoImages(
    """Specify to filter the records returned."""
    filter: CampaignRoomvoImageFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [CampaignRoomvoImageSort!]! = []
  ): CampaignRoomvoImageConnection!
  campaignRoomvoVote(
    """The id of the record to find."""
    id: ID!
  ): CampaignRoomvoVote!
  campaignRoomvoVotes(
    """Specify to filter the records returned."""
    filter: CampaignRoomvoVoteFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [CampaignRoomvoVoteSort!]! = []
  ): CampaignRoomvoVoteConnection!
  campaignSubscription(
    """The id of the record to find."""
    id: ID!
  ): CampaignSubscription!
  campaignSubscriptions(
    """Specify to filter the records returned."""
    filter: CampaignSubscriptionFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [CampaignSubscriptionSort!]! = []
  ): CampaignSubscriptionConnection!
  campaignUefaEuroSubscriber(
    """The id of the record to find."""
    id: ID!
  ): CampaignUefaEuroSubscriber!
  campaignUefaEuroSubscriberHistories(
    """Specify to filter the records returned."""
    filter: CampaignUefaEuroSubscriberHistoryFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [CampaignUefaEuroSubscriberHistorySort!]! = []
  ): CampaignUefaEuroSubscriberHistoryConnection!
  campaignUefaEuroSubscriberHistory(
    """The id of the record to find."""
    id: ID!
  ): CampaignUefaEuroSubscriberHistory!
  campaignUefaEuroSubscribers(
    """Specify to filter the records returned."""
    filter: CampaignUefaEuroSubscriberFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [CampaignUefaEuroSubscriberSort!]! = []
  ): CampaignUefaEuroSubscriberConnection!
  campaignVotingImage(
    """The id of the record to find."""
    id: ID!
  ): CampaignVotingImage!
  campaignVotingImages(
    """Specify to filter the records returned."""
    filter: CampaignVotingImageFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [CampaignVotingImageSort!]! = []
  ): CampaignVotingImageConnection!
  carpetFeature(
    """The id of the record to find."""
    id: ID!
  ): CarpetFeature!
  carpetFeatureUser(
    """The id of the record to find."""
    id: ID!
  ): CarpetFeatureUser!
  carpetFeatureUsers(
    """Specify to filter the records returned."""
    filter: CarpetFeatureUserFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [CarpetFeatureUserSort!]! = []
  ): CarpetFeatureUserConnection!
  carpetFeatures(
    """Specify to filter the records returned."""
    filter: CarpetFeatureFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [CarpetFeatureSort!]! = []
  ): CarpetFeatureConnection!
  carpetMaterial(
    """The id of the record to find."""
    id: ID!
  ): CarpetMaterial!
  carpetMaterials(
    """Specify to filter the records returned."""
    filter: CarpetMaterialFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [CarpetMaterialSort!]! = []
  ): CarpetMaterialConnection!
  carpetShape(
    """The id of the record to find."""
    id: ID!
  ): CarpetShape!
  carpetShapes(
    """Specify to filter the records returned."""
    filter: CarpetShapeFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [CarpetShapeSort!]! = []
  ): CarpetShapeConnection!
  carpetSize(
    """The id of the record to find."""
    id: ID!
  ): CarpetSize!
  carpetSizes(
    """Specify to filter the records returned."""
    filter: CarpetSizeFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [CarpetSizeSort!]! = []
  ): CarpetSizeConnection!
  carpetUsagePlace(
    """The id of the record to find."""
    id: ID!
  ): CarpetUsagePlace!
  carpetUsagePlaceInvoiceProduct(
    """The id of the record to find."""
    id: ID!
  ): CarpetUsagePlaceInvoiceProduct!
  carpetUsagePlaceInvoiceProducts(
    """Specify to filter the records returned."""
    filter: CarpetUsagePlaceInvoiceProductFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [CarpetUsagePlaceInvoiceProductSort!]! = []
  ): CarpetUsagePlaceInvoiceProductConnection!
  carpetUsagePlaceUser(
    """The id of the record to find."""
    id: ID!
  ): CarpetUsagePlaceUser!
  carpetUsagePlaceUsers(
    """Specify to filter the records returned."""
    filter: CarpetUsagePlaceUserFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [CarpetUsagePlaceUserSort!]! = []
  ): CarpetUsagePlaceUserConnection!
  carpetUsagePlaces(
    """Specify to filter the records returned."""
    filter: CarpetUsagePlaceFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [CarpetUsagePlaceSort!]! = []
  ): CarpetUsagePlaceConnection!
  chaparSettlementStatus(
    """The id of the record to find."""
    id: ID!
  ): ChaparSettlementStatus!
  chaparSettlementStatuses(
    """Specify to filter the records returned."""
    filter: ChaparSettlementStatusFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ChaparSettlementStatusSort!]! = []
  ): ChaparSettlementStatusConnection!
  chaparTrackingHistories(
    """Specify to filter the records returned."""
    filter: ChaparTrackingHistoryFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ChaparTrackingHistorySort!]! = []
  ): ChaparTrackingHistoryConnection!
  chaparTrackingHistory(
    """The id of the record to find."""
    id: ID!
  ): ChaparTrackingHistory!
  cities(
    """Specify to filter the records returned."""
    filter: CityFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [CitySort!]! = []
  ): CityConnection!
  citiesSepidar(
    """The id of the record to find."""
    id: ID!
  ): CitiesSepidar!
  citiesSepidars(
    """Specify to filter the records returned."""
    filter: CitiesSepidarFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [CitiesSepidarSort!]! = []
  ): CitiesSepidarConnection!
  city(
    """The id of the record to find."""
    id: ID!
  ): City!
  city2(
    """The id of the record to find."""
    id: ID!
  ): City2!
  city2s(
    """Specify to filter the records returned."""
    filter: City2Filter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [City2Sort!]! = []
  ): City2Connection!
  color(
    """The id of the record to find."""
    id: ID!
  ): Color!
  colorCategories(
    """Specify to filter the records returned."""
    filter: ColorCategoryFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ColorCategorySort!]! = []
  ): ColorCategoryConnection!
  colorCategory(
    """The id of the record to find."""
    id: ID!
  ): ColorCategory!
  colorCategoryDetail(
    """The id of the record to find."""
    id: ID!
  ): ColorCategoryDetail!
  colorCategoryDetails(
    """Specify to filter the records returned."""
    filter: ColorCategoryDetailFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ColorCategoryDetailSort!]! = []
  ): ColorCategoryDetailConnection!
  colorCategorySubproduct(
    """The id of the record to find."""
    id: ID!
  ): ColorCategorySubproduct!
  colorCategorySubproducts(
    """Specify to filter the records returned."""
    filter: ColorCategorySubproductFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ColorCategorySubproductSort!]! = []
  ): ColorCategorySubproductConnection!
  colors(
    """Specify to filter the records returned."""
    filter: ColorFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ColorSort!]! = []
  ): ColorConnection!
  config(
    """The id of the record to find."""
    id: ID!
  ): Config!
  configs(
    """Specify to filter the records returned."""
    filter: ConfigFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ConfigSort!]! = []
  ): ConfigConnection!
  contactForm(
    """The id of the record to find."""
    id: ID!
  ): ContactForm!
  contactFormHistories(
    """Specify to filter the records returned."""
    filter: ContactFormHistoryFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ContactFormHistorySort!]! = []
  ): ContactFormHistoryConnection!
  contactFormHistory(
    """The id of the record to find."""
    id: ID!
  ): ContactFormHistory!
  contactFormStatus(
    """The id of the record to find."""
    id: ID!
  ): ContactFormStatus!
  contactFormStatuses(
    """Specify to filter the records returned."""
    filter: ContactFormStatusFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ContactFormStatusSort!]! = []
  ): ContactFormStatusConnection!
  contactForms(
    """Specify to filter the records returned."""
    filter: ContactFormFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ContactFormSort!]! = []
  ): ContactFormConnection!
  countries(
    """Specify to filter the records returned."""
    filter: CountryFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [CountrySort!]! = []
  ): CountryConnection!
  country(
    """The id of the record to find."""
    id: ID!
  ): Country!
  coupon(
    """The id of the record to find."""
    id: ID!
  ): Coupon!
  couponSubject(
    """The id of the record to find."""
    id: ID!
  ): CouponSubject!
  couponSubjects(
    """Specify to filter the records returned."""
    filter: CouponSubjectFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [CouponSubjectSort!]! = []
  ): CouponSubjectConnection!
  coupons(
    """Specify to filter the records returned."""
    filter: CouponFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [CouponSort!]! = []
  ): CouponConnection!
  crmPresentation(
    """The id of the record to find."""
    id: ID!
  ): CrmPresentation!
  crmPresentations(
    """Specify to filter the records returned."""
    filter: CrmPresentationFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [CrmPresentationSort!]! = []
  ): CrmPresentationConnection!
  customerImageProduct(
    """The id of the record to find."""
    id: ID!
  ): CustomerImageProduct!
  customerImageProducts(
    """Specify to filter the records returned."""
    filter: CustomerImageProductFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [CustomerImageProductSort!]! = []
  ): CustomerImageProductConnection!
  customerRequest(
    """The id of the record to find."""
    id: ID!
  ): CustomerRequest!
  customerRequestFile(
    """The id of the record to find."""
    id: ID!
  ): CustomerRequestFile!
  customerRequestFiles(
    """Specify to filter the records returned."""
    filter: CustomerRequestFileFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [CustomerRequestFileSort!]! = []
  ): CustomerRequestFileConnection!
  customerRequests(
    """Specify to filter the records returned."""
    filter: CustomerRequestFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [CustomerRequestSort!]! = []
  ): CustomerRequestConnection!
  customerVideoProduct(
    """The id of the record to find."""
    id: ID!
  ): CustomerVideoProduct!
  customerVideoProducts(
    """Specify to filter the records returned."""
    filter: CustomerVideoProductFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [CustomerVideoProductSort!]! = []
  ): CustomerVideoProductConnection!
  damageReason(
    """The id of the record to find."""
    id: ID!
  ): DamageReason!
  damageReasons(
    """Specify to filter the records returned."""
    filter: DamageReasonFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [DamageReasonSort!]! = []
  ): DamageReasonConnection!
  department(
    """The id of the record to find."""
    id: ID!
  ): Department!
  departments(
    """Specify to filter the records returned."""
    filter: DepartmentFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [DepartmentSort!]! = []
  ): DepartmentConnection!
  design(
    """The id of the record to find."""
    id: ID!
  ): Design!
  designersProductPriceRange(
    """The id of the record to find."""
    id: ID!
  ): DesignersProductPriceRange!
  designersProductPriceRanges(
    """Specify to filter the records returned."""
    filter: DesignersProductPriceRangeFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [DesignersProductPriceRangeSort!]! = []
  ): DesignersProductPriceRangeConnection!
  designs(
    """Specify to filter the records returned."""
    filter: DesignFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [DesignSort!]! = []
  ): DesignConnection!
  discount(
    """The id of the record to find."""
    id: ID!
  ): Discount!
  discountNotification(
    """The id of the record to find."""
    id: ID!
  ): DiscountNotification!
  discountNotifications(
    """Specify to filter the records returned."""
    filter: DiscountNotificationFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [DiscountNotificationSort!]! = []
  ): DiscountNotificationConnection!
  discountSubject(
    """The id of the record to find."""
    id: ID!
  ): DiscountSubject!
  discountSubjects(
    """Specify to filter the records returned."""
    filter: DiscountSubjectFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [DiscountSubjectSort!]! = []
  ): DiscountSubjectConnection!
  discounts(
    """Specify to filter the records returned."""
    filter: DiscountFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [DiscountSort!]! = []
  ): DiscountConnection!
  exitControl(
    """The id of the record to find."""
    id: ID!
  ): ExitControl!
  exitControlItem(
    """The id of the record to find."""
    id: ID!
  ): ExitControlItem!
  exitControlItems(
    """Specify to filter the records returned."""
    filter: ExitControlItemFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ExitControlItemSort!]! = []
  ): ExitControlItemConnection!
  exitControls(
    """Specify to filter the records returned."""
    filter: ExitControlFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ExitControlSort!]! = []
  ): ExitControlConnection!
  exportProduct(
    """The id of the record to find."""
    id: ID!
  ): ExportProduct!
  exportProducts(
    """Specify to filter the records returned."""
    filter: ExportProductFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ExportProductSort!]! = []
  ): ExportProductConnection!
  failedJob(
    """The id of the record to find."""
    id: ID!
  ): FailedJob!
  failedJobs(
    """Specify to filter the records returned."""
    filter: FailedJobFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [FailedJobSort!]! = []
  ): FailedJobConnection!
  favoriteProduct(
    """The id of the record to find."""
    id: ID!
  ): FavoriteProduct!
  favoriteProducts(
    """Specify to filter the records returned."""
    filter: FavoriteProductFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [FavoriteProductSort!]! = []
  ): FavoriteProductConnection!
  fedexAddressValidationAttribute(
    """The id of the record to find."""
    id: ID!
  ): FedexAddressValidationAttribute!
  fedexAddressValidationAttributes(
    """Specify to filter the records returned."""
    filter: FedexAddressValidationAttributeFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [FedexAddressValidationAttributeSort!]! = []
  ): FedexAddressValidationAttributeConnection!
  fetchSiteUrl(
    """The id of the record to find."""
    id: ID!
  ): FetchSiteUrl!
  fetchSiteUrls(
    """Specify to filter the records returned."""
    filter: FetchSiteUrlFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [FetchSiteUrlSort!]! = []
  ): FetchSiteUrlConnection!
  file(
    """The id of the record to find."""
    id: ID!
  ): File!
  fileNegotiation(
    """The id of the record to find."""
    id: ID!
  ): FileNegotiation!
  fileNegotiations(
    """Specify to filter the records returned."""
    filter: FileNegotiationFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [FileNegotiationSort!]! = []
  ): FileNegotiationConnection!
  files(
    """Specify to filter the records returned."""
    filter: FileFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [FileSort!]! = []
  ): FileConnection!
  getActivityWithUserResolver(activityId: Float!): Activity!
  getUserWithActivitiesResolver(userId: Float!): User!
  ghazal(
    """The id of the record to find."""
    id: ID!
  ): Ghazal!
  ghazals(
    """Specify to filter the records returned."""
    filter: GhazalFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [GhazalSort!]! = []
  ): GhazalConnection!
  googleFormUtm(
    """The id of the record to find."""
    id: ID!
  ): GoogleFormUtm!
  googleFormUtms(
    """Specify to filter the records returned."""
    filter: GoogleFormUtmFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [GoogleFormUtmSort!]! = []
  ): GoogleFormUtmConnection!
  heardAboutUsOption(
    """The id of the record to find."""
    id: ID!
  ): HeardAboutUsOption!
  heardAboutUsOptions(
    """Specify to filter the records returned."""
    filter: HeardAboutUsOptionFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [HeardAboutUsOptionSort!]! = []
  ): HeardAboutUsOptionConnection!
  helpDesk(
    """The id of the record to find."""
    id: ID!
  ): HelpDesk!
  helpDesks(
    """Specify to filter the records returned."""
    filter: HelpDeskFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [HelpDeskSort!]! = []
  ): HelpDeskConnection!
  holiday(
    """The id of the record to find."""
    id: ID!
  ): Holiday!
  holidays(
    """Specify to filter the records returned."""
    filter: HolidayFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [HolidaySort!]! = []
  ): HolidayConnection!
  homePageCustomerImage(
    """The id of the record to find."""
    id: ID!
  ): HomePageCustomerImage!
  homePageCustomerImages(
    """Specify to filter the records returned."""
    filter: HomePageCustomerImageFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [HomePageCustomerImageSort!]! = []
  ): HomePageCustomerImageConnection!
  hyper(
    """The id of the record to find."""
    id: ID!
  ): Hyper!
  hypers(
    """Specify to filter the records returned."""
    filter: HyperFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [HyperSort!]! = []
  ): HyperConnection!
  hyperstarCode(
    """The id of the record to find."""
    id: ID!
  ): HyperstarCode!
  hyperstarCodes(
    """Specify to filter the records returned."""
    filter: HyperstarCodeFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [HyperstarCodeSort!]! = []
  ): HyperstarCodeConnection!
  image(
    """The id of the record to find."""
    id: ID!
  ): Image!
  imageLayer(
    """The id of the record to find."""
    id: ID!
  ): ImageLayer!
  imageLayers(
    """Specify to filter the records returned."""
    filter: ImageLayerFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ImageLayerSort!]! = []
  ): ImageLayerConnection!
  imageProduct(
    """The id of the record to find."""
    id: ID!
  ): ImageProduct!
  imageProducts(
    """Specify to filter the records returned."""
    filter: ImageProductFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ImageProductSort!]! = []
  ): ImageProductConnection!
  imageSize(
    """The id of the record to find."""
    id: ID!
  ): ImageSize!
  imageSizes(
    """Specify to filter the records returned."""
    filter: ImageSizeFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ImageSizeSort!]! = []
  ): ImageSizeConnection!
  imageSubproduct(
    """The id of the record to find."""
    id: ID!
  ): ImageSubproduct!
  imageSubproducts(
    """Specify to filter the records returned."""
    filter: ImageSubproductFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ImageSubproductSort!]! = []
  ): ImageSubproductConnection!
  images(
    """Specify to filter the records returned."""
    filter: ImageFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ImageSort!]! = []
  ): ImageConnection!
  imagesSizeGuidesDetail(
    """The id of the record to find."""
    id: ID!
  ): ImagesSizeGuidesDetail!
  imagesSizeGuidesDetails(
    """Specify to filter the records returned."""
    filter: ImagesSizeGuidesDetailFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ImagesSizeGuidesDetailSort!]! = []
  ): ImagesSizeGuidesDetailConnection!
  impersonateHistories(
    """Specify to filter the records returned."""
    filter: ImpersonateHistoryFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ImpersonateHistorySort!]! = []
  ): ImpersonateHistoryConnection!
  impersonateHistory(
    """The id of the record to find."""
    id: ID!
  ): ImpersonateHistory!
  incredibleOffer(
    """The id of the record to find."""
    id: ID!
  ): IncredibleOffer!
  incredibleOfferSentNotification(
    """The id of the record to find."""
    id: ID!
  ): IncredibleOfferSentNotification!
  incredibleOfferSentNotifications(
    """Specify to filter the records returned."""
    filter: IncredibleOfferSentNotificationFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [IncredibleOfferSentNotificationSort!]! = []
  ): IncredibleOfferSentNotificationConnection!
  incredibleOffers(
    """Specify to filter the records returned."""
    filter: IncredibleOfferFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [IncredibleOfferSort!]! = []
  ): IncredibleOfferConnection!
  instagramFeed(
    """The id of the record to find."""
    id: ID!
  ): InstagramFeed!
  instagramFeeds(
    """Specify to filter the records returned."""
    filter: InstagramFeedFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [InstagramFeedSort!]! = []
  ): InstagramFeedConnection!
  invitationCode(
    """The id of the record to find."""
    id: ID!
  ): InvitationCode!
  invitationCodes(
    """Specify to filter the records returned."""
    filter: InvitationCodeFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [InvitationCodeSort!]! = []
  ): InvitationCodeConnection!
  invoice(
    """The id of the record to find."""
    id: ID!
  ): Invoice!
  invoiceAddress(
    """The id of the record to find."""
    id: ID!
  ): InvoiceAddress!
  invoiceAddresses(
    """Specify to filter the records returned."""
    filter: InvoiceAddressFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [InvoiceAddressSort!]! = []
  ): InvoiceAddressConnection!
  invoiceBankGatewayHistories(
    """Specify to filter the records returned."""
    filter: InvoiceBankGatewayHistoryFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [InvoiceBankGatewayHistorySort!]! = []
  ): InvoiceBankGatewayHistoryConnection!
  invoiceBankGatewayHistory(
    """The id of the record to find."""
    id: ID!
  ): InvoiceBankGatewayHistory!
  invoiceHistories(
    """Specify to filter the records returned."""
    filter: InvoiceHistoryFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [InvoiceHistorySort!]! = []
  ): InvoiceHistoryConnection!
  invoiceHistory(
    """The id of the record to find."""
    id: ID!
  ): InvoiceHistory!
  invoiceInvoiceStatus(
    """The id of the record to find."""
    id: ID!
  ): InvoiceInvoiceStatus!
  invoiceInvoiceStatuses(
    """Specify to filter the records returned."""
    filter: InvoiceInvoiceStatusFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [InvoiceInvoiceStatusSort!]! = []
  ): InvoiceInvoiceStatusConnection!
  invoiceMode(
    """The id of the record to find."""
    id: ID!
  ): InvoiceMode!
  invoiceModes(
    """Specify to filter the records returned."""
    filter: InvoiceModeFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [InvoiceModeSort!]! = []
  ): InvoiceModeConnection!
  invoiceNegotiation(
    """The id of the record to find."""
    id: ID!
  ): InvoiceNegotiation!
  invoiceNegotiations(
    """Specify to filter the records returned."""
    filter: InvoiceNegotiationFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [InvoiceNegotiationSort!]! = []
  ): InvoiceNegotiationConnection!
  invoicePayment(
    """The id of the record to find."""
    id: ID!
  ): InvoicePayment!
  invoicePaymentHistories(
    """Specify to filter the records returned."""
    filter: InvoicePaymentHistoryFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [InvoicePaymentHistorySort!]! = []
  ): InvoicePaymentHistoryConnection!
  invoicePaymentHistory(
    """The id of the record to find."""
    id: ID!
  ): InvoicePaymentHistory!
  invoicePaymentStatus(
    """The id of the record to find."""
    id: ID!
  ): InvoicePaymentStatus!
  invoicePaymentStatuses(
    """Specify to filter the records returned."""
    filter: InvoicePaymentStatusFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [InvoicePaymentStatusSort!]! = []
  ): InvoicePaymentStatusConnection!
  invoicePaymentType(
    """The id of the record to find."""
    id: ID!
  ): InvoicePaymentType!
  invoicePaymentTypes(
    """Specify to filter the records returned."""
    filter: InvoicePaymentTypeFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [InvoicePaymentTypeSort!]! = []
  ): InvoicePaymentTypeConnection!
  invoicePayments(
    """Specify to filter the records returned."""
    filter: InvoicePaymentFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [InvoicePaymentSort!]! = []
  ): InvoicePaymentConnection!
  invoiceProduct(
    """The id of the record to find."""
    id: ID!
  ): InvoiceProduct!
  invoiceProductHistories(
    """Specify to filter the records returned."""
    filter: InvoiceProductHistoryFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [InvoiceProductHistorySort!]! = []
  ): InvoiceProductHistoryConnection!
  invoiceProductHistory(
    """The id of the record to find."""
    id: ID!
  ): InvoiceProductHistory!
  invoiceProductItem(
    """The id of the record to find."""
    id: ID!
  ): InvoiceProductItem!
  invoiceProductItemInvoiceProductStatus(
    """The id of the record to find."""
    id: ID!
  ): InvoiceProductItemInvoiceProductStatus!
  invoiceProductItemInvoiceProductStatuses(
    """Specify to filter the records returned."""
    filter: InvoiceProductItemInvoiceProductStatusFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [InvoiceProductItemInvoiceProductStatusSort!]! = []
  ): InvoiceProductItemInvoiceProductStatusConnection!
  invoiceProductItems(
    """Specify to filter the records returned."""
    filter: InvoiceProductItemFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [InvoiceProductItemSort!]! = []
  ): InvoiceProductItemConnection!
  invoiceProductStatus(
    """The id of the record to find."""
    id: ID!
  ): InvoiceProductStatus!
  invoiceProductStatuses(
    """Specify to filter the records returned."""
    filter: InvoiceProductStatusFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [InvoiceProductStatusSort!]! = []
  ): InvoiceProductStatusConnection!
  invoiceProducts(
    """Specify to filter the records returned."""
    filter: InvoiceProductFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [InvoiceProductSort!]! = []
  ): InvoiceProductConnection!
  invoiceRatesResult(
    """The id of the record to find."""
    id: ID!
  ): InvoiceRatesResult!
  invoiceRatesResults(
    """Specify to filter the records returned."""
    filter: InvoiceRatesResultFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [InvoiceRatesResultSort!]! = []
  ): InvoiceRatesResultConnection!
  invoiceReversal(
    """The id of the record to find."""
    id: ID!
  ): InvoiceReversal!
  invoiceReversalItem(
    """The id of the record to find."""
    id: ID!
  ): InvoiceReversalItem!
  invoiceReversalItems(
    """Specify to filter the records returned."""
    filter: InvoiceReversalItemFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [InvoiceReversalItemSort!]! = []
  ): InvoiceReversalItemConnection!
  invoiceReversals(
    """Specify to filter the records returned."""
    filter: InvoiceReversalFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [InvoiceReversalSort!]! = []
  ): InvoiceReversalConnection!
  invoiceShippingRate(
    """The id of the record to find."""
    id: ID!
  ): InvoiceShippingRate!
  invoiceShippingRates(
    """Specify to filter the records returned."""
    filter: InvoiceShippingRateFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [InvoiceShippingRateSort!]! = []
  ): InvoiceShippingRateConnection!
  invoiceStatus(
    """The id of the record to find."""
    id: ID!
  ): InvoiceStatus!
  invoiceStatuses(
    """Specify to filter the records returned."""
    filter: InvoiceStatusFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [InvoiceStatusSort!]! = []
  ): InvoiceStatusConnection!
  invoiceType(
    """The id of the record to find."""
    id: ID!
  ): InvoiceType!
  invoiceTypes(
    """Specify to filter the records returned."""
    filter: InvoiceTypeFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [InvoiceTypeSort!]! = []
  ): InvoiceTypeConnection!
  invoices(
    """Specify to filter the records returned."""
    filter: InvoiceFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [InvoiceSort!]! = []
  ): InvoiceConnection!
  label(
    """The id of the record to find."""
    id: ID!
  ): Label!
  labelProduct(
    """The id of the record to find."""
    id: ID!
  ): LabelProduct!
  labelProducts(
    """Specify to filter the records returned."""
    filter: LabelProductFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [LabelProductSort!]! = []
  ): LabelProductConnection!
  labels(
    """Specify to filter the records returned."""
    filter: LabelFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [LabelSort!]! = []
  ): LabelConnection!
  mellatPaymentError(
    """The id of the record to find."""
    id: ID!
  ): MellatPaymentError!
  mellatPaymentErrors(
    """Specify to filter the records returned."""
    filter: MellatPaymentErrorFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [MellatPaymentErrorSort!]! = []
  ): MellatPaymentErrorConnection!
  migration(
    """The id of the record to find."""
    id: ID!
  ): Migration!
  migrations(
    """Specify to filter the records returned."""
    filter: MigrationFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [MigrationSort!]! = []
  ): MigrationConnection!
  modelHasPermission(
    """The id of the record to find."""
    id: ID!
  ): ModelHasPermission!
  modelHasPermissions(
    """Specify to filter the records returned."""
    filter: ModelHasPermissionFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ModelHasPermissionSort!]! = []
  ): ModelHasPermissionConnection!
  modelHasRole(
    """The id of the record to find."""
    id: ID!
  ): ModelHasRole!
  modelHasRoles(
    """Specify to filter the records returned."""
    filter: ModelHasRoleFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ModelHasRoleSort!]! = []
  ): ModelHasRoleConnection!
  modelVisit(
    """The id of the record to find."""
    id: ID!
  ): ModelVisit!
  modelVisits(
    """Specify to filter the records returned."""
    filter: ModelVisitFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ModelVisitSort!]! = []
  ): ModelVisitConnection!
  modemaAccelerator(
    """The id of the record to find."""
    id: ID!
  ): ModemaAccelerator!
  modemaAcceleratorImage(
    """The id of the record to find."""
    id: ID!
  ): ModemaAcceleratorImage!
  modemaAcceleratorImages(
    """Specify to filter the records returned."""
    filter: ModemaAcceleratorImageFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ModemaAcceleratorImageSort!]! = []
  ): ModemaAcceleratorImageConnection!
  modemaAcceleratorVideo(
    """The id of the record to find."""
    id: ID!
  ): ModemaAcceleratorVideo!
  modemaAcceleratorVideos(
    """Specify to filter the records returned."""
    filter: ModemaAcceleratorVideoFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ModemaAcceleratorVideoSort!]! = []
  ): ModemaAcceleratorVideoConnection!
  modemaAccelerators(
    """Specify to filter the records returned."""
    filter: ModemaAcceleratorFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ModemaAcceleratorSort!]! = []
  ): ModemaAcceleratorConnection!
  needsPhotographySubproduct(
    """The id of the record to find."""
    id: ID!
  ): NeedsPhotographySubproduct!
  needsPhotographySubproducts(
    """Specify to filter the records returned."""
    filter: NeedsPhotographySubproductFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [NeedsPhotographySubproductSort!]! = []
  ): NeedsPhotographySubproductConnection!
  negotiation(
    """The id of the record to find."""
    id: ID!
  ): Negotiation!
  negotiationHistories(
    """Specify to filter the records returned."""
    filter: NegotiationHistoryFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [NegotiationHistorySort!]! = []
  ): NegotiationHistoryConnection!
  negotiationHistory(
    """The id of the record to find."""
    id: ID!
  ): NegotiationHistory!
  negotiationStatus(
    """The id of the record to find."""
    id: ID!
  ): NegotiationStatus!
  negotiationStatuses(
    """Specify to filter the records returned."""
    filter: NegotiationStatusFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [NegotiationStatusSort!]! = []
  ): NegotiationStatusConnection!
  negotiationType(
    """The id of the record to find."""
    id: ID!
  ): NegotiationType!
  negotiationTypes(
    """Specify to filter the records returned."""
    filter: NegotiationTypeFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [NegotiationTypeSort!]! = []
  ): NegotiationTypeConnection!
  negotiations(
    """Specify to filter the records returned."""
    filter: NegotiationFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [NegotiationSort!]! = []
  ): NegotiationConnection!
  newBorder(
    """The id of the record to find."""
    id: ID!
  ): NewBorder!
  newBorders(
    """Specify to filter the records returned."""
    filter: NewBorderFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [NewBorderSort!]! = []
  ): NewBorderConnection!
  oauthAccessToken(
    """The id of the record to find."""
    id: ID!
  ): OauthAccessToken!
  oauthAccessTokens(
    """Specify to filter the records returned."""
    filter: OauthAccessTokenFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [OauthAccessTokenSort!]! = []
  ): OauthAccessTokenConnection!
  oauthAuthCode(
    """The id of the record to find."""
    id: ID!
  ): OauthAuthCode!
  oauthAuthCodes(
    """Specify to filter the records returned."""
    filter: OauthAuthCodeFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [OauthAuthCodeSort!]! = []
  ): OauthAuthCodeConnection!
  oauthClient(
    """The id of the record to find."""
    id: ID!
  ): OauthClient!
  oauthClients(
    """Specify to filter the records returned."""
    filter: OauthClientFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [OauthClientSort!]! = []
  ): OauthClientConnection!
  oauthPersonalAccessClient(
    """The id of the record to find."""
    id: ID!
  ): OauthPersonalAccessClient!
  oauthPersonalAccessClients(
    """Specify to filter the records returned."""
    filter: OauthPersonalAccessClientFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [OauthPersonalAccessClientSort!]! = []
  ): OauthPersonalAccessClientConnection!
  oauthRefreshToken(
    """The id of the record to find."""
    id: ID!
  ): OauthRefreshToken!
  oauthRefreshTokens(
    """Specify to filter the records returned."""
    filter: OauthRefreshTokenFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [OauthRefreshTokenSort!]! = []
  ): OauthRefreshTokenConnection!
  outOfStockButListedProduct(
    """The id of the record to find."""
    id: ID!
  ): OutOfStockButListedProduct!
  outOfStockButListedProducts(
    """Specify to filter the records returned."""
    filter: OutOfStockButListedProductFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [OutOfStockButListedProductSort!]! = []
  ): OutOfStockButListedProductConnection!
  passwordReset(
    """The id of the record to find."""
    id: ID!
  ): PasswordReset!
  passwordResets(
    """Specify to filter the records returned."""
    filter: PasswordResetFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [PasswordResetSort!]! = []
  ): PasswordResetConnection!
  pattern(
    """The id of the record to find."""
    id: ID!
  ): Pattern!
  patternCategories(
    """Specify to filter the records returned."""
    filter: PatternCategoryFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [PatternCategorySort!]! = []
  ): PatternCategoryConnection!
  patternCategory(
    """The id of the record to find."""
    id: ID!
  ): PatternCategory!
  patternLayer(
    """The id of the record to find."""
    id: ID!
  ): PatternLayer!
  patternLayers(
    """Specify to filter the records returned."""
    filter: PatternLayerFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [PatternLayerSort!]! = []
  ): PatternLayerConnection!
  patterns(
    """Specify to filter the records returned."""
    filter: PatternFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [PatternSort!]! = []
  ): PatternConnection!
  paymentMethod(
    """The id of the record to find."""
    id: ID!
  ): PaymentMethod!
  paymentMethodField(
    """The id of the record to find."""
    id: ID!
  ): PaymentMethodField!
  paymentMethodFields(
    """Specify to filter the records returned."""
    filter: PaymentMethodFieldFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [PaymentMethodFieldSort!]! = []
  ): PaymentMethodFieldConnection!
  paymentMethods(
    """Specify to filter the records returned."""
    filter: PaymentMethodFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [PaymentMethodSort!]! = []
  ): PaymentMethodConnection!
  paymentRequest(
    """The id of the record to find."""
    id: ID!
  ): PaymentRequest!
  paymentRequestStatus(
    """The id of the record to find."""
    id: ID!
  ): PaymentRequestStatus!
  paymentRequestStatuses(
    """Specify to filter the records returned."""
    filter: PaymentRequestStatusFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [PaymentRequestStatusSort!]! = []
  ): PaymentRequestStatusConnection!
  paymentRequests(
    """Specify to filter the records returned."""
    filter: PaymentRequestFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [PaymentRequestSort!]! = []
  ): PaymentRequestConnection!
  permission(
    """The id of the record to find."""
    id: ID!
  ): Permission!
  permissionGroup(
    """The id of the record to find."""
    id: ID!
  ): PermissionGroup!
  permissionGroups(
    """Specify to filter the records returned."""
    filter: PermissionGroupFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [PermissionGroupSort!]! = []
  ): PermissionGroupConnection!
  permissions(
    """Specify to filter the records returned."""
    filter: PermissionFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [PermissionSort!]! = []
  ): PermissionConnection!
  preorder(
    """The id of the record to find."""
    id: ID!
  ): Preorder!
  preorderPreorderStatus(id: Int!): PreorderPreorderStatus!
  preorderRegister(
    """The id of the record to find."""
    id: ID!
  ): PreorderRegister!
  preorderRegisters(
    """Specify to filter the records returned."""
    filter: PreorderRegisterFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [PreorderRegisterSort!]! = []
  ): PreorderRegisterConnection!
  preorderStatus(
    """The id of the record to find."""
    id: ID!
  ): PreorderStatus!
  preorderStatuses(
    """Specify to filter the records returned."""
    filter: PreorderStatusFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [PreorderStatusSort!]! = []
  ): PreorderStatusConnection!
  preorders(
    """Specify to filter the records returned."""
    filter: PreorderFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [PreorderSort!]! = []
  ): PreorderConnection!
  priceGroup(
    """The id of the record to find."""
    id: ID!
  ): PriceGroup!
  priceGroupSize(
    """The id of the record to find."""
    id: ID!
  ): PriceGroupSize!
  priceGroupSizes(
    """Specify to filter the records returned."""
    filter: PriceGroupSizeFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [PriceGroupSizeSort!]! = []
  ): PriceGroupSizeConnection!
  priceGroups(
    """Specify to filter the records returned."""
    filter: PriceGroupFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [PriceGroupSort!]! = []
  ): PriceGroupConnection!
  printProfile(
    """The id of the record to find."""
    id: ID!
  ): PrintProfile!
  printProfiles(
    """Specify to filter the records returned."""
    filter: PrintProfileFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [PrintProfileSort!]! = []
  ): PrintProfileConnection!
  product(
    """The id of the record to find."""
    id: ID!
  ): Product!
  productCategoryDetail(
    """The id of the record to find."""
    id: ID!
  ): ProductCategoryDetail!
  productCategoryDetails(
    """Specify to filter the records returned."""
    filter: ProductCategoryDetailFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ProductCategoryDetailSort!]! = []
  ): ProductCategoryDetailConnection!
  productCategoryRate(
    """The id of the record to find."""
    id: ID!
  ): ProductCategoryRate!
  productCategoryRates(
    """Specify to filter the records returned."""
    filter: ProductCategoryRateFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ProductCategoryRateSort!]! = []
  ): ProductCategoryRateConnection!
  productColorImage(
    """The id of the record to find."""
    id: ID!
  ): ProductColorImage!
  productColorImages(
    """Specify to filter the records returned."""
    filter: ProductColorImageFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ProductColorImageSort!]! = []
  ): ProductColorImageConnection!
  productColorSale(
    """The id of the record to find."""
    id: ID!
  ): ProductColorSale!
  productColorSales(
    """Specify to filter the records returned."""
    filter: ProductColorSaleFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ProductColorSaleSort!]! = []
  ): ProductColorSaleConnection!
  productComment(
    """The id of the record to find."""
    id: ID!
  ): ProductComment!
  productCommentLike(
    """The id of the record to find."""
    id: ID!
  ): ProductCommentLike!
  productCommentLikes(
    """Specify to filter the records returned."""
    filter: ProductCommentLikeFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ProductCommentLikeSort!]! = []
  ): ProductCommentLikeConnection!
  productComments(
    """Specify to filter the records returned."""
    filter: ProductCommentFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ProductCommentSort!]! = []
  ): ProductCommentConnection!
  productLike(
    """The id of the record to find."""
    id: ID!
  ): ProductLike!
  productLikes(
    """Specify to filter the records returned."""
    filter: ProductLikeFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ProductLikeSort!]! = []
  ): ProductLikeConnection!
  products(
    """Specify to filter the records returned."""
    filter: ProductFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ProductSort!]! = []
  ): ProductConnection!
  user(
    """The id of the record to find."""
    id: ID!
  ): User!
  users(
    """Specify to filter the records returned."""
    filter: UserFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [UserSort!]! = []
  ): UserConnection!
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

input StringFieldComparison {
  eq: String
  gt: String
  gte: String
  iLike: String
  in: [String!]
  is: Boolean
  isNot: Boolean
  like: String
  lt: String
  lte: String
  neq: String
  notILike: String
  notIn: [String!]
  notLike: String
}

input UpdateActivity {
  action: String
  contentId: Float
  contentType: String
  createdAt: DateTime
  deletedUserId: Float
  description: String
  details: String
  id: ID
  updatedAt: DateTime
  user: UserInput
  userId: Float
  userName: String
}

input UpdateAddress {
  address: String
  address2: String
  cityId: Float
  countryId: Float
  createdAt: DateTime
  crmCompanyId: String
  crmCompanyPersonId: String
  deletedAt: DateTime
  email: String
  fullAddress: String
  fullname: String
  fullnameDescription: String
  fullnameTrimmed: String
  id: ID
  latitude: String
  longitude: String
  nationalId: String
  oldAddress: String
  phone: String
  phone2: String
  sepidarId: Float
  stateId: Float
  updatedAt: DateTime
  userId: Float
  zipCode: String
}

input UpdateAttributeAttributeGroupInput {
  attributeGroupId: Float
  attributeId: Float
  createdAt: DateTime
  id: Int!
  updatedAt: DateTime
}

input UpdateAttributeInput {
  createdAt: DateTime
  id: Int!
  isActive: Float
  name: String
  sortOrder: Float
  type: Float
  updatedAt: DateTime
}

input UpdateAttributeItemInput {
  attributeGroupId: Float
  attributeId: Float
  createdAt: DateTime
  id: Int!
  name: String
  updatedAt: DateTime
}

input UpdateAttributeProductInput {
  attributeId: Float
  attributeItemId: Float
  createdAt: DateTime
  id: Int!
  isChecked: Boolean
  productId: Float
  sortOrder: Float
  updatedAt: DateTime
  value: String
}

input UpdateAttributeSubproductInput {
  attributeId: Float
  attributeItemId: Float
  createdAt: DateTime
  id: Int!
  isChecked: Boolean
  subproductId: Float
  updatedAt: DateTime
  value: String
}

input UpdateAutomationEvent {
  createdAt: DateTime
  deletedAt: DateTime
  event: String
  eventDate: String
  eventDatetime: DateTime
  eventTimestamp: String
  id: ID
  lastEec: String
  messages: String
  onlineSheetSaved: Boolean = false
  rfmCat: String
  rfmScore: String
  smsSent: Boolean = false
  status: String
  triggerDatetime: DateTime
  type: String
  typeId: Float
  updatedAt: DateTime
  userContact: String
  userId: Float
  userName: String
  userUid: Float
}

input UpdateAutomationRfmScore {
  id: ID
  rfmScore: String
  rfmScoreCode: String
  rfmScoreTitle: String
}

input UpdateBasicCarpetBorder {
  code: String
  createdAt: DateTime
  id: ID
  isActive: Boolean = true
  sortOrder: Float
  title: String
  updatedAt: DateTime
}

input UpdateBasicCarpetColor {
  code: String
  colorCode: String
  createdAt: DateTime = "2025-03-16T11:39:58.271Z"
  englishTitle: String
  id: ID
  isActive: Boolean = true
  persianTitle: String
  russianTitle: String
  shortCode: String
  sortOrder: Float
  spanishTitle: String
  title: String
  updatedAt: DateTime
}

input UpdateBasicCarpetDesign {
  code: String
  createdAt: DateTime = "2025-03-16T11:39:58.280Z"
  id: ID
  isActive: Boolean = true
  sortOrder: Float
  title: String
  updatedAt: DateTime
}

input UpdateBasicCarpetDesigner {
  cityId: Float
  code: String
  countryId: Float
  createdAt: DateTime = "2025-03-16T11:39:58.290Z"
  description: String
  facebookId: String
  headerImage: String
  id: ID
  instagramId: String
  isActive: Boolean = true
  linkedinId: String
  pricePercentage: Float = 0
  profilePicture: String
  selfEmployed: Boolean = false
  sortOrder: Float
  stateId: Float
  title: String
  twitterId: String
  updatedAt: DateTime
  userId: Float
}

input UpdateBasicCarpetMaterial {
  code: String
  createdAt: DateTime = "2025-03-16T11:39:58.305Z"
  id: ID
  isActive: Boolean = true
  sortOrder: Float
  title: String
  updatedAt: DateTime
}

input UpdateBasicCarpetSize {
  altText: String
  altTextEn: String
  carpetVolume: Float = 0
  code: String
  createdAt: DateTime = "2025-03-16T11:39:58.331Z"
  description: String
  descriptionEn: String
  homepageImageId: Float
  id: ID
  imageId: Float
  isActive: Boolean = true
  length: Float
  lengthText: String
  metaTags: String
  metaTagsEn: String
  mobileImageId: Float
  padVolume: Float = 0
  pageTitle: String
  pageTitleEn: String
  sizeText: String
  sizeTextEn: String
  sortOrder: Float
  title: String
  titleEn: String
  unitRatio: Float
  updatedAt: DateTime
  urlSlug: String
  urlSlugEn: String
  viewCounter: Float = 0
  width: Float
  widthText: String
}

input UpdateBasicCarpetSizeDetail {
  basicCarpetSizeId: Float
  createdAt: DateTime
  detailText: String
  detailTextEn: String
  id: ID
  isActive: Boolean = true
  sortOrder: Float
  title: String
  titleEn: String
  updatedAt: DateTime
}

input UpdateBasicCarpetType {
  code: String
  createdAt: DateTime = "2025-03-16T11:39:58.362Z"
  id: ID
  isActive: Boolean = true
  sortOrder: Float
  title: String
  updatedAt: DateTime
}

input UpdateBorder {
  code: String
  count: Float
  id: ID
}

input UpdateCampaignFreeOffer {
  createdAt: DateTime
  id: ID
  isActive: Boolean = true
  minPrice: String
  updatedAt: DateTime
}

input UpdateCampaignFreeOfferSize {
  basicCarpetSizeId: Float
  campaignFreeOfferId: Float
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
}

input UpdateCampaignGoldCoinSub {
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
  userId: Float
}

input UpdateCampaignInstagramFollow {
  answerNo: Int
  birthYear: Int
  createdAt: DateTime
  id: ID
  image1: String
  image2: String
  name: String
  phone: String
  phoneVerified: Boolean
  sex: Int
  updatedAt: DateTime
  userId: Int
  verificationCode: String
}

input UpdateCampaignPetForm {
  couponId: Float
  createdAt: DateTime
  discountAmount: Float = 0
  donationAmount: Float = 0
  filename: String
  id: ID
  mime: String
  originalFilename: String
  path: String = "/"
  petName: String
  updatedAt: DateTime
  userId: Float
}

input UpdateCampaignRoomvoImage {
  createdAt: DateTime
  filename: String
  id: ID
  mime: String
  originalFilename: String
  path: String
  updatedAt: DateTime
  userId: Float
  votesCount: Float = 0
}

input UpdateCampaignRoomvoVote {
  campaignRoomvoImageId: Float
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
  userId: Float
}

input UpdateCampaignSubscription {
  campaignName: String
  code: Int
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
  userId: Int
}

input UpdateCampaignUefaEuroSubscriber {
  contactFormStatusId: Float = 1
  createdAt: DateTime
  id: ID
  mobile: String
  status: Float = 1
  updatedAt: DateTime
  userId: Float
}

input UpdateCampaignUefaEuroSubscriberHistory {
  campaignUefaEuroSubscriberId: Float
  comment: String
  contactFormStatusId: Float
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
  userId: Float
}

input UpdateCampaignVotingImage {
  campaignNo: Float
  createdAt: DateTime
  id: ID
  imageId: Float
  isActive: Boolean = true
  sortOrder: Float = 1
  title: String
  updatedAt: DateTime
}

input UpdateCarpetFeature {
  createdAt: DateTime
  id: ID
  isActive: Boolean = true
  sortOrder: Float
  title: String
  updatedAt: DateTime
}

input UpdateCarpetFeatureUser {
  carpetFeatureId: Float
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
  userId: Float
}

input UpdateCarpetMaterial {
  createdAt: DateTime
  id: ID
  isActive: Boolean = true
  name: String
  pricePerInch: Float
  sortOrder: Float
  updatedAt: DateTime
}

input UpdateCarpetShape {
  createdAt: DateTime
  hasLength: Boolean = true
  id: ID
  isActive: Boolean = true
  maxLength: Float
  maxWidth: Float
  minLength: Float
  minWidth: Float
  name: String
  sortOrder: Float
  updatedAt: DateTime
}

input UpdateCarpetSize {
  createdAt: DateTime
  id: ID
  isActive: Boolean = true
  length: Float
  sortOrder: Float
  updatedAt: DateTime
  width: Float
}

input UpdateCarpetUsagePlace {
  createdAt: DateTime
  id: ID
  isActive: Boolean = true
  sortOrder: Float
  title: String
  updatedAt: DateTime
}

input UpdateCarpetUsagePlaceInvoiceProduct {
  carpetUsagePlaceId: Float
  createdAt: DateTime
  id: ID
  invoiceProductId: Float
  row: Float
  updatedAt: DateTime
}

input UpdateCarpetUsagePlaceUser {
  carpetUsagePlaceId: Float
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
  userId: Float
}

input UpdateChaparSettlementStatus {
  createdAt: DateTime
  id: ID
  status: String
  updatedAt: DateTime
}

input UpdateChaparSettlementStatusInput {
  createdAt: DateTime
  id: Int!
  status: String
  updatedAt: DateTime
}

input UpdateChaparTrackingHistory {
  createdAt: DateTime
  date: String
  id: ID
  invoiceId: Float
  reference: String
  status: String
  statusNote: String
  time: String
  tracking: String
  updatedAt: DateTime
}

input UpdateCitiesSepidar {
  cityId: Float
  id: ID
  name: String
  sepidarStateId: Float
  stateId: Float
  stateName: String
}

input UpdateCity {
  chaparId: Float
  code: String
  createdAt: DateTime
  id: ID
  mahexCode: String
  name: String
  sepidarId: Float
  stateId: Float
  tipaxId: Float
  updatedAt: DateTime
}

input UpdateCity2 {
  id: ID
  sepidarId: Float
}

input UpdateCityInput {
  chaparId: Float
  code: String
  createdAt: DateTime
  id: Int!
  mahexCode: String
  name: String
  sepidarId: Float
  stateId: Float
  tipaxId: Float
  updatedAt: DateTime
}

input UpdateColor {
  colorCode: String
  colorCodeOriginal: String
  colorName: String
  hexCode: String
  id: ID
}

input UpdateColorCategory {
  altText: String
  altTextEn: String
  color: String
  createdAt: DateTime
  description: String
  descriptionEn: String
  homepageImageId: Float
  id: ID
  imageId: Float
  isActive: Boolean
  metaTags: String
  metaTagsEn: String
  mobileImageId: Float
  name: String
  nameEn: String
  pageTitle: String
  pageTitleEn: String
  sortOrder: Float
  updatedAt: DateTime
  urlSlug: String
  urlSlugEn: String
  viewCounter: Float
}

input UpdateColorCategoryDetail {
  colorCategoryId: Float
  createdAt: DateTime
  detailText: String
  detailTextEn: String
  id: ID
  isActive: Boolean
  sortOrder: Float
  title: String
  titleEn: String
  updatedAt: DateTime
}

input UpdateColorCategorySubproduct {
  colorCategoryId: Float
  createdAt: DateTime
  id: ID
  subproductId: Float
  updatedAt: DateTime
}

input UpdateColorInput {
  colorCode: String
  colorCodeOriginal: String
  colorName: String
  hexCode: String
  id: Int!
}

input UpdateConfig {
  createdAt: DateTime
  id: ID
  key: String
  updatedAt: DateTime
  value: String
}

input UpdateContactForm {
  answer1: String
  answer2: String
  answer3: String
  city: String
  contactFormStatusId: Float
  countryId: Float
  createdAt: DateTime
  departmentId: Float
  email: String
  id: ID
  name: String
  phone: String
  text: String
  updatedAt: DateTime
  userId: Float
}

input UpdateContactFormHistory {
  comment: String
  contactFormId: Float
  contactFormStatusId: Float
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
  userId: Float
}

input UpdateContactFormStatus {
  createdAt: DateTime
  id: ID
  status: String
  updatedAt: DateTime
}

input UpdateCountry {
  chaparId: Float
  createdAt: DateTime
  id: ID
  name: String
  phoneCode: Float
  sortName: String
  tipaxId: Float
  updatedAt: DateTime
}

input UpdateCoupon {
  code: String
  createdAt: DateTime
  createdBy: Float
  discount: String
  endDate: DateTime
  forNewCustomersOnly: Boolean
  forOldCustomersOnly: Boolean
  forReadyProductsOnly: Boolean
  id: ID
  isActive: Float
  isApplicableToDiscountedProducts: Float
  maxDiscountPrice: String
  maxPercent: Float
  maxUsage: Float
  minInvoicePrice: String
  name: String
  offType: Float
  onlyForOneItem: Boolean
  onlyForOutOfStocks: Float
  retargetingInvoiceId: Float
  retargetingUserId: Float
  sortOrder: Float
  startDate: DateTime
  updatedAt: DateTime
  updatedBy: Float
  userId: Float
}

input UpdateCouponSubject {
  basicCarpetSizeId: Float
  couponId: Float
  createdAt: DateTime
  id: ID
  productCategoryId: Float
  productId: Float
  subproductId: Float
  updatedAt: DateTime
}

input UpdateCrmPresentation {
  mobile: ID
  optionId: Float
}

input UpdateCustomerImageProduct {
  createdAt: DateTime
  id: ID
  imageId: Float
  productId: Float
  sortOrder: Float
  updatedAt: DateTime
}

input UpdateCustomerImageProductInput {
  createdAt: DateTime
  id: Int!
  imageId: Float
  productId: Float
  sortOrder: Float
  updatedAt: DateTime
}

input UpdateCustomerRequest {
  createdAt: DateTime
  id: ID
  name: String
  phone: String
  updatedAt: DateTime
  userId: Float
  uuid: String
}

input UpdateCustomerRequestFile {
  createdAt: DateTime
  customerRequestId: Float
  filename: String
  id: ID
  mime: String
  originalFilename: String
  path: String = "/"
  updatedAt: DateTime
}

input UpdateCustomerVideoProduct {
  createdAt: DateTime
  id: ID
  productId: Float
  sortOrder: Float = 0
  updatedAt: DateTime
  videoId: Float
}

input UpdateCustomerVideoProductInput {
  createdAt: DateTime
  id: Int!
  productId: Float
  sortOrder: Float = 0
  updatedAt: DateTime
  videoId: Float
}

input UpdateDamageReason {
  cause: String
  createdAt: DateTime
  department: String
  id: ID
  name: String
  updatedAt: DateTime
}

input UpdateDepartment {
  createdAt: DateTime
  id: ID
  name: String
  nameEn: String
  updatedAt: DateTime
}

input UpdateDepartmentInput {
  createdAt: DateTime
  id: Int!
  name: String
  nameEn: String
  updatedAt: DateTime
}

input UpdateDesign {
  backgroundColor: String = "#FFFFFF"
  borderColor: String = "#FFFFFF"
  carpetMaterialId: Float
  carpetShapeId: Float = 1
  createdAt: DateTime
  deletedAt: DateTime
  filename: String
  fringeColor: String = "#FFFFFF"
  id: ID
  length: Float = 0
  name: String
  path: String = "/"
  updatedAt: DateTime
  userId: Float
  width: Float = 0
}

input UpdateDesignersProductPriceRange {
  basicCarpetSizeId: Float
  createdAt: DateTime
  id: ID
  maxPrice: Float
  minPrice: Float
  updatedAt: DateTime
}

input UpdateDiscount {
  createdAt: DateTime
  createdBy: Float
  discount: String
  endDate: DateTime
  hasStockCountOnly: Boolean = false
  id: ID
  isActive: Float = 1
  maxDiscountPrice: String
  minProductPrice: String
  name: String
  redisForShowoffIsDeleted: Boolean = false
  redisIsDeleted: Boolean = false
  showoffEndDate: DateTime
  showoffStartDate: DateTime
  sortOrder: Float
  startDate: DateTime
  type: Float
  updatedAt: DateTime
  updatedBy: Float
  withPad: Boolean = false
}

input UpdateDiscountInput {
  createdAt: DateTime
  createdBy: Float
  discount: String
  endDate: DateTime
  hasStockCountOnly: Boolean = false
  id: Int!
  isActive: Float = 1
  maxDiscountPrice: String
  minProductPrice: String
  name: String
  redisForShowoffIsDeleted: Boolean = false
  redisIsDeleted: Boolean = false
  showoffEndDate: DateTime
  showoffStartDate: DateTime
  sortOrder: Float
  startDate: DateTime
  type: Float
  updatedAt: DateTime
  updatedBy: Float
  withPad: Boolean = false
}

input UpdateDiscountNotification {
  createdAt: DateTime
  deletedAt: DateTime
  id: ID
  productId: Float
  updatedAt: DateTime
  userId: Float
}

input UpdateDiscountSubject {
  basicCarpetSizeId: Float
  createdAt: DateTime
  discountId: Float
  id: ID
  priceGroupId: Float
  productCategoryId: Float
  productId: Float
  subproductId: Float
  updatedAt: DateTime
}

input UpdateExitControl {
  createdAt: DateTime
  driverName: String
  driverPhone: String
  exitDate: String
  id: ID
  isClosed: Boolean = false
  plateNo: String
  updatedAt: DateTime
  userId: Float
}

input UpdateExitControlInput {
  createdAt: DateTime
  driverName: String
  driverPhone: String
  exitDate: String
  id: Int!
  isClosed: Boolean = false
  plateNo: String
  updatedAt: DateTime
  userId: Float
}

input UpdateExitControlItem {
  boxNo: Float
  carpetPadScanned: Boolean = false
  carpetScanned: Boolean = false
  createdAt: DateTime
  exitControlId: Float
  id: ID
  invoiceProductItemId: Float
  updatedAt: DateTime
}

input UpdateExitControlItemInput {
  boxNo: Float
  carpetPadScanned: Boolean = false
  carpetScanned: Boolean = false
  createdAt: DateTime
  exitControlId: Float
  id: Int!
  invoiceProductItemId: Float
  updatedAt: DateTime
}

input UpdateExportProduct {
  code: String
  id: ID
  price: Float
}

input UpdateFailedJob {
  connection: String
  exception: String
  failedAt: DateTime
  id: ID
  payload: String
  queue: String
}

input UpdateFavoriteProduct {
  createdAt: DateTime
  id: ID
  productId: Float
  subproductId: Float
  updatedAt: DateTime
  userId: Float
}

input UpdateFedexAddressValidationAttribute {
  code: String
  correctValue: Boolean
  createdAt: DateTime
  description: String
  id: ID
  updatedAt: DateTime
}

input UpdateFetchSiteUrl {
  createdAt: DateTime
  date: DateTime
  id: ID
  isFetch: Boolean
  updatedAt: DateTime
  url: String
}

input UpdateFile {
  createdAt: DateTime
  filename: String
  id: ID
  mime: String
  originalFilename: String
  path: String = "/"
  updatedAt: DateTime
  uploadSource: String
}

input UpdateFileNegotiation {
  createdAt: DateTime
  fileId: Float
  id: ID
  negotiationId: Float
  updatedAt: DateTime
}

input UpdateGhazal {
  createdAt: DateTime
  explanation: String
  id: ID
  poem: String
  updatedAt: DateTime
}

input UpdateGoogleFormUtm {
  createdAt: DateTime
  formId: String
  id: ID
  status: Boolean = false
  updatedAt: DateTime
  url: String
  userId: Float
  utm: String
}

input UpdateGoogleFormUtmInput {
  createdAt: DateTime
  formId: String
  id: Int!
  status: Boolean = false
  updatedAt: DateTime
  url: String
  userId: Float
  utm: String
}

input UpdateHeardAboutUsOption {
  createdAt: DateTime
  id: ID
  isActive: Boolean = true
  name: String
  sortOrder: Float = 1
  updatedAt: DateTime
}

input UpdateHelpDesk {
  createdAt: DateTime
  id: ID
  imageId: Float
  isActive: Float
  isOnline: Float
  phone: String
  title: String
  updatedAt: DateTime
  userId: Float
}

input UpdateHoliday {
  createdAt: DateTime
  deletedAt: DateTime
  holidayDate: String
  id: ID
  updatedAt: DateTime
  userId: Float
  weekday: Float
}

input UpdateHolidayInput {
  createdAt: DateTime
  deletedAt: DateTime
  holidayDate: String
  id: Int!
  updatedAt: DateTime
  userId: Float
  weekday: Float
}

input UpdateHomePageCustomerImage {
  createdAt: DateTime
  desktopImageAlt: String
  desktopImageId: Float
  id: ID
  mobileImageAlt: String
  mobileImageId: Float
  productId: Float
  sortOrder: Float
  updatedAt: DateTime
}

input UpdateHomePageCustomerImageInput {
  createdAt: DateTime
  desktopImageAlt: String
  desktopImageId: Float
  id: Int!
  mobileImageAlt: String
  mobileImageId: Float
  sortOrder: Float
  updatedAt: DateTime
}

input UpdateHyper {
  code: ID
  depot: Float
  produce: Float
}

input UpdateHyperInput {
  code: String
  depot: Float
  id: Int!
  produce: Float
}

input UpdateHyperstarCode {
  code: ID
  subproductCode: String
}

input UpdateImage {
  altText: String
  altTextEn: String
  createdAt: DateTime
  filename: String
  id: ID
  imageRecreated: Boolean
  mime: String
  originalFilename: String
  path: String
  updatedAt: DateTime
  uploadSource: String
}

input UpdateImageLayer {
  centerX: Float
  centerY: Float
  createdAt: DateTime
  deletedAt: DateTime
  designId: Float
  filename: String
  id: ID
  path: String
  rotation: Float
  scaleX: Float
  scaleY: Float
  sortOrder: Float
  updatedAt: DateTime
}

input UpdateImageLayerInput {
  centerX: Float
  centerY: Float
  createdAt: DateTime
  deletedAt: DateTime
  designId: Float
  filename: String
  id: Int!
  path: String
  rotation: Float
  scaleX: Float
  scaleY: Float
  sortOrder: Float
  updatedAt: DateTime
}

input UpdateImageProduct {
  createdAt: DateTime
  id: ID
  imageId: Float
  productId: Float
  sortOrder: Float
  updatedAt: DateTime
}

input UpdateImageSize {
  createdAt: DateTime
  height: Float
  id: ID
  name: String
  shortName: String
  updatedAt: DateTime
  width: Float
}

input UpdateImageSizeInput {
  createdAt: DateTime
  height: Float
  id: Int!
  name: String
  shortName: String
  updatedAt: DateTime
  width: Float
}

input UpdateImageSubproduct {
  createdAt: DateTime
  id: ID
  imageId: Float
  sortOrder: Float
  subproductId: Float
  updatedAt: DateTime
}

input UpdateImageSubproductInput {
  createdAt: DateTime
  id: Int!
  imageId: Float
  sortOrder: Float
  subproductId: Float
  updatedAt: DateTime
}

input UpdateImagesSizeGuidesDetail {
  createdAt: DateTime
  id: ID
  imageId: Float
  sizeGuidesDetailsId: Float
  sortOrder: Float
  updatedAt: DateTime
}

input UpdateImagesSizeGuidesDetailInput {
  createdAt: DateTime
  id: Int!
  imageId: Float
  sizeGuidesDetailsId: Float
  sortOrder: Float
  updatedAt: DateTime
}

input UpdateImpersonateHistory {
  createdAt: DateTime
  id: ID
  impersonateUserId: Float
  updatedAt: DateTime
  userId: Float
}

input UpdateIncredibleOffer {
  basicCarpetColorId: Float
  count: Float
  createdAt: DateTime
  discountId: Float
  discountPercent: Float
  id: ID
  isFake: Boolean
  offerDate: String
  place: Float
  productId: Float
  soldCount: Float
  sortOrder: Float
  updatedAt: DateTime
}

input UpdateIncredibleOfferInput {
  basicCarpetColorId: Float
  count: Float
  createdAt: DateTime
  discountId: Float
  discountPercent: Float
  id: Int!
  isFake: Boolean
  offerDate: String
  place: Float
  productId: Float
  soldCount: Float
  sortOrder: Float
  updatedAt: DateTime
}

input UpdateIncredibleOfferSentNotification {
  createdAt: DateTime
  id: ID
  message: String
  updatedAt: DateTime
  userId: Float
}

input UpdateIncredibleOfferSentNotificationInput {
  createdAt: DateTime
  id: Int!
  message: String
  updatedAt: DateTime
  userId: Float
}

input UpdateInstagramFeed {
  altText: String
  caption: String
  carouselMedia: String
  comments: String
  commentsCount: Float
  commentsDisabled: Boolean
  commentsNextPage: String
  createdAt: DateTime
  createdTime: String
  data: String
  downloadedImageHighResolutionUrl: String
  downloadedImageLowResolutionUrl: String
  downloadedImageStandardResolutionUrl: String
  downloadedImageThumbnailUrl: String
  hasMoreComments: Boolean
  id: ID
  imageHighResolutionUrl: String
  imageLowResolutionUrl: String
  imageStandardResolutionUrl: String
  imageThumbnailUrl: String
  instagramId: String
  isAd: Boolean
  isAutoConstruct: Boolean
  isCaptionEdited: Boolean
  isFake: Boolean
  isLoadEmpty: Boolean
  isLoaded: Boolean
  isNew: Boolean
  likesCount: Float
  link: String
  locationAddressJson: String
  locationId: String
  locationName: String
  locationSlug: String
  modified: String
  owner: String
  ownerId: String
  shortCode: String
  sidecarMedias: String
  squareImages: String
  type: String
  updatedAt: DateTime
  videoDuration: String
  videoLowBandwidthUrl: String
  videoLowResolutionUrl: String
  videoStandardResolutionUrl: String
  videoViews: Float
}

input UpdateInstagramFeedInput {
  altText: String
  caption: String
  carouselMedia: String
  comments: String
  commentsCount: Float
  commentsDisabled: Boolean
  commentsNextPage: String
  createdAt: DateTime
  createdTime: String
  data: String
  downloadedImageHighResolutionUrl: String
  downloadedImageLowResolutionUrl: String
  downloadedImageStandardResolutionUrl: String
  downloadedImageThumbnailUrl: String
  hasMoreComments: Boolean
  id: Int!
  imageHighResolutionUrl: String
  imageLowResolutionUrl: String
  imageStandardResolutionUrl: String
  imageThumbnailUrl: String
  instagramId: String
  isAd: Boolean
  isAutoConstruct: Boolean
  isCaptionEdited: Boolean
  isFake: Boolean
  isLoadEmpty: Boolean
  isLoaded: Boolean
  isNew: Boolean
  likesCount: Float
  link: String
  locationAddressJson: String
  locationId: String
  locationName: String
  locationSlug: String
  modified: String
  owner: String
  ownerId: String
  shortCode: String
  sidecarMedias: String
  squareImages: String
  type: String
  updatedAt: DateTime
  videoDuration: String
  videoLowBandwidthUrl: String
  videoLowResolutionUrl: String
  videoStandardResolutionUrl: String
  videoViews: Float
}

input UpdateInvitationCode {
  code: String
  createdAt: DateTime
  email: String
  id: ID
  isActive: Boolean
  maxUsage: Float
  updatedAt: DateTime
}

input UpdateInvitationCodeInput {
  code: String
  createdAt: DateTime
  email: String
  id: Int!
  isActive: Boolean
  maxUsage: Float
  updatedAt: DateTime
}

input UpdateInvoice {
  accountingDescription: String
  additions: String
  addressId: Float
  canReturn: Boolean
  cashOnDelivery: Boolean
  chaparSettlementStatusId: Float
  chaparStatus: String
  containsPadsOnly: Boolean
  couponId: Float
  createdAt: DateTime
  crmCompanyId: String
  crmCompanyPersonId: String
  crmPreOrderId: String
  currentInvoiceStatusId: Float
  deadlineDate: String
  deadlineDateOld: String
  deliveredDate: DateTime
  description: String
  digikalaShare: Float
  digikalaSharePercent: Float
  forDigikala: Boolean
  freeDelivery: Boolean
  hasPriority: Boolean
  id: ID
  invoiceModeId: Float
  invoiceNumber: String
  invoicePaymentStatusId: Float
  invoiceTypeId: Float
  isChaparDelivery: Boolean
  isDepot: Boolean
  isForAdvertisement: Boolean
  isReversible: Boolean
  issueDate: DateTime
  lastName: String
  lockState: Float
  lockStateDescription: String
  mah: Float
  moneyTransferConfirmed: Boolean
  moneyTransferConfirmedBy: Float
  moneyTransferRefCode: String
  name: String
  needsReview: Boolean
  orderId: String
  packageCount: Float
  paidCodShippingRate: Float
  parentInvoiceId: Float
  partnerCode: String
  paymentCreditable: Boolean
  paymentErrorMessage: String
  refId: String
  replacementAdditionalPrice: String
  replacementPaymentStatusId: Float
  replacementPriceMoneyTransferCode: String
  roz: Float
  sal: Float
  saleRefId: String
  seenAt: DateTime
  selectedShippingServiceId: Float
  sepidarCode: Float
  sepidarId: Float
  shipmentUuid: String
  shippingRate: String
  shippingRateCod: String
  subtotalPrice: String
  taxRate: Float
  totalCouponDiscount: String
  totalDiscount: String
  totalPrice: String
  totalPriceOld: Float
  totalTax: String
  totalVisitorShare: Float
  totalWalletCharged: String
  trackingCode: String
  updatedAt: DateTime
  useWallet: Boolean
  userId: Float
  visitorCouponId: Float
  visitorCouponRate: Float
  visitorGroupId: Float
  visitorId: Float
  visitorRate: Float
  visitorShareCalculated: Boolean
  wholesaleRemainingMoneyTransferRefCode: String
}

input UpdateInvoiceAddress {
  address: String
  address2: String
  addressId: Float
  cityId: Float
  countryId: Float
  createdAt: DateTime
  crmCompanyId: String
  crmCompanyPersonId: String
  email: String
  fullAddress: String
  fullname: String
  id: ID
  invoiceId: Float
  latitude: String
  longitude: String
  nationalId: String
  phone: String
  phone2: String
  stateId: Float
  updatedAt: DateTime
  userId: Float
  zipCode: String
}

input UpdateInvoiceAddressInput {
  address: String
  address2: String
  addressId: Float
  cityId: Float
  countryId: Float
  createdAt: DateTime
  crmCompanyId: String
  crmCompanyPersonId: String
  email: String
  fullAddress: String
  fullname: String
  id: Int!
  invoiceId: Float
  latitude: String
  longitude: String
  nationalId: String
  phone: String
  phone2: String
  stateId: Float
  updatedAt: DateTime
  userId: Float
  zipCode: String
}

input UpdateInvoiceBankGatewayHistory {
  amount: String
  createdAt: DateTime
  id: ID
  invoiceId: Float
  orderId: String
  preorderRegisterId: Float
  refId: String
  saleRefId: String
  updatedAt: DateTime
}

input UpdateInvoiceBankGatewayHistoryInput {
  amount: String
  createdAt: DateTime
  id: Int!
  invoiceId: Float
  orderId: String
  preorderRegisterId: Float
  refId: String
  saleRefId: String
  updatedAt: DateTime
}

input UpdateInvoiceHistory {
  accountingDescription: String
  additions: String
  address: String
  address2: String
  addressId: Float
  cashOnDelivery: Float
  chaparSettlementStatusId: Float
  chaparStatus: String
  cityId: Float
  countryId: Float
  couponId: Float
  createdAt: DateTime
  crmCompanyId: String
  crmCompanyPersonId: String
  crmPreOrderId: String
  currentInvoiceStatusId: Float
  deliveredDate: DateTime
  description: String
  digikalaShare: Float
  digikalaSharePercent: Float
  editorUserId: Float
  email: String
  forDigikala: Boolean
  freeDelivery: Float
  fullAddress: String
  fullname: String
  hasPriority: Boolean
  id: ID
  invoiceAddressId: Float
  invoiceId: Float
  invoiceModeId: Float
  invoiceNumber: String
  invoicePaymentStatusId: Float
  invoiceTypeId: Float
  isChaparDelivery: Float
  isDepot: Boolean
  isForAdvertisement: Boolean
  isReversible: Boolean
  issueDate: DateTime
  lastName: String
  latitude: String
  lockState: Float
  longitude: String
  moneyTransferConfirmed: Boolean
  moneyTransferConfirmedBy: Float
  moneyTransferRefCode: String
  name: String
  needsReview: Boolean
  orderId: String
  packageCount: Float
  parentInvoiceId: Float
  partnerCode: String
  paymentCreditable: Boolean
  paymentErrorMessage: String
  phone: String
  phone2: String
  refId: String
  replacementAdditionalPrice: String
  replacementPaymentStatusId: Float
  replacementPriceMoneyTransferCode: String
  saleRefId: String
  selectedShippingServiceId: Float
  shippingRate: String
  shippingRateCod: String
  stateId: Float
  subtotalPrice: String
  taxRate: Float
  totalCouponDiscount: String
  totalDiscount: String
  totalPrice: String
  totalPriceOld: Float
  totalTax: String
  totalVisitorShare: Float
  totalWalletCharged: String
  trackingCode: String
  updatedAt: DateTime
  useWallet: Boolean
  userId: Float
  visitorCouponId: Float
  visitorCouponRate: Float
  visitorGroupId: Float
  visitorId: Float
  visitorRate: Float
  visitorShareCalculated: Float
  wholesaleRemainingMoneyTransferRefCode: String
  zipCode: String
}

input UpdateInvoiceHistoryInput {
  accountingDescription: String
  additions: String
  address: String
  address2: String
  addressId: Float
  cashOnDelivery: Float
  chaparSettlementStatusId: Float
  chaparStatus: String
  cityId: Float
  countryId: Float
  couponId: Float
  createdAt: DateTime
  crmCompanyId: String
  crmCompanyPersonId: String
  crmPreOrderId: String
  currentInvoiceStatusId: Float
  deliveredDate: DateTime
  description: String
  digikalaShare: Float
  digikalaSharePercent: Float
  editorUserId: Float
  email: String
  forDigikala: Boolean
  freeDelivery: Float
  fullAddress: String
  fullname: String
  hasPriority: Boolean
  id: Int!
  invoiceAddressId: Float
  invoiceId: Float
  invoiceModeId: Float
  invoiceNumber: String
  invoicePaymentStatusId: Float
  invoiceTypeId: Float
  isChaparDelivery: Float
  isDepot: Boolean
  isForAdvertisement: Boolean
  isReversible: Boolean
  issueDate: DateTime
  lastName: String
  latitude: String
  lockState: Float
  longitude: String
  moneyTransferConfirmed: Boolean
  moneyTransferConfirmedBy: Float
  moneyTransferRefCode: String
  name: String
  needsReview: Boolean
  orderId: String
  packageCount: Float
  parentInvoiceId: Float
  partnerCode: String
  paymentCreditable: Boolean
  paymentErrorMessage: String
  phone: String
  phone2: String
  refId: String
  replacementAdditionalPrice: String
  replacementPaymentStatusId: Float
  replacementPriceMoneyTransferCode: String
  saleRefId: String
  selectedShippingServiceId: Float
  shippingRate: String
  shippingRateCod: String
  stateId: Float
  subtotalPrice: String
  taxRate: Float
  totalCouponDiscount: String
  totalDiscount: String
  totalPrice: String
  totalPriceOld: Float
  totalTax: String
  totalVisitorShare: Float
  totalWalletCharged: String
  trackingCode: String
  updatedAt: DateTime
  useWallet: Boolean
  userId: Float
  visitorCouponId: Float
  visitorCouponRate: Float
  visitorGroupId: Float
  visitorId: Float
  visitorRate: Float
  visitorShareCalculated: Float
  wholesaleRemainingMoneyTransferRefCode: String
  zipCode: String
}

input UpdateInvoiceInput {
  accountingDescription: String
  additions: String
  addressId: Float
  canReturn: Boolean
  cashOnDelivery: Boolean
  chaparSettlementStatusId: Float
  chaparStatus: String
  containsPadsOnly: Boolean
  couponId: Float
  createdAt: DateTime
  crmCompanyId: String
  crmCompanyPersonId: String
  crmPreOrderId: String
  currentInvoiceStatusId: Float
  deadlineDate: String
  deadlineDateOld: String
  deliveredDate: DateTime
  description: String
  digikalaShare: Float
  digikalaSharePercent: Float
  forDigikala: Boolean
  freeDelivery: Boolean
  hasPriority: Boolean
  id: Int!
  invoiceModeId: Float
  invoiceNumber: String
  invoicePaymentStatusId: Float
  invoiceTypeId: Float
  isChaparDelivery: Boolean
  isDepot: Boolean
  isForAdvertisement: Boolean
  isReversible: Boolean
  issueDate: DateTime
  lastName: String
  lockState: Float
  lockStateDescription: String
  mah: Float
  moneyTransferConfirmed: Boolean
  moneyTransferConfirmedBy: Float
  moneyTransferRefCode: String
  name: String
  needsReview: Boolean
  orderId: String
  packageCount: Float
  paidCodShippingRate: Float
  parentInvoiceId: Float
  partnerCode: String
  paymentCreditable: Boolean
  paymentErrorMessage: String
  refId: String
  replacementAdditionalPrice: String
  replacementPaymentStatusId: Float
  replacementPriceMoneyTransferCode: String
  roz: Float
  sal: Float
  saleRefId: String
  seenAt: DateTime
  selectedShippingServiceId: Float
  sepidarCode: Float
  sepidarId: Float
  shipmentUuid: String
  shippingRate: String
  shippingRateCod: String
  subtotalPrice: String
  taxRate: Float
  totalCouponDiscount: String
  totalDiscount: String
  totalPrice: String
  totalPriceOld: Float
  totalTax: String
  totalVisitorShare: Float
  totalWalletCharged: String
  trackingCode: String
  updatedAt: DateTime
  useWallet: Boolean
  userId: Float
  visitorCouponId: Float
  visitorCouponRate: Float
  visitorGroupId: Float
  visitorId: Float
  visitorRate: Float
  visitorShareCalculated: Boolean
  wholesaleRemainingMoneyTransferRefCode: String
}

input UpdateInvoiceInvoiceStatus {
  comment: String
  createdAt: DateTime
  id: ID
  invoiceId: Float
  invoiceStatusId: Float
  updatedAt: DateTime
  userId: Float
}

input UpdateInvoiceInvoiceStatusInput {
  comment: String
  createdAt: DateTime
  id: Int!
  invoiceId: Float
  invoiceStatusId: Float
  updatedAt: DateTime
  userId: Float
}

input UpdateInvoiceMode {
  createdAt: DateTime
  id: ID
  name: String
  updatedAt: DateTime
}

input UpdateInvoiceModeInput {
  createdAt: DateTime
  id: Int!
  name: String
  updatedAt: DateTime
}

input UpdateInvoiceNegotiation {
  createdAt: DateTime
  id: ID
  invoiceId: Float
  negotiationId: Float
  updatedAt: DateTime
}

input UpdateInvoiceNegotiationInput {
  createdAt: DateTime
  id: Int!
  invoiceId: Float
  negotiationId: Float
  updatedAt: DateTime
}

input UpdateInvoicePayment {
  amount: String
  chequeBank: String
  chequeDate: String
  chequeNumber: String
  chequePayee: String
  confirmedBy: Float
  createdAt: DateTime
  description: String
  forShipping: Boolean
  id: ID
  invoiceId: Float
  invoicePaymentTypeId: Float
  isConfirmed: Boolean
  paymentDate: String
  refCode: String
  refCodeSales: String
  updatedAt: DateTime
  userId: Float
}

input UpdateInvoicePaymentHistory {
  amount: String
  chequeBank: String
  chequeDate: String
  chequeNumber: String
  chequePayee: String
  confirmedBy: Float
  createdAt: DateTime
  description: String
  forShipping: Boolean
  id: ID
  invoiceHistoryId: Float
  invoiceId: Float
  invoicePaymentId: Float
  invoicePaymentTypeId: Float
  isConfirmed: Boolean
  paymentDate: String
  refCode: String
  refCodeSales: String
  updatedAt: DateTime
  userId: Float
}

input UpdateInvoicePaymentHistoryInput {
  amount: String
  chequeBank: String
  chequeDate: String
  chequeNumber: String
  chequePayee: String
  confirmedBy: Float
  createdAt: DateTime
  description: String
  forShipping: Boolean
  id: Int!
  invoiceHistoryId: Float
  invoiceId: Float
  invoicePaymentId: Float
  invoicePaymentTypeId: Float
  isConfirmed: Boolean
  paymentDate: String
  refCode: String
  refCodeSales: String
  updatedAt: DateTime
  userId: Float
}

input UpdateInvoicePaymentInput {
  amount: String
  chequeBank: String
  chequeDate: String
  chequeNumber: String
  chequePayee: String
  confirmedBy: Float
  createdAt: DateTime
  description: String
  forShipping: Boolean
  id: Int!
  invoiceId: Float
  invoicePaymentTypeId: Float
  isConfirmed: Boolean
  paymentDate: String
  refCode: String
  refCodeSales: String
  updatedAt: DateTime
  userId: Float
}

input UpdateInvoicePaymentStatus {
  createdAt: DateTime
  id: ID
  name: String
  updatedAt: DateTime
}

input UpdateInvoicePaymentStatusInput {
  createdAt: DateTime
  id: Int!
  name: String
  updatedAt: DateTime
}

input UpdateInvoicePaymentType {
  createdAt: DateTime
  id: ID
  name: String
  updatedAt: DateTime
}

input UpdateInvoicePaymentTypeInput {
  createdAt: DateTime
  id: Int!
  name: String
  updatedAt: DateTime
}

input UpdateInvoiceProduct {
  bundleCount: Float
  bundlePrice: String
  count: Float
  createdAt: DateTime
  description: String
  designId: Float
  designerPricePercentage: Float
  designerPriceShare: Float
  discount: String
  discountId: Float
  gift: Float
  id: ID
  invoiceId: Float
  invoiceProductItemsCreated: Boolean
  isCouponApplicable: Boolean
  itemsFromDepot: Float
  itemsToProduce: Float
  length: Float
  manuallyAdded: Boolean
  padId: Float
  price: String
  pricePerInch: Float
  productId: Float
  relatedProductId: Float
  relatedSubproductId: Float
  sepidarId: Float
  stockCount: Float
  subproductId: Float
  tempDepotItemsCreated: Boolean
  totalCouponDiscount: String
  totalDiscount: String
  totalPrice: Float
  updatedAt: DateTime
  width: Float
  withPad: Boolean
}

input UpdateInvoiceProductHistory {
  bundleCount: Float
  bundlePrice: String
  count: Float
  createdAt: DateTime
  description: String
  designId: Float
  designerPricePercentage: Float
  designerPriceShare: Float
  discount: String
  discountId: Float
  id: ID
  invoiceHistoryId: Float
  invoiceId: Float
  invoiceProductId: Float
  invoiceProductItemsCreated: Boolean
  isCouponApplicable: Boolean
  itemsFromDepot: Float
  itemsToProduce: Float
  length: Float
  manuallyAdded: Boolean
  padId: Float
  price: String
  pricePerInch: Float
  productId: Float
  relatedProductId: Float
  relatedSubproductId: Float
  stockCount: Float
  subproductId: Float
  totalCouponDiscount: String
  totalDiscount: String
  totalPrice: Float
  updatedAt: DateTime
  width: Float
  withPad: Boolean
}

input UpdateInvoiceProductHistoryInput {
  bundleCount: Float
  bundlePrice: String
  count: Float
  createdAt: DateTime
  description: String
  designId: Float
  designerPricePercentage: Float
  designerPriceShare: Float
  discount: String
  discountId: Float
  id: Int!
  invoiceHistoryId: Float
  invoiceId: Float
  invoiceProductId: Float
  invoiceProductItemsCreated: Boolean
  isCouponApplicable: Boolean
  itemsFromDepot: Float
  itemsToProduce: Float
  length: Float
  manuallyAdded: Boolean
  padId: Float
  price: String
  pricePerInch: Float
  productId: Float
  relatedProductId: Float
  relatedSubproductId: Float
  stockCount: Float
  subproductId: Float
  totalCouponDiscount: String
  totalDiscount: String
  totalPrice: Float
  updatedAt: DateTime
  width: Float
  withPad: Boolean
}

input UpdateInvoiceProductInput {
  bundleCount: Float
  bundlePrice: String
  count: Float
  createdAt: DateTime
  description: String
  designId: Float
  designerPricePercentage: Float
  designerPriceShare: Float
  discount: String
  discountId: Float
  gift: Float
  id: Int!
  invoiceId: Float
  invoiceProductItemsCreated: Boolean
  isCouponApplicable: Boolean
  itemsFromDepot: Float
  itemsToProduce: Float
  length: Float
  manuallyAdded: Boolean
  padId: Float
  price: String
  pricePerInch: Float
  productId: Float
  relatedProductId: Float
  relatedSubproductId: Float
  sepidarId: Float
  stockCount: Float
  subproductId: Float
  tempDepotItemsCreated: Boolean
  totalCouponDiscount: String
  totalDiscount: String
  totalPrice: Float
  updatedAt: DateTime
  width: Float
  withPad: Boolean
}

input UpdateInvoiceProductItem {
  code: String
  createdAt: DateTime
  currentStatusId: Float
  damageCause: String
  damageReasonId: Float
  damageType: Float
  fromDepot: Boolean
  id: ID
  invoiceProductId: Float
  isInsertedIntoSepidar: Boolean
  isPrintedAndHeated: Boolean
  isReversed: Boolean
  isTagPrinted: Boolean
  padCode: String
  predictedDateForReceivedByRepository: String
  printProfileId: Float
  printRipId: Float
  productionRollId: Float
  rollReferenceCode: String
  row: Float
  sortOrder: Float
  tagSortOrder: Float
  tempStatusId: Float
  updatedAt: DateTime
}

input UpdateInvoiceProductItemInput {
  code: String
  createdAt: DateTime
  currentStatusId: Float
  damageCause: String
  damageReasonId: Float
  damageType: Float
  fromDepot: Boolean
  id: Int!
  invoiceProductId: Float
  isInsertedIntoSepidar: Boolean
  isPrintedAndHeated: Boolean
  isReversed: Boolean
  isTagPrinted: Boolean
  padCode: String
  predictedDateForReceivedByRepository: String
  printProfileId: Float
  printRipId: Float
  productionRollId: Float
  rollReferenceCode: String
  row: Float
  sortOrder: Float
  tagSortOrder: Float
  tempStatusId: Float
  updatedAt: DateTime
}

input UpdateInvoiceProductItemInvoiceProductStatus {
  comment: String
  createdAt: DateTime
  id: ID
  invoiceProductItemId: Float
  invoiceProductStatusId: Float
  updatedAt: DateTime
  userId: Float
}

input UpdateInvoiceProductItemInvoiceProductStatusInput {
  comment: String
  createdAt: DateTime
  id: Int!
  invoiceProductItemId: Float
  invoiceProductStatusId: Float
  updatedAt: DateTime
  userId: Float
}

input UpdateInvoiceProductStatus {
  color: String
  createdAt: DateTime
  id: ID
  status: String
  step: Float
  stepShaggy: Float
  updatedAt: DateTime
}

input UpdateInvoiceProductStatusInput {
  color: String
  createdAt: DateTime
  id: Int!
  status: String
  step: Float
  stepShaggy: Float
  updatedAt: DateTime
}

input UpdateInvoiceRatesResult {
  addressId: Float
  createdAt: DateTime
  id: ID
  invoiceId: Float
  ratesReplyCodResult: String
  ratesReplyResult: String
  shippingServiceId: Float
  updatedAt: DateTime
}

input UpdateInvoiceRatesResultInput {
  addressId: Float
  createdAt: DateTime
  id: Int!
  invoiceId: Float
  ratesReplyCodResult: String
  ratesReplyResult: String
  shippingServiceId: Float
  updatedAt: DateTime
}

input UpdateInvoiceReversal {
  createdAt: DateTime
  id: ID
  invoiceId: Float
  invoiceStatusId: Float
  isReviewed: Boolean
  reviewedBy: Float
  reviewedDate: DateTime
  updatedAt: DateTime
  wholeInvoice: Boolean
}

input UpdateInvoiceReversalInput {
  createdAt: DateTime
  id: Int!
  invoiceId: Float
  invoiceStatusId: Float
  isReviewed: Boolean
  reviewedBy: Float
  reviewedDate: DateTime
  updatedAt: DateTime
  wholeInvoice: Boolean
}

input UpdateInvoiceReversalItem {
  count: Float
  createdAt: DateTime
  id: ID
  invoiceProductId: Float
  invoiceReversalId: Float
  updatedAt: DateTime
  withPad: Boolean
}

input UpdateInvoiceReversalItemInput {
  count: Float
  createdAt: DateTime
  id: Int!
  invoiceProductId: Float
  invoiceReversalId: Float
  updatedAt: DateTime
  withPad: Boolean
}

input UpdateInvoiceShippingRate {
  createdAt: DateTime
  id: ID
  invoiceId: Float
  shippingRate: String
  shippingRateCod: String
  shippingServiceId: Float
  updatedAt: DateTime
}

input UpdateInvoiceShippingRateInput {
  createdAt: DateTime
  id: Int!
  invoiceId: Float
  shippingRate: String
  shippingRateCod: String
  shippingServiceId: Float
  updatedAt: DateTime
}

input UpdateInvoiceStatus {
  color: String
  createdAt: DateTime
  id: ID
  notificationEmails: String
  notificationNumbers: String
  smsToCustomer: Boolean
  status: String
  updatedAt: DateTime
}

input UpdateInvoiceStatusInput {
  color: String
  createdAt: DateTime
  id: Int!
  notificationEmails: String
  notificationNumbers: String
  smsToCustomer: Boolean
  status: String
  updatedAt: DateTime
}

input UpdateInvoiceType {
  createdAt: DateTime
  id: ID
  name: String
  updatedAt: DateTime
}

input UpdateInvoiceTypeInput {
  createdAt: DateTime
  id: Int!
  name: String
  updatedAt: DateTime
}

input UpdateLabel {
  color: String
  createdAt: DateTime
  id: ID
  name: String
  textColor: String
  updatedAt: DateTime
}

input UpdateLabelInput {
  color: String
  createdAt: DateTime
  id: Int!
  name: String
  textColor: String
  updatedAt: DateTime
}

input UpdateLabelProduct {
  createdAt: DateTime
  id: ID
  labelId: Float
  productId: Float
  updatedAt: DateTime
}

input UpdateLabelProductInput {
  createdAt: DateTime
  id: Int!
  labelId: Float
  productId: Float
  updatedAt: DateTime
}

input UpdateManyActivitiesInput {
  """Filter used to find fields to update"""
  filter: ActivityUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateActivity!
}

input UpdateManyAddressesInput {
  """Filter used to find fields to update"""
  filter: AddressUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateAddress!
}

input UpdateManyAutomationEventsInput {
  """Filter used to find fields to update"""
  filter: AutomationEventUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateAutomationEvent!
}

input UpdateManyAutomationRfmScoresInput {
  """Filter used to find fields to update"""
  filter: AutomationRfmScoreUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateAutomationRfmScore!
}

input UpdateManyBasicCarpetBordersInput {
  """Filter used to find fields to update"""
  filter: BasicCarpetBorderUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateBasicCarpetBorder!
}

input UpdateManyBasicCarpetColorsInput {
  """Filter used to find fields to update"""
  filter: BasicCarpetColorUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateBasicCarpetColor!
}

input UpdateManyBasicCarpetDesignersInput {
  """Filter used to find fields to update"""
  filter: BasicCarpetDesignerUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateBasicCarpetDesigner!
}

input UpdateManyBasicCarpetDesignsInput {
  """Filter used to find fields to update"""
  filter: BasicCarpetDesignUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateBasicCarpetDesign!
}

input UpdateManyBasicCarpetMaterialsInput {
  """Filter used to find fields to update"""
  filter: BasicCarpetMaterialUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateBasicCarpetMaterial!
}

input UpdateManyBasicCarpetSizeDetailsInput {
  """Filter used to find fields to update"""
  filter: BasicCarpetSizeDetailUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateBasicCarpetSizeDetail!
}

input UpdateManyBasicCarpetSizesInput {
  """Filter used to find fields to update"""
  filter: BasicCarpetSizeUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateBasicCarpetSize!
}

input UpdateManyBasicCarpetTypesInput {
  """Filter used to find fields to update"""
  filter: BasicCarpetTypeUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateBasicCarpetType!
}

input UpdateManyBordersInput {
  """Filter used to find fields to update"""
  filter: BorderUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateBorder!
}

input UpdateManyCampaignFreeOfferSizesInput {
  """Filter used to find fields to update"""
  filter: CampaignFreeOfferSizeUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCampaignFreeOfferSize!
}

input UpdateManyCampaignFreeOffersInput {
  """Filter used to find fields to update"""
  filter: CampaignFreeOfferUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCampaignFreeOffer!
}

input UpdateManyCampaignGoldCoinSubsInput {
  """Filter used to find fields to update"""
  filter: CampaignGoldCoinSubUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCampaignGoldCoinSub!
}

input UpdateManyCampaignInstagramFollowsInput {
  """Filter used to find fields to update"""
  filter: CampaignInstagramFollowUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCampaignInstagramFollow!
}

input UpdateManyCampaignPetFormsInput {
  """Filter used to find fields to update"""
  filter: CampaignPetFormUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCampaignPetForm!
}

input UpdateManyCampaignRoomvoImagesInput {
  """Filter used to find fields to update"""
  filter: CampaignRoomvoImageUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCampaignRoomvoImage!
}

input UpdateManyCampaignRoomvoVotesInput {
  """Filter used to find fields to update"""
  filter: CampaignRoomvoVoteUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCampaignRoomvoVote!
}

input UpdateManyCampaignSubscriptionsInput {
  """Filter used to find fields to update"""
  filter: CampaignSubscriptionUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCampaignSubscription!
}

input UpdateManyCampaignUefaEuroSubscriberHistoriesInput {
  """Filter used to find fields to update"""
  filter: CampaignUefaEuroSubscriberHistoryUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCampaignUefaEuroSubscriberHistory!
}

input UpdateManyCampaignUefaEuroSubscribersInput {
  """Filter used to find fields to update"""
  filter: CampaignUefaEuroSubscriberUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCampaignUefaEuroSubscriber!
}

input UpdateManyCampaignVotingImagesInput {
  """Filter used to find fields to update"""
  filter: CampaignVotingImageUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCampaignVotingImage!
}

input UpdateManyCarpetFeatureUsersInput {
  """Filter used to find fields to update"""
  filter: CarpetFeatureUserUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCarpetFeatureUser!
}

input UpdateManyCarpetFeaturesInput {
  """Filter used to find fields to update"""
  filter: CarpetFeatureUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCarpetFeature!
}

input UpdateManyCarpetMaterialsInput {
  """Filter used to find fields to update"""
  filter: CarpetMaterialUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCarpetMaterial!
}

input UpdateManyCarpetShapesInput {
  """Filter used to find fields to update"""
  filter: CarpetShapeUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCarpetShape!
}

input UpdateManyCarpetSizesInput {
  """Filter used to find fields to update"""
  filter: CarpetSizeUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCarpetSize!
}

input UpdateManyCarpetUsagePlaceInvoiceProductsInput {
  """Filter used to find fields to update"""
  filter: CarpetUsagePlaceInvoiceProductUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCarpetUsagePlaceInvoiceProduct!
}

input UpdateManyCarpetUsagePlaceUsersInput {
  """Filter used to find fields to update"""
  filter: CarpetUsagePlaceUserUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCarpetUsagePlaceUser!
}

input UpdateManyCarpetUsagePlacesInput {
  """Filter used to find fields to update"""
  filter: CarpetUsagePlaceUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCarpetUsagePlace!
}

input UpdateManyChaparSettlementStatusesInput {
  """Filter used to find fields to update"""
  filter: ChaparSettlementStatusUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateChaparSettlementStatus!
}

input UpdateManyChaparTrackingHistoriesInput {
  """Filter used to find fields to update"""
  filter: ChaparTrackingHistoryUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateChaparTrackingHistory!
}

input UpdateManyCitiesInput {
  """Filter used to find fields to update"""
  filter: CityUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCity!
}

input UpdateManyCitiesSepidarsInput {
  """Filter used to find fields to update"""
  filter: CitiesSepidarUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCitiesSepidar!
}

input UpdateManyCity2sInput {
  """Filter used to find fields to update"""
  filter: City2UpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCity2!
}

input UpdateManyColorCategoriesInput {
  """Filter used to find fields to update"""
  filter: ColorCategoryUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateColorCategory!
}

input UpdateManyColorCategoryDetailsInput {
  """Filter used to find fields to update"""
  filter: ColorCategoryDetailUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateColorCategoryDetail!
}

input UpdateManyColorCategorySubproductsInput {
  """Filter used to find fields to update"""
  filter: ColorCategorySubproductUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateColorCategorySubproduct!
}

input UpdateManyColorsInput {
  """Filter used to find fields to update"""
  filter: ColorUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateColor!
}

input UpdateManyConfigsInput {
  """Filter used to find fields to update"""
  filter: ConfigUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateConfig!
}

input UpdateManyContactFormHistoriesInput {
  """Filter used to find fields to update"""
  filter: ContactFormHistoryUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateContactFormHistory!
}

input UpdateManyContactFormStatusesInput {
  """Filter used to find fields to update"""
  filter: ContactFormStatusUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateContactFormStatus!
}

input UpdateManyContactFormsInput {
  """Filter used to find fields to update"""
  filter: ContactFormUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateContactForm!
}

input UpdateManyCountriesInput {
  """Filter used to find fields to update"""
  filter: CountryUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCountry!
}

input UpdateManyCouponSubjectsInput {
  """Filter used to find fields to update"""
  filter: CouponSubjectUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCouponSubject!
}

input UpdateManyCouponsInput {
  """Filter used to find fields to update"""
  filter: CouponUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCoupon!
}

input UpdateManyCrmPresentationsInput {
  """Filter used to find fields to update"""
  filter: CrmPresentationUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCrmPresentation!
}

input UpdateManyCustomerImageProductsInput {
  """Filter used to find fields to update"""
  filter: CustomerImageProductUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCustomerImageProduct!
}

input UpdateManyCustomerRequestFilesInput {
  """Filter used to find fields to update"""
  filter: CustomerRequestFileUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCustomerRequestFile!
}

input UpdateManyCustomerRequestsInput {
  """Filter used to find fields to update"""
  filter: CustomerRequestUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCustomerRequest!
}

input UpdateManyCustomerVideoProductsInput {
  """Filter used to find fields to update"""
  filter: CustomerVideoProductUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCustomerVideoProduct!
}

input UpdateManyDamageReasonsInput {
  """Filter used to find fields to update"""
  filter: DamageReasonUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateDamageReason!
}

input UpdateManyDepartmentsInput {
  """Filter used to find fields to update"""
  filter: DepartmentUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateDepartment!
}

input UpdateManyDesignersProductPriceRangesInput {
  """Filter used to find fields to update"""
  filter: DesignersProductPriceRangeUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateDesignersProductPriceRange!
}

input UpdateManyDesignsInput {
  """Filter used to find fields to update"""
  filter: DesignUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateDesign!
}

input UpdateManyDiscountNotificationsInput {
  """Filter used to find fields to update"""
  filter: DiscountNotificationUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateDiscountNotification!
}

input UpdateManyDiscountSubjectsInput {
  """Filter used to find fields to update"""
  filter: DiscountSubjectUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateDiscountSubject!
}

input UpdateManyDiscountsInput {
  """Filter used to find fields to update"""
  filter: DiscountUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateDiscount!
}

input UpdateManyExitControlItemsInput {
  """Filter used to find fields to update"""
  filter: ExitControlItemUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateExitControlItem!
}

input UpdateManyExitControlsInput {
  """Filter used to find fields to update"""
  filter: ExitControlUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateExitControl!
}

input UpdateManyExportProductsInput {
  """Filter used to find fields to update"""
  filter: ExportProductUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateExportProduct!
}

input UpdateManyFailedJobsInput {
  """Filter used to find fields to update"""
  filter: FailedJobUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateFailedJob!
}

input UpdateManyFavoriteProductsInput {
  """Filter used to find fields to update"""
  filter: FavoriteProductUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateFavoriteProduct!
}

input UpdateManyFedexAddressValidationAttributesInput {
  """Filter used to find fields to update"""
  filter: FedexAddressValidationAttributeUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateFedexAddressValidationAttribute!
}

input UpdateManyFetchSiteUrlsInput {
  """Filter used to find fields to update"""
  filter: FetchSiteUrlUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateFetchSiteUrl!
}

input UpdateManyFileNegotiationsInput {
  """Filter used to find fields to update"""
  filter: FileNegotiationUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateFileNegotiation!
}

input UpdateManyFilesInput {
  """Filter used to find fields to update"""
  filter: FileUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateFile!
}

input UpdateManyGhazalsInput {
  """Filter used to find fields to update"""
  filter: GhazalUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateGhazal!
}

input UpdateManyGoogleFormUtmsInput {
  """Filter used to find fields to update"""
  filter: GoogleFormUtmUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateGoogleFormUtm!
}

input UpdateManyHeardAboutUsOptionsInput {
  """Filter used to find fields to update"""
  filter: HeardAboutUsOptionUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateHeardAboutUsOption!
}

input UpdateManyHelpDesksInput {
  """Filter used to find fields to update"""
  filter: HelpDeskUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateHelpDesk!
}

input UpdateManyHolidaysInput {
  """Filter used to find fields to update"""
  filter: HolidayUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateHoliday!
}

input UpdateManyHomePageCustomerImagesInput {
  """Filter used to find fields to update"""
  filter: HomePageCustomerImageUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateHomePageCustomerImage!
}

input UpdateManyHypersInput {
  """Filter used to find fields to update"""
  filter: HyperUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateHyper!
}

input UpdateManyHyperstarCodesInput {
  """Filter used to find fields to update"""
  filter: HyperstarCodeUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateHyperstarCode!
}

input UpdateManyImageLayersInput {
  """Filter used to find fields to update"""
  filter: ImageLayerUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateImageLayer!
}

input UpdateManyImageProductsInput {
  """Filter used to find fields to update"""
  filter: ImageProductUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateImageProduct!
}

input UpdateManyImageSizesInput {
  """Filter used to find fields to update"""
  filter: ImageSizeUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateImageSize!
}

input UpdateManyImageSubproductsInput {
  """Filter used to find fields to update"""
  filter: ImageSubproductUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateImageSubproduct!
}

input UpdateManyImagesInput {
  """Filter used to find fields to update"""
  filter: ImageUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateImage!
}

input UpdateManyImagesSizeGuidesDetailsInput {
  """Filter used to find fields to update"""
  filter: ImagesSizeGuidesDetailUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateImagesSizeGuidesDetail!
}

input UpdateManyImpersonateHistoriesInput {
  """Filter used to find fields to update"""
  filter: ImpersonateHistoryUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateImpersonateHistory!
}

input UpdateManyIncredibleOfferSentNotificationsInput {
  """Filter used to find fields to update"""
  filter: IncredibleOfferSentNotificationUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateIncredibleOfferSentNotification!
}

input UpdateManyIncredibleOffersInput {
  """Filter used to find fields to update"""
  filter: IncredibleOfferUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateIncredibleOffer!
}

input UpdateManyInstagramFeedsInput {
  """Filter used to find fields to update"""
  filter: InstagramFeedUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateInstagramFeed!
}

input UpdateManyInvitationCodesInput {
  """Filter used to find fields to update"""
  filter: InvitationCodeUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateInvitationCode!
}

input UpdateManyInvoiceAddressesInput {
  """Filter used to find fields to update"""
  filter: InvoiceAddressUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateInvoiceAddress!
}

input UpdateManyInvoiceBankGatewayHistoriesInput {
  """Filter used to find fields to update"""
  filter: InvoiceBankGatewayHistoryUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateInvoiceBankGatewayHistory!
}

input UpdateManyInvoiceHistoriesInput {
  """Filter used to find fields to update"""
  filter: InvoiceHistoryUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateInvoiceHistory!
}

input UpdateManyInvoiceInvoiceStatusesInput {
  """Filter used to find fields to update"""
  filter: InvoiceInvoiceStatusUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateInvoiceInvoiceStatus!
}

input UpdateManyInvoiceModesInput {
  """Filter used to find fields to update"""
  filter: InvoiceModeUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateInvoiceMode!
}

input UpdateManyInvoiceNegotiationsInput {
  """Filter used to find fields to update"""
  filter: InvoiceNegotiationUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateInvoiceNegotiation!
}

input UpdateManyInvoicePaymentHistoriesInput {
  """Filter used to find fields to update"""
  filter: InvoicePaymentHistoryUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateInvoicePaymentHistory!
}

input UpdateManyInvoicePaymentStatusesInput {
  """Filter used to find fields to update"""
  filter: InvoicePaymentStatusUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateInvoicePaymentStatus!
}

input UpdateManyInvoicePaymentTypesInput {
  """Filter used to find fields to update"""
  filter: InvoicePaymentTypeUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateInvoicePaymentType!
}

input UpdateManyInvoicePaymentsInput {
  """Filter used to find fields to update"""
  filter: InvoicePaymentUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateInvoicePayment!
}

input UpdateManyInvoiceProductHistoriesInput {
  """Filter used to find fields to update"""
  filter: InvoiceProductHistoryUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateInvoiceProductHistory!
}

input UpdateManyInvoiceProductItemInvoiceProductStatusesInput {
  """Filter used to find fields to update"""
  filter: InvoiceProductItemInvoiceProductStatusUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateInvoiceProductItemInvoiceProductStatus!
}

input UpdateManyInvoiceProductItemsInput {
  """Filter used to find fields to update"""
  filter: InvoiceProductItemUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateInvoiceProductItem!
}

input UpdateManyInvoiceProductStatusesInput {
  """Filter used to find fields to update"""
  filter: InvoiceProductStatusUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateInvoiceProductStatus!
}

input UpdateManyInvoiceProductsInput {
  """Filter used to find fields to update"""
  filter: InvoiceProductUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateInvoiceProduct!
}

input UpdateManyInvoiceRatesResultsInput {
  """Filter used to find fields to update"""
  filter: InvoiceRatesResultUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateInvoiceRatesResult!
}

input UpdateManyInvoiceReversalItemsInput {
  """Filter used to find fields to update"""
  filter: InvoiceReversalItemUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateInvoiceReversalItem!
}

input UpdateManyInvoiceReversalsInput {
  """Filter used to find fields to update"""
  filter: InvoiceReversalUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateInvoiceReversal!
}

input UpdateManyInvoiceShippingRatesInput {
  """Filter used to find fields to update"""
  filter: InvoiceShippingRateUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateInvoiceShippingRate!
}

input UpdateManyInvoiceStatusesInput {
  """Filter used to find fields to update"""
  filter: InvoiceStatusUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateInvoiceStatus!
}

input UpdateManyInvoiceTypesInput {
  """Filter used to find fields to update"""
  filter: InvoiceTypeUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateInvoiceType!
}

input UpdateManyInvoicesInput {
  """Filter used to find fields to update"""
  filter: InvoiceUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateInvoice!
}

input UpdateManyLabelProductsInput {
  """Filter used to find fields to update"""
  filter: LabelProductUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateLabelProduct!
}

input UpdateManyLabelsInput {
  """Filter used to find fields to update"""
  filter: LabelUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateLabel!
}

input UpdateManyMellatPaymentErrorsInput {
  """Filter used to find fields to update"""
  filter: MellatPaymentErrorUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateMellatPaymentError!
}

input UpdateManyMigrationsInput {
  """Filter used to find fields to update"""
  filter: MigrationUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateMigration!
}

input UpdateManyModelHasPermissionsInput {
  """Filter used to find fields to update"""
  filter: ModelHasPermissionUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateModelHasPermission!
}

input UpdateManyModelHasRolesInput {
  """Filter used to find fields to update"""
  filter: ModelHasRoleUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateModelHasRole!
}

input UpdateManyModelVisitsInput {
  """Filter used to find fields to update"""
  filter: ModelVisitUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateModelVisit!
}

input UpdateManyModemaAcceleratorImagesInput {
  """Filter used to find fields to update"""
  filter: ModemaAcceleratorImageUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateModemaAcceleratorImage!
}

input UpdateManyModemaAcceleratorVideosInput {
  """Filter used to find fields to update"""
  filter: ModemaAcceleratorVideoUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateModemaAcceleratorVideo!
}

input UpdateManyModemaAcceleratorsInput {
  """Filter used to find fields to update"""
  filter: ModemaAcceleratorUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateModemaAccelerator!
}

input UpdateManyNeedsPhotographySubproductsInput {
  """Filter used to find fields to update"""
  filter: NeedsPhotographySubproductUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateNeedsPhotographySubproduct!
}

input UpdateManyNegotiationHistoriesInput {
  """Filter used to find fields to update"""
  filter: NegotiationHistoryUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateNegotiationHistory!
}

input UpdateManyNegotiationStatusesInput {
  """Filter used to find fields to update"""
  filter: NegotiationStatusUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateNegotiationStatus!
}

input UpdateManyNegotiationTypesInput {
  """Filter used to find fields to update"""
  filter: NegotiationTypeUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateNegotiationType!
}

input UpdateManyNegotiationsInput {
  """Filter used to find fields to update"""
  filter: NegotiationUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateNegotiation!
}

input UpdateManyNewBordersInput {
  """Filter used to find fields to update"""
  filter: NewBorderUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateNewBorder!
}

input UpdateManyOauthAccessTokensInput {
  """Filter used to find fields to update"""
  filter: OauthAccessTokenUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateOauthAccessToken!
}

input UpdateManyOauthAuthCodesInput {
  """Filter used to find fields to update"""
  filter: OauthAuthCodeUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateOauthAuthCode!
}

input UpdateManyOauthClientsInput {
  """Filter used to find fields to update"""
  filter: OauthClientUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateOauthClient!
}

input UpdateManyOauthPersonalAccessClientsInput {
  """Filter used to find fields to update"""
  filter: OauthPersonalAccessClientUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateOauthPersonalAccessClient!
}

input UpdateManyOauthRefreshTokensInput {
  """Filter used to find fields to update"""
  filter: OauthRefreshTokenUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateOauthRefreshToken!
}

input UpdateManyOutOfStockButListedProductsInput {
  """Filter used to find fields to update"""
  filter: OutOfStockButListedProductUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateOutOfStockButListedProduct!
}

input UpdateManyPasswordResetsInput {
  """Filter used to find fields to update"""
  filter: PasswordResetUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdatePasswordReset!
}

input UpdateManyPatternCategoriesInput {
  """Filter used to find fields to update"""
  filter: PatternCategoryUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdatePatternCategory!
}

input UpdateManyPatternLayersInput {
  """Filter used to find fields to update"""
  filter: PatternLayerUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdatePatternLayer!
}

input UpdateManyPatternsInput {
  """Filter used to find fields to update"""
  filter: PatternUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdatePattern!
}

input UpdateManyPaymentMethodFieldsInput {
  """Filter used to find fields to update"""
  filter: PaymentMethodFieldUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdatePaymentMethodField!
}

input UpdateManyPaymentMethodsInput {
  """Filter used to find fields to update"""
  filter: PaymentMethodUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdatePaymentMethod!
}

input UpdateManyPaymentRequestStatusesInput {
  """Filter used to find fields to update"""
  filter: PaymentRequestStatusUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdatePaymentRequestStatus!
}

input UpdateManyPaymentRequestsInput {
  """Filter used to find fields to update"""
  filter: PaymentRequestUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdatePaymentRequest!
}

input UpdateManyPermissionGroupsInput {
  """Filter used to find fields to update"""
  filter: PermissionGroupUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdatePermissionGroup!
}

input UpdateManyPermissionsInput {
  """Filter used to find fields to update"""
  filter: PermissionUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdatePermission!
}

input UpdateManyPreorderRegistersInput {
  """Filter used to find fields to update"""
  filter: PreorderRegisterUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdatePreorderRegister!
}

input UpdateManyPreorderStatusesInput {
  """Filter used to find fields to update"""
  filter: PreorderStatusUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdatePreorderStatus!
}

input UpdateManyPreordersInput {
  """Filter used to find fields to update"""
  filter: PreorderUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdatePreorder!
}

input UpdateManyPriceGroupSizesInput {
  """Filter used to find fields to update"""
  filter: PriceGroupSizeUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdatePriceGroupSize!
}

input UpdateManyPriceGroupsInput {
  """Filter used to find fields to update"""
  filter: PriceGroupUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdatePriceGroup!
}

input UpdateManyPrintProfilesInput {
  """Filter used to find fields to update"""
  filter: PrintProfileUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdatePrintProfile!
}

input UpdateManyProductCategoryDetailsInput {
  """Filter used to find fields to update"""
  filter: ProductCategoryDetailUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateProductCategoryDetail!
}

input UpdateManyProductCategoryRatesInput {
  """Filter used to find fields to update"""
  filter: ProductCategoryRateUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateProductCategoryRate!
}

input UpdateManyProductColorImagesInput {
  """Filter used to find fields to update"""
  filter: ProductColorImageUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateProductColorImage!
}

input UpdateManyProductColorSalesInput {
  """Filter used to find fields to update"""
  filter: ProductColorSaleUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateProductColorSale!
}

input UpdateManyProductCommentLikesInput {
  """Filter used to find fields to update"""
  filter: ProductCommentLikeUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateProductCommentLike!
}

input UpdateManyProductCommentsInput {
  """Filter used to find fields to update"""
  filter: ProductCommentUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateProductComment!
}

input UpdateManyProductLikesInput {
  """Filter used to find fields to update"""
  filter: ProductLikeUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateProductLike!
}

input UpdateManyProductsInput {
  """Filter used to find fields to update"""
  filter: ProductUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateProduct!
}

type UpdateManyResponse {
  """The number of records updated."""
  updatedCount: Int!
}

input UpdateManyUsersInput {
  """Filter used to find fields to update"""
  filter: UserUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateUser!
}

input UpdateMellatPaymentError {
  code: String
  createdAt: DateTime
  id: ID
  message: String
  updatedAt: DateTime
}

input UpdateMigration {
  batch: Float
  id: ID
  migration: String
}

input UpdateMigrationInput {
  batch: Float
  id: Int!
  migration: String
}

input UpdateModelHasPermission {
  modelId: String
  modelType: String
  permissionId: ID
}

input UpdateModelHasPermissionInput {
  id: Int!
  modelId: String
  modelType: String
  permissionId: Float
}

input UpdateModelHasRole {
  modelId: String
  modelType: String
  roleId: ID
}

input UpdateModelHasRoleInput {
  id: Int!
  modelId: String
  modelType: String
  roleId: Float
}

input UpdateModelVisit {
  createdAt: DateTime
  id: ID
  modelId: Float
  modelName: String
  updatedAt: DateTime
  userId: Float
}

input UpdateModelVisitInput {
  createdAt: DateTime
  id: Int!
  modelId: Float
  modelName: String
  updatedAt: DateTime
  userId: Float
}

input UpdateModemaAccelerator {
  city: String
  createdAt: DateTime
  details: String
  hasOffice: String
  id: ID
  instagram: String
  jobCategory: String
  name: String
  phone: String
  pro: String
  updatedAt: DateTime
}

input UpdateModemaAcceleratorImage {
  createdAt: DateTime
  filename: String
  id: ID
  mime: String
  modemaAcceleratorId: Float
  originalFilename: String
  path: String
  type: String
  updatedAt: DateTime
  uploadSource: String
}

input UpdateModemaAcceleratorImageInput {
  createdAt: DateTime
  filename: String
  id: Int!
  mime: String
  modemaAcceleratorId: Float
  originalFilename: String
  path: String
  type: String
  updatedAt: DateTime
  uploadSource: String
}

input UpdateModemaAcceleratorInput {
  city: String
  createdAt: DateTime
  details: String
  hasOffice: String
  id: Int!
  instagram: String
  jobCategory: String
  name: String
  phone: String
  pro: String
  updatedAt: DateTime
}

input UpdateModemaAcceleratorVideo {
  altText: String
  createdAt: DateTime
  filename: String
  id: ID
  mime: String
  modemaAcceleratorId: Float
  originalFilename: String
  path: String
  type: String
  updatedAt: DateTime
  uploadSource: String
}

input UpdateModemaAcceleratorVideoInput {
  altText: String
  createdAt: DateTime
  filename: String
  id: Int!
  mime: String
  modemaAcceleratorId: Float
  originalFilename: String
  path: String
  type: String
  updatedAt: DateTime
  uploadSource: String
}

input UpdateNeedsPhotographySubproduct {
  announcedDate: DateTime
  announcedUserId: Float
  createdAt: DateTime
  deletedAt: DateTime
  id: ID
  photographyDate: DateTime
  photographyUserId: Float
  subproductId: Float
  updatedAt: DateTime
}

input UpdateNeedsPhotographySubproductInput {
  announcedDate: DateTime
  announcedUserId: Float
  createdAt: DateTime
  deletedAt: DateTime
  id: Int!
  photographyDate: DateTime
  photographyUserId: Float
  subproductId: Float
  updatedAt: DateTime
}

input UpdateNegotiation {
  createdAt: DateTime
  customerId: Float
  dateTime: DateTime
  id: ID
  isRead: Boolean
  name: String
  negotiationStatusId: Float
  negotiatorId: Float
  priority: Float
  submittedBy: Float
  tel: String
  updatedAt: DateTime
}

input UpdateNegotiationHistory {
  createdAt: DateTime
  id: ID
  negotiationId: Float
  negotiationStatusId: Float
  newNegotiatorId: Float
  oldNegotiatorId: Float
  submittedBy: Float
  updatedAt: DateTime
}

input UpdateNegotiationHistoryInput {
  createdAt: DateTime
  id: Int!
  negotiationId: Float
  negotiationStatusId: Float
  newNegotiatorId: Float
  oldNegotiatorId: Float
  submittedBy: Float
  updatedAt: DateTime
}

input UpdateNegotiationInput {
  createdAt: DateTime
  customerId: Float
  dateTime: DateTime
  id: Int!
  isRead: Boolean
  name: String
  negotiationStatusId: Float
  negotiatorId: Float
  priority: Float
  submittedBy: Float
  tel: String
  updatedAt: DateTime
}

input UpdateNegotiationStatus {
  createdAt: DateTime
  id: ID
  name: String
  updatedAt: DateTime
}

input UpdateNegotiationStatusInput {
  createdAt: DateTime
  id: Int!
  name: String
  updatedAt: DateTime
}

input UpdateNegotiationType {
  createdAt: DateTime
  id: ID
  name: String
  updatedAt: DateTime
}

input UpdateNegotiationTypeInput {
  createdAt: DateTime
  id: Int!
  name: String
  updatedAt: DateTime
}

input UpdateNewBorder {
  brand: String
  color: String
  design: String
  designer: String
  id: ID
  material: String
  name: String
  newBorder: String
  oldBorder: String
  sizes: String
  type: String
}

input UpdateNewBorderInput {
  brand: String
  color: String
  design: String
  designer: String
  id: Int!
  material: String
  name: String
  newBorder: String
  oldBorder: String
  sizes: String
  type: String
}

input UpdateOauthAccessToken {
  clientId: Float
  createdAt: DateTime
  expiresAt: DateTime
  id: ID
  name: String
  revoked: Boolean
  scopes: String
  updatedAt: DateTime
  userId: Float
}

input UpdateOauthAuthCode {
  clientId: Float
  expiresAt: DateTime
  id: ID
  revoked: Boolean
  scopes: String
  userId: Float
}

input UpdateOauthClient {
  createdAt: DateTime
  id: ID
  name: String
  passwordClient: Boolean
  personalAccessClient: Boolean
  provider: String
  redirect: String
  revoked: Boolean
  secret: String
  updatedAt: DateTime
  userId: Float
}

input UpdateOauthClientInput {
  createdAt: DateTime
  id: Int!
  name: String
  passwordClient: Boolean
  personalAccessClient: Boolean
  provider: String
  redirect: String
  revoked: Boolean
  secret: String
  updatedAt: DateTime
  userId: Float
}

input UpdateOauthPersonalAccessClient {
  clientId: Float
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
}

input UpdateOauthPersonalAccessClientInput {
  clientId: Float
  createdAt: DateTime
  id: Int!
  updatedAt: DateTime
}

input UpdateOauthRefreshToken {
  accessTokenId: String
  expiresAt: DateTime
  id: ID
  revoked: Boolean
}

input UpdateOneActivityInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateActivity!
}

input UpdateOneAddressInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateAddress!
}

input UpdateOneAutomationEventInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateAutomationEvent!
}

input UpdateOneAutomationRfmScoreInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateAutomationRfmScore!
}

input UpdateOneBasicCarpetBorderInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateBasicCarpetBorder!
}

input UpdateOneBasicCarpetColorInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateBasicCarpetColor!
}

input UpdateOneBasicCarpetDesignInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateBasicCarpetDesign!
}

input UpdateOneBasicCarpetDesignerInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateBasicCarpetDesigner!
}

input UpdateOneBasicCarpetMaterialInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateBasicCarpetMaterial!
}

input UpdateOneBasicCarpetSizeDetailInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateBasicCarpetSizeDetail!
}

input UpdateOneBasicCarpetSizeInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateBasicCarpetSize!
}

input UpdateOneBasicCarpetTypeInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateBasicCarpetType!
}

input UpdateOneBorderInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateBorder!
}

input UpdateOneCampaignFreeOfferInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCampaignFreeOffer!
}

input UpdateOneCampaignFreeOfferSizeInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCampaignFreeOfferSize!
}

input UpdateOneCampaignGoldCoinSubInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCampaignGoldCoinSub!
}

input UpdateOneCampaignInstagramFollowInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCampaignInstagramFollow!
}

input UpdateOneCampaignPetFormInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCampaignPetForm!
}

input UpdateOneCampaignRoomvoImageInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCampaignRoomvoImage!
}

input UpdateOneCampaignRoomvoVoteInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCampaignRoomvoVote!
}

input UpdateOneCampaignSubscriptionInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCampaignSubscription!
}

input UpdateOneCampaignUefaEuroSubscriberHistoryInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCampaignUefaEuroSubscriberHistory!
}

input UpdateOneCampaignUefaEuroSubscriberInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCampaignUefaEuroSubscriber!
}

input UpdateOneCampaignVotingImageInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCampaignVotingImage!
}

input UpdateOneCarpetFeatureInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCarpetFeature!
}

input UpdateOneCarpetFeatureUserInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCarpetFeatureUser!
}

input UpdateOneCarpetMaterialInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCarpetMaterial!
}

input UpdateOneCarpetShapeInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCarpetShape!
}

input UpdateOneCarpetSizeInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCarpetSize!
}

input UpdateOneCarpetUsagePlaceInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCarpetUsagePlace!
}

input UpdateOneCarpetUsagePlaceInvoiceProductInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCarpetUsagePlaceInvoiceProduct!
}

input UpdateOneCarpetUsagePlaceUserInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCarpetUsagePlaceUser!
}

input UpdateOneChaparSettlementStatusInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateChaparSettlementStatus!
}

input UpdateOneChaparTrackingHistoryInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateChaparTrackingHistory!
}

input UpdateOneCitiesSepidarInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCitiesSepidar!
}

input UpdateOneCity2Input {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCity2!
}

input UpdateOneCityInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCity!
}

input UpdateOneColorCategoryDetailInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateColorCategoryDetail!
}

input UpdateOneColorCategoryInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateColorCategory!
}

input UpdateOneColorCategorySubproductInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateColorCategorySubproduct!
}

input UpdateOneColorInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateColor!
}

input UpdateOneConfigInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateConfig!
}

input UpdateOneContactFormHistoryInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateContactFormHistory!
}

input UpdateOneContactFormInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateContactForm!
}

input UpdateOneContactFormStatusInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateContactFormStatus!
}

input UpdateOneCountryInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCountry!
}

input UpdateOneCouponInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCoupon!
}

input UpdateOneCouponSubjectInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCouponSubject!
}

input UpdateOneCrmPresentationInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCrmPresentation!
}

input UpdateOneCustomerImageProductInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCustomerImageProduct!
}

input UpdateOneCustomerRequestFileInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCustomerRequestFile!
}

input UpdateOneCustomerRequestInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCustomerRequest!
}

input UpdateOneCustomerVideoProductInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCustomerVideoProduct!
}

input UpdateOneDamageReasonInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateDamageReason!
}

input UpdateOneDepartmentInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateDepartment!
}

input UpdateOneDesignInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateDesign!
}

input UpdateOneDesignersProductPriceRangeInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateDesignersProductPriceRange!
}

input UpdateOneDiscountInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateDiscount!
}

input UpdateOneDiscountNotificationInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateDiscountNotification!
}

input UpdateOneDiscountSubjectInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateDiscountSubject!
}

input UpdateOneExitControlInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateExitControl!
}

input UpdateOneExitControlItemInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateExitControlItem!
}

input UpdateOneExportProductInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateExportProduct!
}

input UpdateOneFailedJobInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateFailedJob!
}

input UpdateOneFavoriteProductInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateFavoriteProduct!
}

input UpdateOneFedexAddressValidationAttributeInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateFedexAddressValidationAttribute!
}

input UpdateOneFetchSiteUrlInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateFetchSiteUrl!
}

input UpdateOneFileInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateFile!
}

input UpdateOneFileNegotiationInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateFileNegotiation!
}

input UpdateOneGhazalInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateGhazal!
}

input UpdateOneGoogleFormUtmInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateGoogleFormUtm!
}

input UpdateOneHeardAboutUsOptionInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateHeardAboutUsOption!
}

input UpdateOneHelpDeskInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateHelpDesk!
}

input UpdateOneHolidayInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateHoliday!
}

input UpdateOneHomePageCustomerImageInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateHomePageCustomerImage!
}

input UpdateOneHyperInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateHyper!
}

input UpdateOneHyperstarCodeInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateHyperstarCode!
}

input UpdateOneImageInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateImage!
}

input UpdateOneImageLayerInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateImageLayer!
}

input UpdateOneImageProductInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateImageProduct!
}

input UpdateOneImageSizeInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateImageSize!
}

input UpdateOneImageSubproductInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateImageSubproduct!
}

input UpdateOneImagesSizeGuidesDetailInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateImagesSizeGuidesDetail!
}

input UpdateOneImpersonateHistoryInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateImpersonateHistory!
}

input UpdateOneIncredibleOfferInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateIncredibleOffer!
}

input UpdateOneIncredibleOfferSentNotificationInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateIncredibleOfferSentNotification!
}

input UpdateOneInstagramFeedInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateInstagramFeed!
}

input UpdateOneInvitationCodeInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateInvitationCode!
}

input UpdateOneInvoiceAddressInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateInvoiceAddress!
}

input UpdateOneInvoiceBankGatewayHistoryInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateInvoiceBankGatewayHistory!
}

input UpdateOneInvoiceHistoryInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateInvoiceHistory!
}

input UpdateOneInvoiceInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateInvoice!
}

input UpdateOneInvoiceInvoiceStatusInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateInvoiceInvoiceStatus!
}

input UpdateOneInvoiceModeInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateInvoiceMode!
}

input UpdateOneInvoiceNegotiationInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateInvoiceNegotiation!
}

input UpdateOneInvoicePaymentHistoryInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateInvoicePaymentHistory!
}

input UpdateOneInvoicePaymentInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateInvoicePayment!
}

input UpdateOneInvoicePaymentStatusInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateInvoicePaymentStatus!
}

input UpdateOneInvoicePaymentTypeInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateInvoicePaymentType!
}

input UpdateOneInvoiceProductHistoryInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateInvoiceProductHistory!
}

input UpdateOneInvoiceProductInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateInvoiceProduct!
}

input UpdateOneInvoiceProductItemInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateInvoiceProductItem!
}

input UpdateOneInvoiceProductItemInvoiceProductStatusInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateInvoiceProductItemInvoiceProductStatus!
}

input UpdateOneInvoiceProductStatusInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateInvoiceProductStatus!
}

input UpdateOneInvoiceRatesResultInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateInvoiceRatesResult!
}

input UpdateOneInvoiceReversalInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateInvoiceReversal!
}

input UpdateOneInvoiceReversalItemInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateInvoiceReversalItem!
}

input UpdateOneInvoiceShippingRateInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateInvoiceShippingRate!
}

input UpdateOneInvoiceStatusInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateInvoiceStatus!
}

input UpdateOneInvoiceTypeInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateInvoiceType!
}

input UpdateOneLabelInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateLabel!
}

input UpdateOneLabelProductInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateLabelProduct!
}

input UpdateOneMellatPaymentErrorInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateMellatPaymentError!
}

input UpdateOneMigrationInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateMigration!
}

input UpdateOneModelHasPermissionInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateModelHasPermission!
}

input UpdateOneModelHasRoleInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateModelHasRole!
}

input UpdateOneModelVisitInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateModelVisit!
}

input UpdateOneModemaAcceleratorImageInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateModemaAcceleratorImage!
}

input UpdateOneModemaAcceleratorInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateModemaAccelerator!
}

input UpdateOneModemaAcceleratorVideoInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateModemaAcceleratorVideo!
}

input UpdateOneNeedsPhotographySubproductInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateNeedsPhotographySubproduct!
}

input UpdateOneNegotiationHistoryInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateNegotiationHistory!
}

input UpdateOneNegotiationInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateNegotiation!
}

input UpdateOneNegotiationStatusInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateNegotiationStatus!
}

input UpdateOneNegotiationTypeInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateNegotiationType!
}

input UpdateOneNewBorderInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateNewBorder!
}

input UpdateOneOauthAccessTokenInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateOauthAccessToken!
}

input UpdateOneOauthAuthCodeInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateOauthAuthCode!
}

input UpdateOneOauthClientInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateOauthClient!
}

input UpdateOneOauthPersonalAccessClientInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateOauthPersonalAccessClient!
}

input UpdateOneOauthRefreshTokenInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateOauthRefreshToken!
}

input UpdateOneOutOfStockButListedProductInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateOutOfStockButListedProduct!
}

input UpdateOnePasswordResetInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdatePasswordReset!
}

input UpdateOnePatternCategoryInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdatePatternCategory!
}

input UpdateOnePatternInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdatePattern!
}

input UpdateOnePatternLayerInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdatePatternLayer!
}

input UpdateOnePaymentMethodFieldInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdatePaymentMethodField!
}

input UpdateOnePaymentMethodInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdatePaymentMethod!
}

input UpdateOnePaymentRequestInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdatePaymentRequest!
}

input UpdateOnePaymentRequestStatusInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdatePaymentRequestStatus!
}

input UpdateOnePermissionGroupInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdatePermissionGroup!
}

input UpdateOnePermissionInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdatePermission!
}

input UpdateOnePreorderInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdatePreorder!
}

input UpdateOnePreorderRegisterInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdatePreorderRegister!
}

input UpdateOnePreorderStatusInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdatePreorderStatus!
}

input UpdateOnePriceGroupInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdatePriceGroup!
}

input UpdateOnePriceGroupSizeInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdatePriceGroupSize!
}

input UpdateOnePrintProfileInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdatePrintProfile!
}

input UpdateOneProductCategoryDetailInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateProductCategoryDetail!
}

input UpdateOneProductCategoryRateInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateProductCategoryRate!
}

input UpdateOneProductColorImageInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateProductColorImage!
}

input UpdateOneProductColorSaleInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateProductColorSale!
}

input UpdateOneProductCommentInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateProductComment!
}

input UpdateOneProductCommentLikeInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateProductCommentLike!
}

input UpdateOneProductInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateProduct!
}

input UpdateOneProductLikeInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateProductLike!
}

input UpdateOneUserInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateUser!
}

input UpdateOutOfStockButListedProduct {
  createdAt: DateTime
  id: ID
  productId: Float
  updatedAt: DateTime
}

input UpdateOutOfStockButListedProductInput {
  createdAt: DateTime
  id: Int!
  productId: Float
  updatedAt: DateTime
}

input UpdatePasswordReset {
  createdAt: DateTime
  email: ID
  token: String
}

input UpdatePasswordResetInput {
  createdAt: DateTime
  email: String
  id: Int!
  token: String
}

input UpdatePattern {
  createdAt: DateTime
  filename: String
  id: ID
  isActive: Float
  keywords: String
  mime: String
  name: String
  originalFilename: String
  path: String
  patternCategoryId: Float
  sortOrder: Float
  thumbnailFilename: String
  updatedAt: DateTime
  viewCounter: Float
}

input UpdatePatternCategory {
  createdAt: DateTime
  id: ID
  imageId: Float
  isActive: Float
  name: String
  sortOrder: Float
  updatedAt: DateTime
  viewCounter: Float
}

input UpdatePatternCategoryInput {
  createdAt: DateTime
  id: Int!
  imageId: Float
  isActive: Float
  name: String
  sortOrder: Float
  updatedAt: DateTime
  viewCounter: Float
}

input UpdatePatternInput {
  createdAt: DateTime
  filename: String
  id: Int!
  isActive: Float
  keywords: String
  mime: String
  name: String
  originalFilename: String
  path: String
  patternCategoryId: Float
  sortOrder: Float
  thumbnailFilename: String
  updatedAt: DateTime
  viewCounter: Float
}

input UpdatePatternLayer {
  centerX: Float
  centerY: Float
  createdAt: DateTime
  designId: Float
  filename: String
  id: ID
  path: String
  patternId: Float
  repeat: Float
  rotation: Float
  scaleX: Float
  scaleY: Float
  sortOrder: Float
  updatedAt: DateTime
}

input UpdatePatternLayerInput {
  centerX: Float
  centerY: Float
  createdAt: DateTime
  designId: Float
  filename: String
  id: Int!
  path: String
  patternId: Float
  repeat: Float
  rotation: Float
  scaleX: Float
  scaleY: Float
  sortOrder: Float
  updatedAt: DateTime
}

input UpdatePaymentMethod {
  id: ID
  name: String
}

input UpdatePaymentMethodField {
  createdAt: DateTime
  id: ID
  invoiceId: Float
  name: String
  paymentIdentifier: String
  paymentMethodId: Float
  updatedAt: DateTime
  value: String
}

input UpdatePaymentMethodFieldInput {
  createdAt: DateTime
  id: Int!
  invoiceId: Float
  name: String
  paymentIdentifier: String
  paymentMethodId: Float
  updatedAt: DateTime
  value: String
}

input UpdatePaymentMethodInput {
  id: Int!
  name: String
}

input UpdatePaymentRequest {
  adminUserId: Float
  amount: String
  bankAccountNumber: String
  createdAt: DateTime
  id: ID
  message: String
  paymentRequestStatusId: Float
  updatedAt: DateTime
  visitorId: Float
}

input UpdatePaymentRequestInput {
  adminUserId: Float
  amount: String
  bankAccountNumber: String
  createdAt: DateTime
  id: Int!
  message: String
  paymentRequestStatusId: Float
  updatedAt: DateTime
  visitorId: Float
}

input UpdatePaymentRequestStatus {
  createdAt: DateTime
  id: ID
  name: String
  updatedAt: DateTime
}

input UpdatePaymentRequestStatusInput {
  createdAt: DateTime
  id: Int!
  name: String
  updatedAt: DateTime
}

input UpdatePermission {
  createdAt: DateTime
  guardName: String
  id: ID
  name: String
  parentId: Float
  permissionGroupId: Float
  updatedAt: DateTime
}

input UpdatePermissionGroup {
  createdAt: DateTime
  id: ID
  name: String
  updatedAt: DateTime
}

input UpdatePermissionGroupInput {
  createdAt: DateTime
  id: Int!
  name: String
  updatedAt: DateTime
}

input UpdatePermissionInput {
  createdAt: DateTime
  guardName: String
  id: Int!
  name: String
  parentId: Float
  permissionGroupId: Float
  updatedAt: DateTime
}

input UpdatePreorder {
  activationCode: String
  activationSendDate: DateTime
  activationSendDateP: String
  activationSendTurn: Float
  assignedUserId: Float
  companyDescription: String
  createdAt: DateTime
  createdAtP: String
  customerDescription: String
  dateOfTurn: String
  dateOfTurnP: String
  deletedAt: DateTime
  expirationDate: DateTime
  expirationDateP: String
  id: ID
  isActivated: Boolean
  lastCallDate: DateTime
  lastCallDateP: String
  name: String
  phone: String
  phone2: String
  preorderStatusId: Float
  productId: Float
  salesPersonId: Float
  subproductId: Float
  trackingCode: String
  updatedAt: DateTime
  userId: Float
}

input UpdatePreorderPreorderStatusInput {
  companyDescription: String
  createdAt: DateTime
  id: Int!
  preorderId: Float
  preorderStatusId: Float
  updatedAt: DateTime
  userId: Float
}

input UpdatePreorderRegister {
  createdAt: DateTime
  id: ID
  isConfirmed: Boolean
  isPaid: Boolean
  moneyTransferConfirmedBy: Float
  moneyTransferRefCode: String
  orderId: String
  paymentAmount: String
  paymentTypeId: Float
  preorderDate: DateTime
  preorderNumber: String
  refCodeSales: String
  refId: String
  saleRefId: String
  updatedAt: DateTime
  userId: Float
  withdrawnAmount: String
}

input UpdatePreorderRegisterInput {
  createdAt: DateTime
  id: Int!
  isConfirmed: Boolean
  isPaid: Boolean
  moneyTransferConfirmedBy: Float
  moneyTransferRefCode: String
  orderId: String
  paymentAmount: String
  paymentTypeId: Float
  preorderDate: DateTime
  preorderNumber: String
  refCodeSales: String
  refId: String
  saleRefId: String
  updatedAt: DateTime
  userId: Float
  withdrawnAmount: String
}

input UpdatePreorderStatus {
  createdAt: DateTime
  id: ID
  status: String
  updatedAt: DateTime
}

input UpdatePreorderStatusInput {
  createdAt: DateTime
  id: Int!
  status: String
  updatedAt: DateTime
}

input UpdatePriceGroup {
  createdAt: DateTime
  id: ID
  name: String
  updatedAt: DateTime
}

input UpdatePriceGroupInput {
  createdAt: DateTime
  id: Int!
  name: String
  updatedAt: DateTime
}

input UpdatePriceGroupSize {
  basicCarpetSizeId: Float
  bundlePadPrice: String
  bundlePrice: String
  createdAt: DateTime
  id: ID
  padPrice: String
  price: String
  priceGroupId: Float
  updatedAt: DateTime
}

input UpdatePriceGroupSizeInput {
  basicCarpetSizeId: Float
  bundlePadPrice: String
  bundlePrice: String
  createdAt: DateTime
  id: Int!
  padPrice: String
  price: String
  priceGroupId: Float
  updatedAt: DateTime
}

input UpdatePrintProfile {
  blackCurve: String
  blackGain: String
  createdAt: DateTime
  createdBy: Float
  cyanCurve: String
  cyanGain: String
  fabricsBackgroundColor: String
  fabricsPerSquareMeterWeight: String
  fabricsTextureGrade: String
  headHeight: String
  heatSpeed: String
  heatTemperature: String
  id: ID
  inkCode: String
  isActive: Boolean
  laminateGlueType: String
  magentaCurve: String
  magentaGain: String
  passCount: String
  totalInkLimit: String
  updatedAt: DateTime
  updatedBy: Float
  versionChangeDate: DateTime
  versionNo: String
  yellowCurve: String
  yellowGain: String
}

input UpdatePrintProfileInput {
  blackCurve: String
  blackGain: String
  createdAt: DateTime
  createdBy: Float
  cyanCurve: String
  cyanGain: String
  fabricsBackgroundColor: String
  fabricsPerSquareMeterWeight: String
  fabricsTextureGrade: String
  headHeight: String
  heatSpeed: String
  heatTemperature: String
  id: Int!
  inkCode: String
  isActive: Boolean
  laminateGlueType: String
  magentaCurve: String
  magentaGain: String
  passCount: String
  totalInkLimit: String
  updatedAt: DateTime
  updatedBy: Float
  versionChangeDate: DateTime
  versionNo: String
  yellowCurve: String
  yellowGain: String
}

input UpdateProduct {
  activeUpdatedAt: DateTime
  bestSellerColorId: Float
  carpetHasRoots: Boolean
  code: String
  collectionName: String
  colors: String
  createdAt: DateTime
  description: String
  descriptionEn: String
  designerIsGeneral: Float
  emallsActive: Boolean
  emallsTitle: String
  id: ID
  imageId: Float
  isActive: Boolean
  isCarpetPad: Boolean
  isSelfEmployedDesigner: Float
  isShaggy: Boolean
  length: Float
  metaTags: String
  metaTagsEn: String
  minBasicCarpetSizeId: Float
  name: String
  nameEn: String
  nameEs: String
  newSubproductsCreated: Float
  pageTitle: String
  pageTitleEn: String
  parentProductId: Float
  price: String
  priceGroupId: Float
  rate: Float
  rateCount: Float
  russianName: String
  saleCount: Float
  saleCountDaily: Float
  searchName: String
  searchNameEn: String
  size: Float
  sizeIsCustomizable: Float
  snapppayActive: Boolean
  snapppaySortOrder: Boolean
  sortOrder: Float
  totalDislike: Float
  totalLike: Float
  updatedAt: DateTime
  urlSlug: String
  urlSlugEn: String
  viewCounter: Float
  width: Float
}

input UpdateProductCategoryDetail {
  createdAt: DateTime
  detailText: String
  detailTextEn: String
  id: ID
  isActive: Boolean
  productCategoryId: Float
  sortOrder: Float
  title: String
  titleEn: String
  updatedAt: DateTime
}

input UpdateProductCategoryDetailInput {
  createdAt: DateTime
  detailText: String
  detailTextEn: String
  id: Int!
  isActive: Boolean
  productCategoryId: Float
  sortOrder: Float
  title: String
  titleEn: String
  updatedAt: DateTime
}

input UpdateProductCategoryRate {
  createdAt: DateTime
  id: ID
  productCategoryId: Float
  rateId: Float
  updatedAt: DateTime
}

input UpdateProductCategoryRateInput {
  createdAt: DateTime
  id: Int!
  productCategoryId: Float
  rateId: Float
  updatedAt: DateTime
}

input UpdateProductColorImage {
  basicCarpetColorId: Float
  createdAt: DateTime
  id: ID
  imageId: Float
  productId: Float
  sortOrder: Float
  updatedAt: DateTime
}

input UpdateProductColorImageInput {
  basicCarpetColorId: Float
  createdAt: DateTime
  id: Int!
  imageId: Float
  productId: Float
  sortOrder: Float
  updatedAt: DateTime
}

input UpdateProductColorSale {
  averageSaleCount: Float
  basicCarpetColorId: Float
  createdAt: DateTime
  id: ID
  productId: Float
  saleCount: Float
  saleCountYear: Float
  updatedAt: DateTime
}

input UpdateProductColorSaleInput {
  averageSaleCount: Float
  basicCarpetColorId: Float
  createdAt: DateTime
  id: Int!
  productId: Float
  saleCount: Float
  saleCountYear: Float
  updatedAt: DateTime
}

input UpdateProductComment {
  approved: Boolean
  approvedBy: Float
  comment: String
  createdAt: DateTime
  id: ID
  isBuyer: Boolean
  parentCommentId: Float
  productId: Float
  recommended: Boolean
  starred: Boolean
  subproductId: Float
  totalDislikes: Float
  totalLikes: Float
  updatedAt: DateTime
  userId: Float
}

input UpdateProductCommentInput {
  approved: Boolean
  approvedBy: Float
  comment: String
  createdAt: DateTime
  id: Int!
  isBuyer: Boolean
  parentCommentId: Float
  productId: Float
  recommended: Boolean
  starred: Boolean
  subproductId: Float
  totalDislikes: Float
  totalLikes: Float
  updatedAt: DateTime
  userId: Float
}

input UpdateProductCommentLike {
  createdAt: DateTime
  id: ID
  isDisliked: Boolean
  isLiked: Boolean
  productCommentId: Float
  updatedAt: DateTime
  userId: Float
}

input UpdateProductCommentLikeInput {
  createdAt: DateTime
  id: Int!
  isDisliked: Boolean
  isLiked: Boolean
  productCommentId: Float
  updatedAt: DateTime
  userId: Float
}

input UpdateProductInput {
  activeUpdatedAt: DateTime
  bestSellerColorId: Float
  carpetHasRoots: Boolean
  code: String
  collectionName: String
  colors: String
  createdAt: DateTime
  description: String
  descriptionEn: String
  designerIsGeneral: Float
  emallsActive: Boolean
  emallsTitle: String
  id: Int!
  imageId: Float
  isActive: Boolean
  isCarpetPad: Boolean
  isSelfEmployedDesigner: Float
  isShaggy: Boolean
  length: Float
  metaTags: String
  metaTagsEn: String
  minBasicCarpetSizeId: Float
  name: String
  nameEn: String
  nameEs: String
  newSubproductsCreated: Float
  pageTitle: String
  pageTitleEn: String
  parentProductId: Float
  price: String
  priceGroupId: Float
  rate: Float
  rateCount: Float
  russianName: String
  saleCount: Float
  saleCountDaily: Float
  searchName: String
  searchNameEn: String
  size: Float
  sizeIsCustomizable: Float
  snapppayActive: Boolean
  snapppaySortOrder: Boolean
  sortOrder: Float
  totalDislike: Float
  totalLike: Float
  updatedAt: DateTime
  urlSlug: String
  urlSlugEn: String
  viewCounter: Float
  width: Float
}

input UpdateProductLike {
  createdAt: DateTime
  id: ID
  isLike: Boolean
  productId: Float
  subproductId: Float
  updatedAt: DateTime
  userId: Float
}

input UpdateProductLikeInput {
  createdAt: DateTime
  id: Int!
  isLike: Boolean
  productId: Float
  subproductId: Float
  updatedAt: DateTime
  userId: Float
}

input UpdateUser {
  activities: [ActivityInput!]
  apiToken: String
  atmCardNo: String
  avatar: String
  campaignCartItems: String
  campaignCartItemsStartDate: DateTime
  campaignFindingCouponCode: String
  campaignFindingCouponFoundParts: String
  campaignFindingCouponHidingPlace: String
  campaignFindingCouponUsed: Boolean
  campaignFindingCouponWinnerPlace: Float
  campaignId: Float
  childrenCouponIsUsed: Boolean
  code: String
  commentsChargedAmount: String
  createdAt: DateTime
  discountNotificationSentDate: DateTime
  email: String
  emailVerified: Float
  family: String
  hafezPoemCount: Float
  heardAboutUsOptionId: Float
  id: ID
  invitationCodeId: Float
  isActive: Float
  isForeigner: Boolean
  isGuest: Float
  isPasswordChanged: Boolean
  isPreorderApplicant: Boolean
  loginEmail: String
  lotteryCode: String
  mah: Float
  monthlyRetargetingStartDate: DateTime
  name: String
  nationalId: String
  newUsersCampaignCharged: Boolean
  os: String
  osVersion: String
  password: String
  phone: String
  phoneVerified: Float
  phoneVerifiedBy: Float
  preorderPaid: Boolean
  preorderRegisterDate: DateTime
  preorderTurnEndDate: String
  preorderTurnStartDate: String
  profilePicture: String
  rememberToken: String
  retargetingIsUsed: Boolean
  roz: Float
  sal: Float
  sepidarCode: Float
  sepidarId: Float
  spinnerIsUsed: Boolean
  spinnerVerificationCode: String
  spinnerVerified: Boolean
  status: Float
  stripeId: String
  temp: String
  tempName: String
  updatedAt: DateTime
  username: String
  verificationCode: String
}

input UpdateUserInput {
  activities: [ActivityInput!]
  apiToken: String
  atmCardNo: String
  avatar: String
  campaignCartItems: String
  campaignCartItemsStartDate: DateTime
  campaignFindingCouponCode: String
  campaignFindingCouponFoundParts: String
  campaignFindingCouponHidingPlace: String
  campaignFindingCouponUsed: Boolean
  campaignFindingCouponWinnerPlace: Float
  campaignId: Float
  childrenCouponIsUsed: Boolean
  code: String
  commentsChargedAmount: String
  createdAt: DateTime
  discountNotificationSentDate: DateTime
  email: String
  emailVerified: Float
  family: String
  hafezPoemCount: Float
  heardAboutUsOptionId: Float
  id: Int!
  invitationCodeId: Float
  isActive: Float
  isForeigner: Boolean
  isGuest: Float
  isPasswordChanged: Boolean
  isPreorderApplicant: Boolean
  loginEmail: String
  lotteryCode: String
  mah: Float
  monthlyRetargetingStartDate: DateTime
  name: String
  nationalId: String
  newUsersCampaignCharged: Boolean
  os: String
  osVersion: String
  password: String
  phone: String
  phoneVerified: Float
  phoneVerifiedBy: Float
  preorderPaid: Boolean
  preorderRegisterDate: DateTime
  preorderTurnEndDate: String
  preorderTurnStartDate: String
  profilePicture: String
  rememberToken: String
  retargetingIsUsed: Boolean
  roz: Float
  sal: Float
  sepidarCode: Float
  sepidarId: Float
  spinnerIsUsed: Boolean
  spinnerVerificationCode: String
  spinnerVerified: Boolean
  status: Float
  stripeId: String
  temp: String
  tempName: String
  updatedAt: DateTime
  username: String
  verificationCode: String
}

type User {
  activities: [Activity!]!
  apiToken: String
  atmCardNo: String
  avatar: String
  campaignCartItems: String
  campaignCartItemsStartDate: DateTime
  campaignFindingCouponCode: String
  campaignFindingCouponFoundParts: String!
  campaignFindingCouponHidingPlace: String
  campaignFindingCouponUsed: Boolean!
  campaignFindingCouponWinnerPlace: Float
  campaignId: Float
  childrenCouponIsUsed: Boolean!
  code: String
  commentsChargedAmount: String!
  createdAt: DateTime
  discountNotificationSentDate: DateTime
  email: String
  emailVerified: Float
  family: String!
  hafezPoemCount: Float!
  heardAboutUsOptionId: Float
  id: ID!
  invitationCodeId: Float
  isActive: Float
  isForeigner: Boolean!
  isGuest: Float
  isPasswordChanged: Boolean!
  isPreorderApplicant: Boolean!
  loginEmail: String
  lotteryCode: String
  mah: Float
  monthlyRetargetingStartDate: DateTime
  name: String!
  nationalId: String
  newUsersCampaignCharged: Boolean!
  os: String
  osVersion: String
  password: String
  phone: String
  phoneVerified: Float
  phoneVerifiedBy: Float
  preorderPaid: Boolean!
  preorderRegisterDate: DateTime
  preorderTurnEndDate: String
  preorderTurnStartDate: String
  profilePicture: String
  rememberToken: String
  retargetingIsUsed: Boolean!
  roz: Float
  sal: Float
  sepidarCode: Float
  sepidarId: Float
  spinnerIsUsed: Boolean!
  spinnerVerificationCode: String
  spinnerVerified: Boolean!
  status: Float!
  stripeId: String
  temp: String
  tempName: String!
  updatedAt: DateTime
  username: String
  verificationCode: String
}

type UserConnection {
  """Array of edges."""
  edges: [UserEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input UserDeleteFilter {
  and: [UserDeleteFilter!]
  id: IDFilterComparison
  or: [UserDeleteFilter!]
}

type UserDeleteResponse {
  activities: [Activity!]
  apiToken: String
  atmCardNo: String
  avatar: String
  campaignCartItems: String
  campaignCartItemsStartDate: DateTime
  campaignFindingCouponCode: String
  campaignFindingCouponFoundParts: String
  campaignFindingCouponHidingPlace: String
  campaignFindingCouponUsed: Boolean
  campaignFindingCouponWinnerPlace: Float
  campaignId: Float
  childrenCouponIsUsed: Boolean
  code: String
  commentsChargedAmount: String
  createdAt: DateTime
  discountNotificationSentDate: DateTime
  email: String
  emailVerified: Float
  family: String
  hafezPoemCount: Float
  heardAboutUsOptionId: Float
  id: ID
  invitationCodeId: Float
  isActive: Float
  isForeigner: Boolean
  isGuest: Float
  isPasswordChanged: Boolean
  isPreorderApplicant: Boolean
  loginEmail: String
  lotteryCode: String
  mah: Float
  monthlyRetargetingStartDate: DateTime
  name: String
  nationalId: String
  newUsersCampaignCharged: Boolean
  os: String
  osVersion: String
  password: String
  phone: String
  phoneVerified: Float
  phoneVerifiedBy: Float
  preorderPaid: Boolean
  preorderRegisterDate: DateTime
  preorderTurnEndDate: String
  preorderTurnStartDate: String
  profilePicture: String
  rememberToken: String
  retargetingIsUsed: Boolean
  roz: Float
  sal: Float
  sepidarCode: Float
  sepidarId: Float
  spinnerIsUsed: Boolean
  spinnerVerificationCode: String
  spinnerVerified: Boolean
  status: Float
  stripeId: String
  temp: String
  tempName: String
  updatedAt: DateTime
  username: String
  verificationCode: String
}

type UserEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the User"""
  node: User!
}

input UserFilter {
  and: [UserFilter!]
  id: IDFilterComparison
  or: [UserFilter!]
}

input UserInput {
  activities: [ActivityInput!]!
  apiToken: String
  atmCardNo: String
  avatar: String
  campaignCartItems: String
  campaignCartItemsStartDate: DateTime
  campaignFindingCouponCode: String
  campaignFindingCouponFoundParts: String!
  campaignFindingCouponHidingPlace: String
  campaignFindingCouponUsed: Boolean!
  campaignFindingCouponWinnerPlace: Float
  campaignId: Float
  childrenCouponIsUsed: Boolean!
  code: String
  commentsChargedAmount: String!
  createdAt: DateTime
  discountNotificationSentDate: DateTime
  email: String
  emailVerified: Float
  family: String!
  hafezPoemCount: Float!
  heardAboutUsOptionId: Float
  id: ID!
  invitationCodeId: Float
  isActive: Float
  isForeigner: Boolean!
  isGuest: Float
  isPasswordChanged: Boolean!
  isPreorderApplicant: Boolean!
  loginEmail: String
  lotteryCode: String
  mah: Float
  monthlyRetargetingStartDate: DateTime
  name: String!
  nationalId: String
  newUsersCampaignCharged: Boolean!
  os: String
  osVersion: String
  password: String
  phone: String
  phoneVerified: Float
  phoneVerifiedBy: Float
  preorderPaid: Boolean!
  preorderRegisterDate: DateTime
  preorderTurnEndDate: String
  preorderTurnStartDate: String
  profilePicture: String
  rememberToken: String
  retargetingIsUsed: Boolean!
  roz: Float
  sal: Float
  sepidarCode: Float
  sepidarId: Float
  spinnerIsUsed: Boolean!
  spinnerVerificationCode: String
  spinnerVerified: Boolean!
  status: Float!
  stripeId: String
  temp: String
  tempName: String!
  updatedAt: DateTime
  username: String
  verificationCode: String
}

input UserSort {
  direction: SortDirection!
  field: UserSortFields!
  nulls: SortNulls
}

enum UserSortFields {
  id
}

input UserUpdateFilter {
  and: [UserUpdateFilter!]
  id: IDFilterComparison
  or: [UserUpdateFilter!]
}