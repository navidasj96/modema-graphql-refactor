# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Activity {
  action: String!
  contentId: Float!
  contentType: String!
  createdAt: DateTime
  deletedUserId: Float
  description: String!
  details: String!
  id: ID!
  updatedAt: DateTime
  userId: Float
  userName: String!
}

type ActivityConnection {
  """Array of edges."""
  edges: [ActivityEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ActivityDeleteFilter {
  and: [ActivityDeleteFilter!]
  id: IDFilterComparison
  or: [ActivityDeleteFilter!]
  userName: StringFieldComparison
}

type ActivityDeleteResponse {
  action: String
  contentId: Float
  contentType: String
  createdAt: DateTime
  deletedUserId: Float
  description: String
  details: String
  id: ID
  updatedAt: DateTime
  userId: Float
  userName: String
}

type ActivityEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Activity"""
  node: Activity!
}

input ActivityFilter {
  and: [ActivityFilter!]
  id: IDFilterComparison
  or: [ActivityFilter!]
  userName: StringFieldComparison
}

input ActivityInput {
  action: String!
  contentId: Float!
  contentType: String!
  createdAt: DateTime
  deletedUserId: Float
  description: String!
  details: String!
  id: ID!
  updatedAt: DateTime
  userId: Float
  userName: String!
}

input ActivitySort {
  direction: SortDirection!
  field: ActivitySortFields!
  nulls: SortNulls
}

enum ActivitySortFields {
  id
  userName
}

input ActivityUpdateFilter {
  and: [ActivityUpdateFilter!]
  id: IDFilterComparison
  or: [ActivityUpdateFilter!]
  userName: StringFieldComparison
}

type Address {
  address: String!
  address2: String
  city: City!
  cityId: Float!
  country: Country!
  countryId: Float!
  createdAt: DateTime
  crmCompanyId: String
  crmCompanyPersonId: String
  deletedAt: DateTime
  email: String
  fullAddress: String
  fullname: String
  fullnameDescription: String
  fullnameTrimmed: String
  id: ID!
  invoiceAddressValidationResults: [InvoiceAddressValidationResult!]!
  invoiceAddresses: [InvoiceAddress!]!
  invoiceRatesResults: [InvoiceRatesResult!]!
  invoices: [Invoice!]!
  latitude: String
  longitude: String
  nationalId: String
  oldAddress: String!
  phone: String
  phone2: String
  returnRequestAddresses: [ReturnRequestAddress!]!
  sepidarId: Float
  state: State!
  stateId: Float!
  updatedAt: DateTime
  user: User!
  userId: Float!
  zipCode: String
}

type AddressConnection {
  """Array of edges."""
  edges: [AddressEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input AddressDeleteFilter {
  and: [AddressDeleteFilter!]
  id: IDFilterComparison
  or: [AddressDeleteFilter!]
}

type AddressDeleteResponse {
  address: String
  address2: String
  city: City
  cityId: Float
  country: Country
  countryId: Float
  createdAt: DateTime
  crmCompanyId: String
  crmCompanyPersonId: String
  deletedAt: DateTime
  email: String
  fullAddress: String
  fullname: String
  fullnameDescription: String
  fullnameTrimmed: String
  id: ID
  invoiceAddressValidationResults: [InvoiceAddressValidationResult!]
  invoiceAddresses: [InvoiceAddress!]
  invoiceRatesResults: [InvoiceRatesResult!]
  invoices: [Invoice!]
  latitude: String
  longitude: String
  nationalId: String
  oldAddress: String
  phone: String
  phone2: String
  returnRequestAddresses: [ReturnRequestAddress!]
  sepidarId: Float
  state: State
  stateId: Float
  updatedAt: DateTime
  user: User
  userId: Float
  zipCode: String
}

input AddressDomain {
  address: String!
  address2: String
  city: CityDomain!
  cityId: Float!
  country: CountryDomain!
  countryId: Float!
  createdAt: DateTime
  crmCompanyId: String
  crmCompanyPersonId: String
  deletedAt: DateTime
  email: String
  fullAddress: String
  fullname: String
  fullnameDescription: String
  fullnameTrimmed: String
  id: ID!
  invoiceAddressValidationResults: [InvoiceAddressValidationResultDomain!]!
  invoiceAddresses: [InvoiceAddressDomain!]!
  invoiceRatesResults: [InvoiceRatesResultDomain!]!
  invoices: [InvoiceDomain!]!
  latitude: String
  longitude: String
  nationalId: String
  oldAddress: String!
  phone: String
  phone2: String
  returnRequestAddresses: [ReturnRequestAddressDomain!]!
  sepidarId: Float
  state: StateDomain!
  stateId: Float!
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
  zipCode: String
}

type AddressEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Address"""
  node: Address!
}

input AddressFilter {
  and: [AddressFilter!]
  id: IDFilterComparison
  or: [AddressFilter!]
}

input AddressSort {
  direction: SortDirection!
  field: AddressSortFields!
  nulls: SortNulls
}

enum AddressSortFields {
  id
}

input AddressUpdateFilter {
  and: [AddressUpdateFilter!]
  id: IDFilterComparison
  or: [AddressUpdateFilter!]
}

type Attribute {
  createdAt: DateTime
  id: ID!
  isActive: Float
  name: String!
  sortOrder: Float
  type: Float!
  updatedAt: DateTime
}

type AttributeAttributeGroup {
  attribute: Attribute!
  attributeGroup: AttributeGroup!
  attributeGroupId: Float!
  attributeId: Float!
  createdAt: DateTime
  id: ID!
  updatedAt: DateTime
}

type AttributeAttributeGroupConnection {
  """Array of edges."""
  edges: [AttributeAttributeGroupEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input AttributeAttributeGroupDeleteFilter {
  and: [AttributeAttributeGroupDeleteFilter!]
  id: IDFilterComparison
  or: [AttributeAttributeGroupDeleteFilter!]
}

type AttributeAttributeGroupDeleteResponse {
  attribute: Attribute
  attributeGroup: AttributeGroup
  attributeGroupId: Float
  attributeId: Float
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
}

input AttributeAttributeGroupDomain {
  attribute: AttributeDomain!
  attributeGroup: AttributeGroupDomain!
  attributeGroupId: Float!
  attributeId: Float!
  createdAt: DateTime
  id: ID!
  updatedAt: DateTime
}

type AttributeAttributeGroupEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the AttributeAttributeGroup"""
  node: AttributeAttributeGroup!
}

input AttributeAttributeGroupFilter {
  and: [AttributeAttributeGroupFilter!]
  id: IDFilterComparison
  or: [AttributeAttributeGroupFilter!]
}

input AttributeAttributeGroupSort {
  direction: SortDirection!
  field: AttributeAttributeGroupSortFields!
  nulls: SortNulls
}

enum AttributeAttributeGroupSortFields {
  id
}

input AttributeAttributeGroupUpdateFilter {
  and: [AttributeAttributeGroupUpdateFilter!]
  id: IDFilterComparison
  or: [AttributeAttributeGroupUpdateFilter!]
}

type AttributeConnection {
  """Array of edges."""
  edges: [AttributeEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input AttributeDeleteFilter {
  and: [AttributeDeleteFilter!]
  id: IDFilterComparison
  or: [AttributeDeleteFilter!]
}

type AttributeDeleteResponse {
  createdAt: DateTime
  id: ID
  isActive: Float
  name: String
  sortOrder: Float
  type: Float
  updatedAt: DateTime
}

input AttributeDomain {
  createdAt: DateTime
  id: ID!
  isActive: Float
  name: String!
  sortOrder: Float
  type: Float!
  updatedAt: DateTime
}

type AttributeEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Attribute"""
  node: Attribute!
}

input AttributeFilter {
  and: [AttributeFilter!]
  id: IDFilterComparison
  or: [AttributeFilter!]
}

type AttributeGroup {
  attributeAttributeGroups: [AttributeAttributeGroup!]!
  attributeItems: [AttributeItem!]!
  createdAt: DateTime
  generalName: String
  id: ID!
  isActive: Float
  name: String!
  productCategory: ProductCategory!
  productCategoryId: Float
  sortOrder: Float
  updatedAt: DateTime
}

type AttributeGroupConnection {
  """Array of edges."""
  edges: [AttributeGroupEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input AttributeGroupDeleteFilter {
  and: [AttributeGroupDeleteFilter!]
  id: IDFilterComparison
  or: [AttributeGroupDeleteFilter!]
}

type AttributeGroupDeleteResponse {
  attributeAttributeGroups: [AttributeAttributeGroup!]
  attributeItems: [AttributeItem!]
  createdAt: DateTime
  generalName: String
  id: ID
  isActive: Float
  name: String
  productCategory: ProductCategory
  productCategoryId: Float
  sortOrder: Float
  updatedAt: DateTime
}

input AttributeGroupDomain {
  attributeAttributeGroups: [AttributeAttributeGroupDomain!]!
  attributeItems: [AttributeItemDomain!]!
  createdAt: DateTime
  generalName: String
  id: ID!
  isActive: Float
  name: String!
  productCategory: ProductCategoryDomain!
  productCategoryId: Float
  sortOrder: Float
  updatedAt: DateTime
}

type AttributeGroupEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the AttributeGroup"""
  node: AttributeGroup!
}

input AttributeGroupFilter {
  and: [AttributeGroupFilter!]
  id: IDFilterComparison
  or: [AttributeGroupFilter!]
}

input AttributeGroupSort {
  direction: SortDirection!
  field: AttributeGroupSortFields!
  nulls: SortNulls
}

enum AttributeGroupSortFields {
  id
}

input AttributeGroupUpdateFilter {
  and: [AttributeGroupUpdateFilter!]
  id: IDFilterComparison
  or: [AttributeGroupUpdateFilter!]
}

type AttributeItem {
  attribute: Attribute!
  attributeGroup: AttributeGroup!
  attributeGroupId: Float
  attributeId: Float!
  attributeProducts: [AttributeProduct!]!
  attributeSubproducts: [AttributeSubproduct!]!
  createdAt: DateTime
  id: ID!
  name: String!
  updatedAt: DateTime
}

type AttributeItemConnection {
  """Array of edges."""
  edges: [AttributeItemEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input AttributeItemDeleteFilter {
  and: [AttributeItemDeleteFilter!]
  id: IDFilterComparison
  or: [AttributeItemDeleteFilter!]
}

type AttributeItemDeleteResponse {
  attribute: Attribute
  attributeGroup: AttributeGroup
  attributeGroupId: Float
  attributeId: Float
  attributeProducts: [AttributeProduct!]
  attributeSubproducts: [AttributeSubproduct!]
  createdAt: DateTime
  id: ID
  name: String
  updatedAt: DateTime
}

input AttributeItemDomain {
  attribute: AttributeDomain!
  attributeGroup: AttributeGroupDomain!
  attributeGroupId: Float
  attributeId: Float!
  attributeProducts: [AttributeProductDomain!]!
  attributeSubproducts: [AttributeSubproductDomain!]!
  createdAt: DateTime
  id: ID!
  name: String!
  updatedAt: DateTime
}

type AttributeItemEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the AttributeItem"""
  node: AttributeItem!
}

input AttributeItemFilter {
  and: [AttributeItemFilter!]
  id: IDFilterComparison
  or: [AttributeItemFilter!]
}

input AttributeItemSort {
  direction: SortDirection!
  field: AttributeItemSortFields!
  nulls: SortNulls
}

enum AttributeItemSortFields {
  id
}

input AttributeItemUpdateFilter {
  and: [AttributeItemUpdateFilter!]
  id: IDFilterComparison
  or: [AttributeItemUpdateFilter!]
}

type AttributeProduct {
  attribute: Attribute!
  attributeId: Float!
  attributeItem: AttributeItem!
  attributeItemId: Float
  createdAt: DateTime
  id: ID!
  isChecked: Boolean
  product: Product!
  productId: Float!
  sortOrder: Float
  updatedAt: DateTime
  value: String
}

type AttributeProductConnection {
  """Array of edges."""
  edges: [AttributeProductEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input AttributeProductDeleteFilter {
  and: [AttributeProductDeleteFilter!]
  id: IDFilterComparison
  or: [AttributeProductDeleteFilter!]
}

type AttributeProductDeleteResponse {
  attribute: Attribute
  attributeId: Float
  attributeItem: AttributeItem
  attributeItemId: Float
  createdAt: DateTime
  id: ID
  isChecked: Boolean
  product: Product
  productId: Float
  sortOrder: Float
  updatedAt: DateTime
  value: String
}

input AttributeProductDomain {
  attribute: AttributeDomain!
  attributeId: Float!
  attributeItem: AttributeItemDomain!
  attributeItemId: Float
  createdAt: DateTime
  id: ID!
  isChecked: Boolean
  product: ProductDomain!
  productId: Float!
  sortOrder: Float
  updatedAt: DateTime
  value: String
}

type AttributeProductEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the AttributeProduct"""
  node: AttributeProduct!
}

input AttributeProductFilter {
  and: [AttributeProductFilter!]
  id: IDFilterComparison
  or: [AttributeProductFilter!]
}

input AttributeProductSort {
  direction: SortDirection!
  field: AttributeProductSortFields!
  nulls: SortNulls
}

enum AttributeProductSortFields {
  id
}

input AttributeProductUpdateFilter {
  and: [AttributeProductUpdateFilter!]
  id: IDFilterComparison
  or: [AttributeProductUpdateFilter!]
}

input AttributeSort {
  direction: SortDirection!
  field: AttributeSortFields!
  nulls: SortNulls
}

enum AttributeSortFields {
  id
}

type AttributeSubproduct {
  attribute: Attribute!
  attributeId: Float!
  attributeItem: AttributeItem!
  attributeItemId: Float
  createdAt: DateTime
  id: ID!
  isChecked: Boolean
  subproduct: Subproduct!
  subproductId: Float!
  updatedAt: DateTime
  value: String
}

type AttributeSubproductConnection {
  """Array of edges."""
  edges: [AttributeSubproductEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input AttributeSubproductDeleteFilter {
  and: [AttributeSubproductDeleteFilter!]
  id: IDFilterComparison
  or: [AttributeSubproductDeleteFilter!]
}

type AttributeSubproductDeleteResponse {
  attribute: Attribute
  attributeId: Float
  attributeItem: AttributeItem
  attributeItemId: Float
  createdAt: DateTime
  id: ID
  isChecked: Boolean
  subproduct: Subproduct
  subproductId: Float
  updatedAt: DateTime
  value: String
}

input AttributeSubproductDomain {
  attribute: AttributeDomain!
  attributeId: Float!
  attributeItem: AttributeItemDomain!
  attributeItemId: Float
  createdAt: DateTime
  id: ID!
  isChecked: Boolean
  subproduct: SubproductDomain!
  subproductId: Float!
  updatedAt: DateTime
  value: String
}

type AttributeSubproductEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the AttributeSubproduct"""
  node: AttributeSubproduct!
}

input AttributeSubproductFilter {
  and: [AttributeSubproductFilter!]
  id: IDFilterComparison
  or: [AttributeSubproductFilter!]
}

input AttributeSubproductSort {
  direction: SortDirection!
  field: AttributeSubproductSortFields!
  nulls: SortNulls
}

enum AttributeSubproductSortFields {
  id
}

input AttributeSubproductUpdateFilter {
  and: [AttributeSubproductUpdateFilter!]
  id: IDFilterComparison
  or: [AttributeSubproductUpdateFilter!]
}

input AttributeUpdateFilter {
  and: [AttributeUpdateFilter!]
  id: IDFilterComparison
  or: [AttributeUpdateFilter!]
}

type AutomationEvent {
  createdAt: DateTime
  deletedAt: DateTime
  event: String!
  eventDate: String!
  eventDatetime: DateTime!
  eventTimestamp: String!
  id: ID!
  lastEec: String
  messages: String
  onlineSheetSaved: Boolean!
  rfmCat: String
  rfmScore: String
  smsSent: Boolean!
  status: String!
  triggerDatetime: DateTime!
  type: String!
  typeId: Float!
  updatedAt: DateTime
  user: User
  userContact: String!
  userId: Float
  userName: String!
  userUid: Float!
}

type AutomationEventConnection {
  """Array of edges."""
  edges: [AutomationEventEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input AutomationEventDeleteFilter {
  and: [AutomationEventDeleteFilter!]
  id: IDFilterComparison
  or: [AutomationEventDeleteFilter!]
}

type AutomationEventDeleteResponse {
  createdAt: DateTime
  deletedAt: DateTime
  event: String
  eventDate: String
  eventDatetime: DateTime
  eventTimestamp: String
  id: ID
  lastEec: String
  messages: String
  onlineSheetSaved: Boolean
  rfmCat: String
  rfmScore: String
  smsSent: Boolean
  status: String
  triggerDatetime: DateTime
  type: String
  typeId: Float
  updatedAt: DateTime
  user: User
  userContact: String
  userId: Float
  userName: String
  userUid: Float
}

input AutomationEventDomain {
  createdAt: DateTime
  deletedAt: DateTime
  event: String!
  eventDate: String!
  eventDatetime: DateTime!
  eventTimestamp: String!
  id: ID!
  lastEec: String
  messages: String
  onlineSheetSaved: Boolean! = false
  rfmCat: String
  rfmScore: String
  smsSent: Boolean! = false
  status: String!
  triggerDatetime: DateTime!
  type: String!
  typeId: Float!
  updatedAt: DateTime
  user: UserDomain
  userContact: String!
  userId: Float
  userName: String!
  userUid: Float!
}

type AutomationEventEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the AutomationEvent"""
  node: AutomationEvent!
}

input AutomationEventFilter {
  and: [AutomationEventFilter!]
  id: IDFilterComparison
  or: [AutomationEventFilter!]
}

input AutomationEventSort {
  direction: SortDirection!
  field: AutomationEventSortFields!
  nulls: SortNulls
}

enum AutomationEventSortFields {
  id
}

input AutomationEventUpdateFilter {
  and: [AutomationEventUpdateFilter!]
  id: IDFilterComparison
  or: [AutomationEventUpdateFilter!]
}

type AutomationRfmScore {
  id: ID!
  rfmScore: String!
  rfmScoreCode: String!
  rfmScoreTitle: String!
}

type AutomationRfmScoreConnection {
  """Array of edges."""
  edges: [AutomationRfmScoreEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input AutomationRfmScoreDeleteFilter {
  and: [AutomationRfmScoreDeleteFilter!]
  id: IDFilterComparison
  or: [AutomationRfmScoreDeleteFilter!]
}

type AutomationRfmScoreDeleteResponse {
  id: ID
  rfmScore: String
  rfmScoreCode: String
  rfmScoreTitle: String
}

input AutomationRfmScoreDomain {
  id: ID!
  rfmScore: String!
  rfmScoreCode: String!
  rfmScoreTitle: String!
}

type AutomationRfmScoreEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the AutomationRfmScore"""
  node: AutomationRfmScore!
}

input AutomationRfmScoreFilter {
  and: [AutomationRfmScoreFilter!]
  id: IDFilterComparison
  or: [AutomationRfmScoreFilter!]
}

input AutomationRfmScoreSort {
  direction: SortDirection!
  field: AutomationRfmScoreSortFields!
  nulls: SortNulls
}

enum AutomationRfmScoreSortFields {
  id
}

input AutomationRfmScoreUpdateFilter {
  and: [AutomationRfmScoreUpdateFilter!]
  id: IDFilterComparison
  or: [AutomationRfmScoreUpdateFilter!]
}

type BasicCarpetBorder {
  code: String!
  createdAt: DateTime
  id: ID!
  isActive: Boolean!
  sortOrder: Float
  subproducts: [Subproduct!]!
  title: String!
  updatedAt: DateTime
}

type BasicCarpetBorderConnection {
  """Array of edges."""
  edges: [BasicCarpetBorderEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input BasicCarpetBorderDeleteFilter {
  and: [BasicCarpetBorderDeleteFilter!]
  id: IDFilterComparison
  or: [BasicCarpetBorderDeleteFilter!]
}

type BasicCarpetBorderDeleteResponse {
  code: String
  createdAt: DateTime
  id: ID
  isActive: Boolean
  sortOrder: Float
  subproducts: [Subproduct!]
  title: String
  updatedAt: DateTime
}

input BasicCarpetBorderDomain {
  code: String!
  createdAt: DateTime
  id: ID!
  isActive: Boolean! = true
  sortOrder: Float
  subproducts: [SubproductDomain!]!
  title: String!
  updatedAt: DateTime
}

type BasicCarpetBorderEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the BasicCarpetBorder"""
  node: BasicCarpetBorder!
}

input BasicCarpetBorderFilter {
  and: [BasicCarpetBorderFilter!]
  id: IDFilterComparison
  or: [BasicCarpetBorderFilter!]
}

input BasicCarpetBorderSort {
  direction: SortDirection!
  field: BasicCarpetBorderSortFields!
  nulls: SortNulls
}

enum BasicCarpetBorderSortFields {
  id
}

input BasicCarpetBorderUpdateFilter {
  and: [BasicCarpetBorderUpdateFilter!]
  id: IDFilterComparison
  or: [BasicCarpetBorderUpdateFilter!]
}

type BasicCarpetBrand {
  code: String!
  createdAt: DateTime!
  id: ID!
  isActive: Boolean!
  sortOrder: Float
  title: String!
  updatedAt: DateTime!
}

type BasicCarpetBrandConnection {
  """Array of edges."""
  edges: [BasicCarpetBrandEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input BasicCarpetBrandDeleteFilter {
  and: [BasicCarpetBrandDeleteFilter!]
  id: IDFilterComparison
  or: [BasicCarpetBrandDeleteFilter!]
}

type BasicCarpetBrandDeleteResponse {
  code: String
  createdAt: DateTime
  id: ID
  isActive: Boolean
  sortOrder: Float
  title: String
  updatedAt: DateTime
}

input BasicCarpetBrandDomain {
  code: String!
  createdAt: DateTime!
  id: ID!
  isActive: Boolean!
  sortOrder: Float
  title: String!
  updatedAt: DateTime!
}

type BasicCarpetBrandEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the BasicCarpetBrand"""
  node: BasicCarpetBrand!
}

input BasicCarpetBrandFilter {
  and: [BasicCarpetBrandFilter!]
  id: IDFilterComparison
  or: [BasicCarpetBrandFilter!]
}

input BasicCarpetBrandSort {
  direction: SortDirection!
  field: BasicCarpetBrandSortFields!
  nulls: SortNulls
}

enum BasicCarpetBrandSortFields {
  id
}

input BasicCarpetBrandUpdateFilter {
  and: [BasicCarpetBrandUpdateFilter!]
  id: IDFilterComparison
  or: [BasicCarpetBrandUpdateFilter!]
}

type BasicCarpetColor {
  code: String!
  colorCode: String
  createdAt: DateTime!
  englishTitle: String
  id: ID!
  incredibleOffers: [IncredibleOffer!]!
  isActive: Boolean!
  persianTitle: String
  productColorImages: [ProductColorImage!]!
  productColorSales: [ProductColorSale!]!
  productVideos: [ProductVideo!]!
  products: [Product!]!
  russianTitle: String
  shortCode: String
  sortOrder: Float
  spanishTitle: String
  subproducts: [Subproduct!]!
  title: String!
  torobProducts: [TorobProduct!]!
  updatedAt: DateTime!
}

type BasicCarpetColorConnection {
  """Array of edges."""
  edges: [BasicCarpetColorEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input BasicCarpetColorDeleteFilter {
  and: [BasicCarpetColorDeleteFilter!]
  id: IDFilterComparison
  or: [BasicCarpetColorDeleteFilter!]
}

type BasicCarpetColorDeleteResponse {
  code: String
  colorCode: String
  createdAt: DateTime
  englishTitle: String
  id: ID
  incredibleOffers: [IncredibleOffer!]
  isActive: Boolean
  persianTitle: String
  productColorImages: [ProductColorImage!]
  productColorSales: [ProductColorSale!]
  productVideos: [ProductVideo!]
  products: [Product!]
  russianTitle: String
  shortCode: String
  sortOrder: Float
  spanishTitle: String
  subproducts: [Subproduct!]
  title: String
  torobProducts: [TorobProduct!]
  updatedAt: DateTime
}

input BasicCarpetColorDomain {
  code: String!
  colorCode: String
  createdAt: DateTime! = "2025-04-19T11:22:46.028Z"
  englishTitle: String
  id: ID!
  incredibleOffers: [IncredibleOfferDomain!]!
  isActive: Boolean! = true
  persianTitle: String
  productColorImages: [ProductColorImageDomain!]!
  productColorSales: [ProductColorSaleDomain!]!
  productVideos: [ProductVideoDomain!]!
  products: [ProductDomain!]!
  russianTitle: String
  shortCode: String
  sortOrder: Float
  spanishTitle: String
  subproducts: [SubproductDomain!]!
  title: String!
  torobProducts: [TorobProductDomain!]!
  updatedAt: DateTime!
}

type BasicCarpetColorEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the BasicCarpetColor"""
  node: BasicCarpetColor!
}

input BasicCarpetColorFilter {
  and: [BasicCarpetColorFilter!]
  id: IDFilterComparison
  or: [BasicCarpetColorFilter!]
}

input BasicCarpetColorSort {
  direction: SortDirection!
  field: BasicCarpetColorSortFields!
  nulls: SortNulls
}

enum BasicCarpetColorSortFields {
  id
}

input BasicCarpetColorUpdateFilter {
  and: [BasicCarpetColorUpdateFilter!]
  id: IDFilterComparison
  or: [BasicCarpetColorUpdateFilter!]
}

type BasicCarpetDesign {
  code: String!
  createdAt: DateTime!
  id: ID!
  isActive: Boolean!
  sortOrder: Float
  subproducts: [Subproduct!]!
  title: String!
  updatedAt: DateTime!
}

type BasicCarpetDesignConnection {
  """Array of edges."""
  edges: [BasicCarpetDesignEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input BasicCarpetDesignDeleteFilter {
  and: [BasicCarpetDesignDeleteFilter!]
  id: IDFilterComparison
  or: [BasicCarpetDesignDeleteFilter!]
}

type BasicCarpetDesignDeleteResponse {
  code: String
  createdAt: DateTime
  id: ID
  isActive: Boolean
  sortOrder: Float
  subproducts: [Subproduct!]
  title: String
  updatedAt: DateTime
}

input BasicCarpetDesignDomain {
  code: String!
  createdAt: DateTime! = "2025-04-19T11:22:46.044Z"
  id: ID!
  isActive: Boolean! = true
  sortOrder: Float
  subproducts: [SubproductDomain!]!
  title: String!
  updatedAt: DateTime!
}

type BasicCarpetDesignEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the BasicCarpetDesign"""
  node: BasicCarpetDesign!
}

input BasicCarpetDesignFilter {
  and: [BasicCarpetDesignFilter!]
  id: IDFilterComparison
  or: [BasicCarpetDesignFilter!]
}

input BasicCarpetDesignSort {
  direction: SortDirection!
  field: BasicCarpetDesignSortFields!
  nulls: SortNulls
}

enum BasicCarpetDesignSortFields {
  id
}

input BasicCarpetDesignUpdateFilter {
  and: [BasicCarpetDesignUpdateFilter!]
  id: IDFilterComparison
  or: [BasicCarpetDesignUpdateFilter!]
}

type BasicCarpetDesigner {
  city: City!
  cityId: Float
  code: String!
  country: Country!
  countryId: Float
  createdAt: DateTime!
  description: String
  facebookId: String
  headerImage: String
  id: ID!
  instagramId: String
  isActive: Boolean!
  linkedinId: String
  pricePercentage: Float
  profilePicture: String
  selfEmployed: Boolean
  sortOrder: Float
  state: State!
  stateId: Float
  subproducts: [Subproduct!]!
  title: String!
  twitterId: String
  updatedAt: DateTime!
  user: User!
  userId: Float
}

type BasicCarpetDesignerConnection {
  """Array of edges."""
  edges: [BasicCarpetDesignerEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input BasicCarpetDesignerDeleteFilter {
  and: [BasicCarpetDesignerDeleteFilter!]
  id: IDFilterComparison
  or: [BasicCarpetDesignerDeleteFilter!]
}

type BasicCarpetDesignerDeleteResponse {
  city: City
  cityId: Float
  code: String
  country: Country
  countryId: Float
  createdAt: DateTime
  description: String
  facebookId: String
  headerImage: String
  id: ID
  instagramId: String
  isActive: Boolean
  linkedinId: String
  pricePercentage: Float
  profilePicture: String
  selfEmployed: Boolean
  sortOrder: Float
  state: State
  stateId: Float
  subproducts: [Subproduct!]
  title: String
  twitterId: String
  updatedAt: DateTime
  user: User
  userId: Float
}

input BasicCarpetDesignerDomain {
  city: CityDomain!
  cityId: Float
  code: String!
  country: CountryDomain!
  countryId: Float
  createdAt: DateTime! = "2025-04-19T11:22:46.108Z"
  description: String
  facebookId: String
  headerImage: String
  id: ID!
  instagramId: String
  isActive: Boolean! = true
  linkedinId: String
  pricePercentage: Float = 0
  profilePicture: String
  selfEmployed: Boolean = false
  sortOrder: Float
  state: StateDomain!
  stateId: Float
  subproducts: [SubproductDomain!]!
  title: String!
  twitterId: String
  updatedAt: DateTime!
  user: UserDomain!
  userId: Float
}

type BasicCarpetDesignerEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the BasicCarpetDesigner"""
  node: BasicCarpetDesigner!
}

input BasicCarpetDesignerFilter {
  and: [BasicCarpetDesignerFilter!]
  id: IDFilterComparison
  or: [BasicCarpetDesignerFilter!]
}

input BasicCarpetDesignerSort {
  direction: SortDirection!
  field: BasicCarpetDesignerSortFields!
  nulls: SortNulls
}

enum BasicCarpetDesignerSortFields {
  id
}

input BasicCarpetDesignerUpdateFilter {
  and: [BasicCarpetDesignerUpdateFilter!]
  id: IDFilterComparison
  or: [BasicCarpetDesignerUpdateFilter!]
}

type BasicCarpetMaterial {
  code: String!
  createdAt: DateTime!
  id: ID!
  isActive: Boolean!
  sortOrder: Float
  subproducts: [Subproduct!]!
  title: String!
  updatedAt: DateTime!
}

type BasicCarpetMaterialConnection {
  """Array of edges."""
  edges: [BasicCarpetMaterialEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input BasicCarpetMaterialDeleteFilter {
  and: [BasicCarpetMaterialDeleteFilter!]
  id: IDFilterComparison
  or: [BasicCarpetMaterialDeleteFilter!]
}

type BasicCarpetMaterialDeleteResponse {
  code: String
  createdAt: DateTime
  id: ID
  isActive: Boolean
  sortOrder: Float
  subproducts: [Subproduct!]
  title: String
  updatedAt: DateTime
}

input BasicCarpetMaterialDomain {
  code: String!
  createdAt: DateTime! = "2025-04-19T11:22:46.045Z"
  id: ID!
  isActive: Boolean! = true
  sortOrder: Float
  subproducts: [SubproductDomain!]!
  title: String!
  updatedAt: DateTime!
}

type BasicCarpetMaterialEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the BasicCarpetMaterial"""
  node: BasicCarpetMaterial!
}

input BasicCarpetMaterialFilter {
  and: [BasicCarpetMaterialFilter!]
  id: IDFilterComparison
  or: [BasicCarpetMaterialFilter!]
}

input BasicCarpetMaterialSort {
  direction: SortDirection!
  field: BasicCarpetMaterialSortFields!
  nulls: SortNulls
}

enum BasicCarpetMaterialSortFields {
  id
}

input BasicCarpetMaterialUpdateFilter {
  and: [BasicCarpetMaterialUpdateFilter!]
  id: IDFilterComparison
  or: [BasicCarpetMaterialUpdateFilter!]
}

type BasicCarpetSize {
  altText: String
  altTextEn: String
  basicCarpetSizeDetails: [BasicCarpetSizeDetail!]!
  campaignFreeOfferSizes: [CampaignFreeOfferSize!]!
  carpetVolume: Float
  code: String!
  couponSubjects: [CouponSubject!]!
  createdAt: DateTime!
  description: String
  descriptionEn: String
  designersProductPriceRanges: [DesignersProductPriceRange!]!
  discountSubjects: [DiscountSubject!]!
  homepageImageId: Float
  id: ID!
  image: Image!
  imageId: Float
  isActive: Boolean!
  length: Float!
  lengthText: String
  metaTags: String
  metaTagsEn: String
  mobileImage: Image!
  mobileImageId: Float
  padVolume: Float
  pageTitle: String
  pageTitleEn: String
  priceGroupSizes: [PriceGroupSize!]!
  productionPads: [ProductionPad!]!
  products: [Product!]!
  ripTemplateItems: [RipTemplateItem!]!
  sizeText: String
  sizeTextEn: String
  sortOrder: Float
  subproducts: [Subproduct!]!
  title: String!
  titleEn: String
  torobProducts: [TorobProduct!]!
  unitRatio: Float!
  updatedAt: DateTime!
  urlSlug: String
  urlSlugEn: String
  viewCounter: Float!
  width: Float!
  widthText: String
}

type BasicCarpetSizeConnection {
  """Array of edges."""
  edges: [BasicCarpetSizeEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input BasicCarpetSizeDeleteFilter {
  and: [BasicCarpetSizeDeleteFilter!]
  id: IDFilterComparison
  or: [BasicCarpetSizeDeleteFilter!]
}

type BasicCarpetSizeDeleteResponse {
  altText: String
  altTextEn: String
  basicCarpetSizeDetails: [BasicCarpetSizeDetail!]
  campaignFreeOfferSizes: [CampaignFreeOfferSize!]
  carpetVolume: Float
  code: String
  couponSubjects: [CouponSubject!]
  createdAt: DateTime
  description: String
  descriptionEn: String
  designersProductPriceRanges: [DesignersProductPriceRange!]
  discountSubjects: [DiscountSubject!]
  homepageImageId: Float
  id: ID
  image: Image
  imageId: Float
  isActive: Boolean
  length: Float
  lengthText: String
  metaTags: String
  metaTagsEn: String
  mobileImage: Image
  mobileImageId: Float
  padVolume: Float
  pageTitle: String
  pageTitleEn: String
  priceGroupSizes: [PriceGroupSize!]
  productionPads: [ProductionPad!]
  products: [Product!]
  ripTemplateItems: [RipTemplateItem!]
  sizeText: String
  sizeTextEn: String
  sortOrder: Float
  subproducts: [Subproduct!]
  title: String
  titleEn: String
  torobProducts: [TorobProduct!]
  unitRatio: Float
  updatedAt: DateTime
  urlSlug: String
  urlSlugEn: String
  viewCounter: Float
  width: Float
  widthText: String
}

type BasicCarpetSizeDetail {
  basicCarpetSize: BasicCarpetSize!
  basicCarpetSizeId: Float
  createdAt: DateTime
  detailText: String
  detailTextEn: String
  id: ID!
  isActive: Boolean!
  sortOrder: Float
  title: String
  titleEn: String
  updatedAt: DateTime
}

type BasicCarpetSizeDetailConnection {
  """Array of edges."""
  edges: [BasicCarpetSizeDetailEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input BasicCarpetSizeDetailDeleteFilter {
  and: [BasicCarpetSizeDetailDeleteFilter!]
  id: IDFilterComparison
  or: [BasicCarpetSizeDetailDeleteFilter!]
}

type BasicCarpetSizeDetailDeleteResponse {
  basicCarpetSize: BasicCarpetSize
  basicCarpetSizeId: Float
  createdAt: DateTime
  detailText: String
  detailTextEn: String
  id: ID
  isActive: Boolean
  sortOrder: Float
  title: String
  titleEn: String
  updatedAt: DateTime
}

input BasicCarpetSizeDetailDomain {
  basicCarpetSize: BasicCarpetSizeDomain!
  basicCarpetSizeId: Float
  createdAt: DateTime
  detailText: String
  detailTextEn: String
  id: ID!
  isActive: Boolean! = true
  sortOrder: Float
  title: String
  titleEn: String
  updatedAt: DateTime
}

type BasicCarpetSizeDetailEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the BasicCarpetSizeDetail"""
  node: BasicCarpetSizeDetail!
}

input BasicCarpetSizeDetailFilter {
  and: [BasicCarpetSizeDetailFilter!]
  id: IDFilterComparison
  or: [BasicCarpetSizeDetailFilter!]
}

input BasicCarpetSizeDetailSort {
  direction: SortDirection!
  field: BasicCarpetSizeDetailSortFields!
  nulls: SortNulls
}

enum BasicCarpetSizeDetailSortFields {
  id
}

input BasicCarpetSizeDetailUpdateFilter {
  and: [BasicCarpetSizeDetailUpdateFilter!]
  id: IDFilterComparison
  or: [BasicCarpetSizeDetailUpdateFilter!]
}

input BasicCarpetSizeDomain {
  altText: String
  altTextEn: String
  basicCarpetSizeDetails: [BasicCarpetSizeDetailDomain!]!
  campaignFreeOfferSizes: [CampaignFreeOfferSizeDomain!]!
  carpetVolume: Float = 0
  code: String!
  couponSubjects: [CouponSubjectDomain!]!
  createdAt: DateTime! = "2025-04-19T11:22:46.070Z"
  description: String
  descriptionEn: String
  designersProductPriceRanges: [DesignersProductPriceRangeDomain!]!
  discountSubjects: [DiscountSubjectDomain!]!
  homepageImageId: Float
  id: ID!
  image: ImageDomain!
  imageId: Float
  isActive: Boolean! = true
  length: Float!
  lengthText: String
  metaTags: String
  metaTagsEn: String
  mobileImage: ImageDomain!
  mobileImageId: Float
  padVolume: Float = 0
  pageTitle: String
  pageTitleEn: String
  priceGroupSizes: [PriceGroupSizeDomain!]!
  productionPads: [ProductionPadDomain!]!
  products: [ProductDomain!]!
  ripTemplateItems: [RipTemplateItemDomain!]!
  sizeText: String
  sizeTextEn: String
  sortOrder: Float
  subproducts: [SubproductDomain!]!
  title: String!
  titleEn: String
  torobProducts: [TorobProductDomain!]!
  unitRatio: Float!
  updatedAt: DateTime!
  urlSlug: String
  urlSlugEn: String
  viewCounter: Float! = 0
  width: Float!
  widthText: String
}

type BasicCarpetSizeEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the BasicCarpetSize"""
  node: BasicCarpetSize!
}

input BasicCarpetSizeFilter {
  and: [BasicCarpetSizeFilter!]
  id: IDFilterComparison
  or: [BasicCarpetSizeFilter!]
}

input BasicCarpetSizeSort {
  direction: SortDirection!
  field: BasicCarpetSizeSortFields!
  nulls: SortNulls
}

enum BasicCarpetSizeSortFields {
  id
}

input BasicCarpetSizeUpdateFilter {
  and: [BasicCarpetSizeUpdateFilter!]
  id: IDFilterComparison
  or: [BasicCarpetSizeUpdateFilter!]
}

type BasicCarpetType {
  code: String!
  createdAt: DateTime!
  id: ID!
  isActive: Boolean!
  sortOrder: Float
  subproducts: [Subproduct!]!
  title: String!
  updatedAt: DateTime!
}

type BasicCarpetTypeConnection {
  """Array of edges."""
  edges: [BasicCarpetTypeEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input BasicCarpetTypeDeleteFilter {
  and: [BasicCarpetTypeDeleteFilter!]
  id: IDFilterComparison
  or: [BasicCarpetTypeDeleteFilter!]
}

type BasicCarpetTypeDeleteResponse {
  code: String
  createdAt: DateTime
  id: ID
  isActive: Boolean
  sortOrder: Float
  subproducts: [Subproduct!]
  title: String
  updatedAt: DateTime
}

input BasicCarpetTypeDomain {
  code: String!
  createdAt: DateTime! = "2025-04-19T11:22:46.047Z"
  id: ID!
  isActive: Boolean! = true
  sortOrder: Float
  subproducts: [SubproductDomain!]!
  title: String!
  updatedAt: DateTime!
}

type BasicCarpetTypeEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the BasicCarpetType"""
  node: BasicCarpetType!
}

input BasicCarpetTypeFilter {
  and: [BasicCarpetTypeFilter!]
  id: IDFilterComparison
  or: [BasicCarpetTypeFilter!]
}

input BasicCarpetTypeSort {
  direction: SortDirection!
  field: BasicCarpetTypeSortFields!
  nulls: SortNulls
}

enum BasicCarpetTypeSortFields {
  id
}

input BasicCarpetTypeUpdateFilter {
  and: [BasicCarpetTypeUpdateFilter!]
  id: IDFilterComparison
  or: [BasicCarpetTypeUpdateFilter!]
}

type Border {
  code: String!
  count: Float
  id: ID!
}

type BorderConnection {
  """Array of edges."""
  edges: [BorderEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input BorderDeleteFilter {
  and: [BorderDeleteFilter!]
  id: IDFilterComparison
  or: [BorderDeleteFilter!]
}

type BorderDeleteResponse {
  code: String
  count: Float
  id: ID
}

input BorderDomain {
  code: String!
  count: Float
  id: ID!
}

type BorderEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Border"""
  node: Border!
}

input BorderFilter {
  and: [BorderFilter!]
  id: IDFilterComparison
  or: [BorderFilter!]
}

input BorderSort {
  direction: SortDirection!
  field: BorderSortFields!
  nulls: SortNulls
}

enum BorderSortFields {
  id
}

input BorderUpdateFilter {
  and: [BorderUpdateFilter!]
  id: IDFilterComparison
  or: [BorderUpdateFilter!]
}

type CampaignFreeOffer {
  campaignFreeOfferSizes: [CampaignFreeOfferSize!]!
  createdAt: DateTime
  id: ID!
  isActive: Boolean!
  minPrice: String!
  updatedAt: DateTime
}

type CampaignFreeOfferConnection {
  """Array of edges."""
  edges: [CampaignFreeOfferEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input CampaignFreeOfferDeleteFilter {
  and: [CampaignFreeOfferDeleteFilter!]
  id: IDFilterComparison
  or: [CampaignFreeOfferDeleteFilter!]
}

type CampaignFreeOfferDeleteResponse {
  campaignFreeOfferSizes: [CampaignFreeOfferSize!]
  createdAt: DateTime
  id: ID
  isActive: Boolean
  minPrice: String
  updatedAt: DateTime
}

input CampaignFreeOfferDomain {
  campaignFreeOfferSizes: [CampaignFreeOfferSizeDomain!]!
  createdAt: DateTime
  id: ID!
  isActive: Boolean! = true
  minPrice: String!
  updatedAt: DateTime
}

type CampaignFreeOfferEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the CampaignFreeOffer"""
  node: CampaignFreeOffer!
}

input CampaignFreeOfferFilter {
  and: [CampaignFreeOfferFilter!]
  id: IDFilterComparison
  or: [CampaignFreeOfferFilter!]
}

type CampaignFreeOfferSize {
  basicCarpetSize: BasicCarpetSize!
  basicCarpetSizeId: Float!
  campaignFreeOffer: CampaignFreeOffer!
  campaignFreeOfferId: Float!
  createdAt: DateTime
  id: ID!
  updatedAt: DateTime
}

type CampaignFreeOfferSizeConnection {
  """Array of edges."""
  edges: [CampaignFreeOfferSizeEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input CampaignFreeOfferSizeDeleteFilter {
  and: [CampaignFreeOfferSizeDeleteFilter!]
  id: IDFilterComparison
  or: [CampaignFreeOfferSizeDeleteFilter!]
}

type CampaignFreeOfferSizeDeleteResponse {
  basicCarpetSize: BasicCarpetSize
  basicCarpetSizeId: Float
  campaignFreeOffer: CampaignFreeOffer
  campaignFreeOfferId: Float
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
}

input CampaignFreeOfferSizeDomain {
  basicCarpetSize: BasicCarpetSizeDomain!
  basicCarpetSizeId: Float!
  campaignFreeOffer: CampaignFreeOfferDomain!
  campaignFreeOfferId: Float!
  createdAt: DateTime
  id: ID!
  updatedAt: DateTime
}

type CampaignFreeOfferSizeEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the CampaignFreeOfferSize"""
  node: CampaignFreeOfferSize!
}

input CampaignFreeOfferSizeFilter {
  and: [CampaignFreeOfferSizeFilter!]
  id: IDFilterComparison
  or: [CampaignFreeOfferSizeFilter!]
}

input CampaignFreeOfferSizeSort {
  direction: SortDirection!
  field: CampaignFreeOfferSizeSortFields!
  nulls: SortNulls
}

enum CampaignFreeOfferSizeSortFields {
  id
}

input CampaignFreeOfferSizeUpdateFilter {
  and: [CampaignFreeOfferSizeUpdateFilter!]
  id: IDFilterComparison
  or: [CampaignFreeOfferSizeUpdateFilter!]
}

input CampaignFreeOfferSort {
  direction: SortDirection!
  field: CampaignFreeOfferSortFields!
  nulls: SortNulls
}

enum CampaignFreeOfferSortFields {
  id
}

input CampaignFreeOfferUpdateFilter {
  and: [CampaignFreeOfferUpdateFilter!]
  id: IDFilterComparison
  or: [CampaignFreeOfferUpdateFilter!]
}

type CampaignGoldCoinSub {
  createdAt: DateTime
  id: ID!
  updatedAt: DateTime
  user: User
  userId: Float!
}

type CampaignGoldCoinSubConnection {
  """Array of edges."""
  edges: [CampaignGoldCoinSubEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input CampaignGoldCoinSubDeleteFilter {
  and: [CampaignGoldCoinSubDeleteFilter!]
  id: IDFilterComparison
  or: [CampaignGoldCoinSubDeleteFilter!]
}

type CampaignGoldCoinSubDeleteResponse {
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
  user: User
  userId: Float
}

input CampaignGoldCoinSubDomain {
  createdAt: DateTime
  id: ID!
  updatedAt: DateTime
  user: UserDomain
  userId: Float!
}

type CampaignGoldCoinSubEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the CampaignGoldCoinSub"""
  node: CampaignGoldCoinSub!
}

input CampaignGoldCoinSubFilter {
  and: [CampaignGoldCoinSubFilter!]
  id: IDFilterComparison
  or: [CampaignGoldCoinSubFilter!]
}

input CampaignGoldCoinSubSort {
  direction: SortDirection!
  field: CampaignGoldCoinSubSortFields!
  nulls: SortNulls
}

enum CampaignGoldCoinSubSortFields {
  id
}

input CampaignGoldCoinSubUpdateFilter {
  and: [CampaignGoldCoinSubUpdateFilter!]
  id: IDFilterComparison
  or: [CampaignGoldCoinSubUpdateFilter!]
}

type CampaignInstagramFollow {
  answerNo: Int
  birthYear: Int
  createdAt: DateTime
  id: ID!
  image1: String
  image2: String
  name: String!
  phone: String!
  phoneVerified: Boolean!
  sex: Int
  updatedAt: DateTime
  user: User!
  userId: Int
  verificationCode: String
}

type CampaignInstagramFollowConnection {
  """Array of edges."""
  edges: [CampaignInstagramFollowEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input CampaignInstagramFollowDeleteFilter {
  and: [CampaignInstagramFollowDeleteFilter!]
  id: IDFilterComparison
  or: [CampaignInstagramFollowDeleteFilter!]
}

type CampaignInstagramFollowDeleteResponse {
  answerNo: Int
  birthYear: Int
  createdAt: DateTime
  id: ID
  image1: String
  image2: String
  name: String
  phone: String
  phoneVerified: Boolean
  sex: Int
  updatedAt: DateTime
  user: User
  userId: Int
  verificationCode: String
}

input CampaignInstagramFollowDomain {
  answerNo: Int
  birthYear: Int
  createdAt: DateTime
  id: ID!
  image1: String
  image2: String
  name: String!
  phone: String!
  phoneVerified: Boolean!
  sex: Int
  updatedAt: DateTime
  user: UserDomain!
  userId: Int
  verificationCode: String
}

type CampaignInstagramFollowEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the CampaignInstagramFollow"""
  node: CampaignInstagramFollow!
}

input CampaignInstagramFollowFilter {
  and: [CampaignInstagramFollowFilter!]
  id: IDFilterComparison
  or: [CampaignInstagramFollowFilter!]
}

input CampaignInstagramFollowSort {
  direction: SortDirection!
  field: CampaignInstagramFollowSortFields!
  nulls: SortNulls
}

enum CampaignInstagramFollowSortFields {
  id
}

input CampaignInstagramFollowUpdateFilter {
  and: [CampaignInstagramFollowUpdateFilter!]
  id: IDFilterComparison
  or: [CampaignInstagramFollowUpdateFilter!]
}

type CampaignPetForm {
  coupon: Coupon!
  couponId: Float
  createdAt: DateTime
  discountAmount: Float!
  donationAmount: Float!
  filename: String
  id: ID!
  mime: String
  originalFilename: String
  path: String
  petName: String
  updatedAt: DateTime
  user: User!
  userId: Float!
}

type CampaignPetFormConnection {
  """Array of edges."""
  edges: [CampaignPetFormEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input CampaignPetFormDeleteFilter {
  and: [CampaignPetFormDeleteFilter!]
  id: IDFilterComparison
  or: [CampaignPetFormDeleteFilter!]
}

type CampaignPetFormDeleteResponse {
  coupon: Coupon
  couponId: Float
  createdAt: DateTime
  discountAmount: Float
  donationAmount: Float
  filename: String
  id: ID
  mime: String
  originalFilename: String
  path: String
  petName: String
  updatedAt: DateTime
  user: User
  userId: Float
}

input CampaignPetFormDomain {
  coupon: CouponDomain!
  couponId: Float
  createdAt: DateTime
  discountAmount: Float! = 0
  donationAmount: Float! = 0
  filename: String
  id: ID!
  mime: String
  originalFilename: String
  path: String = "/"
  petName: String
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
}

type CampaignPetFormEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the CampaignPetForm"""
  node: CampaignPetForm!
}

input CampaignPetFormFilter {
  and: [CampaignPetFormFilter!]
  id: IDFilterComparison
  or: [CampaignPetFormFilter!]
}

input CampaignPetFormSort {
  direction: SortDirection!
  field: CampaignPetFormSortFields!
  nulls: SortNulls
}

enum CampaignPetFormSortFields {
  id
}

input CampaignPetFormUpdateFilter {
  and: [CampaignPetFormUpdateFilter!]
  id: IDFilterComparison
  or: [CampaignPetFormUpdateFilter!]
}

type CampaignRoomvoImage {
  campaignRoomvoVotes: [CampaignRoomvoVote!]!
  createdAt: DateTime
  filename: String
  id: ID!
  mime: String
  originalFilename: String
  path: String
  updatedAt: DateTime
  user: User!
  userId: Float!
  votesCount: Float!
}

type CampaignRoomvoImageConnection {
  """Array of edges."""
  edges: [CampaignRoomvoImageEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input CampaignRoomvoImageDeleteFilter {
  and: [CampaignRoomvoImageDeleteFilter!]
  id: IDFilterComparison
  or: [CampaignRoomvoImageDeleteFilter!]
}

type CampaignRoomvoImageDeleteResponse {
  campaignRoomvoVotes: [CampaignRoomvoVote!]
  createdAt: DateTime
  filename: String
  id: ID
  mime: String
  originalFilename: String
  path: String
  updatedAt: DateTime
  user: User
  userId: Float
  votesCount: Float
}

input CampaignRoomvoImageDomain {
  campaignRoomvoVotes: [CampaignRoomvoVoteDomain!]!
  createdAt: DateTime
  filename: String
  id: ID!
  mime: String
  originalFilename: String
  path: String
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
  votesCount: Float! = 0
}

type CampaignRoomvoImageEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the CampaignRoomvoImage"""
  node: CampaignRoomvoImage!
}

input CampaignRoomvoImageFilter {
  and: [CampaignRoomvoImageFilter!]
  id: IDFilterComparison
  or: [CampaignRoomvoImageFilter!]
}

input CampaignRoomvoImageSort {
  direction: SortDirection!
  field: CampaignRoomvoImageSortFields!
  nulls: SortNulls
}

enum CampaignRoomvoImageSortFields {
  id
}

input CampaignRoomvoImageUpdateFilter {
  and: [CampaignRoomvoImageUpdateFilter!]
  id: IDFilterComparison
  or: [CampaignRoomvoImageUpdateFilter!]
}

type CampaignRoomvoVote {
  campaignRoomvoImage: CampaignRoomvoImage!
  campaignRoomvoImageId: Float!
  createdAt: DateTime
  id: ID!
  updatedAt: DateTime
  user: User!
  userId: Float!
}

type CampaignRoomvoVoteConnection {
  """Array of edges."""
  edges: [CampaignRoomvoVoteEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input CampaignRoomvoVoteDeleteFilter {
  and: [CampaignRoomvoVoteDeleteFilter!]
  id: IDFilterComparison
  or: [CampaignRoomvoVoteDeleteFilter!]
}

type CampaignRoomvoVoteDeleteResponse {
  campaignRoomvoImage: CampaignRoomvoImage
  campaignRoomvoImageId: Float
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
  user: User
  userId: Float
}

input CampaignRoomvoVoteDomain {
  campaignRoomvoImage: CampaignRoomvoImageDomain!
  campaignRoomvoImageId: Float!
  createdAt: DateTime
  id: ID!
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
}

type CampaignRoomvoVoteEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the CampaignRoomvoVote"""
  node: CampaignRoomvoVote!
}

input CampaignRoomvoVoteFilter {
  and: [CampaignRoomvoVoteFilter!]
  id: IDFilterComparison
  or: [CampaignRoomvoVoteFilter!]
}

input CampaignRoomvoVoteSort {
  direction: SortDirection!
  field: CampaignRoomvoVoteSortFields!
  nulls: SortNulls
}

enum CampaignRoomvoVoteSortFields {
  id
}

input CampaignRoomvoVoteUpdateFilter {
  and: [CampaignRoomvoVoteUpdateFilter!]
  id: IDFilterComparison
  or: [CampaignRoomvoVoteUpdateFilter!]
}

type CampaignSubscription {
  campaignName: String
  code: Int
  createdAt: DateTime
  id: ID!
  updatedAt: DateTime
  user: User!
  userId: Int!
}

type CampaignSubscriptionConnection {
  """Array of edges."""
  edges: [CampaignSubscriptionEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input CampaignSubscriptionDeleteFilter {
  and: [CampaignSubscriptionDeleteFilter!]
  id: IDFilterComparison
  or: [CampaignSubscriptionDeleteFilter!]
}

type CampaignSubscriptionDeleteResponse {
  campaignName: String
  code: Int
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
  user: User
  userId: Int
}

input CampaignSubscriptionDomain {
  campaignName: String
  code: Int
  createdAt: DateTime
  id: ID!
  updatedAt: DateTime
  user: UserDomain!
  userId: Int!
}

type CampaignSubscriptionEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the CampaignSubscription"""
  node: CampaignSubscription!
}

input CampaignSubscriptionFilter {
  and: [CampaignSubscriptionFilter!]
  id: IDFilterComparison
  or: [CampaignSubscriptionFilter!]
}

input CampaignSubscriptionSort {
  direction: SortDirection!
  field: CampaignSubscriptionSortFields!
  nulls: SortNulls
}

enum CampaignSubscriptionSortFields {
  id
}

input CampaignSubscriptionUpdateFilter {
  and: [CampaignSubscriptionUpdateFilter!]
  id: IDFilterComparison
  or: [CampaignSubscriptionUpdateFilter!]
}

type CampaignUefaEuroSubscriber {
  campaignUefaEuroSubscriberHistories: [CampaignUefaEuroSubscriberHistory!]!
  contactFormStatus: ContactFormStatus!
  contactFormStatusId: Float!
  createdAt: DateTime
  id: ID!
  mobile: String!
  status: Float!
  updatedAt: DateTime
  user: User!
  userId: Float
}

type CampaignUefaEuroSubscriberConnection {
  """Array of edges."""
  edges: [CampaignUefaEuroSubscriberEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input CampaignUefaEuroSubscriberDeleteFilter {
  and: [CampaignUefaEuroSubscriberDeleteFilter!]
  id: IDFilterComparison
  or: [CampaignUefaEuroSubscriberDeleteFilter!]
}

type CampaignUefaEuroSubscriberDeleteResponse {
  campaignUefaEuroSubscriberHistories: [CampaignUefaEuroSubscriberHistory!]
  contactFormStatus: ContactFormStatus
  contactFormStatusId: Float
  createdAt: DateTime
  id: ID
  mobile: String
  status: Float
  updatedAt: DateTime
  user: User
  userId: Float
}

input CampaignUefaEuroSubscriberDomain {
  campaignUefaEuroSubscriberHistories: [CampaignUefaEuroSubscriberHistoryDomain!]!
  contactFormStatus: ContactFormStatusDomain!
  contactFormStatusId: Float! = 1
  createdAt: DateTime
  id: ID!
  mobile: String!
  status: Float! = 1
  updatedAt: DateTime
  user: UserDomain!
  userId: Float
}

type CampaignUefaEuroSubscriberEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the CampaignUefaEuroSubscriber"""
  node: CampaignUefaEuroSubscriber!
}

input CampaignUefaEuroSubscriberFilter {
  and: [CampaignUefaEuroSubscriberFilter!]
  id: IDFilterComparison
  or: [CampaignUefaEuroSubscriberFilter!]
}

type CampaignUefaEuroSubscriberHistory {
  campaignUefaEuroSubscriber: CampaignUefaEuroSubscriber!
  campaignUefaEuroSubscriberId: Float!
  comment: String
  contactFormStatus: ContactFormStatus!
  contactFormStatusId: Float!
  createdAt: DateTime
  id: ID!
  updatedAt: DateTime
  user: User!
  userId: Float
}

type CampaignUefaEuroSubscriberHistoryConnection {
  """Array of edges."""
  edges: [CampaignUefaEuroSubscriberHistoryEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input CampaignUefaEuroSubscriberHistoryDeleteFilter {
  and: [CampaignUefaEuroSubscriberHistoryDeleteFilter!]
  id: IDFilterComparison
  or: [CampaignUefaEuroSubscriberHistoryDeleteFilter!]
}

type CampaignUefaEuroSubscriberHistoryDeleteResponse {
  campaignUefaEuroSubscriber: CampaignUefaEuroSubscriber
  campaignUefaEuroSubscriberId: Float
  comment: String
  contactFormStatus: ContactFormStatus
  contactFormStatusId: Float
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
  user: User
  userId: Float
}

input CampaignUefaEuroSubscriberHistoryDomain {
  campaignUefaEuroSubscriber: CampaignUefaEuroSubscriberDomain!
  campaignUefaEuroSubscriberId: Float!
  comment: String
  contactFormStatus: ContactFormStatusDomain!
  contactFormStatusId: Float!
  createdAt: DateTime
  id: ID!
  updatedAt: DateTime
  user: UserDomain!
  userId: Float
}

type CampaignUefaEuroSubscriberHistoryEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the CampaignUefaEuroSubscriberHistory"""
  node: CampaignUefaEuroSubscriberHistory!
}

input CampaignUefaEuroSubscriberHistoryFilter {
  and: [CampaignUefaEuroSubscriberHistoryFilter!]
  id: IDFilterComparison
  or: [CampaignUefaEuroSubscriberHistoryFilter!]
}

input CampaignUefaEuroSubscriberHistorySort {
  direction: SortDirection!
  field: CampaignUefaEuroSubscriberHistorySortFields!
  nulls: SortNulls
}

enum CampaignUefaEuroSubscriberHistorySortFields {
  id
}

input CampaignUefaEuroSubscriberHistoryUpdateFilter {
  and: [CampaignUefaEuroSubscriberHistoryUpdateFilter!]
  id: IDFilterComparison
  or: [CampaignUefaEuroSubscriberHistoryUpdateFilter!]
}

input CampaignUefaEuroSubscriberSort {
  direction: SortDirection!
  field: CampaignUefaEuroSubscriberSortFields!
  nulls: SortNulls
}

enum CampaignUefaEuroSubscriberSortFields {
  id
}

input CampaignUefaEuroSubscriberUpdateFilter {
  and: [CampaignUefaEuroSubscriberUpdateFilter!]
  id: IDFilterComparison
  or: [CampaignUefaEuroSubscriberUpdateFilter!]
}

type CampaignVotingImage {
  campaignNo: Float!
  createdAt: DateTime
  id: ID!
  image: Image!
  imageId: Float
  isActive: Boolean!
  sortOrder: Float!
  title: String!
  updatedAt: DateTime
}

type CampaignVotingImageConnection {
  """Array of edges."""
  edges: [CampaignVotingImageEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input CampaignVotingImageDeleteFilter {
  and: [CampaignVotingImageDeleteFilter!]
  id: IDFilterComparison
  or: [CampaignVotingImageDeleteFilter!]
}

type CampaignVotingImageDeleteResponse {
  campaignNo: Float
  createdAt: DateTime
  id: ID
  image: Image
  imageId: Float
  isActive: Boolean
  sortOrder: Float
  title: String
  updatedAt: DateTime
}

input CampaignVotingImageDomain {
  campaignNo: Float!
  createdAt: DateTime
  id: ID!
  image: ImageDomain!
  imageId: Float
  isActive: Boolean! = true
  sortOrder: Float! = 1
  title: String!
  updatedAt: DateTime
}

type CampaignVotingImageEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the CampaignVotingImage"""
  node: CampaignVotingImage!
}

input CampaignVotingImageFilter {
  and: [CampaignVotingImageFilter!]
  id: IDFilterComparison
  or: [CampaignVotingImageFilter!]
}

input CampaignVotingImageSort {
  direction: SortDirection!
  field: CampaignVotingImageSortFields!
  nulls: SortNulls
}

enum CampaignVotingImageSortFields {
  id
}

input CampaignVotingImageUpdateFilter {
  and: [CampaignVotingImageUpdateFilter!]
  id: IDFilterComparison
  or: [CampaignVotingImageUpdateFilter!]
}

type CampaignVotingImageUser {
  chargedAmount: String!
  createdAt: DateTime
  id: ID!
  updatedAt: DateTime
  user: User!
  userId: Float!
  votedCampaignImageIds: String
  walletCharged: Boolean!
}

type CampaignVotingImageUserConnection {
  """Array of edges."""
  edges: [CampaignVotingImageUserEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input CampaignVotingImageUserDeleteFilter {
  and: [CampaignVotingImageUserDeleteFilter!]
  id: IDFilterComparison
  or: [CampaignVotingImageUserDeleteFilter!]
}

type CampaignVotingImageUserDeleteResponse {
  chargedAmount: String
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
  user: User
  userId: Float
  votedCampaignImageIds: String
  walletCharged: Boolean
}

input CampaignVotingImageUserDomain {
  chargedAmount: String! = "0.00"
  createdAt: DateTime
  id: ID!
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
  votedCampaignImageIds: String
  walletCharged: Boolean! = false
}

type CampaignVotingImageUserEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the CampaignVotingImageUser"""
  node: CampaignVotingImageUser!
}

input CampaignVotingImageUserFilter {
  and: [CampaignVotingImageUserFilter!]
  id: IDFilterComparison
  or: [CampaignVotingImageUserFilter!]
}

input CampaignVotingImageUserSort {
  direction: SortDirection!
  field: CampaignVotingImageUserSortFields!
  nulls: SortNulls
}

enum CampaignVotingImageUserSortFields {
  id
}

input CampaignVotingImageUserUpdateFilter {
  and: [CampaignVotingImageUserUpdateFilter!]
  id: IDFilterComparison
  or: [CampaignVotingImageUserUpdateFilter!]
}

type CarpetFeature {
  carpetFeatureUsers: [CarpetFeatureUser!]!
  createdAt: DateTime
  id: ID!
  isActive: Boolean!
  sortOrder: Float
  title: String!
  updatedAt: DateTime
}

type CarpetFeatureConnection {
  """Array of edges."""
  edges: [CarpetFeatureEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input CarpetFeatureDeleteFilter {
  and: [CarpetFeatureDeleteFilter!]
  id: IDFilterComparison
  or: [CarpetFeatureDeleteFilter!]
}

type CarpetFeatureDeleteResponse {
  carpetFeatureUsers: [CarpetFeatureUser!]
  createdAt: DateTime
  id: ID
  isActive: Boolean
  sortOrder: Float
  title: String
  updatedAt: DateTime
}

input CarpetFeatureDomain {
  carpetFeatureUsers: [CarpetFeatureUserDomain!]!
  createdAt: DateTime
  id: ID!
  isActive: Boolean! = true
  sortOrder: Float
  title: String!
  updatedAt: DateTime
}

type CarpetFeatureEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the CarpetFeature"""
  node: CarpetFeature!
}

input CarpetFeatureFilter {
  and: [CarpetFeatureFilter!]
  id: IDFilterComparison
  or: [CarpetFeatureFilter!]
}

input CarpetFeatureSort {
  direction: SortDirection!
  field: CarpetFeatureSortFields!
  nulls: SortNulls
}

enum CarpetFeatureSortFields {
  id
}

input CarpetFeatureUpdateFilter {
  and: [CarpetFeatureUpdateFilter!]
  id: IDFilterComparison
  or: [CarpetFeatureUpdateFilter!]
}

type CarpetFeatureUser {
  carpetFeature: CarpetFeature!
  carpetFeatureId: Float!
  createdAt: DateTime
  id: ID!
  updatedAt: DateTime
  user: User!
  userId: Float!
}

type CarpetFeatureUserConnection {
  """Array of edges."""
  edges: [CarpetFeatureUserEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input CarpetFeatureUserDeleteFilter {
  and: [CarpetFeatureUserDeleteFilter!]
  id: IDFilterComparison
  or: [CarpetFeatureUserDeleteFilter!]
}

type CarpetFeatureUserDeleteResponse {
  carpetFeature: CarpetFeature
  carpetFeatureId: Float
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
  user: User
  userId: Float
}

input CarpetFeatureUserDomain {
  carpetFeature: CarpetFeatureDomain!
  carpetFeatureId: Float!
  createdAt: DateTime
  id: ID!
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
}

type CarpetFeatureUserEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the CarpetFeatureUser"""
  node: CarpetFeatureUser!
}

input CarpetFeatureUserFilter {
  and: [CarpetFeatureUserFilter!]
  id: IDFilterComparison
  or: [CarpetFeatureUserFilter!]
}

input CarpetFeatureUserSort {
  direction: SortDirection!
  field: CarpetFeatureUserSortFields!
  nulls: SortNulls
}

enum CarpetFeatureUserSortFields {
  id
}

input CarpetFeatureUserUpdateFilter {
  and: [CarpetFeatureUserUpdateFilter!]
  id: IDFilterComparison
  or: [CarpetFeatureUserUpdateFilter!]
}

type CarpetMaterial {
  createdAt: DateTime
  designs: [Design!]!
  id: ID!
  isActive: Boolean!
  name: String!
  pricePerInch: Float!
  sortOrder: Float
  updatedAt: DateTime
}

type CarpetMaterialConnection {
  """Array of edges."""
  edges: [CarpetMaterialEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input CarpetMaterialDeleteFilter {
  and: [CarpetMaterialDeleteFilter!]
  id: IDFilterComparison
  or: [CarpetMaterialDeleteFilter!]
}

type CarpetMaterialDeleteResponse {
  createdAt: DateTime
  designs: [Design!]
  id: ID
  isActive: Boolean
  name: String
  pricePerInch: Float
  sortOrder: Float
  updatedAt: DateTime
}

input CarpetMaterialDomain {
  createdAt: DateTime
  designs: [DesignDomain!]!
  id: ID!
  isActive: Boolean! = true
  name: String!
  pricePerInch: Float!
  sortOrder: Float
  updatedAt: DateTime
}

type CarpetMaterialEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the CarpetMaterial"""
  node: CarpetMaterial!
}

input CarpetMaterialFilter {
  and: [CarpetMaterialFilter!]
  id: IDFilterComparison
  or: [CarpetMaterialFilter!]
}

input CarpetMaterialSort {
  direction: SortDirection!
  field: CarpetMaterialSortFields!
  nulls: SortNulls
}

enum CarpetMaterialSortFields {
  id
}

input CarpetMaterialUpdateFilter {
  and: [CarpetMaterialUpdateFilter!]
  id: IDFilterComparison
  or: [CarpetMaterialUpdateFilter!]
}

type CarpetShape {
  createdAt: DateTime
  designs: [Design!]!
  hasLength: Boolean!
  id: ID!
  isActive: Boolean!
  maxLength: Float!
  maxWidth: Float!
  minLength: Float!
  minWidth: Float!
  name: String!
  sortOrder: Float
  updatedAt: DateTime
}

type CarpetShapeConnection {
  """Array of edges."""
  edges: [CarpetShapeEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input CarpetShapeDeleteFilter {
  and: [CarpetShapeDeleteFilter!]
  id: IDFilterComparison
  or: [CarpetShapeDeleteFilter!]
}

type CarpetShapeDeleteResponse {
  createdAt: DateTime
  designs: [Design!]
  hasLength: Boolean
  id: ID
  isActive: Boolean
  maxLength: Float
  maxWidth: Float
  minLength: Float
  minWidth: Float
  name: String
  sortOrder: Float
  updatedAt: DateTime
}

input CarpetShapeDomain {
  createdAt: DateTime
  designs: [DesignDomain!]!
  hasLength: Boolean! = true
  id: ID!
  isActive: Boolean! = true
  maxLength: Float!
  maxWidth: Float!
  minLength: Float!
  minWidth: Float!
  name: String!
  sortOrder: Float
  updatedAt: DateTime
}

type CarpetShapeEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the CarpetShape"""
  node: CarpetShape!
}

input CarpetShapeFilter {
  and: [CarpetShapeFilter!]
  id: IDFilterComparison
  or: [CarpetShapeFilter!]
}

input CarpetShapeSort {
  direction: SortDirection!
  field: CarpetShapeSortFields!
  nulls: SortNulls
}

enum CarpetShapeSortFields {
  id
}

input CarpetShapeUpdateFilter {
  and: [CarpetShapeUpdateFilter!]
  id: IDFilterComparison
  or: [CarpetShapeUpdateFilter!]
}

type CarpetSize {
  createdAt: DateTime
  id: ID!
  isActive: Boolean!
  length: Float!
  sortOrder: Float
  updatedAt: DateTime
  width: Float!
}

type CarpetSizeConnection {
  """Array of edges."""
  edges: [CarpetSizeEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input CarpetSizeDeleteFilter {
  and: [CarpetSizeDeleteFilter!]
  id: IDFilterComparison
  or: [CarpetSizeDeleteFilter!]
}

type CarpetSizeDeleteResponse {
  createdAt: DateTime
  id: ID
  isActive: Boolean
  length: Float
  sortOrder: Float
  updatedAt: DateTime
  width: Float
}

input CarpetSizeDomain {
  createdAt: DateTime
  id: ID!
  isActive: Boolean! = true
  length: Float!
  sortOrder: Float
  updatedAt: DateTime
  width: Float!
}

type CarpetSizeEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the CarpetSize"""
  node: CarpetSize!
}

input CarpetSizeFilter {
  and: [CarpetSizeFilter!]
  id: IDFilterComparison
  or: [CarpetSizeFilter!]
}

input CarpetSizeSort {
  direction: SortDirection!
  field: CarpetSizeSortFields!
  nulls: SortNulls
}

enum CarpetSizeSortFields {
  id
}

input CarpetSizeUpdateFilter {
  and: [CarpetSizeUpdateFilter!]
  id: IDFilterComparison
  or: [CarpetSizeUpdateFilter!]
}

type CarpetUsagePlace {
  carpetUsagePlaceInvoiceProducts: [CarpetUsagePlaceInvoiceProduct!]!
  carpetUsagePlaceUsers: [CarpetUsagePlaceUser!]!
  createdAt: DateTime
  id: ID!
  isActive: Boolean!
  sortOrder: Float
  title: String!
  updatedAt: DateTime
}

type CarpetUsagePlaceConnection {
  """Array of edges."""
  edges: [CarpetUsagePlaceEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input CarpetUsagePlaceDeleteFilter {
  and: [CarpetUsagePlaceDeleteFilter!]
  id: IDFilterComparison
  or: [CarpetUsagePlaceDeleteFilter!]
}

type CarpetUsagePlaceDeleteResponse {
  carpetUsagePlaceInvoiceProducts: [CarpetUsagePlaceInvoiceProduct!]
  carpetUsagePlaceUsers: [CarpetUsagePlaceUser!]
  createdAt: DateTime
  id: ID
  isActive: Boolean
  sortOrder: Float
  title: String
  updatedAt: DateTime
}

input CarpetUsagePlaceDomain {
  carpetUsagePlaceInvoiceProducts: [CarpetUsagePlaceInvoiceProductDomain!]!
  carpetUsagePlaceUsers: [CarpetUsagePlaceUserDomain!]!
  createdAt: DateTime
  id: ID!
  isActive: Boolean! = true
  sortOrder: Float
  title: String!
  updatedAt: DateTime
}

type CarpetUsagePlaceEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the CarpetUsagePlace"""
  node: CarpetUsagePlace!
}

input CarpetUsagePlaceFilter {
  and: [CarpetUsagePlaceFilter!]
  id: IDFilterComparison
  or: [CarpetUsagePlaceFilter!]
}

type CarpetUsagePlaceInvoiceProduct {
  carpetUsagePlace: CarpetUsagePlace!
  carpetUsagePlaceId: Float!
  createdAt: DateTime
  id: ID!
  invoiceProduct: InvoiceProduct!
  invoiceProductId: Float!
  row: Float!
  updatedAt: DateTime
}

type CarpetUsagePlaceInvoiceProductConnection {
  """Array of edges."""
  edges: [CarpetUsagePlaceInvoiceProductEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input CarpetUsagePlaceInvoiceProductDeleteFilter {
  and: [CarpetUsagePlaceInvoiceProductDeleteFilter!]
  id: IDFilterComparison
  or: [CarpetUsagePlaceInvoiceProductDeleteFilter!]
}

type CarpetUsagePlaceInvoiceProductDeleteResponse {
  carpetUsagePlace: CarpetUsagePlace
  carpetUsagePlaceId: Float
  createdAt: DateTime
  id: ID
  invoiceProduct: InvoiceProduct
  invoiceProductId: Float
  row: Float
  updatedAt: DateTime
}

input CarpetUsagePlaceInvoiceProductDomain {
  carpetUsagePlace: CarpetUsagePlaceDomain!
  carpetUsagePlaceId: Float!
  createdAt: DateTime
  id: ID!
  invoiceProduct: InvoiceProductDomain!
  invoiceProductId: Float!
  row: Float!
  updatedAt: DateTime
}

type CarpetUsagePlaceInvoiceProductEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the CarpetUsagePlaceInvoiceProduct"""
  node: CarpetUsagePlaceInvoiceProduct!
}

input CarpetUsagePlaceInvoiceProductFilter {
  and: [CarpetUsagePlaceInvoiceProductFilter!]
  id: IDFilterComparison
  or: [CarpetUsagePlaceInvoiceProductFilter!]
}

input CarpetUsagePlaceInvoiceProductSort {
  direction: SortDirection!
  field: CarpetUsagePlaceInvoiceProductSortFields!
  nulls: SortNulls
}

enum CarpetUsagePlaceInvoiceProductSortFields {
  id
}

input CarpetUsagePlaceInvoiceProductUpdateFilter {
  and: [CarpetUsagePlaceInvoiceProductUpdateFilter!]
  id: IDFilterComparison
  or: [CarpetUsagePlaceInvoiceProductUpdateFilter!]
}

input CarpetUsagePlaceSort {
  direction: SortDirection!
  field: CarpetUsagePlaceSortFields!
  nulls: SortNulls
}

enum CarpetUsagePlaceSortFields {
  id
}

input CarpetUsagePlaceUpdateFilter {
  and: [CarpetUsagePlaceUpdateFilter!]
  id: IDFilterComparison
  or: [CarpetUsagePlaceUpdateFilter!]
}

type CarpetUsagePlaceUser {
  carpetUsagePlace: CarpetUsagePlace!
  carpetUsagePlaceId: Float!
  createdAt: DateTime
  id: ID!
  updatedAt: DateTime
  user: User!
  userId: Float!
}

type CarpetUsagePlaceUserConnection {
  """Array of edges."""
  edges: [CarpetUsagePlaceUserEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input CarpetUsagePlaceUserDeleteFilter {
  and: [CarpetUsagePlaceUserDeleteFilter!]
  id: IDFilterComparison
  or: [CarpetUsagePlaceUserDeleteFilter!]
}

type CarpetUsagePlaceUserDeleteResponse {
  carpetUsagePlace: CarpetUsagePlace
  carpetUsagePlaceId: Float
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
  user: User
  userId: Float
}

input CarpetUsagePlaceUserDomain {
  carpetUsagePlace: CarpetUsagePlaceDomain!
  carpetUsagePlaceId: Float!
  createdAt: DateTime
  id: ID!
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
}

type CarpetUsagePlaceUserEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the CarpetUsagePlaceUser"""
  node: CarpetUsagePlaceUser!
}

input CarpetUsagePlaceUserFilter {
  and: [CarpetUsagePlaceUserFilter!]
  id: IDFilterComparison
  or: [CarpetUsagePlaceUserFilter!]
}

input CarpetUsagePlaceUserSort {
  direction: SortDirection!
  field: CarpetUsagePlaceUserSortFields!
  nulls: SortNulls
}

enum CarpetUsagePlaceUserSortFields {
  id
}

input CarpetUsagePlaceUserUpdateFilter {
  and: [CarpetUsagePlaceUserUpdateFilter!]
  id: IDFilterComparison
  or: [CarpetUsagePlaceUserUpdateFilter!]
}

type ChaparSettlementStatus {
  createdAt: DateTime
  id: ID!
  invoices: [Invoice!]!
  status: String!
  updatedAt: DateTime
}

type ChaparSettlementStatusConnection {
  """Array of edges."""
  edges: [ChaparSettlementStatusEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ChaparSettlementStatusDeleteFilter {
  and: [ChaparSettlementStatusDeleteFilter!]
  id: IDFilterComparison
  or: [ChaparSettlementStatusDeleteFilter!]
}

type ChaparSettlementStatusDeleteResponse {
  createdAt: DateTime
  id: ID
  invoices: [Invoice!]
  status: String
  updatedAt: DateTime
}

input ChaparSettlementStatusDomain {
  createdAt: DateTime
  id: ID!
  invoices: [InvoiceDomain!]!
  status: String!
  updatedAt: DateTime
}

type ChaparSettlementStatusEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ChaparSettlementStatus"""
  node: ChaparSettlementStatus!
}

input ChaparSettlementStatusFilter {
  and: [ChaparSettlementStatusFilter!]
  id: IDFilterComparison
  or: [ChaparSettlementStatusFilter!]
}

input ChaparSettlementStatusSort {
  direction: SortDirection!
  field: ChaparSettlementStatusSortFields!
  nulls: SortNulls
}

enum ChaparSettlementStatusSortFields {
  id
}

input ChaparSettlementStatusUpdateFilter {
  and: [ChaparSettlementStatusUpdateFilter!]
  id: IDFilterComparison
  or: [ChaparSettlementStatusUpdateFilter!]
}

type ChaparTrackingHistory {
  createdAt: DateTime
  date: String!
  id: ID!
  invoice: Invoice!
  invoiceId: Float!
  reference: String!
  status: String!
  statusNote: String!
  time: String!
  tracking: String!
  updatedAt: DateTime
}

type ChaparTrackingHistoryConnection {
  """Array of edges."""
  edges: [ChaparTrackingHistoryEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ChaparTrackingHistoryDeleteFilter {
  and: [ChaparTrackingHistoryDeleteFilter!]
  id: IDFilterComparison
  or: [ChaparTrackingHistoryDeleteFilter!]
}

type ChaparTrackingHistoryDeleteResponse {
  createdAt: DateTime
  date: String
  id: ID
  invoice: Invoice
  invoiceId: Float
  reference: String
  status: String
  statusNote: String
  time: String
  tracking: String
  updatedAt: DateTime
}

input ChaparTrackingHistoryDomain {
  createdAt: DateTime
  date: String!
  id: ID!
  invoice: InvoiceDomain!
  invoiceId: Float!
  reference: String!
  status: String!
  statusNote: String!
  time: String!
  tracking: String!
  updatedAt: DateTime
}

type ChaparTrackingHistoryEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ChaparTrackingHistory"""
  node: ChaparTrackingHistory!
}

input ChaparTrackingHistoryFilter {
  and: [ChaparTrackingHistoryFilter!]
  id: IDFilterComparison
  or: [ChaparTrackingHistoryFilter!]
}

input ChaparTrackingHistorySort {
  direction: SortDirection!
  field: ChaparTrackingHistorySortFields!
  nulls: SortNulls
}

enum ChaparTrackingHistorySortFields {
  id
}

input ChaparTrackingHistoryUpdateFilter {
  and: [ChaparTrackingHistoryUpdateFilter!]
  id: IDFilterComparison
  or: [ChaparTrackingHistoryUpdateFilter!]
}

type CitiesSepidar {
  cityId: Float
  id: ID!
  name: String
  sepidarStateId: Float
  stateId: Float
  stateName: String
}

type CitiesSepidarConnection {
  """Array of edges."""
  edges: [CitiesSepidarEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input CitiesSepidarDeleteFilter {
  and: [CitiesSepidarDeleteFilter!]
  id: IDFilterComparison
  or: [CitiesSepidarDeleteFilter!]
}

type CitiesSepidarDeleteResponse {
  cityId: Float
  id: ID
  name: String
  sepidarStateId: Float
  stateId: Float
  stateName: String
}

input CitiesSepidarDomain {
  cityId: Float
  id: ID!
  name: String
  sepidarStateId: Float
  stateId: Float
  stateName: String
}

type CitiesSepidarEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the CitiesSepidar"""
  node: CitiesSepidar!
}

input CitiesSepidarFilter {
  and: [CitiesSepidarFilter!]
  id: IDFilterComparison
  or: [CitiesSepidarFilter!]
}

input CitiesSepidarSort {
  direction: SortDirection!
  field: CitiesSepidarSortFields!
  nulls: SortNulls
}

enum CitiesSepidarSortFields {
  id
}

input CitiesSepidarUpdateFilter {
  and: [CitiesSepidarUpdateFilter!]
  id: IDFilterComparison
  or: [CitiesSepidarUpdateFilter!]
}

type City {
  addresses: [Address!]!
  basicCarpetDesigners: [BasicCarpetDesigner!]!
  chaparId: Float
  code: String
  createdAt: DateTime
  id: ID!
  invoiceAddresses: [InvoiceAddress!]!
  mahexCode: String
  name: String!
  returnRequestAddresses: [ReturnRequestAddress!]!
  senderInformations: [SenderInformation!]!
  sepidarId: Float
  state: State!
  stateId: Float!
  tipaxId: Float
  updatedAt: DateTime
}

type City2 {
  id: ID!
  sepidarId: Float
}

type City2Connection {
  """Array of edges."""
  edges: [City2Edge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input City2DeleteFilter {
  and: [City2DeleteFilter!]
  id: IDFilterComparison
  or: [City2DeleteFilter!]
}

type City2DeleteResponse {
  id: ID
  sepidarId: Float
}

input City2Domain {
  id: ID!
  sepidarId: Float
}

type City2Edge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the City2"""
  node: City2!
}

input City2Filter {
  and: [City2Filter!]
  id: IDFilterComparison
  or: [City2Filter!]
}

input City2Sort {
  direction: SortDirection!
  field: City2SortFields!
  nulls: SortNulls
}

enum City2SortFields {
  id
}

input City2UpdateFilter {
  and: [City2UpdateFilter!]
  id: IDFilterComparison
  or: [City2UpdateFilter!]
}

type CityConnection {
  """Array of edges."""
  edges: [CityEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input CityDeleteFilter {
  and: [CityDeleteFilter!]
  id: IDFilterComparison
  or: [CityDeleteFilter!]
}

type CityDeleteResponse {
  addresses: [Address!]
  basicCarpetDesigners: [BasicCarpetDesigner!]
  chaparId: Float
  code: String
  createdAt: DateTime
  id: ID
  invoiceAddresses: [InvoiceAddress!]
  mahexCode: String
  name: String
  returnRequestAddresses: [ReturnRequestAddress!]
  senderInformations: [SenderInformation!]
  sepidarId: Float
  state: State
  stateId: Float
  tipaxId: Float
  updatedAt: DateTime
}

input CityDomain {
  addresses: [AddressDomain!]!
  basicCarpetDesigners: [BasicCarpetDesignerDomain!]!
  chaparId: Float
  code: String
  createdAt: DateTime
  id: ID!
  invoiceAddresses: [InvoiceAddressDomain!]!
  mahexCode: String
  name: String!
  returnRequestAddresses: [ReturnRequestAddressDomain!]!
  senderInformations: [SenderInformationDomain!]!
  sepidarId: Float
  state: StateDomain!
  stateId: Float!
  tipaxId: Float
  updatedAt: DateTime
}

type CityEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the City"""
  node: City!
}

input CityFilter {
  and: [CityFilter!]
  id: IDFilterComparison
  or: [CityFilter!]
}

input CitySort {
  direction: SortDirection!
  field: CitySortFields!
  nulls: SortNulls
}

enum CitySortFields {
  id
}

input CityUpdateFilter {
  and: [CityUpdateFilter!]
  id: IDFilterComparison
  or: [CityUpdateFilter!]
}

type Color {
  colorCode: String
  colorCodeOriginal: String
  colorName: String
  hexCode: String
  id: ID!
  subcolors: [Subcolor!]!
}

type ColorCategory {
  altText: String
  altTextEn: String
  color: String!
  colorCategoryDetails: [ColorCategoryDetail!]!
  colorCategorySubproducts: [ColorCategorySubproduct!]!
  createdAt: DateTime
  description: String
  descriptionEn: String
  homepageImage: Image!
  homepageImageId: Float
  id: ID!
  image: Image!
  imageId: Float
  isActive: Boolean!
  metaTags: String
  metaTagsEn: String
  mobileImage: Image!
  mobileImageId: Float
  name: String!
  nameEn: String
  pageTitle: String
  pageTitleEn: String
  sortOrder: Float
  updatedAt: DateTime
  urlSlug: String
  urlSlugEn: String
  viewCounter: Float!
}

type ColorCategoryConnection {
  """Array of edges."""
  edges: [ColorCategoryEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ColorCategoryDeleteFilter {
  and: [ColorCategoryDeleteFilter!]
  id: IDFilterComparison
  or: [ColorCategoryDeleteFilter!]
}

type ColorCategoryDeleteResponse {
  altText: String
  altTextEn: String
  color: String
  colorCategoryDetails: [ColorCategoryDetail!]
  colorCategorySubproducts: [ColorCategorySubproduct!]
  createdAt: DateTime
  description: String
  descriptionEn: String
  homepageImage: Image
  homepageImageId: Float
  id: ID
  image: Image
  imageId: Float
  isActive: Boolean
  metaTags: String
  metaTagsEn: String
  mobileImage: Image
  mobileImageId: Float
  name: String
  nameEn: String
  pageTitle: String
  pageTitleEn: String
  sortOrder: Float
  updatedAt: DateTime
  urlSlug: String
  urlSlugEn: String
  viewCounter: Float
}

type ColorCategoryDetail {
  colorCategory: ColorCategory!
  colorCategoryId: Float
  createdAt: DateTime
  detailText: String
  detailTextEn: String
  id: ID!
  isActive: Boolean!
  sortOrder: Float
  title: String
  titleEn: String
  updatedAt: DateTime
}

type ColorCategoryDetailConnection {
  """Array of edges."""
  edges: [ColorCategoryDetailEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ColorCategoryDetailDeleteFilter {
  and: [ColorCategoryDetailDeleteFilter!]
  id: IDFilterComparison
  or: [ColorCategoryDetailDeleteFilter!]
}

type ColorCategoryDetailDeleteResponse {
  colorCategory: ColorCategory
  colorCategoryId: Float
  createdAt: DateTime
  detailText: String
  detailTextEn: String
  id: ID
  isActive: Boolean
  sortOrder: Float
  title: String
  titleEn: String
  updatedAt: DateTime
}

input ColorCategoryDetailDomain {
  colorCategory: ColorCategoryDomain!
  colorCategoryId: Float
  createdAt: DateTime
  detailText: String
  detailTextEn: String
  id: ID!
  isActive: Boolean!
  sortOrder: Float
  title: String
  titleEn: String
  updatedAt: DateTime
}

type ColorCategoryDetailEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ColorCategoryDetail"""
  node: ColorCategoryDetail!
}

input ColorCategoryDetailFilter {
  and: [ColorCategoryDetailFilter!]
  id: IDFilterComparison
  or: [ColorCategoryDetailFilter!]
}

input ColorCategoryDetailSort {
  direction: SortDirection!
  field: ColorCategoryDetailSortFields!
  nulls: SortNulls
}

enum ColorCategoryDetailSortFields {
  id
}

input ColorCategoryDetailUpdateFilter {
  and: [ColorCategoryDetailUpdateFilter!]
  id: IDFilterComparison
  or: [ColorCategoryDetailUpdateFilter!]
}

input ColorCategoryDomain {
  altText: String
  altTextEn: String
  color: String!
  colorCategoryDetails: [ColorCategoryDetailDomain!]!
  colorCategorySubproducts: [ColorCategorySubproductDomain!]!
  createdAt: DateTime
  description: String
  descriptionEn: String
  homepageImage: ImageDomain!
  homepageImageId: Float
  id: ID!
  image: ImageDomain!
  imageId: Float
  isActive: Boolean!
  metaTags: String
  metaTagsEn: String
  mobileImage: ImageDomain!
  mobileImageId: Float
  name: String!
  nameEn: String
  pageTitle: String
  pageTitleEn: String
  sortOrder: Float
  updatedAt: DateTime
  urlSlug: String
  urlSlugEn: String
  viewCounter: Float!
}

type ColorCategoryEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ColorCategory"""
  node: ColorCategory!
}

input ColorCategoryFilter {
  and: [ColorCategoryFilter!]
  id: IDFilterComparison
  or: [ColorCategoryFilter!]
}

input ColorCategorySort {
  direction: SortDirection!
  field: ColorCategorySortFields!
  nulls: SortNulls
}

enum ColorCategorySortFields {
  id
}

type ColorCategorySubproduct {
  colorCategory: ColorCategory!
  colorCategoryId: Float!
  createdAt: DateTime
  id: ID!
  subproduct: Subproduct!
  subproductId: Float!
  updatedAt: DateTime
}

type ColorCategorySubproductConnection {
  """Array of edges."""
  edges: [ColorCategorySubproductEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ColorCategorySubproductDeleteFilter {
  and: [ColorCategorySubproductDeleteFilter!]
  id: IDFilterComparison
  or: [ColorCategorySubproductDeleteFilter!]
}

type ColorCategorySubproductDeleteResponse {
  colorCategory: ColorCategory
  colorCategoryId: Float
  createdAt: DateTime
  id: ID
  subproduct: Subproduct
  subproductId: Float
  updatedAt: DateTime
}

input ColorCategorySubproductDomain {
  colorCategory: ColorCategoryDomain!
  colorCategoryId: Float!
  createdAt: DateTime
  id: ID!
  subproduct: SubproductDomain!
  subproductId: Float!
  updatedAt: DateTime
}

type ColorCategorySubproductEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ColorCategorySubproduct"""
  node: ColorCategorySubproduct!
}

input ColorCategorySubproductFilter {
  and: [ColorCategorySubproductFilter!]
  id: IDFilterComparison
  or: [ColorCategorySubproductFilter!]
}

input ColorCategorySubproductSort {
  direction: SortDirection!
  field: ColorCategorySubproductSortFields!
  nulls: SortNulls
}

enum ColorCategorySubproductSortFields {
  id
}

input ColorCategorySubproductUpdateFilter {
  and: [ColorCategorySubproductUpdateFilter!]
  id: IDFilterComparison
  or: [ColorCategorySubproductUpdateFilter!]
}

input ColorCategoryUpdateFilter {
  and: [ColorCategoryUpdateFilter!]
  id: IDFilterComparison
  or: [ColorCategoryUpdateFilter!]
}

type ColorConnection {
  """Array of edges."""
  edges: [ColorEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ColorDeleteFilter {
  and: [ColorDeleteFilter!]
  id: IDFilterComparison
  or: [ColorDeleteFilter!]
}

type ColorDeleteResponse {
  colorCode: String
  colorCodeOriginal: String
  colorName: String
  hexCode: String
  id: ID
  subcolors: [Subcolor!]
}

input ColorDomain {
  colorCode: String
  colorCodeOriginal: String
  colorName: String
  hexCode: String
  id: ID!
  subcolors: [SubcolorDomain!]!
}

type ColorEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Color"""
  node: Color!
}

input ColorFilter {
  and: [ColorFilter!]
  id: IDFilterComparison
  or: [ColorFilter!]
}

input ColorSort {
  direction: SortDirection!
  field: ColorSortFields!
  nulls: SortNulls
}

enum ColorSortFields {
  id
}

input ColorUpdateFilter {
  and: [ColorUpdateFilter!]
  id: IDFilterComparison
  or: [ColorUpdateFilter!]
}

type Config {
  createdAt: DateTime
  id: ID!
  key: String!
  updatedAt: DateTime
  value: String
}

type ConfigConnection {
  """Array of edges."""
  edges: [ConfigEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ConfigDeleteFilter {
  and: [ConfigDeleteFilter!]
  id: IDFilterComparison
  or: [ConfigDeleteFilter!]
}

type ConfigDeleteResponse {
  createdAt: DateTime
  id: ID
  key: String
  updatedAt: DateTime
  value: String
}

input ConfigDomain {
  createdAt: DateTime
  id: ID!
  key: String!
  updatedAt: DateTime
  value: String
}

type ConfigEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Config"""
  node: Config!
}

input ConfigFilter {
  and: [ConfigFilter!]
  id: IDFilterComparison
  or: [ConfigFilter!]
}

input ConfigSort {
  direction: SortDirection!
  field: ConfigSortFields!
  nulls: SortNulls
}

enum ConfigSortFields {
  id
}

input ConfigUpdateFilter {
  and: [ConfigUpdateFilter!]
  id: IDFilterComparison
  or: [ConfigUpdateFilter!]
}

"""Cursor for paging through collections"""
scalar ConnectionCursor

type ContactForm {
  answer1: String
  answer2: String
  answer3: String
  city: String
  contactFormHistories: [ContactFormHistory!]!
  contactFormStatus: ContactFormStatus!
  contactFormStatusId: Float!
  country: Country!
  countryId: Float!
  createdAt: DateTime
  department: Department!
  departmentId: Float
  email: String
  id: ID!
  name: String
  phone: String
  text: String
  updatedAt: DateTime
  user: User!
  userId: Float
}

type ContactFormConnection {
  """Array of edges."""
  edges: [ContactFormEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ContactFormDeleteFilter {
  and: [ContactFormDeleteFilter!]
  id: IDFilterComparison
  or: [ContactFormDeleteFilter!]
}

type ContactFormDeleteResponse {
  answer1: String
  answer2: String
  answer3: String
  city: String
  contactFormHistories: [ContactFormHistory!]
  contactFormStatus: ContactFormStatus
  contactFormStatusId: Float
  country: Country
  countryId: Float
  createdAt: DateTime
  department: Department
  departmentId: Float
  email: String
  id: ID
  name: String
  phone: String
  text: String
  updatedAt: DateTime
  user: User
  userId: Float
}

input ContactFormDomain {
  answer1: String
  answer2: String
  answer3: String
  city: String
  contactFormHistories: [ContactFormHistoryDomain!]!
  contactFormStatus: ContactFormStatusDomain!
  contactFormStatusId: Float!
  country: CountryDomain!
  countryId: Float!
  createdAt: DateTime
  department: DepartmentDomain!
  departmentId: Float
  email: String
  id: ID!
  name: String
  phone: String
  text: String
  updatedAt: DateTime
  user: UserDomain!
  userId: Float
}

type ContactFormEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ContactForm"""
  node: ContactForm!
}

input ContactFormFilter {
  and: [ContactFormFilter!]
  id: IDFilterComparison
  or: [ContactFormFilter!]
}

type ContactFormHistory {
  comment: String
  contactForm: ContactForm!
  contactFormId: Float!
  contactFormStatus: ContactFormStatus!
  contactFormStatusId: Float!
  createdAt: DateTime
  id: ID!
  updatedAt: DateTime
  user: User!
  userId: Float!
}

type ContactFormHistoryConnection {
  """Array of edges."""
  edges: [ContactFormHistoryEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ContactFormHistoryDeleteFilter {
  and: [ContactFormHistoryDeleteFilter!]
  id: IDFilterComparison
  or: [ContactFormHistoryDeleteFilter!]
}

type ContactFormHistoryDeleteResponse {
  comment: String
  contactForm: ContactForm
  contactFormId: Float
  contactFormStatus: ContactFormStatus
  contactFormStatusId: Float
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
  user: User
  userId: Float
}

input ContactFormHistoryDomain {
  comment: String
  contactForm: ContactFormDomain!
  contactFormId: Float!
  contactFormStatus: ContactFormStatusDomain!
  contactFormStatusId: Float!
  createdAt: DateTime
  id: ID!
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
}

type ContactFormHistoryEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ContactFormHistory"""
  node: ContactFormHistory!
}

input ContactFormHistoryFilter {
  and: [ContactFormHistoryFilter!]
  id: IDFilterComparison
  or: [ContactFormHistoryFilter!]
}

input ContactFormHistorySort {
  direction: SortDirection!
  field: ContactFormHistorySortFields!
  nulls: SortNulls
}

enum ContactFormHistorySortFields {
  id
}

input ContactFormHistoryUpdateFilter {
  and: [ContactFormHistoryUpdateFilter!]
  id: IDFilterComparison
  or: [ContactFormHistoryUpdateFilter!]
}

input ContactFormSort {
  direction: SortDirection!
  field: ContactFormSortFields!
  nulls: SortNulls
}

enum ContactFormSortFields {
  id
}

type ContactFormStatus {
  campaignUefaEuroSubscriberHistories: [CampaignUefaEuroSubscriberHistory!]!
  campaignUefaEuroSubscribers: [CampaignUefaEuroSubscriber!]!
  contactFormHistories: [ContactFormHistory!]!
  contactForms: [ContactForm!]!
  createdAt: DateTime
  id: ID!
  status: String!
  updatedAt: DateTime
}

type ContactFormStatusConnection {
  """Array of edges."""
  edges: [ContactFormStatusEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ContactFormStatusDeleteFilter {
  and: [ContactFormStatusDeleteFilter!]
  id: IDFilterComparison
  or: [ContactFormStatusDeleteFilter!]
}

type ContactFormStatusDeleteResponse {
  campaignUefaEuroSubscriberHistories: [CampaignUefaEuroSubscriberHistory!]
  campaignUefaEuroSubscribers: [CampaignUefaEuroSubscriber!]
  contactFormHistories: [ContactFormHistory!]
  contactForms: [ContactForm!]
  createdAt: DateTime
  id: ID
  status: String
  updatedAt: DateTime
}

input ContactFormStatusDomain {
  campaignUefaEuroSubscriberHistories: [CampaignUefaEuroSubscriberHistoryDomain!]!
  campaignUefaEuroSubscribers: [CampaignUefaEuroSubscriberDomain!]!
  contactFormHistories: [ContactFormHistoryDomain!]!
  contactForms: [ContactFormDomain!]!
  createdAt: DateTime
  id: ID!
  status: String!
  updatedAt: DateTime
}

type ContactFormStatusEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ContactFormStatus"""
  node: ContactFormStatus!
}

input ContactFormStatusFilter {
  and: [ContactFormStatusFilter!]
  id: IDFilterComparison
  or: [ContactFormStatusFilter!]
}

input ContactFormStatusSort {
  direction: SortDirection!
  field: ContactFormStatusSortFields!
  nulls: SortNulls
}

enum ContactFormStatusSortFields {
  id
}

input ContactFormStatusUpdateFilter {
  and: [ContactFormStatusUpdateFilter!]
  id: IDFilterComparison
  or: [ContactFormStatusUpdateFilter!]
}

input ContactFormUpdateFilter {
  and: [ContactFormUpdateFilter!]
  id: IDFilterComparison
  or: [ContactFormUpdateFilter!]
}

type Country {
  addresses: [Address!]!
  basicCarpetDesigners: [BasicCarpetDesigner!]!
  chaparId: Float
  contactForms: [ContactForm!]!
  createdAt: DateTime
  id: ID!
  invoiceAddresses: [InvoiceAddress!]!
  name: String!
  phoneCode: Float
  returnRequestAddresses: [ReturnRequestAddress!]!
  senderInformations: [SenderInformation!]!
  sortName: String
  states: [State!]!
  tipaxId: Float
  updatedAt: DateTime
}

type CountryConnection {
  """Array of edges."""
  edges: [CountryEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input CountryDeleteFilter {
  and: [CountryDeleteFilter!]
  id: IDFilterComparison
  or: [CountryDeleteFilter!]
}

type CountryDeleteResponse {
  addresses: [Address!]
  basicCarpetDesigners: [BasicCarpetDesigner!]
  chaparId: Float
  contactForms: [ContactForm!]
  createdAt: DateTime
  id: ID
  invoiceAddresses: [InvoiceAddress!]
  name: String
  phoneCode: Float
  returnRequestAddresses: [ReturnRequestAddress!]
  senderInformations: [SenderInformation!]
  sortName: String
  states: [State!]
  tipaxId: Float
  updatedAt: DateTime
}

input CountryDomain {
  addresses: [AddressDomain!]!
  basicCarpetDesigners: [BasicCarpetDesignerDomain!]!
  chaparId: Float
  contactForms: [ContactFormDomain!]!
  createdAt: DateTime
  id: ID!
  invoiceAddresses: [InvoiceAddressDomain!]!
  name: String!
  phoneCode: Float
  returnRequestAddresses: [ReturnRequestAddressDomain!]!
  senderInformations: [SenderInformationDomain!]!
  sortName: String
  states: [StateDomain!]!
  tipaxId: Float
  updatedAt: DateTime
}

type CountryEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Country"""
  node: Country!
}

input CountryFilter {
  and: [CountryFilter!]
  id: IDFilterComparison
  or: [CountryFilter!]
}

input CountrySort {
  direction: SortDirection!
  field: CountrySortFields!
  nulls: SortNulls
}

enum CountrySortFields {
  id
}

input CountryUpdateFilter {
  and: [CountryUpdateFilter!]
  id: IDFilterComparison
  or: [CountryUpdateFilter!]
}

type Coupon {
  campaignPetForms: [CampaignPetForm!]!
  code: String!
  couponSubjects: [CouponSubject!]!
  createdAt: DateTime
  createdBy: Float
  createdBy2: User!
  discount: String!
  endDate: DateTime!
  forNewCustomersOnly: Boolean!
  forOldCustomersOnly: Boolean!
  forReadyProductsOnly: Boolean!
  id: ID!
  invoices: [Invoice!]!
  isActive: Float
  isApplicableToDiscountedProducts: Float
  maxDiscountPrice: String
  maxPercent: Float
  maxUsage: Float!
  minInvoicePrice: String
  name: String!
  offType: Float!
  onlyForOneItem: Boolean!
  onlyForOutOfStocks: Float!
  retargetingInvoice: Invoice!
  retargetingInvoiceId: Float
  retargetingUser: User!
  retargetingUserId: Float
  returnRequests: [ReturnRequest!]!
  sortOrder: Float
  startDate: DateTime!
  updatedAt: DateTime
  updatedBy: Float
  updatedBy2: User!
  user: User!
  userId: Float
  utmGoogleFormCoupons: [UtmGoogleFormCoupon!]!
}

type CouponConnection {
  """Array of edges."""
  edges: [CouponEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input CouponDeleteFilter {
  and: [CouponDeleteFilter!]
  id: IDFilterComparison
  or: [CouponDeleteFilter!]
}

type CouponDeleteResponse {
  campaignPetForms: [CampaignPetForm!]
  code: String
  couponSubjects: [CouponSubject!]
  createdAt: DateTime
  createdBy: Float
  createdBy2: User
  discount: String
  endDate: DateTime
  forNewCustomersOnly: Boolean
  forOldCustomersOnly: Boolean
  forReadyProductsOnly: Boolean
  id: ID
  invoices: [Invoice!]
  isActive: Float
  isApplicableToDiscountedProducts: Float
  maxDiscountPrice: String
  maxPercent: Float
  maxUsage: Float
  minInvoicePrice: String
  name: String
  offType: Float
  onlyForOneItem: Boolean
  onlyForOutOfStocks: Float
  retargetingInvoice: Invoice
  retargetingInvoiceId: Float
  retargetingUser: User
  retargetingUserId: Float
  returnRequests: [ReturnRequest!]
  sortOrder: Float
  startDate: DateTime
  updatedAt: DateTime
  updatedBy: Float
  updatedBy2: User
  user: User
  userId: Float
  utmGoogleFormCoupons: [UtmGoogleFormCoupon!]
}

input CouponDomain {
  campaignPetForms: [CampaignPetFormDomain!]!
  code: String!
  couponSubjects: [CouponSubjectDomain!]!
  createdAt: DateTime
  createdBy: Float
  createdBy2: UserDomain!
  discount: String!
  endDate: DateTime!
  forNewCustomersOnly: Boolean!
  forOldCustomersOnly: Boolean!
  forReadyProductsOnly: Boolean!
  id: ID!
  invoices: [InvoiceDomain!]!
  isActive: Float
  isApplicableToDiscountedProducts: Float
  maxDiscountPrice: String
  maxPercent: Float
  maxUsage: Float!
  minInvoicePrice: String
  name: String!
  offType: Float!
  onlyForOneItem: Boolean!
  onlyForOutOfStocks: Float!
  retargetingInvoice: InvoiceDomain!
  retargetingInvoiceId: Float
  retargetingUser: UserDomain!
  retargetingUserId: Float
  returnRequests: [ReturnRequestDomain!]!
  sortOrder: Float
  startDate: DateTime!
  updatedAt: DateTime
  updatedBy: Float
  updatedBy2: UserDomain!
  user: UserDomain!
  userId: Float
  utmGoogleFormCoupons: [UtmGoogleFormCouponDomain!]!
}

type CouponEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Coupon"""
  node: Coupon!
}

input CouponFilter {
  and: [CouponFilter!]
  id: IDFilterComparison
  or: [CouponFilter!]
}

input CouponSort {
  direction: SortDirection!
  field: CouponSortFields!
  nulls: SortNulls
}

enum CouponSortFields {
  id
}

type CouponSubject {
  basicCarpetSize: BasicCarpetSize!
  basicCarpetSizeId: Float
  coupon: Coupon!
  couponId: Float!
  createdAt: DateTime
  id: ID!
  product: Product!
  productCategory: ProductCategory!
  productCategoryId: Float
  productId: Float
  subproduct: Subproduct!
  subproductId: Float
  updatedAt: DateTime
}

type CouponSubjectConnection {
  """Array of edges."""
  edges: [CouponSubjectEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input CouponSubjectDeleteFilter {
  and: [CouponSubjectDeleteFilter!]
  id: IDFilterComparison
  or: [CouponSubjectDeleteFilter!]
}

type CouponSubjectDeleteResponse {
  basicCarpetSize: BasicCarpetSize
  basicCarpetSizeId: Float
  coupon: Coupon
  couponId: Float
  createdAt: DateTime
  id: ID
  product: Product
  productCategory: ProductCategory
  productCategoryId: Float
  productId: Float
  subproduct: Subproduct
  subproductId: Float
  updatedAt: DateTime
}

input CouponSubjectDomain {
  basicCarpetSize: BasicCarpetSizeDomain!
  basicCarpetSizeId: Float
  coupon: CouponDomain!
  couponId: Float!
  createdAt: DateTime
  id: ID!
  product: ProductDomain!
  productCategory: ProductCategoryDomain!
  productCategoryId: Float
  productId: Float
  subproduct: SubproductDomain!
  subproductId: Float
  updatedAt: DateTime
}

type CouponSubjectEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the CouponSubject"""
  node: CouponSubject!
}

input CouponSubjectFilter {
  and: [CouponSubjectFilter!]
  id: IDFilterComparison
  or: [CouponSubjectFilter!]
}

input CouponSubjectSort {
  direction: SortDirection!
  field: CouponSubjectSortFields!
  nulls: SortNulls
}

enum CouponSubjectSortFields {
  id
}

input CouponSubjectUpdateFilter {
  and: [CouponSubjectUpdateFilter!]
  id: IDFilterComparison
  or: [CouponSubjectUpdateFilter!]
}

input CouponUpdateFilter {
  and: [CouponUpdateFilter!]
  id: IDFilterComparison
  or: [CouponUpdateFilter!]
}

input CreateActivityInput {
  action: String!
  contentId: Float!
  contentType: String!
  deletedUserId: Float
  description: String!
  details: String!
  userId: Float
  userName: String!
}

input CreateAddressInput {
  address: String!
  address2: String
  city: CityDomain!
  cityId: Float!
  country: CountryDomain!
  countryId: Float!
  createdAt: DateTime
  crmCompanyId: String
  crmCompanyPersonId: String
  deletedAt: DateTime
  email: String
  fullAddress: String
  fullname: String
  fullnameDescription: String
  fullnameTrimmed: String
  id: Float!
  invoiceAddressValidationResults: [InvoiceAddressValidationResultDomain!]!
  invoiceAddresses: [InvoiceAddressDomain!]!
  invoiceRatesResults: [InvoiceRatesResultDomain!]!
  invoices: [InvoiceDomain!]!
  latitude: String
  longitude: String
  nationalId: String
  oldAddress: String!
  phone: String
  phone2: String
  returnRequestAddresses: [ReturnRequestAddressDomain!]!
  sepidarId: Float
  state: StateDomain!
  stateId: Float!
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
  zipCode: String
}

input CreateAttributeAttributeGroupInput {
  attribute: AttributeDomain!
  attributeGroup: AttributeGroupDomain!
  attributeGroupId: Float!
  attributeId: Float!
  createdAt: DateTime
  id: Float!
  updatedAt: DateTime
}

input CreateAttributeGroupInput {
  attributeAttributeGroups: [AttributeAttributeGroupDomain!]!
  attributeItems: [AttributeItemDomain!]!
  createdAt: DateTime
  generalName: String
  id: Float!
  isActive: Float
  name: String!
  productCategory: ProductCategoryDomain!
  productCategoryId: Float
  sortOrder: Float
  updatedAt: DateTime
}

input CreateAttributeInput {
  isActive: Float
  name: String!
  sortOrder: Float
  type: Float!
}

input CreateAttributeItemInput {
  attribute: AttributeDomain!
  attributeGroup: AttributeGroupDomain!
  attributeGroupId: Float
  attributeId: Float!
  attributeProducts: [AttributeProductDomain!]!
  attributeSubproducts: [AttributeSubproductDomain!]!
  createdAt: DateTime
  id: Float!
  name: String!
  updatedAt: DateTime
}

input CreateAttributeProductInput {
  attribute: AttributeDomain!
  attributeId: Float!
  attributeItem: AttributeItemDomain!
  attributeItemId: Float
  createdAt: DateTime
  id: Float!
  isChecked: Boolean
  product: ProductDomain!
  productId: Float!
  sortOrder: Float
  updatedAt: DateTime
  value: String
}

input CreateAttributeSubproductInput {
  attribute: AttributeDomain!
  attributeId: Float!
  attributeItem: AttributeItemDomain!
  attributeItemId: Float
  createdAt: DateTime
  id: Float!
  isChecked: Boolean
  subproduct: SubproductDomain!
  subproductId: Float!
  updatedAt: DateTime
  value: String
}

input CreateAutomationEventInput {
  createdAt: DateTime
  deletedAt: DateTime
  event: String!
  eventDate: String!
  eventDatetime: DateTime!
  eventTimestamp: String!
  id: Float!
  lastEec: String
  messages: String
  onlineSheetSaved: Boolean! = false
  rfmCat: String
  rfmScore: String
  smsSent: Boolean! = false
  status: String!
  triggerDatetime: DateTime!
  type: String!
  typeId: Float!
  updatedAt: DateTime
  user: UserDomain
  userContact: String!
  userId: Float
  userName: String!
  userUid: Float!
}

input CreateAutomationRfmScoreInput {
  id: Float!
  rfmScore: String!
  rfmScoreCode: String!
  rfmScoreTitle: String!
}

input CreateBasicCarpetBorderInput {
  code: String!
  createdAt: DateTime
  id: Float!
  isActive: Boolean! = true
  sortOrder: Float
  subproducts: [SubproductDomain!]!
  title: String!
  updatedAt: DateTime
}

input CreateBasicCarpetBrandInput {
  code: String!
  createdAt: DateTime!
  id: Float!
  isActive: Boolean!
  sortOrder: Float
  title: String!
  updatedAt: DateTime!
}

input CreateBasicCarpetColorInput {
  code: String!
  colorCode: String
  createdAt: DateTime! = "2025-04-19T11:22:46.429Z"
  englishTitle: String
  id: Float!
  incredibleOffers: [IncredibleOfferDomain!]!
  isActive: Boolean! = true
  persianTitle: String
  productColorImages: [ProductColorImageDomain!]!
  productColorSales: [ProductColorSaleDomain!]!
  productVideos: [ProductVideoDomain!]!
  products: [ProductDomain!]!
  russianTitle: String
  shortCode: String
  sortOrder: Float
  spanishTitle: String
  subproducts: [SubproductDomain!]!
  title: String!
  torobProducts: [TorobProductDomain!]!
  updatedAt: DateTime!
}

input CreateBasicCarpetDesignInput {
  code: String!
  createdAt: DateTime! = "2025-04-19T11:22:46.439Z"
  id: Float!
  isActive: Boolean! = true
  sortOrder: Float
  subproducts: [SubproductDomain!]!
  title: String!
  updatedAt: DateTime!
}

input CreateBasicCarpetDesignerInput {
  city: CityDomain!
  cityId: Float
  code: String!
  country: CountryDomain!
  countryId: Float
  createdAt: DateTime! = "2025-04-19T11:22:46.447Z"
  description: String
  facebookId: String
  headerImage: String
  id: Float!
  instagramId: String
  isActive: Boolean! = true
  linkedinId: String
  pricePercentage: Float = 0
  profilePicture: String
  selfEmployed: Boolean = false
  sortOrder: Float
  state: StateDomain!
  stateId: Float
  subproducts: [SubproductDomain!]!
  title: String!
  twitterId: String
  updatedAt: DateTime!
  user: UserDomain!
  userId: Float
}

input CreateBasicCarpetMaterialInput {
  code: String!
  createdAt: DateTime! = "2025-04-19T11:22:46.455Z"
  id: Float!
  isActive: Boolean! = true
  sortOrder: Float
  subproducts: [SubproductDomain!]!
  title: String!
  updatedAt: DateTime!
}

input CreateBasicCarpetSizeDetailInput {
  basicCarpetSize: BasicCarpetSizeDomain!
  basicCarpetSizeId: Float
  createdAt: DateTime
  detailText: String
  detailTextEn: String
  id: Float!
  isActive: Boolean! = true
  sortOrder: Float
  title: String
  titleEn: String
  updatedAt: DateTime
}

input CreateBasicCarpetSizeInput {
  altText: String
  altTextEn: String
  basicCarpetSizeDetails: [BasicCarpetSizeDetailDomain!]!
  campaignFreeOfferSizes: [CampaignFreeOfferSizeDomain!]!
  carpetVolume: Float = 0
  code: String!
  couponSubjects: [CouponSubjectDomain!]!
  createdAt: DateTime! = "2025-04-19T11:22:46.463Z"
  description: String
  descriptionEn: String
  designersProductPriceRanges: [DesignersProductPriceRangeDomain!]!
  discountSubjects: [DiscountSubjectDomain!]!
  homepageImageId: Float
  id: Float!
  image: ImageDomain!
  imageId: Float
  isActive: Boolean! = true
  length: Float!
  lengthText: String
  metaTags: String
  metaTagsEn: String
  mobileImage: ImageDomain!
  mobileImageId: Float
  padVolume: Float = 0
  pageTitle: String
  pageTitleEn: String
  priceGroupSizes: [PriceGroupSizeDomain!]!
  productionPads: [ProductionPadDomain!]!
  products: [ProductDomain!]!
  ripTemplateItems: [RipTemplateItemDomain!]!
  sizeText: String
  sizeTextEn: String
  sortOrder: Float
  subproducts: [SubproductDomain!]!
  title: String!
  titleEn: String
  torobProducts: [TorobProductDomain!]!
  unitRatio: Float!
  updatedAt: DateTime!
  urlSlug: String
  urlSlugEn: String
  viewCounter: Float! = 0
  width: Float!
  widthText: String
}

input CreateBasicCarpetTypeInput {
  code: String!
  createdAt: DateTime! = "2025-04-19T11:22:46.478Z"
  id: Float!
  isActive: Boolean! = true
  sortOrder: Float
  subproducts: [SubproductDomain!]!
  title: String!
  updatedAt: DateTime!
}

input CreateBorderInput {
  code: String!
  count: Float
  id: Float!
}

input CreateCampaignFreeOfferInput {
  campaignFreeOfferSizes: [CampaignFreeOfferSizeDomain!]!
  createdAt: DateTime
  id: Float!
  isActive: Boolean! = true
  minPrice: String!
  updatedAt: DateTime
}

input CreateCampaignFreeOfferSizeInput {
  basicCarpetSize: BasicCarpetSizeDomain!
  basicCarpetSizeId: Float!
  campaignFreeOffer: CampaignFreeOfferDomain!
  campaignFreeOfferId: Float!
  createdAt: DateTime
  id: Float!
  updatedAt: DateTime
}

input CreateCampaignGoldCoinSubInput {
  createdAt: DateTime
  id: Float!
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
}

input CreateCampaignInstagramFollowInput {
  answerNo: Int
  birthYear: Int
  createdAt: DateTime
  id: Int!
  image1: String
  image2: String
  name: String!
  phone: String!
  phoneVerified: Boolean!
  sex: Int
  updatedAt: DateTime
  user: UserDomain!
  userId: Int
  verificationCode: String
}

input CreateCampaignPetFormInput {
  coupon: CouponDomain!
  couponId: Float
  createdAt: DateTime
  discountAmount: Float! = 0
  donationAmount: Float! = 0
  filename: String
  id: Float!
  mime: String
  originalFilename: String
  path: String = "/"
  petName: String
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
}

input CreateCampaignRoomvoImageInput {
  campaignRoomvoVotes: [CampaignRoomvoVoteDomain!]!
  createdAt: DateTime
  filename: String
  id: Float!
  mime: String
  originalFilename: String
  path: String
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
  votesCount: Float! = 0
}

input CreateCampaignRoomvoVoteInput {
  campaignRoomvoImage: CampaignRoomvoImageDomain!
  campaignRoomvoImageId: Float!
  createdAt: DateTime
  id: Float!
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
}

input CreateCampaignSubscriptionInput {
  campaignName: String
  code: Int
  createdAt: DateTime
  id: Int!
  updatedAt: DateTime
  user: UserDomain!
  userId: Int!
}

input CreateCampaignUefaEuroSubscriberHistoryInput {
  campaignUefaEuroSubscriber: CampaignUefaEuroSubscriberDomain!
  campaignUefaEuroSubscriberId: Float!
  comment: String
  contactFormStatus: ContactFormStatusDomain!
  contactFormStatusId: Float!
  createdAt: DateTime
  id: Float!
  updatedAt: DateTime
  user: UserDomain!
  userId: Float
}

input CreateCampaignUefaEuroSubscriberInput {
  campaignUefaEuroSubscriberHistories: [CampaignUefaEuroSubscriberHistoryDomain!]!
  contactFormStatus: ContactFormStatusDomain!
  contactFormStatusId: Float! = 1
  createdAt: DateTime
  id: Float!
  mobile: String!
  status: Float! = 1
  updatedAt: DateTime
  user: UserDomain!
  userId: Float
}

input CreateCampaignVotingImageInput {
  campaignNo: Float!
  createdAt: DateTime
  id: Float!
  image: ImageDomain!
  imageId: Float
  isActive: Boolean! = true
  sortOrder: Float! = 1
  title: String!
  updatedAt: DateTime
}

input CreateCampaignVotingImageUserInput {
  chargedAmount: String! = "0.00"
  createdAt: DateTime
  id: Float!
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
  votedCampaignImageIds: String
  walletCharged: Boolean! = false
}

input CreateCarpetFeatureInput {
  carpetFeatureUsers: [CarpetFeatureUserDomain!]!
  createdAt: DateTime
  id: Float!
  isActive: Boolean! = true
  sortOrder: Float
  title: String!
  updatedAt: DateTime
}

input CreateCarpetFeatureUserInput {
  carpetFeature: CarpetFeatureDomain!
  carpetFeatureId: Float!
  createdAt: DateTime
  id: Float!
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
}

input CreateCarpetMaterialInput {
  createdAt: DateTime
  designs: [DesignDomain!]!
  id: Float!
  isActive: Boolean! = true
  name: String!
  pricePerInch: Float!
  sortOrder: Float
  updatedAt: DateTime
}

input CreateCarpetShapeInput {
  createdAt: DateTime
  designs: [DesignDomain!]!
  hasLength: Boolean! = true
  id: Float!
  isActive: Boolean! = true
  maxLength: Float!
  maxWidth: Float!
  minLength: Float!
  minWidth: Float!
  name: String!
  sortOrder: Float
  updatedAt: DateTime
}

input CreateCarpetSizeInput {
  createdAt: DateTime
  id: Float!
  isActive: Boolean! = true
  length: Float!
  sortOrder: Float
  updatedAt: DateTime
  width: Float!
}

input CreateCarpetUsagePlaceInput {
  carpetUsagePlaceInvoiceProducts: [CarpetUsagePlaceInvoiceProductDomain!]!
  carpetUsagePlaceUsers: [CarpetUsagePlaceUserDomain!]!
  createdAt: DateTime
  id: Float!
  isActive: Boolean! = true
  sortOrder: Float
  title: String!
  updatedAt: DateTime
}

input CreateCarpetUsagePlaceInvoiceProductInput {
  carpetUsagePlace: CarpetUsagePlaceDomain!
  carpetUsagePlaceId: Float!
  createdAt: DateTime
  id: Float!
  invoiceProduct: InvoiceProductDomain!
  invoiceProductId: Float!
  row: Float!
  updatedAt: DateTime
}

input CreateCarpetUsagePlaceUserInput {
  carpetUsagePlace: CarpetUsagePlaceDomain!
  carpetUsagePlaceId: Float!
  createdAt: DateTime
  id: Float!
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
}

input CreateChaparSettlementStatusInput {
  createdAt: DateTime
  id: Float!
  invoices: [InvoiceDomain!]!
  status: String!
  updatedAt: DateTime
}

input CreateChaparTrackingHistoryInput {
  createdAt: DateTime
  date: String!
  id: Float!
  invoice: InvoiceDomain!
  invoiceId: Float!
  reference: String!
  status: String!
  statusNote: String!
  time: String!
  tracking: String!
  updatedAt: DateTime
}

input CreateCitiesSepidarInput {
  cityId: Float
  id: Float!
  name: String
  sepidarStateId: Float
  stateId: Float
  stateName: String
}

input CreateCity2Input {
  id: Int
  sepidarId: Int
}

input CreateCityInput {
  addresses: [AddressDomain!]!
  basicCarpetDesigners: [BasicCarpetDesignerDomain!]!
  chaparId: Float
  code: String
  createdAt: DateTime
  id: Float!
  invoiceAddresses: [InvoiceAddressDomain!]!
  mahexCode: String
  name: String!
  returnRequestAddresses: [ReturnRequestAddressDomain!]!
  senderInformations: [SenderInformationDomain!]!
  sepidarId: Float
  state: StateDomain!
  stateId: Float!
  tipaxId: Float
  updatedAt: DateTime
}

input CreateColorCategoryDetailInput {
  colorCategory: ColorCategoryDomain!
  colorCategoryId: Float
  createdAt: DateTime
  detailText: String
  detailTextEn: String
  id: Float!
  isActive: Boolean!
  sortOrder: Float
  title: String
  titleEn: String
  updatedAt: DateTime
}

input CreateColorCategoryInput {
  altText: String
  altTextEn: String
  color: String!
  colorCategoryDetails: [ColorCategoryDetailDomain!]!
  colorCategorySubproducts: [ColorCategorySubproductDomain!]!
  createdAt: DateTime
  description: String
  descriptionEn: String
  homepageImage: ImageDomain!
  homepageImageId: Float
  id: Float!
  image: ImageDomain!
  imageId: Float
  isActive: Boolean!
  metaTags: String
  metaTagsEn: String
  mobileImage: ImageDomain!
  mobileImageId: Float
  name: String!
  nameEn: String
  pageTitle: String
  pageTitleEn: String
  sortOrder: Float
  updatedAt: DateTime
  urlSlug: String
  urlSlugEn: String
  viewCounter: Float!
}

input CreateColorCategorySubproductInput {
  colorCategory: ColorCategoryDomain!
  colorCategoryId: Float!
  createdAt: DateTime
  id: Float!
  subproduct: SubproductDomain!
  subproductId: Float!
  updatedAt: DateTime
}

input CreateColorInput {
  colorCode: String
  colorCodeOriginal: String
  colorName: String
  hexCode: String
  id: Float!
  subcolors: [SubcolorDomain!]!
}

input CreateConfigInput {
  createdAt: DateTime
  id: Float!
  key: String!
  updatedAt: DateTime
  value: String
}

input CreateContactFormHistoryInput {
  comment: String
  contactForm: ContactFormDomain!
  contactFormId: Float!
  contactFormStatus: ContactFormStatusDomain!
  contactFormStatusId: Float!
  createdAt: DateTime
  id: Float!
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
}

input CreateContactFormInput {
  answer1: String
  answer2: String
  answer3: String
  city: String
  contactFormHistories: [ContactFormHistoryDomain!]!
  contactFormStatus: ContactFormStatusDomain!
  contactFormStatusId: Float!
  country: CountryDomain!
  countryId: Float!
  createdAt: DateTime
  department: DepartmentDomain!
  departmentId: Float
  email: String
  id: Float!
  name: String
  phone: String
  text: String
  updatedAt: DateTime
  user: UserDomain!
  userId: Float
}

input CreateContactFormStatusInputs {
  campaignUefaEuroSubscriberHistories: [CampaignUefaEuroSubscriberHistoryDomain!]!
  campaignUefaEuroSubscribers: [CampaignUefaEuroSubscriberDomain!]!
  contactFormHistories: [ContactFormHistoryDomain!]!
  contactForms: [ContactFormDomain!]!
  createdAt: DateTime
  id: Float!
  status: String!
  updatedAt: DateTime
}

input CreateCountryInput {
  addresses: [AddressDomain!]!
  basicCarpetDesigners: [BasicCarpetDesignerDomain!]!
  chaparId: Float
  contactForms: [ContactFormDomain!]!
  createdAt: DateTime
  id: Float!
  invoiceAddresses: [InvoiceAddressDomain!]!
  name: String!
  phoneCode: Float
  returnRequestAddresses: [ReturnRequestAddressDomain!]!
  senderInformations: [SenderInformationDomain!]!
  sortName: String
  states: [StateDomain!]!
  tipaxId: Float
  updatedAt: DateTime
}

input CreateCouponInput {
  campaignPetForms: [CampaignPetFormDomain!]!
  code: String!
  couponSubjects: [CouponSubjectDomain!]!
  createdAt: DateTime
  createdBy: Float
  createdBy2: UserDomain!
  discount: String!
  endDate: DateTime!
  forNewCustomersOnly: Boolean!
  forOldCustomersOnly: Boolean!
  forReadyProductsOnly: Boolean!
  id: Float!
  invoices: [InvoiceDomain!]!
  isActive: Float
  isApplicableToDiscountedProducts: Float
  maxDiscountPrice: String
  maxPercent: Float
  maxUsage: Float!
  minInvoicePrice: String
  name: String!
  offType: Float!
  onlyForOneItem: Boolean!
  onlyForOutOfStocks: Float!
  retargetingInvoice: InvoiceDomain!
  retargetingInvoiceId: Float
  retargetingUser: UserDomain!
  retargetingUserId: Float
  returnRequests: [ReturnRequestDomain!]!
  sortOrder: Float
  startDate: DateTime!
  updatedAt: DateTime
  updatedBy: Float
  updatedBy2: UserDomain!
  user: UserDomain!
  userId: Float
  utmGoogleFormCoupons: [UtmGoogleFormCouponDomain!]!
}

input CreateCouponSubjectInput {
  basicCarpetSize: BasicCarpetSizeDomain!
  basicCarpetSizeId: Float
  coupon: CouponDomain!
  couponId: Float!
  createdAt: DateTime
  id: Float!
  product: ProductDomain!
  productCategory: ProductCategoryDomain!
  productCategoryId: Float
  productId: Float
  subproduct: SubproductDomain!
  subproductId: Float
  updatedAt: DateTime
}

input CreateCrmPresentationInput {
  mobile: String
  optionId: Float
}

input CreateCustomerImageProductInput {
  createdAt: DateTime
  id: Float!
  image: ImageDomain!
  imageId: Float!
  product: ProductDomain!
  productId: Float!
  sortOrder: Float
  updatedAt: DateTime
}

input CreateCustomerRequestFileInput {
  createdAt: DateTime
  customerRequest: CustomerRequestDomain!
  customerRequestId: Float!
  filename: String!
  id: Float!
  mime: String!
  originalFilename: String!
  path: String! = "/"
  updatedAt: DateTime
}

input CreateCustomerRequestInput {
  createdAt: DateTime
  customerRequestFiles: [CustomerRequestFileDomain!]!
  id: Float!
  name: String
  phone: String
  updatedAt: DateTime
  user: UserDomain!
  userId: Float
  uuid: String
}

input CreateCustomerVideoProductInput {
  createdAt: DateTime
  id: Float!
  product: ProductDomain!
  productId: Float!
  sortOrder: Float = 0
  updatedAt: DateTime
  video: VideoDomain!
  videoId: Float!
}

input CreateDamageReasonInput {
  cause: String!
  createdAt: DateTime
  department: String!
  id: Float!
  invoiceProductItems: [InvoiceProductItemDomain!]!
  name: String!
  updatedAt: DateTime
}

input CreateDepartmentInput {
  contactForms: [ContactFormDomain!]!
  createdAt: DateTime
  id: Float!
  name: String!
  nameEn: String
  updatedAt: DateTime
}

input CreateDesignInput {
  backgroundColor: String = "#FFFFFF"
  borderColor: String = "#FFFFFF"
  carpetMaterial: CarpetMaterialDomain!
  carpetMaterialId: Float
  carpetShape: CarpetShapeDomain!
  carpetShapeId: Float = 1
  createdAt: DateTime
  deletedAt: DateTime
  filename: String
  fringeColor: String = "#FFFFFF"
  id: Float!
  imageLayers: [ImageLayerDomain!]!
  invoiceProductHistories: [InvoiceProductHistoryDomain!]!
  invoiceProducts: [InvoiceProductDomain!]!
  length: Float = 0
  name: String
  path: String = "/"
  patternLayers: [PatternLayerDomain!]!
  textLayers: [TextLayerDomain!]!
  updatedAt: DateTime
  user: UserDomain!
  userCarts: [UserCartDomain!]!
  userId: Float
  width: Float = 0
}

input CreateDesignersProductPriceRangeInput {
  basicCarpetSize: BasicCarpetSizeDomain!
  basicCarpetSizeId: Float!
  createdAt: DateTime
  id: Float!
  maxPrice: Float!
  minPrice: Float!
  updatedAt: DateTime
}

input CreateDiscountInput {
  createdAt: DateTime
  createdBy: Float
  createdBy2: UserDomain!
  discount: String!
  discountSubjects: [DiscountSubjectDomain!]!
  endDate: DateTime!
  hasStockCountOnly: Boolean! = false
  id: Float!
  incredibleOffers: [IncredibleOfferDomain!]!
  invoiceProductHistories: [InvoiceProductHistoryDomain!]!
  invoiceProducts: [InvoiceProductDomain!]!
  isActive: Float = 1
  maxDiscountPrice: String
  minProductPrice: String
  name: String
  redisForShowoffIsDeleted: Boolean! = false
  redisIsDeleted: Boolean! = false
  showoffEndDate: DateTime
  showoffStartDate: DateTime
  sortOrder: Float
  startDate: DateTime!
  type: Float!
  updatedAt: DateTime
  updatedBy: Float
  updatedBy2: UserDomain!
  withPad: Boolean! = false
}

input CreateDiscountNotificationInput {
  createdAt: DateTime
  deletedAt: DateTime
  id: Float!
  product: ProductDomain!
  productId: Float
  updatedAt: DateTime
  user: UserDomain!
  userId: Float
}

input CreateDiscountSubjectInput {
  basicCarpetSize: BasicCarpetSizeDomain!
  basicCarpetSizeId: Float
  createdAt: DateTime
  discount: DiscountDomain!
  discountId: Float!
  id: Float!
  priceGroup: PriceGroupDomain!
  priceGroupId: Float
  product: ProductDomain!
  productCategory: ProductCategoryDomain!
  productCategoryId: Float
  productId: Float
  subproduct: SubproductDomain!
  subproductId: Float
  updatedAt: DateTime
}

input CreateExitControlInput {
  createdAt: DateTime
  driverName: String!
  driverPhone: String!
  exitControlItems: [ExitControlItemDomain!]!
  exitDate: String!
  id: Float!
  isClosed: Boolean! = false
  plateNo: String!
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
}

input CreateExitControlItemInput {
  boxNo: Float!
  carpetPadScanned: Boolean! = false
  carpetScanned: Boolean! = false
  createdAt: DateTime
  exitControl: ExitControlDomain!
  exitControlId: Float!
  id: Float!
  invoiceProductItem: InvoiceProductItemDomain!
  invoiceProductItemId: Float!
  updatedAt: DateTime
}

input CreateExportProductInput {
  code: String
  id: String!
  price: Float
}

input CreateFailedJobInput {
  connection: String!
  exception: String!
  failedAt: DateTime!
  id: String!
  payload: String!
  queue: String!
}

input CreateFavoriteProductInput {
  createdAt: DateTime
  id: Float!
  product: ProductDomain!
  productId: Float!
  subproduct: SubproductDomain!
  subproductId: Float
  user: UserDomain!
  userId: Float!
}

input CreateFedexAddressValidationAttributeInput {
  code: String!
  correctValue: Boolean!
  createdAt: DateTime!
  description: String!
  id: Float!
  updatedAt: DateTime!
}

input CreateFetchSiteUrlInput {
  createdAt: DateTime
  date: DateTime!
  id: Float!
  isFetch: Boolean!
  updatedAt: DateTime
  url: String!
}

input CreateFileInput {
  createdAt: DateTime
  fileNegotiations: [FileNegotiationDomain!]!
  filename: String!
  id: Float!
  mime: String!
  originalFilename: String!
  path: String! = "/"
  updatedAt: DateTime
  uploadSource: String!
}

input CreateFileNegotiationInput {
  createdAt: DateTime
  file: FileDomain!
  fileId: Float!
  id: Float!
  negotiation: NegotiationDomain!
  negotiationId: Float!
  updatedAt: DateTime
}

input CreateGhazalInputs {
  createdAt: DateTime
  explanation: String
  id: Float!
  poem: String
  updatedAt: DateTime
}

input CreateGoogleFormUtmInput {
  createdAt: DateTime
  formId: String!
  id: Float!
  status: Boolean! = false
  updatedAt: DateTime
  url: String!
  user: UserDomain!
  userId: Float!
  utm: String!
}

input CreateHeardAboutUsOptionInput {
  createdAt: DateTime
  id: Float!
  isActive: Boolean! = true
  name: String!
  sortOrder: Float! = 1
  updatedAt: DateTime
  users: [UserDomain!]!
}

input CreateHelpDeskInput {
  createdAt: DateTime
  id: String!
  image: ImageDomain
  imageId: Float
  isActive: Float
  isOnline: Float
  phone: String
  title: String
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
}

input CreateHolidayInput {
  createdAt: DateTime
  deletedAt: DateTime
  holidayDate: String!
  id: Float!
  updatedAt: DateTime
  user: UserDomain
  userId: Float
  weekday: Float!
}

input CreateHomePageCustomerImageInput {
  createdAt: DateTime
  desktopImage: ImageDomain
  desktopImageAlt: String
  desktopImageId: Float
  id: Float!
  mobileImage: ImageDomain
  mobileImageAlt: String
  mobileImageId: Float
  product: ProductDomain
  sortOrder: Float!
  updatedAt: DateTime
}

input CreateHyperInput {
  code: String!
  depot: Float
  produce: Float
}

input CreateHyperstarCodeInput {
  code: String!
  subproductCode: String
}

input CreateImageInput {
  altText: String
  altTextEn: String
  basicCarpetSizes: [BasicCarpetSizeDomain!]!
  basicCarpetSizes2: [BasicCarpetSizeDomain!]!
  campaignVotingImages: [CampaignVotingImageDomain!]!
  colorCategories: [ColorCategoryDomain!]!
  colorCategories2: [ColorCategoryDomain!]!
  colorCategories3: [ColorCategoryDomain!]!
  createdAt: DateTime
  customerImageProducts: [CustomerImageProductDomain!]!
  filename: String!
  helpDesks: [HelpDeskDomain!]!
  homePageCustomerImages: [HomePageCustomerImageDomain!]!
  homePageCustomerImages2: [HomePageCustomerImageDomain!]!
  id: Float!
  imageProducts: [ImageProductDomain!]!
  imageRecreated: Boolean!
  imageSubproducts: [ImageSubproductDomain!]!
  imagesSizeGuidesDetails: [ImagesSizeGuidesDetailDomain!]!
  mime: String!
  originalFilename: String!
  path: String!
  patternCategories: [PatternCategoryDomain!]!
  productCategories: [ProductCategoryDomain!]!
  productCategories2: [ProductCategoryDomain!]!
  productCategories3: [ProductCategoryDomain!]!
  productColorImages: [ProductColorImageDomain!]!
  products: [ProductDomain!]!
  returnRequestItemImages: [ReturnRequestItemImageDomain!]!
  sizeGuides: [SizeGuideDomain!]!
  sizeGuidesDetails: [SizeGuidesDetailDomain!]!
  subproductSpecialImages: [SubproductSpecialImageDomain!]!
  subproducts: [SubproductDomain!]!
  tags: [TagDomain!]!
  tags2: [TagDomain!]!
  updatedAt: DateTime
  uploadSource: String!
}

input CreateImageLayerInput {
  centerX: Float!
  centerY: Float!
  createdAt: DateTime
  deletedAt: DateTime
  design: DesignDomain
  designId: Float!
  filename: String!
  id: Float!
  path: String!
  rotation: Float!
  scaleX: Float!
  scaleY: Float!
  sortOrder: Float!
  updatedAt: DateTime
}

input CreateImageProductInput {
  createdAt: DateTime
  id: Float!
  image: ImageDomain
  imageId: Float!
  product: ProductDomain
  productId: Float!
  sortOrder: Float
  updatedAt: DateTime
}

input CreateImageSizeInput {
  createdAt: DateTime
  height: Float!
  id: Float!
  name: String!
  productCategories: [ProductCategoryDomain!]!
  shortName: String!
  updatedAt: DateTime
  width: Float!
}

input CreateImageSubproductInput {
  createdAt: DateTime
  id: Float!
  image: ImageDomain
  imageId: Float!
  sortOrder: Float
  subproduct: SubproductDomain
  subproductId: Float!
  updatedAt: DateTime
}

input CreateImagesSizeGuidesDetailInput {
  createdAt: DateTime
  id: Float!
  image: ImageDomain
  imageId: Float
  sizeGuidesDetails: SizeGuidesDetailDomain
  sizeGuidesDetailsId: Float!
  sortOrder: Float
  updatedAt: DateTime
}

input CreateImpersonateHistoryInput {
  createdAt: DateTime
  id: String!
  impersonateUser: UserDomain
  impersonateUserId: Float!
  updatedAt: DateTime
  user: UserDomain
  userId: Float!
}

input CreateIncredibleOfferInput {
  basicCarpetColor: BasicCarpetColorDomain
  basicCarpetColorId: Float!
  count: Float!
  createdAt: DateTime
  discount: DiscountDomain
  discountId: Float
  discountPercent: Float!
  id: Float!
  isFake: Boolean!
  offerDate: String!
  place: Float
  product: ProductDomain
  productId: Float!
  soldCount: Float!
  sortOrder: Float!
  updatedAt: DateTime
}

input CreateIncredibleOfferSentNotificationInput {
  createdAt: DateTime
  id: Float!
  message: String
  updatedAt: DateTime
  user: UserDomain
  userId: Float!
}

input CreateInstagramFeedInput {
  altText: String
  caption: String
  carouselMedia: String
  comments: String
  commentsCount: Float
  commentsDisabled: Boolean
  commentsNextPage: String
  createdAt: DateTime
  createdTime: String
  data: String
  downloadedImageHighResolutionUrl: String
  downloadedImageLowResolutionUrl: String
  downloadedImageStandardResolutionUrl: String
  downloadedImageThumbnailUrl: String
  hasMoreComments: Boolean
  id: Float!
  imageHighResolutionUrl: String
  imageLowResolutionUrl: String
  imageStandardResolutionUrl: String
  imageThumbnailUrl: String
  instagramId: String!
  isAd: Boolean
  isAutoConstruct: Boolean
  isCaptionEdited: Boolean
  isFake: Boolean
  isLoadEmpty: Boolean
  isLoaded: Boolean
  isNew: Boolean
  likesCount: Float
  link: String
  locationAddressJson: String
  locationId: String
  locationName: String
  locationSlug: String
  modified: String
  owner: String
  ownerId: String
  shortCode: String
  sidecarMedias: String
  squareImages: String
  type: String
  updatedAt: DateTime
  videoDuration: String
  videoLowBandwidthUrl: String
  videoLowResolutionUrl: String
  videoStandardResolutionUrl: String
  videoViews: Float
}

input CreateInvitationCodeInput {
  code: String!
  createdAt: DateTime
  email: String
  id: Float!
  isActive: Boolean!
  maxUsage: Float
  updatedAt: DateTime
  users: [UserDomain!]
}

input CreateInvoiceAddressInput {
  address: String!
  address2: String
  addressId: Float!
  address_2: AddressDomain
  city: CityDomain
  cityId: Float!
  country: CountryDomain
  countryId: Float!
  createdAt: DateTime
  crmCompanyId: String
  crmCompanyPersonId: String
  email: String
  fullAddress: String
  fullname: String
  id: Float!
  invoice: InvoiceDomain
  invoiceHistories: [InvoiceHistoryDomain!]
  invoiceId: Float!
  latitude: String
  longitude: String
  nationalId: String
  phone: String
  phone2: String
  state: StateDomain
  stateId: Float!
  updatedAt: DateTime
  user: UserDomain
  userId: Float!
  zipCode: String
}

input CreateInvoiceAddressValidationResultInput {
  address: AddressDomain
  addressId: Float!
  addressValidationResult: String!
  createdAt: DateTime
  id: Float!
  invoice: InvoiceDomain
  invoiceId: Float!
  updatedAt: DateTime
}

input CreateInvoiceBankGatewayHistoryInput {
  amount: String
  createdAt: DateTime
  id: Float!
  invoice: InvoiceDomain
  invoiceId: Float
  orderId: String
  preorderRegister: PreorderRegisterDomain
  preorderRegisterId: Float
  refId: String
  saleRefId: String
  updatedAt: DateTime
}

input CreateInvoiceHistoryInput {
  accountingDescription: String
  additions: String!
  address: String!
  address2: String
  addressId: Float!
  cashOnDelivery: Float!
  chaparSettlementStatusId: Float
  chaparStatus: String
  cityId: Float!
  countryId: Float!
  couponId: Float
  createdAt: DateTime
  crmCompanyId: String
  crmCompanyPersonId: String
  crmPreOrderId: String
  currentInvoiceStatusId: Float!
  deliveredDate: DateTime
  description: String
  digikalaShare: Float
  digikalaSharePercent: Float
  editorUser: UserDomain
  editorUserId: Float!
  email: String
  forDigikala: Boolean!
  freeDelivery: Float!
  fullAddress: String
  fullname: String
  hasPriority: Boolean!
  id: Float!
  invoice: InvoiceDomain
  invoiceAddress: InvoiceAddressDomain
  invoiceAddressId: Float!
  invoiceId: Float!
  invoiceModeId: Float
  invoiceNumber: String
  invoicePaymentHistories: [InvoicePaymentHistoryDomain!]
  invoicePaymentStatusId: Float
  invoiceProductHistories: [InvoiceProductHistoryDomain!]
  invoiceTypeId: Float
  isChaparDelivery: Float!
  isDepot: Boolean
  isForAdvertisement: Boolean!
  isReversible: Boolean!
  issueDate: DateTime!
  lastName: String!
  latitude: String
  lockState: Float
  longitude: String
  moneyTransferConfirmed: Boolean
  moneyTransferConfirmedBy: Float
  moneyTransferRefCode: String
  name: String!
  needsReview: Boolean!
  orderId: String
  packageCount: Float
  parentInvoiceId: Float
  partnerCode: String
  paymentCreditable: Boolean
  paymentErrorMessage: String
  phone: String
  phone2: String
  refId: String
  replacementAdditionalPrice: String
  replacementPaymentStatusId: Float
  replacementPriceMoneyTransferCode: String
  saleRefId: String
  selectedShippingServiceId: Float
  shippingRate: String
  shippingRateCod: String
  stateId: Float!
  subtotalPrice: String
  taxRate: Float
  totalCouponDiscount: String
  totalDiscount: String
  totalPrice: String
  totalPriceOld: Float
  totalTax: String
  totalVisitorShare: Float
  totalWalletCharged: String
  trackingCode: String
  updatedAt: DateTime
  useWallet: Boolean
  userId: Float
  visitorCouponId: Float
  visitorCouponRate: Float
  visitorGroupId: Float
  visitorId: Float
  visitorRate: Float
  visitorShareCalculated: Float!
  wholesaleRemainingMoneyTransferRefCode: String
  zipCode: String
}

input CreateInvoiceInput {
  accountingDescription: String
  additions: String!
  address: AddressDomain
  addressId: Float!
  canReturn: Boolean!
  cashOnDelivery: Boolean!
  chaparSettlementStatus: ChaparSettlementStatusDomain
  chaparSettlementStatusId: Float
  chaparStatus: String
  chaparTrackingHistories: [ChaparTrackingHistoryDomain!]
  containsPadsOnly: Boolean!
  coupon: CouponDomain
  couponId: Float
  coupons: [CouponDomain!]
  createdAt: DateTime
  crmCompanyId: String
  crmCompanyPersonId: String
  crmPreOrderId: String
  currentInvoiceStatus: InvoiceStatusDomain
  currentInvoiceStatusId: Float!
  deadlineDate: String
  deadlineDateOld: String
  deliveredDate: DateTime
  description: String
  digikalaShare: Float
  digikalaSharePercent: Float
  forDigikala: Boolean!
  freeDelivery: Boolean!
  hasPriority: Boolean!
  id: Float!
  invoiceAddressValidationResults: [InvoiceAddressValidationResultDomain!]
  invoiceAddresses: [InvoiceAddressDomain!]
  invoiceBankGatewayHistories: [InvoiceBankGatewayHistoryDomain!]
  invoiceHistories: [InvoiceHistoryDomain!]
  invoiceInvoiceStatuses: [InvoiceInvoiceStatusDomain!]
  invoiceMode: InvoiceModeDomain
  invoiceModeId: Float
  invoiceNegotiations: [InvoiceNegotiationDomain!]
  invoiceNumber: String
  invoicePaymentHistories: [InvoicePaymentHistoryDomain!]
  invoicePaymentStatus: InvoicePaymentStatusDomain
  invoicePaymentStatusId: Float
  invoicePayments: [InvoicePaymentDomain!]
  invoiceProductHistories: [InvoiceProductHistoryDomain!]
  invoiceProducts: [InvoiceProductDomain!]
  invoiceRatesResults: [InvoiceRatesResultDomain!]
  invoiceReversals: [InvoiceReversalDomain!]
  invoiceShippingRates: [InvoiceShippingRateDomain!]
  invoiceType: InvoiceTypeDomain
  invoiceTypeId: Float
  invoices: [InvoiceDomain!]
  isChaparDelivery: Boolean!
  isDepot: Boolean!
  isForAdvertisement: Boolean!
  isReversible: Boolean!
  issueDate: DateTime!
  lastName: String!
  lockState: Float
  lockState2: InvoiceStatusDomain
  lockStateDescription: String
  mah: Float
  moneyTransferConfirmed: Boolean
  moneyTransferConfirmedBy: Float
  moneyTransferConfirmedBy2: UserDomain
  moneyTransferRefCode: String
  name: String!
  needsReview: Boolean!
  orderId: String
  packageCount: Float
  paidCodShippingRate: Float!
  parentInvoice: InvoiceDomain
  parentInvoiceId: Float
  partnerCode: String!
  paymentCreditable: Boolean!
  paymentErrorMessage: String
  paymentMethodFields: [PaymentMethodFieldDomain!]
  refId: String
  replacementAdditionalPrice: String!
  replacementPaymentStatus: InvoicePaymentStatusDomain
  replacementPaymentStatusId: Float
  replacementPriceMoneyTransferCode: String
  returnRequestHistories: [ReturnRequestHistoryDomain!]
  returnRequests: [ReturnRequestDomain!]
  returnedInvoices: [ReturnedInvoiceDomain!]
  returnedInvoices2: [ReturnedInvoiceDomain!]
  roz: Float
  sal: Float
  saleRefId: String
  seenAt: DateTime
  selectedShippingServiceId: Float
  sepidarCode: Float
  sepidarId: Float
  shipmentUuid: String
  shippingRate: String
  shippingRateCod: String
  subtotalPrice: String
  taxRate: Float
  totalCouponDiscount: String
  totalDiscount: String
  totalPrice: String
  totalPriceOld: Float
  totalTax: String
  totalVisitorShare: Float
  totalWalletCharged: String
  trackingCode: String
  updatedAt: DateTime
  useWallet: Boolean!
  user: UserDomain
  userId: Float
  visitor: VisitorDomain
  visitorCoupon: VisitorCouponDomain
  visitorCouponId: Float
  visitorCouponRate: Float
  visitorGroup: VisitorGroupDomain
  visitorGroupId: Float
  visitorId: Float
  visitorRate: Float
  visitorShareCalculated: Boolean!
  wholesaleRemainingMoneyTransferRefCode: String
}

input CreateInvoiceInvoiceStatusInput {
  comment: String
  createdAt: DateTime
  id: Float!
  invoice: InvoiceDomain
  invoiceId: Float!
  invoiceStatus: InvoiceStatusDomain
  invoiceStatusId: Float!
  updatedAt: DateTime
  user: UserDomain
  userId: Float
}

input CreateInvoiceModeInput {
  createdAt: DateTime
  id: Float!
  invoices: [InvoiceDomain!]
  name: String!
  updatedAt: DateTime
}

input CreateInvoiceNegotiationInput {
  createdAt: DateTime
  id: Float!
  invoice: InvoiceDomain
  invoiceId: Float!
  negotiation: NegotiationDomain
  negotiationId: Float!
  updatedAt: DateTime
}

input CreateInvoicePaymentHistoryInput {
  amount: String!
  chequeBank: String
  chequeDate: String
  chequeNumber: String
  chequePayee: String
  confirmedBy: Float
  confirmedBy2: UserDomain
  createdAt: DateTime
  description: String
  forShipping: Boolean
  id: Float!
  invoice: InvoiceDomain!
  invoiceHistory: InvoiceHistoryDomain
  invoiceHistoryId: Float
  invoiceId: Float!
  invoicePayment: InvoicePaymentDomain!
  invoicePaymentId: Float!
  invoicePaymentType: InvoicePaymentTypeDomain!
  invoicePaymentTypeId: Float!
  isConfirmed: Boolean
  paymentDate: String
  refCode: String
  refCodeSales: String
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
}

input CreateInvoicePaymentInput {
  amount: String!
  chequeBank: String
  chequeDate: String
  chequeNumber: String
  chequePayee: String
  confirmedBy: Float
  confirmedBy2: UserDomain
  createdAt: DateTime
  description: String
  forShipping: Boolean!
  id: Float!
  invoice: InvoiceDomain
  invoiceId: Float!
  invoicePaymentHistories: [InvoicePaymentHistoryDomain!]
  invoicePaymentType: InvoicePaymentTypeDomain
  invoicePaymentTypeId: Float!
  isConfirmed: Boolean
  paymentDate: String
  refCode: String
  refCodeSales: String
  updatedAt: DateTime
  user: UserDomain
  userId: Float!
}

input CreateInvoicePaymentStatusInput {
  createdAt: DateTime
  id: Float!
  invoices: [InvoiceDomain!]
  invoices2: [InvoiceDomain!]
  name: String
  updatedAt: DateTime
}

input CreateInvoicePaymentTypeInput {
  createdAt: DateTime
  id: Float!
  invoicePaymentHistories: [InvoicePaymentHistoryDomain!]
  invoicePayments: [InvoicePaymentDomain!]
  name: String!
  preorderRegisters: [PreorderRegisterDomain!]
  updatedAt: DateTime
}

input CreateInvoiceProductHistoryInput {
  bundleCount: Float!
  bundlePrice: String!
  count: Float!
  createdAt: DateTime
  description: String
  design: DesignDomain
  designId: Float
  designerPricePercentage: Float
  designerPriceShare: Float
  discount: String
  discountId: Float
  discount_2: DiscountDomain
  id: Float!
  invoice: InvoiceDomain!
  invoiceHistory: InvoiceHistoryDomain!
  invoiceHistoryId: Float!
  invoiceId: Float!
  invoiceProduct: InvoiceProductDomain
  invoiceProductId: Float
  invoiceProductItemsCreated: Boolean!
  isCouponApplicable: Boolean!
  itemsFromDepot: Float
  itemsToProduce: Float
  length: Float
  manuallyAdded: Boolean!
  padId: Float
  price: String!
  pricePerInch: Float
  product: ProductDomain
  productId: Float
  relatedProduct: ProductDomain
  relatedProductId: Float
  relatedSubproduct: SubproductDomain
  relatedSubproductId: Float
  stockCount: Float
  subproduct: SubproductDomain
  subproductId: Float
  totalCouponDiscount: String
  totalDiscount: String
  totalPrice: Float
  updatedAt: DateTime
  width: Float
  withPad: Boolean!
}

input CreateInvoiceProductInput {
  bundleCount: Float!
  bundlePrice: String!
  carpetUsagePlaceInvoiceProducts: [CarpetUsagePlaceInvoiceProductDomain!]
  count: Float!
  createdAt: DateTime
  description: String
  design: DesignDomain
  designId: Float
  designerPricePercentage: Float
  designerPriceShare: Float
  discount: String
  discountId: Float
  discount_2: DiscountDomain
  gift: Float!
  id: Float!
  invoice: InvoiceDomain
  invoiceId: Float!
  invoiceProductHistories: [InvoiceProductHistoryDomain!]
  invoiceProductItems: [InvoiceProductItemDomain!]
  invoiceProductItemsCreated: Boolean!
  invoiceReversalItems: [InvoiceReversalItemDomain!]
  isCouponApplicable: Boolean!
  itemsFromDepot: Float
  itemsToProduce: Float
  length: Float
  manuallyAdded: Boolean!
  pad: SubproductDomain
  padId: Float
  price: String!
  pricePerInch: Float
  product: ProductDomain
  productId: Float
  relatedProduct: ProductDomain
  relatedProductId: Float
  relatedSubproduct: SubproductDomain
  relatedSubproductId: Float
  returnRequestItemHistories: [ReturnRequestItemHistoryDomain!]
  returnRequestItems: [ReturnRequestItemDomain!]
  returnedInvoiceProducts: [ReturnedInvoiceProductDomain!]
  sepidarId: Float
  stockCount: Float
  subproduct: SubproductDomain
  subproductId: Float
  subproductStockHistories: [SubproductStockHistoryDomain!]
  tempDepotItemsCreated: Boolean!
  totalCouponDiscount: String
  totalDiscount: String
  totalPrice: Float
  updatedAt: DateTime
  width: Float
  withPad: Boolean!
}

input CreateInvoiceProductItemInput {
  code: String!
  createdAt: DateTime!
  currentStatus: InvoiceProductStatusDomain
  currentStatusId: Float!
  damageCause: String
  damageReason: DamageReasonDomain
  damageReasonId: Float
  damageType: Float
  exitControlItems: [ExitControlItemDomain!]
  fromDepot: Boolean
  id: Float!
  invoiceProduct: InvoiceProductDomain
  invoiceProductId: Float!
  invoiceProductItemInvoiceProductStatuses: [InvoiceProductItemInvoiceProductStatusDomain!]
  isInsertedIntoSepidar: Boolean!
  isPrintedAndHeated: Boolean
  isReversed: Boolean!
  isTagPrinted: Boolean
  padCode: String
  predictedDateForReceivedByRepository: String
  printProfile: PrintProfileDomain
  printProfileId: Float
  printRip: PrintRipDomain
  printRipId: Float
  productionRoll: ProductionRollDomain
  productionRollId: Float
  rollReferenceCode: String
  row: Float!
  sortOrder: Float
  tagSortOrder: Float
  tempStatusId: Float
  updatedAt: DateTime!
}

input CreateInvoiceProductItemInvoiceProductStatusInput {
  comment: String
  createdAt: DateTime!
  id: Float!
  invoiceProductItem: InvoiceProductItemDomain
  invoiceProductItemId: Float!
  invoiceProductStatus: InvoiceProductStatusDomain
  invoiceProductStatusId: Float!
  updatedAt: DateTime!
  user: UserDomain
  userId: Float!
}

input CreateInvoiceProductStatusInput {
  color: String!
  createdAt: DateTime!
  id: Float!
  invoiceProductItemInvoiceProductStatuses: [InvoiceProductItemInvoiceProductStatusDomain!]!
  invoiceProductItems: [InvoiceProductItemDomain!]!
  status: String!
  step: Float
  stepShaggy: Float
  updatedAt: DateTime!
}

input CreateInvoiceRatesResultInput {
  address: AddressDomain
  addressId: Float!
  createdAt: DateTime
  id: Float!
  invoice: InvoiceDomain
  invoiceId: Float!
  ratesReplyCodResult: String
  ratesReplyResult: String
  shippingService: ShippingServiceDomain
  shippingServiceId: Float
  updatedAt: DateTime
}

input CreateInvoiceReversalInput {
  createdAt: DateTime
  id: Float!
  invoice: InvoiceDomain
  invoiceId: Float!
  invoiceReversalItems: [InvoiceReversalItemDomain!]
  invoiceStatus: InvoiceStatusDomain
  invoiceStatusId: Float!
  isReviewed: Boolean!
  reviewedBy: Float
  reviewedBy2: UserDomain
  reviewedDate: DateTime
  updatedAt: DateTime
  wholeInvoice: Boolean!
}

input CreateInvoiceReversalItemInput {
  count: Float!
  createdAt: DateTime
  id: Float!
  invoiceProduct: InvoiceProductDomain
  invoiceProductId: Float!
  invoiceReversal: InvoiceReversalDomain
  invoiceReversalId: Float!
  updatedAt: DateTime
  withPad: Boolean!
}

input CreateInvoiceShippingRateInput {
  createdAt: DateTime
  id: Float!
  invoice: InvoiceDomain
  invoiceId: Float!
  shippingRate: String!
  shippingRateCod: String
  shippingService: ShippingServiceDomain
  shippingServiceId: Float!
  updatedAt: DateTime
}

input CreateInvoiceStatusInput {
  color: String
  createdAt: DateTime
  id: Float!
  invoiceInvoiceStatuses: [InvoiceInvoiceStatusDomain!]
  invoiceReversals: [InvoiceReversalDomain!]
  invoices: [InvoiceDomain!]
  invoices2: [InvoiceDomain!]
  notificationEmails: String
  notificationNumbers: String
  smsToCustomer: Boolean
  status: String!
  updatedAt: DateTime
}

input CreateInvoiceTypeInput {
  createdAt: DateTime
  id: Float!
  invoices: [InvoiceDomain!]
  name: String!
  updatedAt: DateTime
}

input CreateLabelInput {
  color: String!
  createdAt: DateTime
  id: Float!
  labelProducts: [LabelProductDomain!]
  name: String!
  textColor: String!
  updatedAt: DateTime
}

input CreateLabelProductInput {
  createdAt: DateTime
  id: Float!
  label: LabelDomain
  labelId: Float!
  product: ProductDomain
  productId: Float!
  updatedAt: DateTime
}

input CreateManyActivitiesInput {
  """Array of records to create"""
  activities: [CreateActivityInput!]!
}

input CreateManyAddressesInput {
  """Array of records to create"""
  addresses: [CreateAddressInput!]!
}

input CreateManyAttributeAttributeGroupsInput {
  """Array of records to create"""
  attributeAttributeGroups: [CreateAttributeAttributeGroupInput!]!
}

input CreateManyAttributeGroupsInput {
  """Array of records to create"""
  attributeGroups: [CreateAttributeGroupInput!]!
}

input CreateManyAttributeItemsInput {
  """Array of records to create"""
  attributeItems: [CreateAttributeItemInput!]!
}

input CreateManyAttributeProductsInput {
  """Array of records to create"""
  attributeProducts: [CreateAttributeProductInput!]!
}

input CreateManyAttributeSubproductsInput {
  """Array of records to create"""
  attributeSubproducts: [CreateAttributeSubproductInput!]!
}

input CreateManyAttributesInput {
  """Array of records to create"""
  attributes: [CreateAttributeInput!]!
}

input CreateManyAutomationEventsInput {
  """Array of records to create"""
  automationEvents: [CreateAutomationEventInput!]!
}

input CreateManyAutomationRfmScoresInput {
  """Array of records to create"""
  automationRfmScores: [CreateAutomationRfmScoreInput!]!
}

input CreateManyBasicCarpetBordersInput {
  """Array of records to create"""
  basicCarpetBorders: [CreateBasicCarpetBorderInput!]!
}

input CreateManyBasicCarpetBrandsInput {
  """Array of records to create"""
  basicCarpetBrands: [CreateBasicCarpetBrandInput!]!
}

input CreateManyBasicCarpetColorsInput {
  """Array of records to create"""
  basicCarpetColors: [CreateBasicCarpetColorInput!]!
}

input CreateManyBasicCarpetDesignersInput {
  """Array of records to create"""
  basicCarpetDesigners: [CreateBasicCarpetDesignerInput!]!
}

input CreateManyBasicCarpetDesignsInput {
  """Array of records to create"""
  basicCarpetDesigns: [CreateBasicCarpetDesignInput!]!
}

input CreateManyBasicCarpetMaterialsInput {
  """Array of records to create"""
  basicCarpetMaterials: [CreateBasicCarpetMaterialInput!]!
}

input CreateManyBasicCarpetSizeDetailsInput {
  """Array of records to create"""
  basicCarpetSizeDetails: [CreateBasicCarpetSizeDetailInput!]!
}

input CreateManyBasicCarpetSizesInput {
  """Array of records to create"""
  basicCarpetSizes: [CreateBasicCarpetSizeInput!]!
}

input CreateManyBasicCarpetTypesInput {
  """Array of records to create"""
  basicCarpetTypes: [CreateBasicCarpetTypeInput!]!
}

input CreateManyBordersInput {
  """Array of records to create"""
  borders: [CreateBorderInput!]!
}

input CreateManyCampaignFreeOfferSizesInput {
  """Array of records to create"""
  campaignFreeOfferSizes: [CreateCampaignFreeOfferSizeInput!]!
}

input CreateManyCampaignFreeOffersInput {
  """Array of records to create"""
  campaignFreeOffers: [CreateCampaignFreeOfferInput!]!
}

input CreateManyCampaignGoldCoinSubsInput {
  """Array of records to create"""
  campaignGoldCoinSubs: [CreateCampaignGoldCoinSubInput!]!
}

input CreateManyCampaignInstagramFollowsInput {
  """Array of records to create"""
  campaignInstagramFollows: [CreateCampaignInstagramFollowInput!]!
}

input CreateManyCampaignPetFormsInput {
  """Array of records to create"""
  campaignPetForms: [CreateCampaignPetFormInput!]!
}

input CreateManyCampaignRoomvoImagesInput {
  """Array of records to create"""
  campaignRoomvoImages: [CreateCampaignRoomvoImageInput!]!
}

input CreateManyCampaignRoomvoVotesInput {
  """Array of records to create"""
  campaignRoomvoVotes: [CreateCampaignRoomvoVoteInput!]!
}

input CreateManyCampaignSubscriptionsInput {
  """Array of records to create"""
  campaignSubscriptions: [CreateCampaignSubscriptionInput!]!
}

input CreateManyCampaignUefaEuroSubscriberHistoriesInput {
  """Array of records to create"""
  campaignUefaEuroSubscriberHistories: [CreateCampaignUefaEuroSubscriberHistoryInput!]!
}

input CreateManyCampaignUefaEuroSubscribersInput {
  """Array of records to create"""
  campaignUefaEuroSubscribers: [CreateCampaignUefaEuroSubscriberInput!]!
}

input CreateManyCampaignVotingImageUsersInput {
  """Array of records to create"""
  campaignVotingImageUsers: [CreateCampaignVotingImageUserInput!]!
}

input CreateManyCampaignVotingImagesInput {
  """Array of records to create"""
  campaignVotingImages: [CreateCampaignVotingImageInput!]!
}

input CreateManyCarpetFeatureUsersInput {
  """Array of records to create"""
  carpetFeatureUsers: [CreateCarpetFeatureUserInput!]!
}

input CreateManyCarpetFeaturesInput {
  """Array of records to create"""
  carpetFeatures: [CreateCarpetFeatureInput!]!
}

input CreateManyCarpetMaterialsInput {
  """Array of records to create"""
  carpetMaterials: [CreateCarpetMaterialInput!]!
}

input CreateManyCarpetShapesInput {
  """Array of records to create"""
  carpetShapes: [CreateCarpetShapeInput!]!
}

input CreateManyCarpetSizesInput {
  """Array of records to create"""
  carpetSizes: [CreateCarpetSizeInput!]!
}

input CreateManyCarpetUsagePlaceInvoiceProductsInput {
  """Array of records to create"""
  carpetUsagePlaceInvoiceProducts: [CreateCarpetUsagePlaceInvoiceProductInput!]!
}

input CreateManyCarpetUsagePlaceUsersInput {
  """Array of records to create"""
  carpetUsagePlaceUsers: [CreateCarpetUsagePlaceUserInput!]!
}

input CreateManyCarpetUsagePlacesInput {
  """Array of records to create"""
  carpetUsagePlaces: [CreateCarpetUsagePlaceInput!]!
}

input CreateManyChaparSettlementStatusesInput {
  """Array of records to create"""
  chaparSettlementStatuses: [CreateChaparSettlementStatusInput!]!
}

input CreateManyChaparTrackingHistoriesInput {
  """Array of records to create"""
  chaparTrackingHistories: [CreateChaparTrackingHistoryInput!]!
}

input CreateManyCitiesInput {
  """Array of records to create"""
  cities: [CreateCityInput!]!
}

input CreateManyCitiesSepidarsInput {
  """Array of records to create"""
  citiesSepidars: [CreateCitiesSepidarInput!]!
}

input CreateManyCity2sInput {
  """Array of records to create"""
  city2s: [CreateCity2Input!]!
}

input CreateManyColorCategoriesInput {
  """Array of records to create"""
  colorCategories: [CreateColorCategoryInput!]!
}

input CreateManyColorCategoryDetailsInput {
  """Array of records to create"""
  colorCategoryDetails: [CreateColorCategoryDetailInput!]!
}

input CreateManyColorCategorySubproductsInput {
  """Array of records to create"""
  colorCategorySubproducts: [CreateColorCategorySubproductInput!]!
}

input CreateManyColorsInput {
  """Array of records to create"""
  colors: [CreateColorInput!]!
}

input CreateManyConfigsInput {
  """Array of records to create"""
  configs: [CreateConfigInput!]!
}

input CreateManyContactFormHistoriesInput {
  """Array of records to create"""
  contactFormHistories: [CreateContactFormHistoryInput!]!
}

input CreateManyContactFormStatusesInput {
  """Array of records to create"""
  contactFormStatuses: [CreateContactFormStatusInputs!]!
}

input CreateManyContactFormsInput {
  """Array of records to create"""
  contactForms: [CreateContactFormInput!]!
}

input CreateManyCountriesInput {
  """Array of records to create"""
  countries: [CreateCountryInput!]!
}

input CreateManyCouponSubjectsInput {
  """Array of records to create"""
  couponSubjects: [CreateCouponSubjectInput!]!
}

input CreateManyCouponsInput {
  """Array of records to create"""
  coupons: [CreateCouponInput!]!
}

input CreateManyCrmPresentationsInput {
  """Array of records to create"""
  crmPresentations: [CreateCrmPresentationInput!]!
}

input CreateManyCustomerImageProductsInput {
  """Array of records to create"""
  customerImageProducts: [CreateCustomerImageProductInput!]!
}

input CreateManyCustomerRequestFilesInput {
  """Array of records to create"""
  customerRequestFiles: [CreateCustomerRequestFileInput!]!
}

input CreateManyCustomerRequestsInput {
  """Array of records to create"""
  customerRequests: [CreateCustomerRequestInput!]!
}

input CreateManyCustomerVideoProductsInput {
  """Array of records to create"""
  customerVideoProducts: [CreateCustomerVideoProductInput!]!
}

input CreateManyDamageReasonsInput {
  """Array of records to create"""
  damageReasons: [CreateDamageReasonInput!]!
}

input CreateManyDepartmentsInput {
  """Array of records to create"""
  departments: [CreateDepartmentInput!]!
}

input CreateManyDesignersProductPriceRangesInput {
  """Array of records to create"""
  designersProductPriceRanges: [CreateDesignersProductPriceRangeInput!]!
}

input CreateManyDesignsInput {
  """Array of records to create"""
  designs: [CreateDesignInput!]!
}

input CreateManyDiscountNotificationsInput {
  """Array of records to create"""
  discountNotifications: [CreateDiscountNotificationInput!]!
}

input CreateManyDiscountSubjectsInput {
  """Array of records to create"""
  discountSubjects: [CreateDiscountSubjectInput!]!
}

input CreateManyDiscountsInput {
  """Array of records to create"""
  discounts: [CreateDiscountInput!]!
}

input CreateManyExitControlItemsInput {
  """Array of records to create"""
  exitControlItems: [CreateExitControlItemInput!]!
}

input CreateManyExitControlsInput {
  """Array of records to create"""
  exitControls: [CreateExitControlInput!]!
}

input CreateManyExportProductsInput {
  """Array of records to create"""
  exportProducts: [CreateExportProductInput!]!
}

input CreateManyFailedJobsInput {
  """Array of records to create"""
  failedJobs: [CreateFailedJobInput!]!
}

input CreateManyFavoriteProductsInput {
  """Array of records to create"""
  favoriteProducts: [CreateFavoriteProductInput!]!
}

input CreateManyFedexAddressValidationAttributesInput {
  """Array of records to create"""
  fedexAddressValidationAttributes: [CreateFedexAddressValidationAttributeInput!]!
}

input CreateManyFetchSiteUrlsInput {
  """Array of records to create"""
  fetchSiteUrls: [CreateFetchSiteUrlInput!]!
}

input CreateManyFileNegotiationsInput {
  """Array of records to create"""
  fileNegotiations: [CreateFileNegotiationInput!]!
}

input CreateManyFilesInput {
  """Array of records to create"""
  files: [CreateFileInput!]!
}

input CreateManyGhazalsInput {
  """Array of records to create"""
  ghazals: [CreateGhazalInputs!]!
}

input CreateManyGoogleFormUtmsInput {
  """Array of records to create"""
  googleFormUtms: [CreateGoogleFormUtmInput!]!
}

input CreateManyHeardAboutUsOptionsInput {
  """Array of records to create"""
  heardAboutUsOptions: [CreateHeardAboutUsOptionInput!]!
}

input CreateManyHelpDesksInput {
  """Array of records to create"""
  helpDesks: [CreateHelpDeskInput!]!
}

input CreateManyHolidaysInput {
  """Array of records to create"""
  holidays: [CreateHolidayInput!]!
}

input CreateManyHomePageCustomerImagesInput {
  """Array of records to create"""
  homePageCustomerImages: [CreateHomePageCustomerImageInput!]!
}

input CreateManyHypersInput {
  """Array of records to create"""
  hypers: [CreateHyperInput!]!
}

input CreateManyHyperstarCodesInput {
  """Array of records to create"""
  hyperstarCodes: [CreateHyperstarCodeInput!]!
}

input CreateManyImageLayersInput {
  """Array of records to create"""
  imageLayers: [CreateImageLayerInput!]!
}

input CreateManyImageProductsInput {
  """Array of records to create"""
  imageProducts: [CreateImageProductInput!]!
}

input CreateManyImageSizesInput {
  """Array of records to create"""
  imageSizes: [CreateImageSizeInput!]!
}

input CreateManyImageSubproductsInput {
  """Array of records to create"""
  imageSubproducts: [CreateImageSubproductInput!]!
}

input CreateManyImagesInput {
  """Array of records to create"""
  images: [CreateImageInput!]!
}

input CreateManyImagesSizeGuidesDetailsInput {
  """Array of records to create"""
  imagesSizeGuidesDetails: [CreateImagesSizeGuidesDetailInput!]!
}

input CreateManyImpersonateHistoriesInput {
  """Array of records to create"""
  impersonateHistories: [CreateImpersonateHistoryInput!]!
}

input CreateManyIncredibleOfferSentNotificationsInput {
  """Array of records to create"""
  incredibleOfferSentNotifications: [CreateIncredibleOfferSentNotificationInput!]!
}

input CreateManyIncredibleOffersInput {
  """Array of records to create"""
  incredibleOffers: [CreateIncredibleOfferInput!]!
}

input CreateManyInstagramFeedsInput {
  """Array of records to create"""
  instagramFeeds: [CreateInstagramFeedInput!]!
}

input CreateManyInvitationCodesInput {
  """Array of records to create"""
  invitationCodes: [CreateInvitationCodeInput!]!
}

input CreateManyInvoiceAddressValidationResultsInput {
  """Array of records to create"""
  invoiceAddressValidationResults: [CreateInvoiceAddressValidationResultInput!]!
}

input CreateManyInvoiceAddressesInput {
  """Array of records to create"""
  invoiceAddresses: [CreateInvoiceAddressInput!]!
}

input CreateManyInvoiceBankGatewayHistoriesInput {
  """Array of records to create"""
  invoiceBankGatewayHistories: [CreateInvoiceBankGatewayHistoryInput!]!
}

input CreateManyInvoiceHistoriesInput {
  """Array of records to create"""
  invoiceHistories: [CreateInvoiceHistoryInput!]!
}

input CreateManyInvoiceInvoiceStatusesInput {
  """Array of records to create"""
  invoiceInvoiceStatuses: [CreateInvoiceInvoiceStatusInput!]!
}

input CreateManyInvoiceModesInput {
  """Array of records to create"""
  invoiceModes: [CreateInvoiceModeInput!]!
}

input CreateManyInvoiceNegotiationsInput {
  """Array of records to create"""
  invoiceNegotiations: [CreateInvoiceNegotiationInput!]!
}

input CreateManyInvoicePaymentHistoriesInput {
  """Array of records to create"""
  invoicePaymentHistories: [CreateInvoicePaymentHistoryInput!]!
}

input CreateManyInvoicePaymentStatusesInput {
  """Array of records to create"""
  invoicePaymentStatuses: [CreateInvoicePaymentStatusInput!]!
}

input CreateManyInvoicePaymentTypesInput {
  """Array of records to create"""
  invoicePaymentTypes: [CreateInvoicePaymentTypeInput!]!
}

input CreateManyInvoicePaymentsInput {
  """Array of records to create"""
  invoicePayments: [CreateInvoicePaymentInput!]!
}

input CreateManyInvoiceProductHistoriesInput {
  """Array of records to create"""
  invoiceProductHistories: [CreateInvoiceProductHistoryInput!]!
}

input CreateManyInvoiceProductItemInvoiceProductStatusesInput {
  """Array of records to create"""
  invoiceProductItemInvoiceProductStatuses: [CreateInvoiceProductItemInvoiceProductStatusInput!]!
}

input CreateManyInvoiceProductItemsInput {
  """Array of records to create"""
  invoiceProductItems: [CreateInvoiceProductItemInput!]!
}

input CreateManyInvoiceProductStatusesInput {
  """Array of records to create"""
  invoiceProductStatuses: [CreateInvoiceProductStatusInput!]!
}

input CreateManyInvoiceProductsInput {
  """Array of records to create"""
  invoiceProducts: [CreateInvoiceProductInput!]!
}

input CreateManyInvoiceRatesResultsInput {
  """Array of records to create"""
  invoiceRatesResults: [CreateInvoiceRatesResultInput!]!
}

input CreateManyInvoiceReversalItemsInput {
  """Array of records to create"""
  invoiceReversalItems: [CreateInvoiceReversalItemInput!]!
}

input CreateManyInvoiceReversalsInput {
  """Array of records to create"""
  invoiceReversals: [CreateInvoiceReversalInput!]!
}

input CreateManyInvoiceShippingRatesInput {
  """Array of records to create"""
  invoiceShippingRates: [CreateInvoiceShippingRateInput!]!
}

input CreateManyInvoiceStatusesInput {
  """Array of records to create"""
  invoiceStatuses: [CreateInvoiceStatusInput!]!
}

input CreateManyInvoiceTypesInput {
  """Array of records to create"""
  invoiceTypes: [CreateInvoiceTypeInput!]!
}

input CreateManyInvoicesInput {
  """Array of records to create"""
  invoices: [CreateInvoiceInput!]!
}

input CreateManyLabelProductsInput {
  """Array of records to create"""
  labelProducts: [CreateLabelProductInput!]!
}

input CreateManyLabelsInput {
  """Array of records to create"""
  labels: [CreateLabelInput!]!
}

input CreateManyMellatPaymentErrorsInput {
  """Array of records to create"""
  mellatPaymentErrors: [CreateMellatPaymentErrorInput!]!
}

input CreateManyMigrationsInput {
  """Array of records to create"""
  migrations: [CreateMigrationInput!]!
}

input CreateManyModelHasPermissionsInput {
  """Array of records to create"""
  modelHasPermissions: [CreateModelHasPermissionInput!]!
}

input CreateManyModelHasRolesInput {
  """Array of records to create"""
  modelHasRoles: [CreateModelHasRoleInput!]!
}

input CreateManyModelVisitsInput {
  """Array of records to create"""
  modelVisits: [CreateModelVisitInput!]!
}

input CreateManyModemaAcceleratorImagesInput {
  """Array of records to create"""
  modemaAcceleratorImages: [CreateModemaAcceleratorImageInput!]!
}

input CreateManyModemaAcceleratorVideosInput {
  """Array of records to create"""
  modemaAcceleratorVideos: [CreateModemaAcceleratorVideoInput!]!
}

input CreateManyModemaAcceleratorsInput {
  """Array of records to create"""
  modemaAccelerators: [CreateModemaAcceleratorInput!]!
}

input CreateManyNeedsPhotographySubproductsInput {
  """Array of records to create"""
  needsPhotographySubproducts: [CreateNeedsPhotographySubproductInput!]!
}

input CreateManyNegotiationHistoriesInput {
  """Array of records to create"""
  negotiationHistories: [CreateNegotiationHistoryInput!]!
}

input CreateManyNegotiationStatusesInput {
  """Array of records to create"""
  negotiationStatuses: [CreateNegotiationStatusInput!]!
}

input CreateManyNegotiationStepsInput {
  """Array of records to create"""
  negotiationSteps: [CreateNegotiationStepInput!]!
}

input CreateManyNegotiationTypesInput {
  """Array of records to create"""
  negotiationTypes: [CreateNegotiationTypeInput!]!
}

input CreateManyNegotiationsInput {
  """Array of records to create"""
  negotiations: [CreateNegotiationInput!]!
}

input CreateManyNewBordersInput {
  """Array of records to create"""
  newBorders: [CreateNewBorderInput!]!
}

input CreateManyOauthAccessTokensInput {
  """Array of records to create"""
  oauthAccessTokens: [CreateOauthAccessTokenInput!]!
}

input CreateManyOauthAuthCodesInput {
  """Array of records to create"""
  oauthAuthCodes: [CreateOauthAuthCodeInput!]!
}

input CreateManyOauthClientsInput {
  """Array of records to create"""
  oauthClients: [CreateOauthClientInput!]!
}

input CreateManyOauthPersonalAccessClientsInput {
  """Array of records to create"""
  oauthPersonalAccessClients: [CreateOauthPersonalAccessClientInputs!]!
}

input CreateManyOauthRefreshTokensInput {
  """Array of records to create"""
  oauthRefreshTokens: [CreateOauthRefreshTokenInput!]!
}

input CreateManyOutOfStockButListedProductsInput {
  """Array of records to create"""
  outOfStockButListedProducts: [CreateOutOfStockButListedProductInput!]!
}

input CreateManyPasswordResetsInput {
  """Array of records to create"""
  passwordResets: [CreatePasswordResetInput!]!
}

input CreateManyPatternCategoriesInput {
  """Array of records to create"""
  patternCategories: [CreatePatternCategoryInput!]!
}

input CreateManyPatternLayersInput {
  """Array of records to create"""
  patternLayers: [CreatePatternLayerInput!]!
}

input CreateManyPatternsInput {
  """Array of records to create"""
  patterns: [CreatePatternInput!]!
}

input CreateManyPaymentMethodFieldsInput {
  """Array of records to create"""
  paymentMethodFields: [CreatePaymentMethodFieldInput!]!
}

input CreateManyPaymentMethodsInput {
  """Array of records to create"""
  paymentMethods: [CreatePaymentMethodInput!]!
}

input CreateManyPaymentRequestStatusesInput {
  """Array of records to create"""
  paymentRequestStatuses: [CreatePaymentRequestStatusInput!]!
}

input CreateManyPaymentRequestsInput {
  """Array of records to create"""
  paymentRequests: [CreatePaymentRequestInput!]!
}

input CreateManyPermissionGroupsInput {
  """Array of records to create"""
  permissionGroups: [CreatePermissionGroupInput!]!
}

input CreateManyPermissionsInput {
  """Array of records to create"""
  permissions: [CreatePermissionInput!]!
}

input CreateManyPreorderPreorderStatusesInput {
  """Array of records to create"""
  preorderPreorderStatuses: [CreatePreorderInput!]!
}

input CreateManyPreorderRegistersInput {
  """Array of records to create"""
  preorderRegisters: [CreatePreorderRegisterInput!]!
}

input CreateManyPreorderStatusesInput {
  """Array of records to create"""
  preorderStatuses: [CreatePreorderStatusInput!]!
}

input CreateManyPreordersInput {
  """Array of records to create"""
  preorders: [CreatePreorderInput!]!
}

input CreateManyPriceGroupSizesInput {
  """Array of records to create"""
  priceGroupSizes: [CreatePriceGroupSizeInput!]!
}

input CreateManyPriceGroupsInput {
  """Array of records to create"""
  priceGroups: [CreatePriceGroupInput!]!
}

input CreateManyPrintProfilesInput {
  """Array of records to create"""
  printProfiles: [CreatePrintProfileInput!]!
}

input CreateManyPrintRipsInput {
  """Array of records to create"""
  printRips: [CreatePrintRipInput!]!
}

input CreateManyProductCategoriesInput {
  """Array of records to create"""
  productCategories: [CreateProductCategoryInput!]!
}

input CreateManyProductCategoryDetailsInput {
  """Array of records to create"""
  productCategoryDetails: [CreateProductCategoryDetailInput!]!
}

input CreateManyProductCategoryRatesInput {
  """Array of records to create"""
  productCategoryRates: [CreateProductCategoryRateInput!]!
}

input CreateManyProductColorImagesInput {
  """Array of records to create"""
  productColorImages: [CreateProductColorImageInput!]!
}

input CreateManyProductColorSalesInput {
  """Array of records to create"""
  productColorSales: [CreateProductColorSaleInput!]!
}

input CreateManyProductCommentLikesInput {
  """Array of records to create"""
  productCommentLikes: [CreateProductCommentLikeInput!]!
}

input CreateManyProductCommentsInput {
  """Array of records to create"""
  productComments: [CreateProductCommentInput!]!
}

input CreateManyProductLikesInput {
  """Array of records to create"""
  productLikes: [CreateProductLikeInput!]!
}

input CreateManyProductProductCategoriesInput {
  """Array of records to create"""
  productProductCategories: [CreateProductProductCategoryInput!]!
}

input CreateManyProductRateAveragesInput {
  """Array of records to create"""
  productRateAverages: [CreateProductRateAverageInput!]!
}

input CreateManyProductRatesInput {
  """Array of records to create"""
  productRates: [CreateProductRateInput!]!
}

input CreateManyProductTagsInput {
  """Array of records to create"""
  productTags: [CreateProductTagInput!]!
}

input CreateManyProductVideosInput {
  """Array of records to create"""
  productVideos: [CreateProductVideoInput!]!
}

input CreateManyProductionPadProductionPadStatusesInput {
  """Array of records to create"""
  productionPadProductionPadStatuses: [CreateProductionPadProductionPadStatusInput!]!
}

input CreateManyProductionPadStatusesInput {
  """Array of records to create"""
  productionPadStatuses: [CreateProductionPadStatusInput!]!
}

input CreateManyProductionPadsInput {
  """Array of records to create"""
  productionPads: [CreateProductionPadInput!]!
}

input CreateManyProductionReceiptTypesInput {
  """Array of records to create"""
  productionReceiptTypes: [CreateProductionReceiptTypeInput!]!
}

input CreateManyProductionRollsInput {
  """Array of records to create"""
  productionRolls: [CreateProductionRollInput!]!
}

input CreateManyProductsInput {
  """Array of records to create"""
  products: [CreateProductInput!]!
}

input CreateManyRatesInput {
  """Array of records to create"""
  rates: [CreateRateInput!]!
}

input CreateManyReadyToSendProductsInput {
  """Array of records to create"""
  readyToSendProducts: [CreateReadyToSendProductInput!]!
}

input CreateManyRecommendedProductsInput {
  """Array of records to create"""
  recommendedProducts: [CreateRecommendedProductInput!]!
}

input CreateManyRecommendedSubproductsInput {
  """Array of records to create"""
  recommendedSubproducts: [CreateRecommendedSubproductInput!]!
}

input CreateManyRedisSavedKeysInput {
  """Array of records to create"""
  redisSavedKeys: [CreateRedisSavedKeyInputs!]!
}

input CreateManyRelatedProductsInput {
  """Array of records to create"""
  relatedProducts: [CreateRelatedProductInput!]!
}

input CreateManyRetargetingWalletChargesInput {
  """Array of records to create"""
  retargetingWalletCharges: [CreateRetargetingWalletChargeInput!]!
}

input CreateManyReturnItemStatusReturnRequestItemsInput {
  """Array of records to create"""
  returnItemStatusReturnRequestItems: [CreateReturnItemStatusReturnRequestItemInput!]!
}

input CreateManyReturnItemStatusesInput {
  """Array of records to create"""
  returnItemStatuses: [CreateReturnItemStatusInput!]!
}

input CreateManyReturnReasonsInput {
  """Array of records to create"""
  returnReasons: [CreateReturnReasonInput!]!
}

input CreateManyReturnRequestAddressesInput {
  """Array of records to create"""
  returnRequestAddresses: [CreateReturnRequestAddressInput!]!
}

input CreateManyReturnRequestHistoriesInput {
  """Array of records to create"""
  returnRequestHistories: [CreateReturnRequestHistoryInput!]!
}

input CreateManyReturnRequestItemHistoriesInput {
  """Array of records to create"""
  returnRequestItemHistories: [CreateReturnRequestItemHistoryInput!]!
}

input CreateManyReturnRequestItemImagesInput {
  """Array of records to create"""
  returnRequestItemImages: [CreateReturnRequestItemImageInput!]!
}

input CreateManyReturnRequestItemReturnItemStatusesInput {
  """Array of records to create"""
  returnRequestItemReturnItemStatuses: [CreateReturnRequestItemReturnItemStatusInput!]!
}

input CreateManyReturnRequestItemVideosInput {
  """Array of records to create"""
  returnRequestItemVideos: [CreateReturnRequestItemVideoInput!]!
}

input CreateManyReturnRequestItemsInput {
  """Array of records to create"""
  returnRequestItems: [CreateReturnRequestItemInput!]!
}

input CreateManyReturnRequestReturnStatusesInput {
  """Array of records to create"""
  returnRequestReturnStatuses: [CreateReturnRequestReturnStatusInput!]!
}

input CreateManyReturnRequestsInput {
  """Array of records to create"""
  returnRequests: [CreateReturnRequestInput!]!
}

input CreateManyReturnStatusesInput {
  """Array of records to create"""
  returnStatuses: [CreateReturnStatusInput!]!
}

input CreateManyReturnTypesInput {
  """Array of records to create"""
  returnTypes: [CreateReturnTypeInput!]!
}

input CreateManyReturnedInvoiceProductsInput {
  """Array of records to create"""
  returnedInvoiceProducts: [CreateReturnedInvoiceProductInput!]!
}

input CreateManyReturnedInvoicesInput {
  """Array of records to create"""
  returnedInvoices: [CreateReturnedInvoiceInput!]!
}

input CreateManyRfmReportsInput {
  """Array of records to create"""
  rfmReports: [CreateRfmReportInput!]!
}

input CreateManyRipTemplateItemsInput {
  """Array of records to create"""
  ripTemplateItems: [CreateRipTemplateItemInput!]!
}

input CreateManyRipTemplatesInput {
  """Array of records to create"""
  ripTemplates: [CreateRfmReportInput!]!
}

input CreateManyRoleDomainsInput {
  """Array of records to create"""
  roleDomains: [CreateRoleInput!]!
}

input CreateManyRoleHasPermissionsInput {
  """Array of records to create"""
  roleHasPermissions: [CreateRoleHasPermissionInput!]!
}

input CreateManyRussiansInput {
  """Array of records to create"""
  russians: [CreateRussianInput!]!
}

input CreateManySenderInformationsInput {
  """Array of records to create"""
  senderInformations: [CreateSenderInformationInput!]!
}

input CreateManyShippingServicesInput {
  """Array of records to create"""
  shippingServices: [CreateShippingServiceInput!]!
}

input CreateManySitemapStaticPagesInput {
  """Array of records to create"""
  sitemapStaticPages: [CreateSitemapStaticPageInput!]!
}

input CreateManySizeGuidesDetailsInput {
  """Array of records to create"""
  sizeGuidesDetails: [CreateSizeGuidesDetailInput!]!
}

input CreateManySizeGuidesInput {
  """Array of records to create"""
  sizeGuides: [CreateSizeGuideInput!]!
}

input CreateManySocialFacebookAccountsInput {
  """Array of records to create"""
  socialFacebookAccounts: [CreateSocialFacebookAccountInput!]!
}

input CreateManySocialGoogleAccountsInput {
  """Array of records to create"""
  socialGoogleAccounts: [CreateSocialGoogleAccountInput!]!
}

input CreateManySpecialOffersInput {
  """Array of records to create"""
  specialOffers: [CreateSpecialOfferInput!]!
}

input CreateManyStatesInput {
  """Array of records to create"""
  states: [CreateStateInput!]!
}

input CreateManySubcolorsInput {
  """Array of records to create"""
  subcolors: [CreateSubcolorInput!]!
}

input CreateManySubproductSpecialImagesInput {
  """Array of records to create"""
  subproductSpecialImages: [CreateSubproductSpecialImageInput!]!
}

input CreateManySubproductStockHistoriesInput {
  """Array of records to create"""
  subproductStockHistories: [CreateSubproductStockHistoryInput!]!
}

input CreateManySubproductVideosInput {
  """Array of records to create"""
  subproductVideos: [CreateSubproductVideoInput!]!
}

input CreateManySubproductsInput {
  """Array of records to create"""
  subproducts: [CreateSubproductInput!]!
}

input CreateManySubscribersInput {
  """Array of records to create"""
  subscribers: [CreateSubscriberInput!]!
}

input CreateManyTagsInput {
  """Array of records to create"""
  tags: [CreateTagInput!]!
}

input CreateManyTempSubproductDiscountsInput {
  """Array of records to create"""
  tempSubproductDiscounts: [CreateTempSubproductDiscountInput!]!
}

input CreateManyTestimonialsInput {
  """Array of records to create"""
  testimonials: [CreateTestimonialInput!]!
}

input CreateManyTextLayersInput {
  """Array of records to create"""
  textLayers: [CreateTextLayerInput!]!
}

input CreateManyTmpRfmReportsInput {
  """Array of records to create"""
  tmpRfmReports: [CreateTmpRfmReportInput!]!
}

input CreateManyTmpRussiaProductsInput {
  """Array of records to create"""
  tmpRussiaProducts: [CreateTmpRussiaProductInput!]!
}

input CreateManyTmpSpainOrdersInput {
  """Array of records to create"""
  tmpSpainOrders: [CreateTmpSpainOrderInput!]!
}

input CreateManyTmpSpanishNamesInput {
  """Array of records to create"""
  tmpSpanishNames: [CreateTmpSpanishNameInput!]!
}

input CreateManyTmpTagChangesPrintsInput {
  """Array of records to create"""
  tmpTagChangesPrints: [CreateTmpTagChangesPrintInput!]!
}

input CreateManyTorobProductsInput {
  """Array of records to create"""
  torobProducts: [CreateTorobProductInput!]!
}

input CreateManyTransactionsInput {
  """Array of records to create"""
  transactions: [CreateTransactionInput!]!
}

input CreateManyUserCartsInput {
  """Array of records to create"""
  userCarts: [CreateUserCartInput!]!
}

input CreateManyUserHasPermissionsInput {
  """Array of records to create"""
  userHasPermissions: [CreateUserHasPermissionInput!]!
}

input CreateManyUserHasRolesInput {
  """Array of records to create"""
  userHasRoles: [CreateUserHasRoleInput!]!
}

input CreateManyUserUtmsInput {
  """Array of records to create"""
  userUtms: [CreateUserUtmInput!]!
}

input CreateManyUsersInput {
  """Array of records to create"""
  users: [CreateUserInput!]!
}

input CreateManyUtmGoogleFormCouponsInput {
  """Array of records to create"""
  utmGoogleFormCoupons: [CreateUtmGoogleFormCouponInput!]!
}

input CreateManyUtmsInput {
  """Array of records to create"""
  utms: [CreateUtmInput!]!
}

input CreateManyVerifyUsersInput {
  """Array of records to create"""
  verifyUsers: [CreateVerifyUserInput!]!
}

input CreateManyVideosInput {
  """Array of records to create"""
  videos: [CreateVideoInput!]!
}

input CreateManyVisitorCouponsInput {
  """Array of records to create"""
  visitorCoupons: [CreateVisitorCouponInput!]!
}

input CreateManyVisitorGroupRatesInput {
  """Array of records to create"""
  visitorGroupRates: [CreateVisitorGroupRateInput!]!
}

input CreateManyVisitorGroupsInput {
  """Array of records to create"""
  visitorGroups: [CreateVisitorGroupInput!]!
}

input CreateManyVisitorSalesInput {
  """Array of records to create"""
  visitorSales: [CreateVisitorSaleInput!]!
}

input CreateManyVisitorsInput {
  """Array of records to create"""
  visitors: [CreateVisitorInput!]!
}

input CreateManyWalletGiftChargesInput {
  """Array of records to create"""
  walletGiftCharges: [CreateWalletGiftChargeInput!]!
}

input CreateManyWalletHistoriesInput {
  """Array of records to create"""
  walletHistories: [CreateWalletHistoryInput!]!
}

input CreateManyWalletsInput {
  """Array of records to create"""
  wallets: [CreateWalletInputs!]!
}

input CreateManyWebsitePagesInput {
  """Array of records to create"""
  websitePages: [CreateWebsitePageInput!]!
}

input CreateManyWebsiteVisitsInput {
  """Array of records to create"""
  websiteVisits: [CreateWebsiteVisitInput!]!
}

input CreateManyWithdrawalRequestStatusesInput {
  """Array of records to create"""
  withdrawalRequestStatuses: [CreateWithdrawalRequestStatusInput!]!
}

input CreateManyWithdrawalRequestsInput {
  """Array of records to create"""
  withdrawalRequests: [CreateWithdrawalRequestInput!]!
}

input CreateManyWonderfulOffersInput {
  """Array of records to create"""
  wonderfulOffers: [CreateWonderfulOfferInput!]!
}

input CreateMellatPaymentErrorInput {
  code: String
  createdAt: DateTime
  id: String!
  message: String
  updatedAt: DateTime
}

input CreateMigrationInput {
  batch: Float!
  id: Float!
  migration: String!
}

input CreateModelHasPermissionInput {
  modelId: String!
  modelType: String!
  permission: PermissionDomain
  permissionId: Float!
}

input CreateModelHasRoleInput {
  modelId: String!
  modelType: String!
  role: RoleDomainInput
  roleId: Float!
}

input CreateModelVisitInput {
  createdAt: DateTime
  id: Float!
  modelId: Float!
  modelName: String!
  updatedAt: DateTime
  user: UserDomain
  userId: Float!
}

input CreateModemaAcceleratorImageInput {
  createdAt: DateTime
  filename: String!
  id: Float!
  mime: String!
  modemaAccelerator: ModemaAcceleratorDomain
  modemaAcceleratorId: Float
  originalFilename: String!
  path: String!
  type: String!
  updatedAt: DateTime
  uploadSource: String!
}

input CreateModemaAcceleratorInput {
  city: String!
  createdAt: DateTime
  details: String!
  hasOffice: String!
  id: Float!
  instagram: String!
  jobCategory: String!
  modemaAcceleratorImages: [ModemaAcceleratorImageDomain!]
  modemaAcceleratorVideos: [ModemaAcceleratorVideoDomain!]
  name: String!
  phone: String!
  pro: String!
  updatedAt: DateTime
}

input CreateModemaAcceleratorVideoInput {
  altText: String
  createdAt: DateTime
  filename: String!
  id: Float!
  mime: String!
  modemaAccelerator: ModemaAcceleratorDomain
  modemaAcceleratorId: Float
  originalFilename: String!
  path: String!
  type: String!
  updatedAt: DateTime
  uploadSource: String!
}

input CreateNeedsPhotographySubproductInput {
  announcedDate: DateTime
  announcedUser: UserDomain
  announcedUserId: Float
  createdAt: DateTime
  deletedAt: DateTime
  id: Float!
  photographyDate: DateTime
  photographyUser: UserDomain
  photographyUserId: Float
  subproduct: SubproductDomain
  subproductId: Float!
  updatedAt: DateTime
}

input CreateNegotiationHistoryInput {
  createdAt: DateTime
  id: Float!
  negotiation: NegotiationDomain
  negotiationId: Float!
  negotiationStatus: NegotiationStatusDomain
  negotiationStatusId: Float!
  newNegotiator: UserDomain
  newNegotiatorId: Float!
  oldNegotiator: UserDomain
  oldNegotiatorId: Float!
  submittedBy: Float!
  submittedBy2: UserDomain
  updatedAt: DateTime
}

input CreateNegotiationInput {
  createdAt: DateTime
  customerId: Float
  dateTime: DateTime!
  fileNegotiations: [FileNegotiationDomain!]
  id: Float!
  invoiceNegotiations: [InvoiceNegotiationDomain!]
  isRead: Boolean!
  name: String
  negotiationHistories: [NegotiationHistoryDomain!]
  negotiationStatus: NegotiationStatusDomain
  negotiationStatusId: Float!
  negotiationSteps: [NegotiationStepDomain!]
  negotiator: UserDomain
  negotiatorId: Float!
  priority: Float!
  submittedBy: Float!
  submittedBy2: UserDomain
  tel: String
  updatedAt: DateTime
}

input CreateNegotiationStatusInput {
  createdAt: DateTime
  id: Float!
  name: String
  negotiationHistories: [NegotiationHistoryDomain!]
  negotiations: [NegotiationDomain!]
  updatedAt: DateTime
}

input CreateNegotiationStepInput {
  content: String!
  createdAt: DateTime
  id: Float!
  negotiation: NegotiationDomain
  negotiationId: Float!
  negotiationType: NegotiationTypeDomain
  negotiationTypeId: Float!
  submittedAt: DateTime!
  submittedBy: Float!
  submittedBy2: UserDomain
  updatedAt: DateTime
}

input CreateNegotiationTypeInput {
  createdAt: DateTime
  id: Float!
  name: String
  negotiationSteps: [NegotiationStepDomain!]
  updatedAt: DateTime
}

input CreateNewBorderInput {
  brand: String
  color: String
  design: String
  designer: String
  id: Float!
  material: String
  name: String
  newBorder: String
  oldBorder: String
  sizes: String
  type: String
}

input CreateOauthAccessTokenInput {
  clientId: Float!
  createdAt: DateTime
  expiresAt: DateTime
  id: String!
  name: String
  revoked: Boolean!
  scopes: String
  updatedAt: DateTime
  userId: Float
}

input CreateOauthAuthCodeInput {
  clientId: Float!
  expiresAt: DateTime
  id: String!
  revoked: Boolean!
  scopes: String
  userId: Float!
}

input CreateOauthClientInput {
  createdAt: DateTime
  id: Float!
  name: String!
  passwordClient: Boolean!
  personalAccessClient: Boolean!
  provider: String
  redirect: String!
  revoked: Boolean!
  secret: String
  updatedAt: DateTime
  userId: Float
}

input CreateOauthPersonalAccessClientInputs {
  clientId: Float!
  createdAt: DateTime
  id: Float!
  updatedAt: DateTime
}

input CreateOauthRefreshTokenInput {
  accessTokenId: String!
  expiresAt: DateTime
  id: String!
  revoked: Boolean!
}

input CreateOneActivityInput {
  """The record to create"""
  activity: CreateActivityInput!
}

input CreateOneAddressInput {
  """The record to create"""
  address: CreateAddressInput!
}

input CreateOneAttributeAttributeGroupInput {
  """The record to create"""
  attributeAttributeGroup: CreateAttributeAttributeGroupInput!
}

input CreateOneAttributeGroupInput {
  """The record to create"""
  attributeGroup: CreateAttributeGroupInput!
}

input CreateOneAttributeInput {
  """The record to create"""
  attribute: CreateAttributeInput!
}

input CreateOneAttributeItemInput {
  """The record to create"""
  attributeItem: CreateAttributeItemInput!
}

input CreateOneAttributeProductInput {
  """The record to create"""
  attributeProduct: CreateAttributeProductInput!
}

input CreateOneAttributeSubproductInput {
  """The record to create"""
  attributeSubproduct: CreateAttributeSubproductInput!
}

input CreateOneAutomationEventInput {
  """The record to create"""
  automationEvent: CreateAutomationEventInput!
}

input CreateOneAutomationRfmScoreInput {
  """The record to create"""
  automationRfmScore: CreateAutomationRfmScoreInput!
}

input CreateOneBasicCarpetBorderInput {
  """The record to create"""
  basicCarpetBorder: CreateBasicCarpetBorderInput!
}

input CreateOneBasicCarpetBrandInput {
  """The record to create"""
  basicCarpetBrand: CreateBasicCarpetBrandInput!
}

input CreateOneBasicCarpetColorInput {
  """The record to create"""
  basicCarpetColor: CreateBasicCarpetColorInput!
}

input CreateOneBasicCarpetDesignInput {
  """The record to create"""
  basicCarpetDesign: CreateBasicCarpetDesignInput!
}

input CreateOneBasicCarpetDesignerInput {
  """The record to create"""
  basicCarpetDesigner: CreateBasicCarpetDesignerInput!
}

input CreateOneBasicCarpetMaterialInput {
  """The record to create"""
  basicCarpetMaterial: CreateBasicCarpetMaterialInput!
}

input CreateOneBasicCarpetSizeDetailInput {
  """The record to create"""
  basicCarpetSizeDetail: CreateBasicCarpetSizeDetailInput!
}

input CreateOneBasicCarpetSizeInput {
  """The record to create"""
  basicCarpetSize: CreateBasicCarpetSizeInput!
}

input CreateOneBasicCarpetTypeInput {
  """The record to create"""
  basicCarpetType: CreateBasicCarpetTypeInput!
}

input CreateOneBorderInput {
  """The record to create"""
  border: CreateBorderInput!
}

input CreateOneCampaignFreeOfferInput {
  """The record to create"""
  campaignFreeOffer: CreateCampaignFreeOfferInput!
}

input CreateOneCampaignFreeOfferSizeInput {
  """The record to create"""
  campaignFreeOfferSize: CreateCampaignFreeOfferSizeInput!
}

input CreateOneCampaignGoldCoinSubInput {
  """The record to create"""
  campaignGoldCoinSub: CreateCampaignGoldCoinSubInput!
}

input CreateOneCampaignInstagramFollowInput {
  """The record to create"""
  campaignInstagramFollow: CreateCampaignInstagramFollowInput!
}

input CreateOneCampaignPetFormInput {
  """The record to create"""
  campaignPetForm: CreateCampaignPetFormInput!
}

input CreateOneCampaignRoomvoImageInput {
  """The record to create"""
  campaignRoomvoImage: CreateCampaignRoomvoImageInput!
}

input CreateOneCampaignRoomvoVoteInput {
  """The record to create"""
  campaignRoomvoVote: CreateCampaignRoomvoVoteInput!
}

input CreateOneCampaignSubscriptionInput {
  """The record to create"""
  campaignSubscription: CreateCampaignSubscriptionInput!
}

input CreateOneCampaignUefaEuroSubscriberHistoryInput {
  """The record to create"""
  campaignUefaEuroSubscriberHistory: CreateCampaignUefaEuroSubscriberHistoryInput!
}

input CreateOneCampaignUefaEuroSubscriberInput {
  """The record to create"""
  campaignUefaEuroSubscriber: CreateCampaignUefaEuroSubscriberInput!
}

input CreateOneCampaignVotingImageInput {
  """The record to create"""
  campaignVotingImage: CreateCampaignVotingImageInput!
}

input CreateOneCampaignVotingImageUserInput {
  """The record to create"""
  campaignVotingImageUser: CreateCampaignVotingImageUserInput!
}

input CreateOneCarpetFeatureInput {
  """The record to create"""
  carpetFeature: CreateCarpetFeatureInput!
}

input CreateOneCarpetFeatureUserInput {
  """The record to create"""
  carpetFeatureUser: CreateCarpetFeatureUserInput!
}

input CreateOneCarpetMaterialInput {
  """The record to create"""
  carpetMaterial: CreateCarpetMaterialInput!
}

input CreateOneCarpetShapeInput {
  """The record to create"""
  carpetShape: CreateCarpetShapeInput!
}

input CreateOneCarpetSizeInput {
  """The record to create"""
  carpetSize: CreateCarpetSizeInput!
}

input CreateOneCarpetUsagePlaceInput {
  """The record to create"""
  carpetUsagePlace: CreateCarpetUsagePlaceInput!
}

input CreateOneCarpetUsagePlaceInvoiceProductInput {
  """The record to create"""
  carpetUsagePlaceInvoiceProduct: CreateCarpetUsagePlaceInvoiceProductInput!
}

input CreateOneCarpetUsagePlaceUserInput {
  """The record to create"""
  carpetUsagePlaceUser: CreateCarpetUsagePlaceUserInput!
}

input CreateOneChaparSettlementStatusInput {
  """The record to create"""
  chaparSettlementStatus: CreateChaparSettlementStatusInput!
}

input CreateOneChaparTrackingHistoryInput {
  """The record to create"""
  chaparTrackingHistory: CreateChaparTrackingHistoryInput!
}

input CreateOneCitiesSepidarInput {
  """The record to create"""
  citiesSepidar: CreateCitiesSepidarInput!
}

input CreateOneCity2Input {
  """The record to create"""
  city2: CreateCity2Input!
}

input CreateOneCityInput {
  """The record to create"""
  city: CreateCityInput!
}

input CreateOneColorCategoryDetailInput {
  """The record to create"""
  colorCategoryDetail: CreateColorCategoryDetailInput!
}

input CreateOneColorCategoryInput {
  """The record to create"""
  colorCategory: CreateColorCategoryInput!
}

input CreateOneColorCategorySubproductInput {
  """The record to create"""
  colorCategorySubproduct: CreateColorCategorySubproductInput!
}

input CreateOneColorInput {
  """The record to create"""
  color: CreateColorInput!
}

input CreateOneConfigInput {
  """The record to create"""
  config: CreateConfigInput!
}

input CreateOneContactFormHistoryInput {
  """The record to create"""
  contactFormHistory: CreateContactFormHistoryInput!
}

input CreateOneContactFormInput {
  """The record to create"""
  contactForm: CreateContactFormInput!
}

input CreateOneContactFormStatusInput {
  """The record to create"""
  contactFormStatus: CreateContactFormStatusInputs!
}

input CreateOneCountryInput {
  """The record to create"""
  country: CreateCountryInput!
}

input CreateOneCouponInput {
  """The record to create"""
  coupon: CreateCouponInput!
}

input CreateOneCouponSubjectInput {
  """The record to create"""
  couponSubject: CreateCouponSubjectInput!
}

input CreateOneCrmPresentationInput {
  """The record to create"""
  crmPresentation: CreateCrmPresentationInput!
}

input CreateOneCustomerImageProductInput {
  """The record to create"""
  customerImageProduct: CreateCustomerImageProductInput!
}

input CreateOneCustomerRequestFileInput {
  """The record to create"""
  customerRequestFile: CreateCustomerRequestFileInput!
}

input CreateOneCustomerRequestInput {
  """The record to create"""
  customerRequest: CreateCustomerRequestInput!
}

input CreateOneCustomerVideoProductInput {
  """The record to create"""
  customerVideoProduct: CreateCustomerVideoProductInput!
}

input CreateOneDamageReasonInput {
  """The record to create"""
  damageReason: CreateDamageReasonInput!
}

input CreateOneDepartmentInput {
  """The record to create"""
  department: CreateDepartmentInput!
}

input CreateOneDesignInput {
  """The record to create"""
  design: CreateDesignInput!
}

input CreateOneDesignersProductPriceRangeInput {
  """The record to create"""
  designersProductPriceRange: CreateDesignersProductPriceRangeInput!
}

input CreateOneDiscountInput {
  """The record to create"""
  discount: CreateDiscountInput!
}

input CreateOneDiscountNotificationInput {
  """The record to create"""
  discountNotification: CreateDiscountNotificationInput!
}

input CreateOneDiscountSubjectInput {
  """The record to create"""
  discountSubject: CreateDiscountSubjectInput!
}

input CreateOneExitControlInput {
  """The record to create"""
  exitControl: CreateExitControlInput!
}

input CreateOneExitControlItemInput {
  """The record to create"""
  exitControlItem: CreateExitControlItemInput!
}

input CreateOneExportProductInput {
  """The record to create"""
  exportProduct: CreateExportProductInput!
}

input CreateOneFailedJobInput {
  """The record to create"""
  failedJob: CreateFailedJobInput!
}

input CreateOneFavoriteProductInput {
  """The record to create"""
  favoriteProduct: CreateFavoriteProductInput!
}

input CreateOneFedexAddressValidationAttributeInput {
  """The record to create"""
  fedexAddressValidationAttribute: CreateFedexAddressValidationAttributeInput!
}

input CreateOneFetchSiteUrlInput {
  """The record to create"""
  fetchSiteUrl: CreateFetchSiteUrlInput!
}

input CreateOneFileInput {
  """The record to create"""
  file: CreateFileInput!
}

input CreateOneFileNegotiationInput {
  """The record to create"""
  fileNegotiation: CreateFileNegotiationInput!
}

input CreateOneGhazalInput {
  """The record to create"""
  ghazal: CreateGhazalInputs!
}

input CreateOneGoogleFormUtmInput {
  """The record to create"""
  googleFormUtm: CreateGoogleFormUtmInput!
}

input CreateOneHeardAboutUsOptionInput {
  """The record to create"""
  heardAboutUsOption: CreateHeardAboutUsOptionInput!
}

input CreateOneHelpDeskInput {
  """The record to create"""
  helpDesk: CreateHelpDeskInput!
}

input CreateOneHolidayInput {
  """The record to create"""
  holiday: CreateHolidayInput!
}

input CreateOneHomePageCustomerImageInput {
  """The record to create"""
  homePageCustomerImage: CreateHomePageCustomerImageInput!
}

input CreateOneHyperInput {
  """The record to create"""
  hyper: CreateHyperInput!
}

input CreateOneHyperstarCodeInput {
  """The record to create"""
  hyperstarCode: CreateHyperstarCodeInput!
}

input CreateOneImageInput {
  """The record to create"""
  image: CreateImageInput!
}

input CreateOneImageLayerInput {
  """The record to create"""
  imageLayer: CreateImageLayerInput!
}

input CreateOneImageProductInput {
  """The record to create"""
  imageProduct: CreateImageProductInput!
}

input CreateOneImageSizeInput {
  """The record to create"""
  imageSize: CreateImageSizeInput!
}

input CreateOneImageSubproductInput {
  """The record to create"""
  imageSubproduct: CreateImageSubproductInput!
}

input CreateOneImagesSizeGuidesDetailInput {
  """The record to create"""
  imagesSizeGuidesDetail: CreateImagesSizeGuidesDetailInput!
}

input CreateOneImpersonateHistoryInput {
  """The record to create"""
  impersonateHistory: CreateImpersonateHistoryInput!
}

input CreateOneIncredibleOfferInput {
  """The record to create"""
  incredibleOffer: CreateIncredibleOfferInput!
}

input CreateOneIncredibleOfferSentNotificationInput {
  """The record to create"""
  incredibleOfferSentNotification: CreateIncredibleOfferSentNotificationInput!
}

input CreateOneInstagramFeedInput {
  """The record to create"""
  instagramFeed: CreateInstagramFeedInput!
}

input CreateOneInvitationCodeInput {
  """The record to create"""
  invitationCode: CreateInvitationCodeInput!
}

input CreateOneInvoiceAddressInput {
  """The record to create"""
  invoiceAddress: CreateInvoiceAddressInput!
}

input CreateOneInvoiceAddressValidationResultInput {
  """The record to create"""
  invoiceAddressValidationResult: CreateInvoiceAddressValidationResultInput!
}

input CreateOneInvoiceBankGatewayHistoryInput {
  """The record to create"""
  invoiceBankGatewayHistory: CreateInvoiceBankGatewayHistoryInput!
}

input CreateOneInvoiceHistoryInput {
  """The record to create"""
  invoiceHistory: CreateInvoiceHistoryInput!
}

input CreateOneInvoiceInput {
  """The record to create"""
  invoice: CreateInvoiceInput!
}

input CreateOneInvoiceInvoiceStatusInput {
  """The record to create"""
  invoiceInvoiceStatus: CreateInvoiceInvoiceStatusInput!
}

input CreateOneInvoiceModeInput {
  """The record to create"""
  invoiceMode: CreateInvoiceModeInput!
}

input CreateOneInvoiceNegotiationInput {
  """The record to create"""
  invoiceNegotiation: CreateInvoiceNegotiationInput!
}

input CreateOneInvoicePaymentHistoryInput {
  """The record to create"""
  invoicePaymentHistory: CreateInvoicePaymentHistoryInput!
}

input CreateOneInvoicePaymentInput {
  """The record to create"""
  invoicePayment: CreateInvoicePaymentInput!
}

input CreateOneInvoicePaymentStatusInput {
  """The record to create"""
  invoicePaymentStatus: CreateInvoicePaymentStatusInput!
}

input CreateOneInvoicePaymentTypeInput {
  """The record to create"""
  invoicePaymentType: CreateInvoicePaymentTypeInput!
}

input CreateOneInvoiceProductHistoryInput {
  """The record to create"""
  invoiceProductHistory: CreateInvoiceProductHistoryInput!
}

input CreateOneInvoiceProductInput {
  """The record to create"""
  invoiceProduct: CreateInvoiceProductInput!
}

input CreateOneInvoiceProductItemInput {
  """The record to create"""
  invoiceProductItem: CreateInvoiceProductItemInput!
}

input CreateOneInvoiceProductItemInvoiceProductStatusInput {
  """The record to create"""
  invoiceProductItemInvoiceProductStatus: CreateInvoiceProductItemInvoiceProductStatusInput!
}

input CreateOneInvoiceProductStatusInput {
  """The record to create"""
  invoiceProductStatus: CreateInvoiceProductStatusInput!
}

input CreateOneInvoiceRatesResultInput {
  """The record to create"""
  invoiceRatesResult: CreateInvoiceRatesResultInput!
}

input CreateOneInvoiceReversalInput {
  """The record to create"""
  invoiceReversal: CreateInvoiceReversalInput!
}

input CreateOneInvoiceReversalItemInput {
  """The record to create"""
  invoiceReversalItem: CreateInvoiceReversalItemInput!
}

input CreateOneInvoiceShippingRateInput {
  """The record to create"""
  invoiceShippingRate: CreateInvoiceShippingRateInput!
}

input CreateOneInvoiceStatusInput {
  """The record to create"""
  invoiceStatus: CreateInvoiceStatusInput!
}

input CreateOneInvoiceTypeInput {
  """The record to create"""
  invoiceType: CreateInvoiceTypeInput!
}

input CreateOneLabelInput {
  """The record to create"""
  label: CreateLabelInput!
}

input CreateOneLabelProductInput {
  """The record to create"""
  labelProduct: CreateLabelProductInput!
}

input CreateOneMellatPaymentErrorInput {
  """The record to create"""
  mellatPaymentError: CreateMellatPaymentErrorInput!
}

input CreateOneMigrationInput {
  """The record to create"""
  migration: CreateMigrationInput!
}

input CreateOneModelHasPermissionInput {
  """The record to create"""
  modelHasPermission: CreateModelHasPermissionInput!
}

input CreateOneModelHasRoleInput {
  """The record to create"""
  modelHasRole: CreateModelHasRoleInput!
}

input CreateOneModelVisitInput {
  """The record to create"""
  modelVisit: CreateModelVisitInput!
}

input CreateOneModemaAcceleratorImageInput {
  """The record to create"""
  modemaAcceleratorImage: CreateModemaAcceleratorImageInput!
}

input CreateOneModemaAcceleratorInput {
  """The record to create"""
  modemaAccelerator: CreateModemaAcceleratorInput!
}

input CreateOneModemaAcceleratorVideoInput {
  """The record to create"""
  modemaAcceleratorVideo: CreateModemaAcceleratorVideoInput!
}

input CreateOneNeedsPhotographySubproductInput {
  """The record to create"""
  needsPhotographySubproduct: CreateNeedsPhotographySubproductInput!
}

input CreateOneNegotiationHistoryInput {
  """The record to create"""
  negotiationHistory: CreateNegotiationHistoryInput!
}

input CreateOneNegotiationInput {
  """The record to create"""
  negotiation: CreateNegotiationInput!
}

input CreateOneNegotiationStatusInput {
  """The record to create"""
  negotiationStatus: CreateNegotiationStatusInput!
}

input CreateOneNegotiationStepInput {
  """The record to create"""
  negotiationStep: CreateNegotiationStepInput!
}

input CreateOneNegotiationTypeInput {
  """The record to create"""
  negotiationType: CreateNegotiationTypeInput!
}

input CreateOneNewBorderInput {
  """The record to create"""
  newBorder: CreateNewBorderInput!
}

input CreateOneOauthAccessTokenInput {
  """The record to create"""
  oauthAccessToken: CreateOauthAccessTokenInput!
}

input CreateOneOauthAuthCodeInput {
  """The record to create"""
  oauthAuthCode: CreateOauthAuthCodeInput!
}

input CreateOneOauthClientInput {
  """The record to create"""
  oauthClient: CreateOauthClientInput!
}

input CreateOneOauthPersonalAccessClientInput {
  """The record to create"""
  oauthPersonalAccessClient: CreateOauthPersonalAccessClientInputs!
}

input CreateOneOauthRefreshTokenInput {
  """The record to create"""
  oauthRefreshToken: CreateOauthRefreshTokenInput!
}

input CreateOneOutOfStockButListedProductInput {
  """The record to create"""
  outOfStockButListedProduct: CreateOutOfStockButListedProductInput!
}

input CreateOnePasswordResetInput {
  """The record to create"""
  passwordReset: CreatePasswordResetInput!
}

input CreateOnePatternCategoryInput {
  """The record to create"""
  patternCategory: CreatePatternCategoryInput!
}

input CreateOnePatternInput {
  """The record to create"""
  pattern: CreatePatternInput!
}

input CreateOnePatternLayerInput {
  """The record to create"""
  patternLayer: CreatePatternLayerInput!
}

input CreateOnePaymentMethodFieldInput {
  """The record to create"""
  paymentMethodField: CreatePaymentMethodFieldInput!
}

input CreateOnePaymentMethodInput {
  """The record to create"""
  paymentMethod: CreatePaymentMethodInput!
}

input CreateOnePaymentRequestInput {
  """The record to create"""
  paymentRequest: CreatePaymentRequestInput!
}

input CreateOnePaymentRequestStatusInput {
  """The record to create"""
  paymentRequestStatus: CreatePaymentRequestStatusInput!
}

input CreateOnePermissionGroupInput {
  """The record to create"""
  permissionGroup: CreatePermissionGroupInput!
}

input CreateOnePermissionInput {
  """The record to create"""
  permission: CreatePermissionInput!
}

input CreateOnePreorderInput {
  """The record to create"""
  preorder: CreatePreorderInput!
}

input CreateOnePreorderPreorderStatusInput {
  """The record to create"""
  preorderPreorderStatus: CreatePreorderInput!
}

input CreateOnePreorderRegisterInput {
  """The record to create"""
  preorderRegister: CreatePreorderRegisterInput!
}

input CreateOnePreorderStatusInput {
  """The record to create"""
  preorderStatus: CreatePreorderStatusInput!
}

input CreateOnePriceGroupInput {
  """The record to create"""
  priceGroup: CreatePriceGroupInput!
}

input CreateOnePriceGroupSizeInput {
  """The record to create"""
  priceGroupSize: CreatePriceGroupSizeInput!
}

input CreateOnePrintProfileInput {
  """The record to create"""
  printProfile: CreatePrintProfileInput!
}

input CreateOnePrintRipInput {
  """The record to create"""
  printRip: CreatePrintRipInput!
}

input CreateOneProductCategoryDetailInput {
  """The record to create"""
  productCategoryDetail: CreateProductCategoryDetailInput!
}

input CreateOneProductCategoryInput {
  """The record to create"""
  productCategory: CreateProductCategoryInput!
}

input CreateOneProductCategoryRateInput {
  """The record to create"""
  productCategoryRate: CreateProductCategoryRateInput!
}

input CreateOneProductColorImageInput {
  """The record to create"""
  productColorImage: CreateProductColorImageInput!
}

input CreateOneProductColorSaleInput {
  """The record to create"""
  productColorSale: CreateProductColorSaleInput!
}

input CreateOneProductCommentInput {
  """The record to create"""
  productComment: CreateProductCommentInput!
}

input CreateOneProductCommentLikeInput {
  """The record to create"""
  productCommentLike: CreateProductCommentLikeInput!
}

input CreateOneProductInput {
  """The record to create"""
  product: CreateProductInput!
}

input CreateOneProductLikeInput {
  """The record to create"""
  productLike: CreateProductLikeInput!
}

input CreateOneProductProductCategoryInput {
  """The record to create"""
  productProductCategory: CreateProductProductCategoryInput!
}

input CreateOneProductRateAverageInput {
  """The record to create"""
  productRateAverage: CreateProductRateAverageInput!
}

input CreateOneProductRateInput {
  """The record to create"""
  productRate: CreateProductRateInput!
}

input CreateOneProductTagInput {
  """The record to create"""
  productTag: CreateProductTagInput!
}

input CreateOneProductVideoInput {
  """The record to create"""
  productVideo: CreateProductVideoInput!
}

input CreateOneProductionPadInput {
  """The record to create"""
  productionPad: CreateProductionPadInput!
}

input CreateOneProductionPadProductionPadStatusInput {
  """The record to create"""
  productionPadProductionPadStatus: CreateProductionPadProductionPadStatusInput!
}

input CreateOneProductionPadStatusInput {
  """The record to create"""
  productionPadStatus: CreateProductionPadStatusInput!
}

input CreateOneProductionReceiptTypeInput {
  """The record to create"""
  productionReceiptType: CreateProductionReceiptTypeInput!
}

input CreateOneProductionRollInput {
  """The record to create"""
  productionRoll: CreateProductionRollInput!
}

input CreateOneRateInput {
  """The record to create"""
  rate: CreateRateInput!
}

input CreateOneReadyToSendProductInput {
  """The record to create"""
  readyToSendProduct: CreateReadyToSendProductInput!
}

input CreateOneRecommendedProductInput {
  """The record to create"""
  recommendedProduct: CreateRecommendedProductInput!
}

input CreateOneRecommendedSubproductInput {
  """The record to create"""
  recommendedSubproduct: CreateRecommendedSubproductInput!
}

input CreateOneRedisSavedKeyInput {
  """The record to create"""
  redisSavedKey: CreateRedisSavedKeyInputs!
}

input CreateOneRelatedProductInput {
  """The record to create"""
  relatedProduct: CreateRelatedProductInput!
}

input CreateOneRetargetingWalletChargeInput {
  """The record to create"""
  retargetingWalletCharge: CreateRetargetingWalletChargeInput!
}

input CreateOneReturnItemStatusInput {
  """The record to create"""
  returnItemStatus: CreateReturnItemStatusInput!
}

input CreateOneReturnItemStatusReturnRequestItemInput {
  """The record to create"""
  returnItemStatusReturnRequestItem: CreateReturnItemStatusReturnRequestItemInput!
}

input CreateOneReturnReasonInput {
  """The record to create"""
  returnReason: CreateReturnReasonInput!
}

input CreateOneReturnRequestAddressInput {
  """The record to create"""
  returnRequestAddress: CreateReturnRequestAddressInput!
}

input CreateOneReturnRequestHistoryInput {
  """The record to create"""
  returnRequestHistory: CreateReturnRequestHistoryInput!
}

input CreateOneReturnRequestInput {
  """The record to create"""
  returnRequest: CreateReturnRequestInput!
}

input CreateOneReturnRequestItemHistoryInput {
  """The record to create"""
  returnRequestItemHistory: CreateReturnRequestItemHistoryInput!
}

input CreateOneReturnRequestItemImageInput {
  """The record to create"""
  returnRequestItemImage: CreateReturnRequestItemImageInput!
}

input CreateOneReturnRequestItemInput {
  """The record to create"""
  returnRequestItem: CreateReturnRequestItemInput!
}

input CreateOneReturnRequestItemReturnItemStatusInput {
  """The record to create"""
  returnRequestItemReturnItemStatus: CreateReturnRequestItemReturnItemStatusInput!
}

input CreateOneReturnRequestItemVideoInput {
  """The record to create"""
  returnRequestItemVideo: CreateReturnRequestItemVideoInput!
}

input CreateOneReturnRequestReturnStatusInput {
  """The record to create"""
  returnRequestReturnStatus: CreateReturnRequestReturnStatusInput!
}

input CreateOneReturnStatusInput {
  """The record to create"""
  returnStatus: CreateReturnStatusInput!
}

input CreateOneReturnTypeInput {
  """The record to create"""
  returnType: CreateReturnTypeInput!
}

input CreateOneReturnedInvoiceInput {
  """The record to create"""
  returnedInvoice: CreateReturnedInvoiceInput!
}

input CreateOneReturnedInvoiceProductInput {
  """The record to create"""
  returnedInvoiceProduct: CreateReturnedInvoiceProductInput!
}

input CreateOneRfmReportInput {
  """The record to create"""
  rfmReport: CreateRfmReportInput!
}

input CreateOneRipTemplateInput {
  """The record to create"""
  ripTemplate: CreateRfmReportInput!
}

input CreateOneRipTemplateItemInput {
  """The record to create"""
  ripTemplateItem: CreateRipTemplateItemInput!
}

input CreateOneRoleDomainInput {
  """The record to create"""
  roleDomain: CreateRoleInput!
}

input CreateOneRoleHasPermissionInput {
  """The record to create"""
  roleHasPermission: CreateRoleHasPermissionInput!
}

input CreateOneRussianInput {
  """The record to create"""
  russian: CreateRussianInput!
}

input CreateOneSenderInformationInput {
  """The record to create"""
  senderInformation: CreateSenderInformationInput!
}

input CreateOneShippingServiceInput {
  """The record to create"""
  shippingService: CreateShippingServiceInput!
}

input CreateOneSitemapStaticPageInput {
  """The record to create"""
  sitemapStaticPage: CreateSitemapStaticPageInput!
}

input CreateOneSizeGuideInput {
  """The record to create"""
  sizeGuide: CreateSizeGuideInput!
}

input CreateOneSizeGuidesDetailInput {
  """The record to create"""
  sizeGuidesDetail: CreateSizeGuidesDetailInput!
}

input CreateOneSocialFacebookAccountInput {
  """The record to create"""
  socialFacebookAccount: CreateSocialFacebookAccountInput!
}

input CreateOneSocialGoogleAccountInput {
  """The record to create"""
  socialGoogleAccount: CreateSocialGoogleAccountInput!
}

input CreateOneSpecialOfferInput {
  """The record to create"""
  specialOffer: CreateSpecialOfferInput!
}

input CreateOneStateInput {
  """The record to create"""
  state: CreateStateInput!
}

input CreateOneSubcolorInput {
  """The record to create"""
  subcolor: CreateSubcolorInput!
}

input CreateOneSubproductInput {
  """The record to create"""
  subproduct: CreateSubproductInput!
}

input CreateOneSubproductSpecialImageInput {
  """The record to create"""
  subproductSpecialImage: CreateSubproductSpecialImageInput!
}

input CreateOneSubproductStockHistoryInput {
  """The record to create"""
  subproductStockHistory: CreateSubproductStockHistoryInput!
}

input CreateOneSubproductVideoInput {
  """The record to create"""
  subproductVideo: CreateSubproductVideoInput!
}

input CreateOneSubscriberInput {
  """The record to create"""
  subscriber: CreateSubscriberInput!
}

input CreateOneTagInput {
  """The record to create"""
  tag: CreateTagInput!
}

input CreateOneTempSubproductDiscountInput {
  """The record to create"""
  tempSubproductDiscount: CreateTempSubproductDiscountInput!
}

input CreateOneTestimonialInput {
  """The record to create"""
  testimonial: CreateTestimonialInput!
}

input CreateOneTextLayerInput {
  """The record to create"""
  textLayer: CreateTextLayerInput!
}

input CreateOneTmpRfmReportInput {
  """The record to create"""
  tmpRfmReport: CreateTmpRfmReportInput!
}

input CreateOneTmpRussiaProductInput {
  """The record to create"""
  tmpRussiaProduct: CreateTmpRussiaProductInput!
}

input CreateOneTmpSpainOrderInput {
  """The record to create"""
  tmpSpainOrder: CreateTmpSpainOrderInput!
}

input CreateOneTmpSpanishNameInput {
  """The record to create"""
  tmpSpanishName: CreateTmpSpanishNameInput!
}

input CreateOneTmpTagChangesPrintInput {
  """The record to create"""
  tmpTagChangesPrint: CreateTmpTagChangesPrintInput!
}

input CreateOneTorobProductInput {
  """The record to create"""
  torobProduct: CreateTorobProductInput!
}

input CreateOneTransactionInput {
  """The record to create"""
  transaction: CreateTransactionInput!
}

input CreateOneUserCartInput {
  """The record to create"""
  userCart: CreateUserCartInput!
}

input CreateOneUserHasPermissionInput {
  """The record to create"""
  userHasPermission: CreateUserHasPermissionInput!
}

input CreateOneUserHasRoleInput {
  """The record to create"""
  userHasRole: CreateUserHasRoleInput!
}

input CreateOneUserInput {
  """The record to create"""
  user: CreateUserInput!
}

input CreateOneUserUtmInput {
  """The record to create"""
  userUtm: CreateUserUtmInput!
}

input CreateOneUtmGoogleFormCouponInput {
  """The record to create"""
  utmGoogleFormCoupon: CreateUtmGoogleFormCouponInput!
}

input CreateOneUtmInput {
  """The record to create"""
  utm: CreateUtmInput!
}

input CreateOneVerifyUserInput {
  """The record to create"""
  verifyUser: CreateVerifyUserInput!
}

input CreateOneVideoInput {
  """The record to create"""
  video: CreateVideoInput!
}

input CreateOneVisitorCouponInput {
  """The record to create"""
  visitorCoupon: CreateVisitorCouponInput!
}

input CreateOneVisitorGroupInput {
  """The record to create"""
  visitorGroup: CreateVisitorGroupInput!
}

input CreateOneVisitorGroupRateInput {
  """The record to create"""
  visitorGroupRate: CreateVisitorGroupRateInput!
}

input CreateOneVisitorInput {
  """The record to create"""
  visitor: CreateVisitorInput!
}

input CreateOneVisitorSaleInput {
  """The record to create"""
  visitorSale: CreateVisitorSaleInput!
}

input CreateOneWalletGiftChargeInput {
  """The record to create"""
  walletGiftCharge: CreateWalletGiftChargeInput!
}

input CreateOneWalletHistoryInput {
  """The record to create"""
  walletHistory: CreateWalletHistoryInput!
}

input CreateOneWalletInput {
  """The record to create"""
  wallet: CreateWalletInputs!
}

input CreateOneWebsitePageInput {
  """The record to create"""
  websitePage: CreateWebsitePageInput!
}

input CreateOneWebsiteVisitInput {
  """The record to create"""
  websiteVisit: CreateWebsiteVisitInput!
}

input CreateOneWithdrawalRequestInput {
  """The record to create"""
  withdrawalRequest: CreateWithdrawalRequestInput!
}

input CreateOneWithdrawalRequestStatusInput {
  """The record to create"""
  withdrawalRequestStatus: CreateWithdrawalRequestStatusInput!
}

input CreateOneWonderfulOfferInput {
  """The record to create"""
  wonderfulOffer: CreateWonderfulOfferInput!
}

input CreateOutOfStockButListedProductInput {
  createdAt: DateTime
  id: Float!
  product: ProductDomain!
  productId: Float!
  updatedAt: DateTime
}

input CreatePasswordResetInput {
  createdAt: DateTime
  email: String!
  token: String!
}

input CreatePatternCategoryInput {
  createdAt: DateTime
  id: Float!
  image: ImageDomain
  imageId: Float
  isActive: Float
  name: String!
  patterns: [PatternDomain!]!
  sortOrder: Float
  updatedAt: DateTime
  viewCounter: Float
}

input CreatePatternInput {
  createdAt: DateTime
  filename: String
  id: Float!
  isActive: Float
  keywords: String
  mime: String
  name: String!
  originalFilename: String
  path: String!
  patternCategory: PatternCategoryDomain!
  patternCategoryId: Float!
  patternLayers: [PatternLayerDomain!]!
  sortOrder: Float
  thumbnailFilename: String
  updatedAt: DateTime
  viewCounter: Float
}

input CreatePatternLayerInput {
  centerX: Float!
  centerY: Float!
  createdAt: DateTime
  design: DesignDomain!
  designId: Float!
  filename: String!
  id: Float!
  path: String!
  pattern: PatternDomain!
  patternId: Float!
  repeat: Float!
  rotation: Float!
  scaleX: Float!
  scaleY: Float!
  sortOrder: Float!
  updatedAt: DateTime
}

input CreatePaymentMethodFieldInput {
  createdAt: DateTime
  id: Float!
  invoice: InvoiceDomain!
  invoiceId: Float!
  name: String!
  paymentIdentifier: String!
  paymentMethod: PaymentMethodDomain!
  paymentMethodId: Float!
  updatedAt: DateTime
  value: String!
}

input CreatePaymentMethodInput {
  id: Float!
  name: String!
  paymentMethodFields: [PaymentMethodFieldDomain!]!
}

input CreatePaymentRequestInput {
  adminUser: UserDomain
  adminUserId: Float
  amount: String
  bankAccountNumber: String
  createdAt: DateTime!
  id: Float!
  message: String
  paymentRequestStatus: PaymentRequestStatusDomain!
  paymentRequestStatusId: Float!
  updatedAt: DateTime
  visitor: VisitorDomain!
  visitorId: Float!
}

input CreatePaymentRequestStatusInput {
  createdAt: DateTime!
  id: Float!
  name: String!
  paymentRequests: [PaymentRequestDomain!]!
  updatedAt: DateTime!
}

input CreatePermissionGroupInput {
  createdAt: DateTime
  id: Float!
  name: String!
  permissions: [PermissionDomain!]!
  updatedAt: DateTime
}

input CreatePermissionInput {
  createdAt: DateTime
  guardName: String!
  id: Float!
  modelHasPermissions: [ModelHasPermissionDomain!]!
  name: String!
  parent: PermissionDomain
  parentId: Float
  permissionGroup: PermissionGroupDomain
  permissionGroupId: Float
  permissions: [PermissionDomain!]!
  roles: [RoleDomainInput!]!
  updatedAt: DateTime
}

input CreatePreorderInput {
  activationCode: String
  activationSendDate: DateTime
  activationSendDateP: String
  activationSendTurn: Float!
  assignedUser: UserDomain
  assignedUserId: Float
  companyDescription: String
  createdAt: DateTime
  createdAtP: String
  customerDescription: String
  dateOfTurn: String
  dateOfTurnP: String
  deletedAt: DateTime
  expirationDate: DateTime
  expirationDateP: String
  id: Float!
  isActivated: Boolean!
  lastCallDate: DateTime
  lastCallDateP: String
  name: String
  phone: String
  phone2: String
  preorderPreorderStatuses: [PreorderPreorderStatusDomain!]!
  preorderStatus: PreorderStatusDomain!
  preorderStatusId: Float!
  product: ProductDomain
  productId: Float
  salesPerson: UserDomain
  salesPersonId: Float
  subproduct: SubproductDomain
  subproductId: Float
  trackingCode: String
  updatedAt: DateTime
  user: UserDomain
  userId: Float
}

input CreatePreorderRegisterInput {
  createdAt: DateTime
  id: Float!
  invoiceBankGatewayHistories: [InvoiceBankGatewayHistoryDomain!]!
  isConfirmed: Boolean!
  isPaid: Boolean!
  moneyTransferConfirmedBy: Float
  moneyTransferConfirmedBy2: UserDomain
  moneyTransferRefCode: String
  orderId: String
  paymentAmount: String!
  paymentType: InvoicePaymentTypeDomain
  paymentTypeId: Float
  preorderDate: DateTime
  preorderNumber: String
  refCodeSales: String
  refId: String
  saleRefId: String
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
  withdrawnAmount: String!
}

input CreatePreorderStatusInput {
  createdAt: DateTime
  id: Float!
  preorderPreorderStatuses: [PreorderPreorderStatusDomain!]!
  preorders: [PreorderDomain!]!
  status: String!
  updatedAt: DateTime
}

input CreatePriceGroupInput {
  createdAt: DateTime
  discountSubjects: [DiscountSubjectDomain!]!
  id: Float!
  name: String!
  priceGroupSizes: [PriceGroupSizeDomain!]!
  products: [ProductDomain!]!
  updatedAt: DateTime
}

input CreatePriceGroupSizeInput {
  basicCarpetSize: BasicCarpetSizeDomain!
  basicCarpetSizeId: Float!
  bundlePadPrice: String
  bundlePrice: String
  createdAt: DateTime
  id: Float!
  padPrice: String!
  price: String!
  priceGroup: PriceGroupDomain!
  priceGroupId: Float!
  updatedAt: DateTime
}

input CreatePrintProfileInput {
  blackCurve: String
  blackGain: String
  createdAt: DateTime
  createdBy: Float
  createdBy2: UserDomain
  cyanCurve: String
  cyanGain: String
  fabricsBackgroundColor: String
  fabricsPerSquareMeterWeight: String
  fabricsTextureGrade: String
  headHeight: String
  heatSpeed: String
  heatTemperature: String
  id: Float!
  inkCode: String
  invoiceProductItems: [InvoiceProductItemDomain!]!
  isActive: Boolean!
  laminateGlueType: String
  magentaCurve: String
  magentaGain: String
  passCount: String
  totalInkLimit: String
  updatedAt: DateTime
  updatedBy: Float
  updatedBy2: UserDomain
  versionChangeDate: DateTime!
  versionNo: String!
  yellowCurve: String
  yellowGain: String
}

input CreatePrintRipInput {
  createdAt: DateTime
  id: Float!
  invoiceProductItems: [InvoiceProductItemDomain!]!
  ripNumber: String!
  ripTemplate: RipTemplateDomain!
  ripTemplateId: Float!
  updatedAt: DateTime
  user: UserDomain
  userId: Float
}

input CreateProductCategoryDetailInput {
  createdAt: DateTime
  detailText: String
  detailTextEn: String
  id: Float!
  isActive: Boolean!
  productCategoryId: Float
  sortOrder: Float
  title: String
  titleEn: String
  updatedAt: DateTime
}

input CreateProductCategoryInput {
  attributeGroups: [AttributeGroupDomain!]!
  couponSubjects: [CouponSubjectDomain!]!
  createdAt: DateTime
  description: String
  descriptionEn: String
  descriptionSingleSize: String
  discountSubjects: [DiscountSubjectDomain!]!
  hierarchyCode: String
  homepageImage: ImageDomain!
  homepageImageId: Float
  id: Float!
  image: ImageDomain
  imageId: Float
  imageSize: ImageSizeDomain
  imageSizeId: Float
  isActive: Boolean!
  metaTags: String
  metaTagsEn: String
  metaTagsSingleSize: String
  mobileImage: ImageDomain!
  mobileImageId: Float
  name: String!
  nameEn: String
  pageTitle: String
  pageTitleEn: String
  pageTitleSingleSize: String
  parent: ProductCategoryDomain
  parentId: Float
  productCategories: [ProductCategoryDomain!]!
  productCategoryRates: [ProductCategoryRateDomain!]!
  productProductCategories: [ProductProductCategoryDomain!]!
  searchName: String
  searchNameEn: String
  showOnHomepage: Boolean!
  sortOrder: Float
  updatedAt: DateTime
  urlSlug: String
  urlSlugEn: String
  viewCounter: Float
}

input CreateProductCategoryRateInput {
  createdAt: DateTime
  id: Float!
  productCategory: ProductCategoryDomain!
  productCategoryId: Float!
  rate: RateDomain!
  rateId: Float!
  updatedAt: DateTime
}

input CreateProductColorImageInput {
  basicCarpetColor: BasicCarpetColorDomain
  basicCarpetColorId: Float
  createdAt: DateTime
  id: Float!
  image: ImageDomain!
  imageId: Float!
  product: ProductDomain!
  productId: Float!
  sortOrder: Float
  updatedAt: DateTime
}

input CreateProductColorSaleInput {
  averageSaleCount: Float!
  basicCarpetColor: BasicCarpetColorDomain!
  basicCarpetColorId: Float!
  createdAt: DateTime
  id: Float!
  product: ProductDomain!
  productId: Float!
  saleCount: Float!
  saleCountYear: Float!
  updatedAt: DateTime
}

input CreateProductCommentInput {
  approved: Boolean!
  approvedBy: Float
  approvedBy2: UserDomain
  comment: String!
  createdAt: DateTime
  id: Float!
  isBuyer: Boolean
  parentComment: ProductCommentDomain
  parentCommentId: Float
  product: ProductDomain!
  productCommentLikes: [ProductCommentLikeDomain!]!
  productComments: [ProductCommentDomain!]!
  productId: Float!
  productRates: [ProductRateDomain!]!
  recommended: Boolean
  starred: Boolean!
  subproduct: SubproductDomain
  subproductId: Float
  totalDislikes: Float!
  totalLikes: Float!
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
  walletGiftCharges: WalletGiftChargeDomain
}

input CreateProductCommentLikeInput {
  createdAt: DateTime
  id: Float!
  isDisliked: Boolean
  isLiked: Boolean
  productComment: ProductCommentDomain!
  productCommentId: Float!
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
}

input CreateProductInput {
  activeUpdatedAt: DateTime!
  attributeProducts: [AttributeProductDomain!]!
  bestSellerColor: BasicCarpetColorDomain!
  bestSellerColorId: Float
  carpetHasRoots: Boolean!
  code: String
  collectionName: String
  colors: String
  couponSubjects: [CouponSubjectDomain!]!
  createdAt: DateTime
  customerImageProducts: [CustomerImageProductDomain!]!
  customerVideoProducts: [CustomerVideoProductDomain!]!
  description: String
  descriptionEn: String
  designerIsGeneral: Float!
  discountNotifications: [DiscountNotificationDomain!]!
  discountSubjects: [DiscountSubjectDomain!]!
  emallsActive: Boolean!
  emallsTitle: String
  favoriteProducts: [FavoriteProductDomain!]!
  homePageCustomerImages: [HomePageCustomerImageDomain!]!
  id: Float!
  image: ImageDomain!
  imageId: Float
  imageProducts: [ImageProductDomain!]!
  incredibleOffers: [IncredibleOfferDomain!]!
  invoiceProductHistories: [InvoiceProductHistoryDomain!]!
  invoiceProductHistories2: [InvoiceProductHistoryDomain!]!
  invoiceProducts: [InvoiceProductDomain!]!
  invoiceProducts2: [InvoiceProductDomain!]!
  isActive: Boolean!
  isCarpetPad: Boolean
  isSelfEmployedDesigner: Float!
  isShaggy: Boolean!
  labelProducts: [LabelProductDomain!]!
  length: Float
  metaTags: String
  metaTagsEn: String
  minBasicCarpetSize: BasicCarpetSizeDomain!
  minBasicCarpetSizeId: Float
  name: String!
  nameEn: String
  nameEs: String
  newSubproductsCreated: Float!
  outOfStockButListedProducts: [OutOfStockButListedProductDomain!]!
  pageTitle: String
  pageTitleEn: String
  parentProduct: ProductDomain!
  parentProductId: Float
  preorders: [PreorderDomain!]!
  price: String
  priceGroup: PriceGroupDomain!
  priceGroupId: Float
  productColorImages: [ProductColorImageDomain!]!
  productColorSales: [ProductColorSaleDomain!]!
  productComments: [ProductCommentDomain!]!
  productLikes: [ProductLikeDomain!]!
  productProductCategories: [ProductProductCategoryDomain!]!
  productRateAverages: [ProductRateAverageDomain!]!
  productRates: [ProductRateDomain!]!
  productTags: [ProductTagDomain!]!
  productVideos: [ProductVideoDomain!]!
  products: [ProductDomain!]!
  rate: Float!
  rateCount: Float
  readyToSendProducts: [ReadyToSendProductDomain!]!
  recommendedProducts: [RecommendedProductDomain!]!
  relatedProducts: [RelatedProductDomain!]!
  relatedProducts2: [RelatedProductDomain!]!
  returnRequestItemHistories: [ReturnRequestItemHistoryDomain!]!
  returnRequestItems: [ReturnRequestItemDomain!]!
  returnedInvoiceProducts: [ReturnedInvoiceProductDomain!]!
  russianName: String
  saleCount: Float!
  saleCountDaily: Float!
  searchName: String
  searchNameEn: String
  size: Float!
  sizeIsCustomizable: Float!
  snapppayActive: Boolean!
  snapppaySortOrder: Boolean
  sortOrder: Float
  specialOffers: [SpecialOfferDomain!]!
  specialOffers2: [SpecialOfferDomain!]!
  subproducts: [SubproductDomain!]!
  torobProducts: [TorobProductDomain!]!
  totalDislike: Float!
  totalLike: Float!
  updatedAt: DateTime
  urlSlug: String
  urlSlugEn: String
  userCarts: [UserCartDomain!]!
  userCarts2: [UserCartDomain!]!
  viewCounter: Float
  width: Float
  wonderfulOffers: [WonderfulOfferDomain!]!
}

input CreateProductLikeInput {
  createdAt: DateTime
  id: Float!
  isLike: Boolean!
  product: ProductDomain!
  productId: Float!
  subproduct: SubproductDomain
  subproductId: Float
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
}

input CreateProductProductCategoryInput {
  createdAt: DateTime
  id: Float!
  product: ProductDomain!
  productCategory: ProductCategoryDomain!
  productCategoryId: Float!
  productId: Float!
  updatedAt: DateTime
}

input CreateProductRateAverageInput {
  averageRate: Float!
  createdAt: DateTime
  id: Float!
  product: ProductDomain!
  productId: Float!
  rate: RateDomain!
  rateCount: Float!
  rateId: Float!
  subproduct: SubproductDomain
  subproductId: Float
  updatedAt: DateTime
}

input CreateProductRateInput {
  createdAt: DateTime
  id: Float!
  oldRate: Float
  product: ProductDomain!
  productComment: ProductCommentDomain
  productCommentId: Float
  productId: Float!
  rate: RateDomain
  rateId: Float
  rateValue: Float!
  subproduct: SubproductDomain
  subproductId: Float
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
}

input CreateProductTagInput {
  createdAt: DateTime
  id: Float!
  product: ProductDomain!
  productId: Float!
  subproduct: SubproductDomain
  subproductId: Float
  tag: TagDomain!
  tagId: Float!
  updatedAt: DateTime
}

input CreateProductVideoInput {
  basicCarpetColor: BasicCarpetColorDomain
  basicCarpetColorId: Float
  createdAt: DateTime
  id: Float!
  product: ProductDomain!
  productId: Float!
  sortOrder: Float
  updatedAt: DateTime
  video: VideoDomain!
  videoId: Float!
}

input CreateProductionPadInput {
  basicCarpetSize: BasicCarpetSizeDomain!
  basicCarpetSizeId: Float!
  code: String!
  createdAt: DateTime
  id: Float!
  isTagPrinted: Boolean!
  isUsed: Boolean!
  productionPadProductionPadStatuses: [ProductionPadProductionPadStatusDomain!]!
  productionPadStatus: ProductionPadStatusDomain!
  productionPadStatusId: Float!
  requestDate: DateTime
  rollRefCode: String
  rowNo: Float!
  updatedAt: DateTime
}

input CreateProductionPadProductionPadStatusInput {
  createdAt: DateTime
  id: Float!
  productionPad: ProductionPadDomain!
  productionPadId: Float!
  productionPadStatus: ProductionPadStatusDomain!
  productionPadStatusId: Float!
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
}

input CreateProductionPadStatusInput {
  createdAt: DateTime
  id: Float!
  name: String!
  productionPadProductionPadStatuses: [ProductionPadProductionPadStatusDomain!]!
  productionPads: [ProductionPadDomain!]!
  step: Float!
  updatedAt: DateTime
}

input CreateProductionReceiptTypeInput {
  createdAt: DateTime
  id: Float!
  name: String!
  updatedAt: DateTime
}

input CreateProductionRollInput {
  billNumber: String
  closeDate: DateTime
  closedBy: Float
  closedBy2: UserDomain
  createdAt: DateTime
  createdBy: Float
  createdBy2: UserDomain
  id: Float!
  invoiceProductItems: [InvoiceProductItemDomain!]!
  isClosed: Boolean!
  isShaggy: Boolean!
  length: Float!
  rollNumber: String!
  shaggyColor: String
  updatedAt: DateTime
  weight: Float!
  width: Float!
}

input CreateRateInput {
  createdAt: DateTime
  description: String!
  id: Float!
  isActive: Float
  name: String!
  productCategoryRates: [ProductCategoryRateDomain!]!
  productRateAverages: [ProductRateAverageDomain!]!
  productRates: [ProductRateDomain!]!
  sortOrder: Float
  updatedAt: DateTime
}

input CreateReadyToSendProductInput {
  createdAt: DateTime
  id: Float!
  product: ProductDomain!
  productId: Float!
  updatedAt: DateTime
}

input CreateRecommendedProductInput {
  createdAt: DateTime
  id: Float!
  product: ProductDomain!
  productId: Float!
  updatedAt: DateTime
}

input CreateRecommendedSubproductInput {
  createdAt: DateTime
  id: Float!
  subproduct: SubproductDomain!
  subproductId: Float!
  updatedAt: DateTime
}

input CreateRedisSavedKeyInputs {
  createdAt: DateTime
  id: String!
  keyLength: Float!
  redisKey: String!
  sortOrder: Float!
  updatedAt: DateTime
}

input CreateRelatedProductInput {
  createdAt: DateTime
  id: Float!
  product: ProductDomain!
  productId: Float!
  relatedProduct: ProductDomain!
  relatedProductId: Float!
  updatedAt: DateTime
}

input CreateRetargetingWalletChargeInput {
  amount: String!
  chargedInvoices: String
  createdAt: DateTime
  id: Float!
  lastChargedAt: DateTime
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
  wallet: WalletDomain
  walletId: Float
}

input CreateReturnItemStatusInput {
  createdAt: DateTime
  id: Float!
  isActive: Boolean!
  name: String!
  returnItemStatusReturnRequestItems: [ReturnItemStatusReturnRequestItemDomain!]!
  returnRequestItemHistories: [ReturnRequestItemHistoryDomain!]!
  returnRequestItemReturnItemStatuses: [ReturnRequestItemReturnItemStatusDomain!]!
  returnRequestItems: [ReturnRequestItemDomain!]!
  sortOrder: Float!
  stepGuarantee: Float
  stepTest: Float
  updatedAt: DateTime
}

input CreateReturnItemStatusReturnRequestItemInput {
  createdAt: DateTime
  description: String
  id: Float!
  returnItemStatus: ReturnItemStatusDomain!
  returnItemStatusId: Float!
  returnRequestItem: ReturnRequestItemDomain!
  returnRequestItemId: Float!
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
}

input CreateReturnReasonInput {
  createdAt: DateTime
  id: Float!
  isActive: Boolean!
  reason: String!
  returnRequestItemHistories: [ReturnRequestItemHistoryDomain!]!
  returnRequestItems: [ReturnRequestItemDomain!]!
  returnedInvoices: [ReturnedInvoiceDomain!]!
  sortOrder: Float!
  updatedAt: DateTime
}

input CreateReturnRequestAddressInput {
  address: String!
  address2: String
  addressId: Float!
  address_2: AddressDomain!
  city: CityDomain!
  cityId: Float!
  country: CountryDomain!
  countryId: Float!
  createdAt: DateTime
  email: String
  fullAddress: String
  fullname: String
  id: Float!
  latitude: String
  longitude: String
  phone: String
  phone2: String
  returnRequest: ReturnRequestDomain!
  returnRequestId: Float!
  state: StateDomain!
  stateId: Float!
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
  zipCode: String
}

input CreateReturnRequestHistoryInput {
  createdAt: DateTime
  description: String
  editorUser: UserDomain!
  editorUserId: Float!
  id: Float!
  invoice: InvoiceDomain
  invoiceId: Float
  modemaBlocked: String
  parent: ReturnRequestDomain
  parentId: Float
  requestDate: String!
  requestNumber: String!
  returnRequestId: Float!
  returnRequestItemHistories: [ReturnRequestItemHistoryDomain!]!
  returnStatus: ReturnStatusDomain!
  returnStatusId: Float!
  returnType: ReturnTypeDomain!
  returnTypeId: Float!
  shippingServiceCustomer: String
  shippingServiceModema: String
  trackingCodeCustomer: String
  trackingCodeModema: String
  updatedAt: DateTime
  user: UserDomain!
  userBlocked: String
  userId: Float!
  withdrawable: String
}

input CreateReturnRequestInput {
  coupon: CouponDomain
  couponAmount: String
  couponId: Float
  createdAt: DateTime
  description: String
  id: Float!
  invoice: InvoiceDomain
  invoiceId: Float
  modemaBlocked: String!
  parent: ReturnRequestDomain
  parentId: Float
  requestDate: String!
  requestNumber: String!
  returnRequestAddresses: [ReturnRequestAddressDomain!]!
  returnRequestHistories: ReturnRequestHistoryDomain!
  returnRequestItemHistories: [ReturnRequestItemHistoryDomain!]!
  returnRequestItems: [ReturnRequestItemDomain!]!
  returnRequestReturnStatuses: [ReturnRequestReturnStatusDomain!]!
  returnRequests: ReturnRequestDomain
  returnStatus: ReturnStatusDomain!
  returnStatusId: Float!
  returnType: ReturnTypeDomain!
  returnTypeId: Float!
  shippingServiceCustomer: String
  shippingServiceModema: String
  submittedByFactory: Boolean!
  trackingCodeCustomer: String
  trackingCodeModema: String
  updatedAt: DateTime
  user: UserDomain!
  userBlocked: String!
  userId: Float!
  withdrawable: String!
}

input CreateReturnRequestItemHistoryInput {
  code: String
  count: Float!
  createdAt: DateTime
  description: String
  descriptionAccounting: String
  descriptionFactory: String
  descriptionSales: String
  id: Float!
  invoiceProduct: InvoiceProductDomain
  invoiceProductId: Float
  product: ProductDomain!
  productId: Float!
  returnItemStatus: ReturnItemStatusDomain
  returnItemStatusId: Float
  returnReason: ReturnReasonDomain
  returnReasonId: Float
  returnRequest: ReturnRequestDomain!
  returnRequestHistory: ReturnRequestHistoryDomain!
  returnRequestHistoryId: Float
  returnRequestId: Float!
  returnRequestItem: ReturnRequestItemDomain!
  returnRequestItemId: Float!
  rowNo: Float
  subproduct: SubproductDomain!
  subproductId: Float!
  updatedAt: DateTime
}

input CreateReturnRequestItemImageInput {
  createdAt: DateTime
  id: Float!
  image: ImageDomain!
  imageId: Float!
  returnRequestItem: ReturnRequestItemDomain!
  returnRequestItemId: Float!
  updatedAt: DateTime
}

input CreateReturnRequestItemInput {
  code: String
  count: Float!
  createdAt: DateTime
  description: String
  descriptionAccounting: String
  descriptionFactory: String
  descriptionSales: String
  id: Float!
  invoiceProduct: InvoiceProductDomain
  invoiceProductId: Float
  product: ProductDomain!
  productId: Float!
  returnItemStatus: ReturnItemStatusDomain
  returnItemStatusId: Float
  returnItemStatusReturnRequestItems: [ReturnItemStatusReturnRequestItemDomain!]!
  returnReason: ReturnReasonDomain
  returnReasonId: Float
  returnRequest: ReturnRequestDomain!
  returnRequestId: Float!
  returnRequestItemHistories: [ReturnRequestItemHistoryDomain!]!
  returnRequestItemImages: [ReturnRequestItemImageDomain!]!
  returnRequestItemReturnItemStatuses: [ReturnRequestItemReturnItemStatusDomain!]!
  returnRequestItemVideos: [ReturnRequestItemVideoDomain!]!
  rowNo: Float
  subproduct: SubproductDomain!
  subproductId: Float!
  updatedAt: DateTime
}

input CreateReturnRequestItemReturnItemStatusInput {
  createdAt: DateTime
  description: String
  id: Float!
  returnItemStatus: ReturnItemStatusDomain!
  returnItemStatusId: Float!
  returnRequestItem: ReturnRequestItemDomain!
  returnRequestItemId: Float!
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
}

input CreateReturnRequestItemVideoInput {
  createdAt: DateTime
  id: Float!
  returnRequestItem: ReturnRequestItemDomain!
  returnRequestItemId: Float!
  updatedAt: DateTime
  video: VideoDomain!
  videoId: Float!
}

input CreateReturnRequestReturnStatusInput {
  createdAt: DateTime
  description: String
  id: Float!
  returnRequest: ReturnRequestDomain!
  returnRequestId: Float!
  returnStatus: ReturnStatusDomain!
  returnStatusId: Float!
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
}

input CreateReturnStatusInput {
  createdAt: DateTime
  id: Float!
  isActive: Boolean!
  name: String!
  returnRequestHistories: [ReturnRequestHistoryDomain!]!
  returnRequestReturnStatuses: [ReturnRequestReturnStatusDomain!]!
  returnRequests: [ReturnRequestDomain!]!
  sortOrder: Float!
  stepGuarantee: Float
  stepTest: Float
  updatedAt: DateTime
}

input CreateReturnTypeInput {
  createdAt: DateTime
  id: Float!
  isActive: Boolean!
  name: String!
  returnRequestHistories: [ReturnRequestHistoryDomain!]!
  returnRequests: [ReturnRequestDomain!]!
  updatedAt: DateTime
}

input CreateReturnedInvoiceInput {
  createdAt: DateTime
  description: String
  id: Float!
  invoice: InvoiceDomain!
  invoiceId: Float!
  replacementInvoice: InvoiceDomain
  replacementInvoiceId: Float
  returnDate: DateTime
  returnReason: ReturnReasonDomain
  returnReasonId: Float
  returnedInvoiceProducts: [ReturnedInvoiceProductDomain!]!
  snappInformed: Boolean!
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
}

input CreateReturnedInvoiceProductInput {
  count: Float!
  createdAt: DateTime
  description: String
  id: Float!
  invoiceProduct: InvoiceProductDomain!
  invoiceProductId: Float!
  product: ProductDomain!
  productId: Float!
  returnedInvoice: ReturnedInvoiceDomain!
  returnedInvoiceId: Float!
  subproduct: SubproductDomain!
  subproductId: Float!
  updatedAt: DateTime
}

input CreateRfmReportInput {
  id: Float!
  kharid1: String!
  kharid2: String!
  kharid3: String!
  kharid4: String!
  kharid5: String!
  kharid6: String!
  kharid7: String!
  kharid8: String!
  kharid9: String!
  kharid10: String!
  kharid11: String!
  kharid12: String!
  kharid13: String!
  kharid14: String!
  kharid15: String!
  kharid16: String!
  kharid17: String!
  kharid18: String!
  kharid19: String!
  kharid20: String!
  name: String!
  phone: String
}

input CreateRipTemplateItemInput {
  basicCarpetSize: BasicCarpetSizeDomain!
  basicCarpetSizeId: Float!
  createdAt: DateTime
  id: Float!
  length: Float!
  ripTemplate: RipTemplateDomain!
  ripTemplateId: Float!
  updatedAt: DateTime
  width: Float!
}

input CreateRoleHasPermissionInput {
  permissionId: Float!
  roleId: String!
}

input CreateRoleInput {
  createdAt: DateTime
  guardName: String!
  id: Float!
  name: String!
  updatedAt: DateTime
}

input CreateRussianInput {
  id: Float!
  name: String
  russianName: String
}

input CreateSenderInformationInput {
  buildingPart: String!
  buildingPartDescription: String!
  city: CityDomain
  cityId: Float
  commodityDescription: String!
  companyName: String!
  contactId: Float!
  country: CountryDomain
  countryId: Float
  createdAt: DateTime
  emailAddress: String!
  faxNumber: String!
  id: Float!
  isActive: Boolean!
  latitude: String
  location: String!
  longitude: String
  packageLocation: String!
  pagerNumber: String!
  personName: String!
  phoneExtension: String!
  phoneNumber: String!
  postalCode: String!
  remarks: String!
  state: StateDomain
  stateId: Float
  streetLines: String!
  title: String!
  updatedAt: DateTime
}

input CreateShippingServiceInput {
  code: String!
  description: String
  fullDescription: String
  id: Float!
  invoiceRatesResults: [InvoiceRatesResultDomain!]!
  invoiceShippingRates: [InvoiceShippingRateDomain!]!
  isActive: Boolean!
  name: String
}

input CreateSitemapStaticPageInput {
  changefreq: String!
  createdAt: DateTime
  id: Float!
  loc: String!
  priority: Float!
  updatedAt: DateTime
}

input CreateSizeGuideInput {
  createdAt: DateTime
  id: Float!
  image: ImageDomain
  imageId: Float
  sizeGuidesDetails: [SizeGuidesDetailDomain!]!
  text: String!
  title: String!
  updatedAt: DateTime
}

input CreateSizeGuidesDetailInput {
  createdAt: DateTime
  detailsText: String!
  detailsTitle: String!
  iconText: String!
  iconTitle: String!
  id: Float!
  image: ImageDomain
  imageId: Float
  imagesSizeGuidesDetails: [ImagesSizeGuidesDetailDomain!]!
  sizeGuide: SizeGuideDomain!
  sizeGuideId: Float!
  text: String!
  title: String!
  updatedAt: DateTime
}

input CreateSocialFacebookAccountInput {
  createdAt: DateTime
  id: Float!
  provider: String!
  providerUserId: String!
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
}

input CreateSocialGoogleAccountInput {
  createdAt: DateTime
  id: Float!
  provider: String!
  providerUserId: String!
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
}

input CreateSpecialOfferInput {
  createdAt: DateTime
  id: Float!
  specialOfferImageUrl: String
  specialOfferProduct: ProductDomain
  specialOfferProductId: Float
  specialOfferSubtitle: String
  specialOfferTitle: String
  updatedAt: DateTime
  wonderfulOfferProduct: ProductDomain
  wonderfulOfferProductId: Float
}

input CreateStateInput {
  addresses: [AddressDomain!]!
  basicCarpetDesigners: [BasicCarpetDesignerDomain!]!
  chaparId: Float
  cities: [CityDomain!]!
  code: String
  country: CountryDomain!
  countryId: Float!
  createdAt: DateTime
  id: Float!
  invoiceAddresses: [InvoiceAddressDomain!]!
  name: String!
  returnRequestAddresses: [ReturnRequestAddressDomain!]!
  senderInformations: [SenderInformationDomain!]!
  sepidarId: Float
  tipaxId: Float
  updatedAt: DateTime
}

input CreateSubcolorInput {
  color: ColorDomain
  colorCode: String
  colorCodeOriginal: String
  colorId: Float
  colorName: String
  hexCode: String
  id: Float
  order: Float
}

input CreateSubproductInput {
  attributeSubproducts: [AttributeSubproductDomain!]!
  basicCarpetBorder: BasicCarpetBorderDomain!
  basicCarpetBorderId: Float
  basicCarpetBrand: BasicCarpetBrandDomain!
  basicCarpetBrandId: Float
  basicCarpetColor: BasicCarpetColorDomain!
  basicCarpetColorId: Float
  basicCarpetDesign: BasicCarpetDesignDomain!
  basicCarpetDesignId: Float
  basicCarpetDesigner: BasicCarpetDesignerDomain!
  basicCarpetDesignerId: Float
  basicCarpetMaterial: BasicCarpetMaterialDomain!
  basicCarpetMaterialId: Float
  basicCarpetSize: BasicCarpetSizeDomain!
  basicCarpetSizeId: Float
  basicCarpetType: BasicCarpetTypeDomain!
  basicCarpetTypeId: Float
  borderColor: String
  bundlePadPrice: String
  bundlePrice: String
  code: String
  colorCategoriesChanged: Float
  colorCategorySubproducts: [ColorCategorySubproductDomain!]!
  colorName: String
  colorNameEs: String
  colors: String
  couponSubjects: [CouponSubjectDomain!]!
  createdAt: DateTime
  description: String
  discountSubjects: [DiscountSubjectDomain!]!
  favoriteProducts: [FavoriteProductDomain!]!
  getStockCountFromSepidar: Boolean!
  id: Float!
  image: ImageDomain!
  imageId: Float
  imageSubproducts: [ImageSubproductDomain!]!
  invoiceProductHistories: [InvoiceProductHistoryDomain!]!
  invoiceProducts: [InvoiceProductDomain!]!
  isActive: Boolean!
  isOutOfStock: Boolean!
  length: Float
  mainImageChanged: Boolean
  name: String!
  nameEn: String
  needsPhotographySubproducts: [NeedsPhotographySubproductDomain!]!
  otherImagesChanged: Boolean!
  padPrice: String!
  preorders: [PreorderDomain!]!
  price: String
  product: ProductDomain!
  productComments: [ProductCommentDomain!]!
  productId: Float!
  productLikes: [ProductLikeDomain!]!
  productRateAverages: [ProductRateAverageDomain!]!
  productRates: [ProductRateDomain!]!
  productTags: [ProductTagDomain!]!
  rate: Float!
  rateCount: Float
  recommendedSubproducts: [RecommendedSubproductDomain!]!
  returnRequestItemHistories: [ReturnRequestItemHistoryDomain!]!
  returnRequestItems: [ReturnRequestItemDomain!]!
  returnedInvoiceProducts: [ReturnedInvoiceProductDomain!]!
  saleCount: Float!
  searchName: String
  searchNameEn: String
  sepidarId: Float
  shortCode: String
  size: Float!
  sizeIsCustomizable: Float!
  sortOrder: Float
  stockCount: Float
  subproductSpecialImages: [SubproductSpecialImageDomain!]!
  subproductStockHistories: [SubproductStockHistoryDomain!]!
  subproductVideos: [SubproductVideoDomain!]!
  torobProducts: [TorobProductDomain!]!
  totalDislike: Float!
  totalLike: Float!
  updatedAt: DateTime
  userCarts: [UserCartDomain!]!
  userCarts2: [UserCartDomain!]!
  video: VideoDomain!
  videoId: Float
  width: Float
}

input CreateSubproductSpecialImageInput {
  createdAt: DateTime
  id: Float!
  image: ImageDomain!
  imageId: Float!
  sortOrder: Float
  subproduct: SubproductDomain!
  subproductId: Float!
  updatedAt: DateTime
}

input CreateSubproductStockHistoryInput {
  createdAt: DateTime
  id: Float!
  invoiceProduct: InvoiceProductDomain
  invoiceProductId: Float
  newValue: Float!
  oldValue: Float!
  subproduct: SubproductDomain!
  subproductId: Float!
  updatedAt: DateTime
  user: UserDomain
  userId: Float
}

input CreateSubproductVideoInput {
  createdAt: DateTime
  id: Float!
  sortOrder: Float
  subproduct: SubproductDomain!
  subproductId: Float!
  updatedAt: DateTime
  video: VideoDomain!
  videoId: Float!
}

input CreateSubscriberInput {
  createdAt: DateTime
  email: String
  id: Float!
  mobile: String
  updatedAt: DateTime
}

input CreateTagInput {
  columnOrder: Float!
  columnWidth: Float!
  createdAt: DateTime
  description: String
  descriptionEn: String
  discount: Float
  id: Float!
  image: ImageDomain
  imageId: Float
  isActive: Float
  metaTags: String
  metaTagsEn: String
  pageTitle: String
  pageTitleEn: String
  productTags: [ProductTagDomain!]!
  searchTitle: String
  searchTitleEn: String
  sliderImage: ImageDomain
  sliderImageId: Float
  sortOrder: Float
  specialOffer: Boolean!
  title: String!
  titleEn: String
  updatedAt: DateTime
  urlSlug: String
  urlSlugEn: String
  viewCounter: Float
}

input CreateTempSubproductDiscountInput {
  allDiscountId: Float
  allWithStockDiscountId: Float
  categoryDiscountId: Float
  createdAt: DateTime
  discountPercent: Float
  padDiscountPercent: Float
  padPriceMinusDiscount: String
  priceGroupDiscountId: Float
  priceMinusDiscount: String
  productDiscountId: Float
  sizeDiscountId: Float
  subproductDiscountId: Float
  totalDiscountPercent: Float
  updatedAt: DateTime
  viewProductId: Float!
  viewSubproductId: Float!
}

input CreateTestimonialInput {
  createdAt: DateTime
  description: String
  id: Float!
  isActive: Boolean!
  link: String
  logoImage: String
  sortOrder: Float
  title: String!
  updatedAt: DateTime
}

input CreateTextLayerInput {
  alignment: String
  centerX: Float!
  centerY: Float!
  color: String
  createdAt: DateTime
  design: DesignDomain!
  designId: Float!
  fontName: String
  id: Float!
  letterSpacing: Float
  lineSpacing: Float
  rotation: Float!
  scaleX: Float!
  scaleY: Float!
  sortOrder: Float!
  text: String
  updatedAt: DateTime
}

input CreateTmpRfmReportInput {
  id: Float!
  kharid1: String!
  kharid2: String!
  kharid3: String!
  kharid4: String!
  kharid5: String!
  name: String!
  phone: String
}

input CreateTmpRussiaProductInput {
  borderCode: String
  code: String
  colorCode: String
  count: Float
  id: Float!
  productCode: String
  sizeCode: String
}

input CreateTmpSpainOrderInput {
  cnt_02: Float
  cnt_03: Float
  cnt_06: Float
  cnt_25: Float
  cnt_28: Float
  cnt_60: Float
  cnt_75: Float
  cnt_80: Float
  color: String
  colorCode: String
  design: String
  id: Float
  row: Float!
}

input CreateTmpSpanishNameInput {
  colorId: Float
  name: String
  nameEs: String
  productId: Float
  spanishTitle: String
  title: String
}

input CreateTmpTagChangesPrintInput {
  code: String
  count: Float
  id: Float!
  oldCode: String
  size: String
}

input CreateTorobProductInput {
  basicCarpetColor: BasicCarpetColorDomain
  basicCarpetColorId: Float
  basicCarpetSize: BasicCarpetSizeDomain
  basicCarpetSizeId: Float
  colorTitle: String
  createdAt: DateTime
  deletedAt: DateTime
  id: Float!
  name: String
  product: ProductDomain
  productCategoryId: Float
  productId: Float!
  sizeTitle: String
  subproduct: SubproductDomain
  subproductId: Float!
  torobCategory: String
  updatedAt: DateTime
}

input CreateTransactionInput {
  amount: Float!
  approved: Boolean!
  approvedBy: Float
  description: String
  modelId: Float!
  modelType: String!
  modemaBlocked: Float!
  userBlocked: Float!
  userId: Float!
  withdrawable: Float!
}

input CreateUserCartInput {
  bundleCount: Float!
  count: Float!
  createdAt: DateTime
  description: String
  design: DesignDomain
  designId: Float
  id: Float!
  length: Float
  product: ProductDomain
  productId: Float
  relatedProduct: ProductDomain
  relatedProductId: Float
  relatedSubproduct: SubproductDomain
  relatedSubproductId: Float
  subproduct: SubproductDomain
  subproductId: Float
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
  width: Float
  withPad: Boolean!
}

input CreateUserHasPermissionInput {
  permissionId: Float!

  """Example field (placeholder)"""
  userId: Int!
}

input CreateUserHasRoleInput {
  roleId: Float!

  """Example field (placeholder)"""
  userId: Int!
}

input CreateUserInput {
  email: String
  isActive: Float
  name: String!
  password: String!
  phone: String
  username: String
}

type CreateUserResponseDto {
  id: Float!
  name: String!
}

input CreateUserUtmInput {
  createdAt: DateTime
  id: Float!
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
  utm: UtmDomain!
  utmId: Float!
}

input CreateUtmGoogleFormCouponInput {
  coupon: CouponDomain
  couponId: Float
  createdAt: DateTime
  id: Float!
  lastPurchaseDate: DateTime
  registerDate: DateTime
  returnDate: DateTime
  row: Float
  shortLink: String
  type: String!
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
  utmLink: String
}

input CreateUtmInput {
  createdAt: DateTime
  id: Float!
  updatedAt: DateTime
  userUtms: [UserUtmDomain!]!
  utmCampaign: String
  utmContent: String
  utmMedium: String
  utmSource: String!
}

input CreateVerifyUserInput {
  createdAt: DateTime
  id: Float!
  token: String!
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
}

input CreateVideoInput {
  altText: String
  createdAt: DateTime
  customerVideoProducts: [CustomerVideoProductDomain!]!
  filename: String!
  id: Float!
  mime: String!
  originalFilename: String!
  path: String
  productVideos: [ProductVideoDomain!]!
  returnRequestItemVideos: [ReturnRequestItemVideoDomain!]!
  subproductVideos: [SubproductVideoDomain!]!
  subproducts: [SubproductDomain!]!
  updatedAt: DateTime
  uploadSource: String!
}

input CreateVisitorCouponInput {
  code: String!
  createdAt: DateTime!
  id: Float!
  invoices: [InvoiceDomain!]!
  isActive: Boolean!
  name: String!
  updatedAt: DateTime!
  visitor: VisitorDomain!
  visitorId: Float!
}

input CreateVisitorGroupInput {
  couponDiscountRate: Float!
  createdAt: DateTime!
  id: Float!
  invoices: [InvoiceDomain!]!
  name: String!
  updatedAt: DateTime!
  visitorGroupRates: [VisitorGroupRateDomain!]!
  visitorSales: [VisitorSaleDomain!]!
  visitors: [VisitorDomain!]!
}

input CreateVisitorGroupRateInput {
  createdAt: DateTime!
  id: Float!
  maxRevenue: Float!
  minRevenue: Float!
  rate: Float!
  updatedAt: DateTime!
  visitorGroup: VisitorGroupDomain!
  visitorGroupId: Float!
}

input CreateVisitorInput {
  balance: Float
  cardNumber: String
  code: String!
  createdAt: DateTime!
  id: Float!
  invoices: [InvoiceDomain!]!
  isActive: Boolean!
  isPartner: Boolean!
  partnerCode: String
  paymentRequests: [PaymentRequestDomain!]!
  sortOrder: Float
  title: String!
  updatedAt: DateTime!
  user: UserDomain!
  userId: Float!
  visitorCoupons: [VisitorCouponDomain!]!
  visitorGroup: VisitorGroupDomain!
  visitorGroupId: Float!
  visitorSales: [VisitorSaleDomain!]!
}

input CreateVisitorSaleInput {
  createdAt: DateTime!
  endDate: DateTime!
  id: Float!
  monthSh: Float!
  rate: Float!
  startDate: DateTime!
  totalSale: Float
  totalShare: Float
  updatedAt: DateTime!
  visitor: VisitorDomain!
  visitorGroup: VisitorGroupDomain!
  visitorGroupId: Float!
  visitorId: Float!
  yearSh: Float!
}

input CreateWalletGiftChargeInput {
  amount: String!
  createdAt: DateTime
  id: Float!
  productComment: ProductCommentDomain!
  productCommentId: Float!
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
  wallet: WalletDomain!
  walletId: Float!
}

input CreateWalletHistoryInput {
  createdBy: Float
  modemaBlocked: Float!
  transactionId: Float!
  userBlocked: Float!
  walletId: Float!
  withdrawable: Float!
}

input CreateWalletInputs {
  modemaBlocked: Float!
  notUsableForLowTotalPrices: Float!
  userBlocked: Float!
  userId: Float!
  withdrawable: Float!
}

input CreateWebsitePageInput {
  createdAt: DateTime
  id: Float!
  key: String!
  page: String!
  updatedAt: DateTime
  value: String!
}

input CreateWebsiteVisitInput {
  createdAt: DateTime
  dailyVisits: Float!
  dateM: String
  dateSh: String
  daySh: Float
  id: Float!
  monthSh: Float
  updatedAt: DateTime
  yearSh: Float
}

input CreateWithdrawalRequestInput {
  amount: String!
  cardNo: String!
  confirmedAt: DateTime
  confirmedBy: Float
  createdAt: DateTime
  id: Float!
  moneyTransferFromBank: String
  moneyTransferRefCode: String
  name: String!
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
  withdrawalRequestStatus: WithdrawalRequestStatusDomain!
  withdrawalRequestStatusId: Float!
}

input CreateWithdrawalRequestStatusInput {
  createdAt: DateTime
  id: Float!
  status: String!
  updatedAt: DateTime
  withdrawalRequests: [WithdrawalRequestDomain!]!
}

input CreateWonderfulOfferInput {
  createdAt: DateTime
  dayOfWeek: Float!
  id: Float!
  product: ProductDomain!
  productId: Float!
  updatedAt: DateTime
}

type CrmPresentation {
  mobile: ID!
  optionId: Float
}

type CrmPresentationConnection {
  """Array of edges."""
  edges: [CrmPresentationEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input CrmPresentationDeleteFilter {
  and: [CrmPresentationDeleteFilter!]
  mobile: IDFilterComparison
  or: [CrmPresentationDeleteFilter!]
}

type CrmPresentationDeleteResponse {
  mobile: ID
  optionId: Float
}

input CrmPresentationDomain {
  mobile: ID!
  optionId: Float
}

type CrmPresentationEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the CrmPresentation"""
  node: CrmPresentation!
}

input CrmPresentationFilter {
  and: [CrmPresentationFilter!]
  mobile: IDFilterComparison
  or: [CrmPresentationFilter!]
}

input CrmPresentationSort {
  direction: SortDirection!
  field: CrmPresentationSortFields!
  nulls: SortNulls
}

enum CrmPresentationSortFields {
  mobile
}

input CrmPresentationUpdateFilter {
  and: [CrmPresentationUpdateFilter!]
  mobile: IDFilterComparison
  or: [CrmPresentationUpdateFilter!]
}

input CursorPaging {
  """Paginate after opaque cursor"""
  after: ConnectionCursor

  """Paginate before opaque cursor"""
  before: ConnectionCursor

  """Paginate first"""
  first: Int

  """Paginate last"""
  last: Int
}

type CustomerImageProduct {
  createdAt: DateTime
  id: ID!
  image: Image!
  imageId: Float!
  product: Product!
  productId: Float!
  sortOrder: Float
  updatedAt: DateTime
}

type CustomerImageProductConnection {
  """Array of edges."""
  edges: [CustomerImageProductEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input CustomerImageProductDeleteFilter {
  and: [CustomerImageProductDeleteFilter!]
  id: IDFilterComparison
  or: [CustomerImageProductDeleteFilter!]
}

type CustomerImageProductDeleteResponse {
  createdAt: DateTime
  id: ID
  image: Image
  imageId: Float
  product: Product
  productId: Float
  sortOrder: Float
  updatedAt: DateTime
}

input CustomerImageProductDomain {
  createdAt: DateTime
  id: ID!
  image: ImageDomain!
  imageId: Float!
  product: ProductDomain!
  productId: Float!
  sortOrder: Float
  updatedAt: DateTime
}

type CustomerImageProductEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the CustomerImageProduct"""
  node: CustomerImageProduct!
}

input CustomerImageProductFilter {
  and: [CustomerImageProductFilter!]
  id: IDFilterComparison
  or: [CustomerImageProductFilter!]
}

input CustomerImageProductSort {
  direction: SortDirection!
  field: CustomerImageProductSortFields!
  nulls: SortNulls
}

enum CustomerImageProductSortFields {
  id
}

input CustomerImageProductUpdateFilter {
  and: [CustomerImageProductUpdateFilter!]
  id: IDFilterComparison
  or: [CustomerImageProductUpdateFilter!]
}

type CustomerRequest {
  createdAt: DateTime
  customerRequestFiles: [CustomerRequestFile!]!
  id: ID!
  name: String
  phone: String
  updatedAt: DateTime
  user: User!
  userId: Float
  uuid: String
}

type CustomerRequestConnection {
  """Array of edges."""
  edges: [CustomerRequestEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input CustomerRequestDeleteFilter {
  and: [CustomerRequestDeleteFilter!]
  id: IDFilterComparison
  or: [CustomerRequestDeleteFilter!]
}

type CustomerRequestDeleteResponse {
  createdAt: DateTime
  customerRequestFiles: [CustomerRequestFile!]
  id: ID
  name: String
  phone: String
  updatedAt: DateTime
  user: User
  userId: Float
  uuid: String
}

input CustomerRequestDomain {
  createdAt: DateTime
  customerRequestFiles: [CustomerRequestFileDomain!]!
  id: ID!
  name: String
  phone: String
  updatedAt: DateTime
  user: UserDomain!
  userId: Float
  uuid: String
}

type CustomerRequestEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the CustomerRequest"""
  node: CustomerRequest!
}

type CustomerRequestFile {
  createdAt: DateTime
  customerRequest: CustomerRequest!
  customerRequestId: Float!
  filename: String!
  id: ID!
  mime: String!
  originalFilename: String!
  path: String!
  updatedAt: DateTime
}

type CustomerRequestFileConnection {
  """Array of edges."""
  edges: [CustomerRequestFileEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input CustomerRequestFileDeleteFilter {
  and: [CustomerRequestFileDeleteFilter!]
  id: IDFilterComparison
  or: [CustomerRequestFileDeleteFilter!]
}

type CustomerRequestFileDeleteResponse {
  createdAt: DateTime
  customerRequest: CustomerRequest
  customerRequestId: Float
  filename: String
  id: ID
  mime: String
  originalFilename: String
  path: String
  updatedAt: DateTime
}

input CustomerRequestFileDomain {
  createdAt: DateTime
  customerRequest: CustomerRequestDomain!
  customerRequestId: Float!
  filename: String!
  id: ID!
  mime: String!
  originalFilename: String!
  path: String! = "/"
  updatedAt: DateTime
}

type CustomerRequestFileEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the CustomerRequestFile"""
  node: CustomerRequestFile!
}

input CustomerRequestFileFilter {
  and: [CustomerRequestFileFilter!]
  id: IDFilterComparison
  or: [CustomerRequestFileFilter!]
}

input CustomerRequestFileSort {
  direction: SortDirection!
  field: CustomerRequestFileSortFields!
  nulls: SortNulls
}

enum CustomerRequestFileSortFields {
  id
}

input CustomerRequestFileUpdateFilter {
  and: [CustomerRequestFileUpdateFilter!]
  id: IDFilterComparison
  or: [CustomerRequestFileUpdateFilter!]
}

input CustomerRequestFilter {
  and: [CustomerRequestFilter!]
  id: IDFilterComparison
  or: [CustomerRequestFilter!]
}

input CustomerRequestSort {
  direction: SortDirection!
  field: CustomerRequestSortFields!
  nulls: SortNulls
}

enum CustomerRequestSortFields {
  id
}

input CustomerRequestUpdateFilter {
  and: [CustomerRequestUpdateFilter!]
  id: IDFilterComparison
  or: [CustomerRequestUpdateFilter!]
}

type CustomerVideoProduct {
  createdAt: DateTime
  id: ID!
  product: Product!
  productId: Float!
  sortOrder: Float
  updatedAt: DateTime
  video: Video!
  videoId: Float!
}

type CustomerVideoProductConnection {
  """Array of edges."""
  edges: [CustomerVideoProductEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input CustomerVideoProductDeleteFilter {
  and: [CustomerVideoProductDeleteFilter!]
  id: IDFilterComparison
  or: [CustomerVideoProductDeleteFilter!]
}

type CustomerVideoProductDeleteResponse {
  createdAt: DateTime
  id: ID
  product: Product
  productId: Float
  sortOrder: Float
  updatedAt: DateTime
  video: Video
  videoId: Float
}

input CustomerVideoProductDomain {
  createdAt: DateTime
  id: ID!
  product: ProductDomain!
  productId: Float!
  sortOrder: Float = 0
  updatedAt: DateTime
  video: VideoDomain!
  videoId: Float!
}

type CustomerVideoProductEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the CustomerVideoProduct"""
  node: CustomerVideoProduct!
}

input CustomerVideoProductFilter {
  and: [CustomerVideoProductFilter!]
  id: IDFilterComparison
  or: [CustomerVideoProductFilter!]
}

input CustomerVideoProductSort {
  direction: SortDirection!
  field: CustomerVideoProductSortFields!
  nulls: SortNulls
}

enum CustomerVideoProductSortFields {
  id
}

input CustomerVideoProductUpdateFilter {
  and: [CustomerVideoProductUpdateFilter!]
  id: IDFilterComparison
  or: [CustomerVideoProductUpdateFilter!]
}

type DamageReason {
  cause: String!
  createdAt: DateTime
  department: String!
  id: ID!
  invoiceProductItems: [InvoiceProductItem!]!
  name: String!
  updatedAt: DateTime
}

type DamageReasonConnection {
  """Array of edges."""
  edges: [DamageReasonEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input DamageReasonDeleteFilter {
  and: [DamageReasonDeleteFilter!]
  id: IDFilterComparison
  or: [DamageReasonDeleteFilter!]
}

type DamageReasonDeleteResponse {
  cause: String
  createdAt: DateTime
  department: String
  id: ID
  invoiceProductItems: [InvoiceProductItem!]
  name: String
  updatedAt: DateTime
}

input DamageReasonDomain {
  cause: String!
  createdAt: DateTime
  department: String!
  id: ID!
  invoiceProductItems: [InvoiceProductItemDomain!]!
  name: String!
  updatedAt: DateTime
}

type DamageReasonEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the DamageReason"""
  node: DamageReason!
}

input DamageReasonFilter {
  and: [DamageReasonFilter!]
  id: IDFilterComparison
  or: [DamageReasonFilter!]
}

input DamageReasonSort {
  direction: SortDirection!
  field: DamageReasonSortFields!
  nulls: SortNulls
}

enum DamageReasonSortFields {
  id
}

input DamageReasonUpdateFilter {
  and: [DamageReasonUpdateFilter!]
  id: IDFilterComparison
  or: [DamageReasonUpdateFilter!]
}

input DateFieldComparison {
  between: DateFieldComparisonBetween
  eq: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  is: Boolean
  isNot: Boolean
  lt: DateTime
  lte: DateTime
  neq: DateTime
  notBetween: DateFieldComparisonBetween
  notIn: [DateTime!]
}

input DateFieldComparisonBetween {
  lower: DateTime!
  upper: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeleteManyActivitiesInput {
  """Filter to find records to delete"""
  filter: ActivityDeleteFilter!
}

input DeleteManyAddressesInput {
  """Filter to find records to delete"""
  filter: AddressDeleteFilter!
}

input DeleteManyAttributeAttributeGroupsInput {
  """Filter to find records to delete"""
  filter: AttributeAttributeGroupDeleteFilter!
}

input DeleteManyAttributeGroupsInput {
  """Filter to find records to delete"""
  filter: AttributeGroupDeleteFilter!
}

input DeleteManyAttributeItemsInput {
  """Filter to find records to delete"""
  filter: AttributeItemDeleteFilter!
}

input DeleteManyAttributeProductsInput {
  """Filter to find records to delete"""
  filter: AttributeProductDeleteFilter!
}

input DeleteManyAttributeSubproductsInput {
  """Filter to find records to delete"""
  filter: AttributeSubproductDeleteFilter!
}

input DeleteManyAttributesInput {
  """Filter to find records to delete"""
  filter: AttributeDeleteFilter!
}

input DeleteManyAutomationEventsInput {
  """Filter to find records to delete"""
  filter: AutomationEventDeleteFilter!
}

input DeleteManyAutomationRfmScoresInput {
  """Filter to find records to delete"""
  filter: AutomationRfmScoreDeleteFilter!
}

input DeleteManyBasicCarpetBordersInput {
  """Filter to find records to delete"""
  filter: BasicCarpetBorderDeleteFilter!
}

input DeleteManyBasicCarpetBrandsInput {
  """Filter to find records to delete"""
  filter: BasicCarpetBrandDeleteFilter!
}

input DeleteManyBasicCarpetColorsInput {
  """Filter to find records to delete"""
  filter: BasicCarpetColorDeleteFilter!
}

input DeleteManyBasicCarpetDesignersInput {
  """Filter to find records to delete"""
  filter: BasicCarpetDesignerDeleteFilter!
}

input DeleteManyBasicCarpetDesignsInput {
  """Filter to find records to delete"""
  filter: BasicCarpetDesignDeleteFilter!
}

input DeleteManyBasicCarpetMaterialsInput {
  """Filter to find records to delete"""
  filter: BasicCarpetMaterialDeleteFilter!
}

input DeleteManyBasicCarpetSizeDetailsInput {
  """Filter to find records to delete"""
  filter: BasicCarpetSizeDetailDeleteFilter!
}

input DeleteManyBasicCarpetSizesInput {
  """Filter to find records to delete"""
  filter: BasicCarpetSizeDeleteFilter!
}

input DeleteManyBasicCarpetTypesInput {
  """Filter to find records to delete"""
  filter: BasicCarpetTypeDeleteFilter!
}

input DeleteManyBordersInput {
  """Filter to find records to delete"""
  filter: BorderDeleteFilter!
}

input DeleteManyCampaignFreeOfferSizesInput {
  """Filter to find records to delete"""
  filter: CampaignFreeOfferSizeDeleteFilter!
}

input DeleteManyCampaignFreeOffersInput {
  """Filter to find records to delete"""
  filter: CampaignFreeOfferDeleteFilter!
}

input DeleteManyCampaignGoldCoinSubsInput {
  """Filter to find records to delete"""
  filter: CampaignGoldCoinSubDeleteFilter!
}

input DeleteManyCampaignInstagramFollowsInput {
  """Filter to find records to delete"""
  filter: CampaignInstagramFollowDeleteFilter!
}

input DeleteManyCampaignPetFormsInput {
  """Filter to find records to delete"""
  filter: CampaignPetFormDeleteFilter!
}

input DeleteManyCampaignRoomvoImagesInput {
  """Filter to find records to delete"""
  filter: CampaignRoomvoImageDeleteFilter!
}

input DeleteManyCampaignRoomvoVotesInput {
  """Filter to find records to delete"""
  filter: CampaignRoomvoVoteDeleteFilter!
}

input DeleteManyCampaignSubscriptionsInput {
  """Filter to find records to delete"""
  filter: CampaignSubscriptionDeleteFilter!
}

input DeleteManyCampaignUefaEuroSubscriberHistoriesInput {
  """Filter to find records to delete"""
  filter: CampaignUefaEuroSubscriberHistoryDeleteFilter!
}

input DeleteManyCampaignUefaEuroSubscribersInput {
  """Filter to find records to delete"""
  filter: CampaignUefaEuroSubscriberDeleteFilter!
}

input DeleteManyCampaignVotingImageUsersInput {
  """Filter to find records to delete"""
  filter: CampaignVotingImageUserDeleteFilter!
}

input DeleteManyCampaignVotingImagesInput {
  """Filter to find records to delete"""
  filter: CampaignVotingImageDeleteFilter!
}

input DeleteManyCarpetFeatureUsersInput {
  """Filter to find records to delete"""
  filter: CarpetFeatureUserDeleteFilter!
}

input DeleteManyCarpetFeaturesInput {
  """Filter to find records to delete"""
  filter: CarpetFeatureDeleteFilter!
}

input DeleteManyCarpetMaterialsInput {
  """Filter to find records to delete"""
  filter: CarpetMaterialDeleteFilter!
}

input DeleteManyCarpetShapesInput {
  """Filter to find records to delete"""
  filter: CarpetShapeDeleteFilter!
}

input DeleteManyCarpetSizesInput {
  """Filter to find records to delete"""
  filter: CarpetSizeDeleteFilter!
}

input DeleteManyCarpetUsagePlaceInvoiceProductsInput {
  """Filter to find records to delete"""
  filter: CarpetUsagePlaceInvoiceProductDeleteFilter!
}

input DeleteManyCarpetUsagePlaceUsersInput {
  """Filter to find records to delete"""
  filter: CarpetUsagePlaceUserDeleteFilter!
}

input DeleteManyCarpetUsagePlacesInput {
  """Filter to find records to delete"""
  filter: CarpetUsagePlaceDeleteFilter!
}

input DeleteManyChaparSettlementStatusesInput {
  """Filter to find records to delete"""
  filter: ChaparSettlementStatusDeleteFilter!
}

input DeleteManyChaparTrackingHistoriesInput {
  """Filter to find records to delete"""
  filter: ChaparTrackingHistoryDeleteFilter!
}

input DeleteManyCitiesInput {
  """Filter to find records to delete"""
  filter: CityDeleteFilter!
}

input DeleteManyCitiesSepidarsInput {
  """Filter to find records to delete"""
  filter: CitiesSepidarDeleteFilter!
}

input DeleteManyCity2sInput {
  """Filter to find records to delete"""
  filter: City2DeleteFilter!
}

input DeleteManyColorCategoriesInput {
  """Filter to find records to delete"""
  filter: ColorCategoryDeleteFilter!
}

input DeleteManyColorCategoryDetailsInput {
  """Filter to find records to delete"""
  filter: ColorCategoryDetailDeleteFilter!
}

input DeleteManyColorCategorySubproductsInput {
  """Filter to find records to delete"""
  filter: ColorCategorySubproductDeleteFilter!
}

input DeleteManyColorsInput {
  """Filter to find records to delete"""
  filter: ColorDeleteFilter!
}

input DeleteManyConfigsInput {
  """Filter to find records to delete"""
  filter: ConfigDeleteFilter!
}

input DeleteManyContactFormHistoriesInput {
  """Filter to find records to delete"""
  filter: ContactFormHistoryDeleteFilter!
}

input DeleteManyContactFormStatusesInput {
  """Filter to find records to delete"""
  filter: ContactFormStatusDeleteFilter!
}

input DeleteManyContactFormsInput {
  """Filter to find records to delete"""
  filter: ContactFormDeleteFilter!
}

input DeleteManyCountriesInput {
  """Filter to find records to delete"""
  filter: CountryDeleteFilter!
}

input DeleteManyCouponSubjectsInput {
  """Filter to find records to delete"""
  filter: CouponSubjectDeleteFilter!
}

input DeleteManyCouponsInput {
  """Filter to find records to delete"""
  filter: CouponDeleteFilter!
}

input DeleteManyCrmPresentationsInput {
  """Filter to find records to delete"""
  filter: CrmPresentationDeleteFilter!
}

input DeleteManyCustomerImageProductsInput {
  """Filter to find records to delete"""
  filter: CustomerImageProductDeleteFilter!
}

input DeleteManyCustomerRequestFilesInput {
  """Filter to find records to delete"""
  filter: CustomerRequestFileDeleteFilter!
}

input DeleteManyCustomerRequestsInput {
  """Filter to find records to delete"""
  filter: CustomerRequestDeleteFilter!
}

input DeleteManyCustomerVideoProductsInput {
  """Filter to find records to delete"""
  filter: CustomerVideoProductDeleteFilter!
}

input DeleteManyDamageReasonsInput {
  """Filter to find records to delete"""
  filter: DamageReasonDeleteFilter!
}

input DeleteManyDepartmentsInput {
  """Filter to find records to delete"""
  filter: DepartmentDeleteFilter!
}

input DeleteManyDesignersProductPriceRangesInput {
  """Filter to find records to delete"""
  filter: DesignersProductPriceRangeDeleteFilter!
}

input DeleteManyDesignsInput {
  """Filter to find records to delete"""
  filter: DesignDeleteFilter!
}

input DeleteManyDiscountNotificationsInput {
  """Filter to find records to delete"""
  filter: DiscountNotificationDeleteFilter!
}

input DeleteManyDiscountSubjectsInput {
  """Filter to find records to delete"""
  filter: DiscountSubjectDeleteFilter!
}

input DeleteManyDiscountsInput {
  """Filter to find records to delete"""
  filter: DiscountDeleteFilter!
}

input DeleteManyExitControlItemsInput {
  """Filter to find records to delete"""
  filter: ExitControlItemDeleteFilter!
}

input DeleteManyExitControlsInput {
  """Filter to find records to delete"""
  filter: ExitControlDeleteFilter!
}

input DeleteManyExportProductsInput {
  """Filter to find records to delete"""
  filter: ExportProductDeleteFilter!
}

input DeleteManyFailedJobsInput {
  """Filter to find records to delete"""
  filter: FailedJobDeleteFilter!
}

input DeleteManyFavoriteProductsInput {
  """Filter to find records to delete"""
  filter: FavoriteProductDeleteFilter!
}

input DeleteManyFedexAddressValidationAttributesInput {
  """Filter to find records to delete"""
  filter: FedexAddressValidationAttributeDeleteFilter!
}

input DeleteManyFetchSiteUrlsInput {
  """Filter to find records to delete"""
  filter: FetchSiteUrlDeleteFilter!
}

input DeleteManyFileNegotiationsInput {
  """Filter to find records to delete"""
  filter: FileNegotiationDeleteFilter!
}

input DeleteManyFilesInput {
  """Filter to find records to delete"""
  filter: FileDeleteFilter!
}

input DeleteManyGhazalsInput {
  """Filter to find records to delete"""
  filter: GhazalDeleteFilter!
}

input DeleteManyGoogleFormUtmsInput {
  """Filter to find records to delete"""
  filter: GoogleFormUtmDeleteFilter!
}

input DeleteManyHeardAboutUsOptionsInput {
  """Filter to find records to delete"""
  filter: HeardAboutUsOptionDeleteFilter!
}

input DeleteManyHelpDesksInput {
  """Filter to find records to delete"""
  filter: HelpDeskDeleteFilter!
}

input DeleteManyHolidaysInput {
  """Filter to find records to delete"""
  filter: HolidayDeleteFilter!
}

input DeleteManyHomePageCustomerImagesInput {
  """Filter to find records to delete"""
  filter: HomePageCustomerImageDeleteFilter!
}

input DeleteManyHypersInput {
  """Filter to find records to delete"""
  filter: HyperDeleteFilter!
}

input DeleteManyHyperstarCodesInput {
  """Filter to find records to delete"""
  filter: HyperstarCodeDeleteFilter!
}

input DeleteManyImageLayersInput {
  """Filter to find records to delete"""
  filter: ImageLayerDeleteFilter!
}

input DeleteManyImageProductsInput {
  """Filter to find records to delete"""
  filter: ImageProductDeleteFilter!
}

input DeleteManyImageSizesInput {
  """Filter to find records to delete"""
  filter: ImageSizeDeleteFilter!
}

input DeleteManyImageSubproductsInput {
  """Filter to find records to delete"""
  filter: ImageSubproductDeleteFilter!
}

input DeleteManyImagesInput {
  """Filter to find records to delete"""
  filter: ImageDeleteFilter!
}

input DeleteManyImagesSizeGuidesDetailsInput {
  """Filter to find records to delete"""
  filter: ImagesSizeGuidesDetailDeleteFilter!
}

input DeleteManyImpersonateHistoriesInput {
  """Filter to find records to delete"""
  filter: ImpersonateHistoryDeleteFilter!
}

input DeleteManyIncredibleOfferSentNotificationsInput {
  """Filter to find records to delete"""
  filter: IncredibleOfferSentNotificationDeleteFilter!
}

input DeleteManyIncredibleOffersInput {
  """Filter to find records to delete"""
  filter: IncredibleOfferDeleteFilter!
}

input DeleteManyInstagramFeedsInput {
  """Filter to find records to delete"""
  filter: InstagramFeedDeleteFilter!
}

input DeleteManyInvitationCodesInput {
  """Filter to find records to delete"""
  filter: InvitationCodeDeleteFilter!
}

input DeleteManyInvoiceAddressValidationResultsInput {
  """Filter to find records to delete"""
  filter: InvoiceAddressValidationResultDeleteFilter!
}

input DeleteManyInvoiceAddressesInput {
  """Filter to find records to delete"""
  filter: InvoiceAddressDeleteFilter!
}

input DeleteManyInvoiceBankGatewayHistoriesInput {
  """Filter to find records to delete"""
  filter: InvoiceBankGatewayHistoryDeleteFilter!
}

input DeleteManyInvoiceHistoriesInput {
  """Filter to find records to delete"""
  filter: InvoiceHistoryDeleteFilter!
}

input DeleteManyInvoiceInvoiceStatusesInput {
  """Filter to find records to delete"""
  filter: InvoiceInvoiceStatusDeleteFilter!
}

input DeleteManyInvoiceModesInput {
  """Filter to find records to delete"""
  filter: InvoiceModeDeleteFilter!
}

input DeleteManyInvoiceNegotiationsInput {
  """Filter to find records to delete"""
  filter: InvoiceNegotiationDeleteFilter!
}

input DeleteManyInvoicePaymentHistoriesInput {
  """Filter to find records to delete"""
  filter: InvoicePaymentHistoryDeleteFilter!
}

input DeleteManyInvoicePaymentStatusesInput {
  """Filter to find records to delete"""
  filter: InvoicePaymentStatusDeleteFilter!
}

input DeleteManyInvoicePaymentTypesInput {
  """Filter to find records to delete"""
  filter: InvoicePaymentTypeDeleteFilter!
}

input DeleteManyInvoicePaymentsInput {
  """Filter to find records to delete"""
  filter: InvoicePaymentDeleteFilter!
}

input DeleteManyInvoiceProductHistoriesInput {
  """Filter to find records to delete"""
  filter: InvoiceProductHistoryDeleteFilter!
}

input DeleteManyInvoiceProductItemInvoiceProductStatusesInput {
  """Filter to find records to delete"""
  filter: InvoiceProductItemInvoiceProductStatusDeleteFilter!
}

input DeleteManyInvoiceProductItemsInput {
  """Filter to find records to delete"""
  filter: InvoiceProductItemDeleteFilter!
}

input DeleteManyInvoiceProductStatusesInput {
  """Filter to find records to delete"""
  filter: InvoiceProductStatusDeleteFilter!
}

input DeleteManyInvoiceProductsInput {
  """Filter to find records to delete"""
  filter: InvoiceProductDeleteFilter!
}

input DeleteManyInvoiceRatesResultsInput {
  """Filter to find records to delete"""
  filter: InvoiceRatesResultDeleteFilter!
}

input DeleteManyInvoiceReversalItemsInput {
  """Filter to find records to delete"""
  filter: InvoiceReversalItemDeleteFilter!
}

input DeleteManyInvoiceReversalsInput {
  """Filter to find records to delete"""
  filter: InvoiceReversalDeleteFilter!
}

input DeleteManyInvoiceShippingRatesInput {
  """Filter to find records to delete"""
  filter: InvoiceShippingRateDeleteFilter!
}

input DeleteManyInvoiceStatusesInput {
  """Filter to find records to delete"""
  filter: InvoiceStatusDeleteFilter!
}

input DeleteManyInvoiceTypesInput {
  """Filter to find records to delete"""
  filter: InvoiceTypeDeleteFilter!
}

input DeleteManyInvoicesInput {
  """Filter to find records to delete"""
  filter: InvoiceDeleteFilter!
}

input DeleteManyLabelProductsInput {
  """Filter to find records to delete"""
  filter: LabelProductDeleteFilter!
}

input DeleteManyLabelsInput {
  """Filter to find records to delete"""
  filter: LabelDeleteFilter!
}

input DeleteManyMellatPaymentErrorsInput {
  """Filter to find records to delete"""
  filter: MellatPaymentErrorDeleteFilter!
}

input DeleteManyMigrationsInput {
  """Filter to find records to delete"""
  filter: MigrationDeleteFilter!
}

input DeleteManyModelHasPermissionsInput {
  """Filter to find records to delete"""
  filter: ModelHasPermissionDeleteFilter!
}

input DeleteManyModelHasRolesInput {
  """Filter to find records to delete"""
  filter: ModelHasRoleDeleteFilter!
}

input DeleteManyModelVisitsInput {
  """Filter to find records to delete"""
  filter: ModelVisitDeleteFilter!
}

input DeleteManyModemaAcceleratorImagesInput {
  """Filter to find records to delete"""
  filter: ModemaAcceleratorImageDeleteFilter!
}

input DeleteManyModemaAcceleratorVideosInput {
  """Filter to find records to delete"""
  filter: ModemaAcceleratorVideoDeleteFilter!
}

input DeleteManyModemaAcceleratorsInput {
  """Filter to find records to delete"""
  filter: ModemaAcceleratorDeleteFilter!
}

input DeleteManyNeedsPhotographySubproductsInput {
  """Filter to find records to delete"""
  filter: NeedsPhotographySubproductDeleteFilter!
}

input DeleteManyNegotiationHistoriesInput {
  """Filter to find records to delete"""
  filter: NegotiationHistoryDeleteFilter!
}

input DeleteManyNegotiationStatusesInput {
  """Filter to find records to delete"""
  filter: NegotiationStatusDeleteFilter!
}

input DeleteManyNegotiationStepsInput {
  """Filter to find records to delete"""
  filter: NegotiationStepDeleteFilter!
}

input DeleteManyNegotiationTypesInput {
  """Filter to find records to delete"""
  filter: NegotiationTypeDeleteFilter!
}

input DeleteManyNegotiationsInput {
  """Filter to find records to delete"""
  filter: NegotiationDeleteFilter!
}

input DeleteManyNewBordersInput {
  """Filter to find records to delete"""
  filter: NewBorderDeleteFilter!
}

input DeleteManyOauthAccessTokensInput {
  """Filter to find records to delete"""
  filter: OauthAccessTokenDeleteFilter!
}

input DeleteManyOauthAuthCodesInput {
  """Filter to find records to delete"""
  filter: OauthAuthCodeDeleteFilter!
}

input DeleteManyOauthClientsInput {
  """Filter to find records to delete"""
  filter: OauthClientDeleteFilter!
}

input DeleteManyOauthPersonalAccessClientsInput {
  """Filter to find records to delete"""
  filter: OauthPersonalAccessClientDeleteFilter!
}

input DeleteManyOauthRefreshTokensInput {
  """Filter to find records to delete"""
  filter: OauthRefreshTokenDeleteFilter!
}

input DeleteManyOutOfStockButListedProductsInput {
  """Filter to find records to delete"""
  filter: OutOfStockButListedProductDeleteFilter!
}

input DeleteManyPasswordResetsInput {
  """Filter to find records to delete"""
  filter: PasswordResetDeleteFilter!
}

input DeleteManyPatternCategoriesInput {
  """Filter to find records to delete"""
  filter: PatternCategoryDeleteFilter!
}

input DeleteManyPatternLayersInput {
  """Filter to find records to delete"""
  filter: PatternLayerDeleteFilter!
}

input DeleteManyPatternsInput {
  """Filter to find records to delete"""
  filter: PatternDeleteFilter!
}

input DeleteManyPaymentMethodFieldsInput {
  """Filter to find records to delete"""
  filter: PaymentMethodFieldDeleteFilter!
}

input DeleteManyPaymentMethodsInput {
  """Filter to find records to delete"""
  filter: PaymentMethodDeleteFilter!
}

input DeleteManyPaymentRequestStatusesInput {
  """Filter to find records to delete"""
  filter: PaymentRequestStatusDeleteFilter!
}

input DeleteManyPaymentRequestsInput {
  """Filter to find records to delete"""
  filter: PaymentRequestDeleteFilter!
}

input DeleteManyPermissionGroupsInput {
  """Filter to find records to delete"""
  filter: PermissionGroupDeleteFilter!
}

input DeleteManyPermissionsInput {
  """Filter to find records to delete"""
  filter: PermissionDeleteFilter!
}

input DeleteManyPreorderPreorderStatusesInput {
  """Filter to find records to delete"""
  filter: PreorderPreorderStatusDeleteFilter!
}

input DeleteManyPreorderRegistersInput {
  """Filter to find records to delete"""
  filter: PreorderRegisterDeleteFilter!
}

input DeleteManyPreorderStatusesInput {
  """Filter to find records to delete"""
  filter: PreorderStatusDeleteFilter!
}

input DeleteManyPreordersInput {
  """Filter to find records to delete"""
  filter: PreorderDeleteFilter!
}

input DeleteManyPriceGroupSizesInput {
  """Filter to find records to delete"""
  filter: PriceGroupSizeDeleteFilter!
}

input DeleteManyPriceGroupsInput {
  """Filter to find records to delete"""
  filter: PriceGroupDeleteFilter!
}

input DeleteManyPrintProfilesInput {
  """Filter to find records to delete"""
  filter: PrintProfileDeleteFilter!
}

input DeleteManyPrintRipsInput {
  """Filter to find records to delete"""
  filter: PrintRipDeleteFilter!
}

input DeleteManyProductCategoriesInput {
  """Filter to find records to delete"""
  filter: ProductCategoryDeleteFilter!
}

input DeleteManyProductCategoryDetailsInput {
  """Filter to find records to delete"""
  filter: ProductCategoryDetailDeleteFilter!
}

input DeleteManyProductCategoryRatesInput {
  """Filter to find records to delete"""
  filter: ProductCategoryRateDeleteFilter!
}

input DeleteManyProductColorImagesInput {
  """Filter to find records to delete"""
  filter: ProductColorImageDeleteFilter!
}

input DeleteManyProductColorSalesInput {
  """Filter to find records to delete"""
  filter: ProductColorSaleDeleteFilter!
}

input DeleteManyProductCommentLikesInput {
  """Filter to find records to delete"""
  filter: ProductCommentLikeDeleteFilter!
}

input DeleteManyProductCommentsInput {
  """Filter to find records to delete"""
  filter: ProductCommentDeleteFilter!
}

input DeleteManyProductLikesInput {
  """Filter to find records to delete"""
  filter: ProductLikeDeleteFilter!
}

input DeleteManyProductProductCategoriesInput {
  """Filter to find records to delete"""
  filter: ProductProductCategoryDeleteFilter!
}

input DeleteManyProductRateAveragesInput {
  """Filter to find records to delete"""
  filter: ProductRateAverageDeleteFilter!
}

input DeleteManyProductRatesInput {
  """Filter to find records to delete"""
  filter: ProductRateDeleteFilter!
}

input DeleteManyProductTagsInput {
  """Filter to find records to delete"""
  filter: ProductTagDeleteFilter!
}

input DeleteManyProductVideosInput {
  """Filter to find records to delete"""
  filter: ProductVideoDeleteFilter!
}

input DeleteManyProductionPadProductionPadStatusesInput {
  """Filter to find records to delete"""
  filter: ProductionPadProductionPadStatusDeleteFilter!
}

input DeleteManyProductionPadStatusesInput {
  """Filter to find records to delete"""
  filter: ProductionPadStatusDeleteFilter!
}

input DeleteManyProductionPadsInput {
  """Filter to find records to delete"""
  filter: ProductionPadDeleteFilter!
}

input DeleteManyProductionReceiptTypesInput {
  """Filter to find records to delete"""
  filter: ProductionReceiptTypeDeleteFilter!
}

input DeleteManyProductionRollsInput {
  """Filter to find records to delete"""
  filter: ProductionRollDeleteFilter!
}

input DeleteManyProductsInput {
  """Filter to find records to delete"""
  filter: ProductDeleteFilter!
}

input DeleteManyRatesInput {
  """Filter to find records to delete"""
  filter: RateDeleteFilter!
}

input DeleteManyReadyToSendProductsInput {
  """Filter to find records to delete"""
  filter: ReadyToSendProductDeleteFilter!
}

input DeleteManyRecommendedProductsInput {
  """Filter to find records to delete"""
  filter: RecommendedProductDeleteFilter!
}

input DeleteManyRecommendedSubproductsInput {
  """Filter to find records to delete"""
  filter: RecommendedSubproductDeleteFilter!
}

input DeleteManyRedisSavedKeysInput {
  """Filter to find records to delete"""
  filter: RedisSavedKeyDeleteFilter!
}

input DeleteManyRelatedProductsInput {
  """Filter to find records to delete"""
  filter: RelatedProductDeleteFilter!
}

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

input DeleteManyRetargetingWalletChargesInput {
  """Filter to find records to delete"""
  filter: RetargetingWalletChargeDeleteFilter!
}

input DeleteManyReturnItemStatusReturnRequestItemsInput {
  """Filter to find records to delete"""
  filter: ReturnItemStatusReturnRequestItemDeleteFilter!
}

input DeleteManyReturnItemStatusesInput {
  """Filter to find records to delete"""
  filter: ReturnItemStatusDeleteFilter!
}

input DeleteManyReturnReasonsInput {
  """Filter to find records to delete"""
  filter: ReturnReasonDeleteFilter!
}

input DeleteManyReturnRequestAddressesInput {
  """Filter to find records to delete"""
  filter: ReturnRequestAddressDeleteFilter!
}

input DeleteManyReturnRequestHistoriesInput {
  """Filter to find records to delete"""
  filter: ReturnRequestHistoryDeleteFilter!
}

input DeleteManyReturnRequestItemHistoriesInput {
  """Filter to find records to delete"""
  filter: ReturnRequestItemHistoryDeleteFilter!
}

input DeleteManyReturnRequestItemImagesInput {
  """Filter to find records to delete"""
  filter: ReturnRequestItemImageDeleteFilter!
}

input DeleteManyReturnRequestItemReturnItemStatusesInput {
  """Filter to find records to delete"""
  filter: ReturnRequestItemReturnItemStatusDeleteFilter!
}

input DeleteManyReturnRequestItemVideosInput {
  """Filter to find records to delete"""
  filter: ReturnRequestItemVideoDeleteFilter!
}

input DeleteManyReturnRequestItemsInput {
  """Filter to find records to delete"""
  filter: ReturnRequestItemDeleteFilter!
}

input DeleteManyReturnRequestReturnStatusesInput {
  """Filter to find records to delete"""
  filter: ReturnRequestReturnStatusDeleteFilter!
}

input DeleteManyReturnRequestsInput {
  """Filter to find records to delete"""
  filter: ReturnRequestDeleteFilter!
}

input DeleteManyReturnStatusesInput {
  """Filter to find records to delete"""
  filter: ReturnStatusDeleteFilter!
}

input DeleteManyReturnTypesInput {
  """Filter to find records to delete"""
  filter: ReturnTypeDeleteFilter!
}

input DeleteManyReturnedInvoiceProductsInput {
  """Filter to find records to delete"""
  filter: ReturnedInvoiceProductDeleteFilter!
}

input DeleteManyReturnedInvoicesInput {
  """Filter to find records to delete"""
  filter: ReturnedInvoiceDeleteFilter!
}

input DeleteManyRfmReportsInput {
  """Filter to find records to delete"""
  filter: RfmReportDeleteFilter!
}

input DeleteManyRipTemplateItemsInput {
  """Filter to find records to delete"""
  filter: RipTemplateItemDeleteFilter!
}

input DeleteManyRipTemplatesInput {
  """Filter to find records to delete"""
  filter: RipTemplateDeleteFilter!
}

input DeleteManyRoleDomainsInput {
  """Filter to find records to delete"""
  filter: RoleDomainDeleteFilter!
}

input DeleteManyRoleHasPermissionsInput {
  """Filter to find records to delete"""
  filter: RoleHasPermissionDeleteFilter!
}

input DeleteManyRussiansInput {
  """Filter to find records to delete"""
  filter: RussianDeleteFilter!
}

input DeleteManySenderInformationsInput {
  """Filter to find records to delete"""
  filter: SenderInformationDeleteFilter!
}

input DeleteManyShippingServicesInput {
  """Filter to find records to delete"""
  filter: ShippingServiceDeleteFilter!
}

input DeleteManySitemapStaticPagesInput {
  """Filter to find records to delete"""
  filter: SitemapStaticPageDeleteFilter!
}

input DeleteManySizeGuidesDetailsInput {
  """Filter to find records to delete"""
  filter: SizeGuidesDetailDeleteFilter!
}

input DeleteManySizeGuidesInput {
  """Filter to find records to delete"""
  filter: SizeGuideDeleteFilter!
}

input DeleteManySocialFacebookAccountsInput {
  """Filter to find records to delete"""
  filter: SocialFacebookAccountDeleteFilter!
}

input DeleteManySocialGoogleAccountsInput {
  """Filter to find records to delete"""
  filter: SocialGoogleAccountDeleteFilter!
}

input DeleteManySpecialOffersInput {
  """Filter to find records to delete"""
  filter: SpecialOfferDeleteFilter!
}

input DeleteManyStatesInput {
  """Filter to find records to delete"""
  filter: StateDeleteFilter!
}

input DeleteManySubcolorsInput {
  """Filter to find records to delete"""
  filter: SubcolorDeleteFilter!
}

input DeleteManySubproductSpecialImagesInput {
  """Filter to find records to delete"""
  filter: SubproductSpecialImageDeleteFilter!
}

input DeleteManySubproductStockHistoriesInput {
  """Filter to find records to delete"""
  filter: SubproductStockHistoryDeleteFilter!
}

input DeleteManySubproductVideosInput {
  """Filter to find records to delete"""
  filter: SubproductVideoDeleteFilter!
}

input DeleteManySubproductsInput {
  """Filter to find records to delete"""
  filter: SubproductDeleteFilter!
}

input DeleteManySubscribersInput {
  """Filter to find records to delete"""
  filter: SubscriberDeleteFilter!
}

input DeleteManyTagsInput {
  """Filter to find records to delete"""
  filter: TagDeleteFilter!
}

input DeleteManyTempSubproductDiscountsInput {
  """Filter to find records to delete"""
  filter: TempSubproductDiscountDeleteFilter!
}

input DeleteManyTestimonialsInput {
  """Filter to find records to delete"""
  filter: TestimonialDeleteFilter!
}

input DeleteManyTextLayersInput {
  """Filter to find records to delete"""
  filter: TextLayerDeleteFilter!
}

input DeleteManyTmpRfmReportsInput {
  """Filter to find records to delete"""
  filter: TmpRfmReportDeleteFilter!
}

input DeleteManyTmpRussiaProductsInput {
  """Filter to find records to delete"""
  filter: TmpRussiaProductDeleteFilter!
}

input DeleteManyTmpSpainOrdersInput {
  """Filter to find records to delete"""
  filter: TmpSpainOrderDeleteFilter!
}

input DeleteManyTmpSpanishNamesInput {
  """Filter to find records to delete"""
  filter: TmpSpanishNameDeleteFilter!
}

input DeleteManyTmpTagChangesPrintsInput {
  """Filter to find records to delete"""
  filter: TmpTagChangesPrintDeleteFilter!
}

input DeleteManyTorobProductsInput {
  """Filter to find records to delete"""
  filter: TorobProductDeleteFilter!
}

input DeleteManyTransactionsInput {
  """Filter to find records to delete"""
  filter: TransactionDeleteFilter!
}

input DeleteManyUserCartsInput {
  """Filter to find records to delete"""
  filter: UserCartDeleteFilter!
}

input DeleteManyUserHasPermissionsInput {
  """Filter to find records to delete"""
  filter: UserHasPermissionDeleteFilter!
}

input DeleteManyUserHasRolesInput {
  """Filter to find records to delete"""
  filter: UserHasRoleDeleteFilter!
}

input DeleteManyUserUtmsInput {
  """Filter to find records to delete"""
  filter: UserUtmDeleteFilter!
}

input DeleteManyUsersInput {
  """Filter to find records to delete"""
  filter: UserDeleteFilter!
}

input DeleteManyUtmGoogleFormCouponsInput {
  """Filter to find records to delete"""
  filter: UtmGoogleFormCouponDeleteFilter!
}

input DeleteManyUtmsInput {
  """Filter to find records to delete"""
  filter: UtmDeleteFilter!
}

input DeleteManyVerifyUsersInput {
  """Filter to find records to delete"""
  filter: VerifyUserDeleteFilter!
}

input DeleteManyVideosInput {
  """Filter to find records to delete"""
  filter: VideoDeleteFilter!
}

input DeleteManyVisitorCouponsInput {
  """Filter to find records to delete"""
  filter: VisitorCouponDeleteFilter!
}

input DeleteManyVisitorGroupRatesInput {
  """Filter to find records to delete"""
  filter: VisitorGroupRateDeleteFilter!
}

input DeleteManyVisitorGroupsInput {
  """Filter to find records to delete"""
  filter: VisitorGroupDeleteFilter!
}

input DeleteManyVisitorSalesInput {
  """Filter to find records to delete"""
  filter: VisitorSaleDeleteFilter!
}

input DeleteManyVisitorsInput {
  """Filter to find records to delete"""
  filter: VisitorDeleteFilter!
}

input DeleteManyWalletGiftChargesInput {
  """Filter to find records to delete"""
  filter: WalletGiftChargeDeleteFilter!
}

input DeleteManyWalletHistoriesInput {
  """Filter to find records to delete"""
  filter: WalletHistoryDeleteFilter!
}

input DeleteManyWalletsInput {
  """Filter to find records to delete"""
  filter: WalletDeleteFilter!
}

input DeleteManyWebsitePagesInput {
  """Filter to find records to delete"""
  filter: WebsitePageDeleteFilter!
}

input DeleteManyWebsiteVisitsInput {
  """Filter to find records to delete"""
  filter: WebsiteVisitDeleteFilter!
}

input DeleteManyWithdrawalRequestStatusesInput {
  """Filter to find records to delete"""
  filter: WithdrawalRequestStatusDeleteFilter!
}

input DeleteManyWithdrawalRequestsInput {
  """Filter to find records to delete"""
  filter: WithdrawalRequestDeleteFilter!
}

input DeleteManyWonderfulOffersInput {
  """Filter to find records to delete"""
  filter: WonderfulOfferDeleteFilter!
}

input DeleteOneActivityInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneAddressInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneAttributeAttributeGroupInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneAttributeGroupInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneAttributeInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneAttributeItemInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneAttributeProductInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneAttributeSubproductInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneAutomationEventInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneAutomationRfmScoreInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneBasicCarpetBorderInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneBasicCarpetBrandInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneBasicCarpetColorInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneBasicCarpetDesignInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneBasicCarpetDesignerInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneBasicCarpetMaterialInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneBasicCarpetSizeDetailInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneBasicCarpetSizeInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneBasicCarpetTypeInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneBorderInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCampaignFreeOfferInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCampaignFreeOfferSizeInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCampaignGoldCoinSubInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCampaignInstagramFollowInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCampaignPetFormInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCampaignRoomvoImageInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCampaignRoomvoVoteInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCampaignSubscriptionInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCampaignUefaEuroSubscriberHistoryInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCampaignUefaEuroSubscriberInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCampaignVotingImageInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCampaignVotingImageUserInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCarpetFeatureInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCarpetFeatureUserInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCarpetMaterialInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCarpetShapeInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCarpetSizeInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCarpetUsagePlaceInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCarpetUsagePlaceInvoiceProductInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCarpetUsagePlaceUserInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneChaparSettlementStatusInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneChaparTrackingHistoryInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCitiesSepidarInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCity2Input {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCityInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneColorCategoryDetailInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneColorCategoryInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneColorCategorySubproductInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneColorInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneConfigInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneContactFormHistoryInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneContactFormInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneContactFormStatusInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCountryInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCouponInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCouponSubjectInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCrmPresentationInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCustomerImageProductInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCustomerRequestFileInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCustomerRequestInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneCustomerVideoProductInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneDamageReasonInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneDepartmentInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneDesignInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneDesignersProductPriceRangeInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneDiscountInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneDiscountNotificationInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneDiscountSubjectInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneExitControlInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneExitControlItemInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneExportProductInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneFailedJobInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneFavoriteProductInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneFedexAddressValidationAttributeInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneFetchSiteUrlInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneFileInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneFileNegotiationInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneGhazalInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneGoogleFormUtmInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneHeardAboutUsOptionInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneHelpDeskInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneHolidayInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneHomePageCustomerImageInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneHyperInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneHyperstarCodeInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneImageInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneImageLayerInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneImageProductInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneImageSizeInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneImageSubproductInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneImagesSizeGuidesDetailInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneImpersonateHistoryInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneIncredibleOfferInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneIncredibleOfferSentNotificationInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneInstagramFeedInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneInvitationCodeInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneInvoiceAddressInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneInvoiceAddressValidationResultInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneInvoiceBankGatewayHistoryInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneInvoiceHistoryInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneInvoiceInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneInvoiceInvoiceStatusInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneInvoiceModeInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneInvoiceNegotiationInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneInvoicePaymentHistoryInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneInvoicePaymentInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneInvoicePaymentStatusInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneInvoicePaymentTypeInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneInvoiceProductHistoryInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneInvoiceProductInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneInvoiceProductItemInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneInvoiceProductItemInvoiceProductStatusInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneInvoiceProductStatusInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneInvoiceRatesResultInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneInvoiceReversalInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneInvoiceReversalItemInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneInvoiceShippingRateInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneInvoiceStatusInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneInvoiceTypeInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneLabelInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneLabelProductInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneMellatPaymentErrorInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneMigrationInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneModelHasPermissionInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneModelHasRoleInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneModelVisitInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneModemaAcceleratorImageInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneModemaAcceleratorInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneModemaAcceleratorVideoInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneNeedsPhotographySubproductInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneNegotiationHistoryInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneNegotiationInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneNegotiationStatusInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneNegotiationStepInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneNegotiationTypeInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneNewBorderInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneOauthAccessTokenInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneOauthAuthCodeInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneOauthClientInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneOauthPersonalAccessClientInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneOauthRefreshTokenInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneOutOfStockButListedProductInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOnePasswordResetInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOnePatternCategoryInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOnePatternInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOnePatternLayerInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOnePaymentMethodFieldInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOnePaymentMethodInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOnePaymentRequestInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOnePaymentRequestStatusInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOnePermissionGroupInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOnePermissionInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOnePreorderInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOnePreorderPreorderStatusInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOnePreorderRegisterInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOnePreorderStatusInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOnePriceGroupInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOnePriceGroupSizeInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOnePrintProfileInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOnePrintRipInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneProductCategoryDetailInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneProductCategoryInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneProductCategoryRateInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneProductColorImageInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneProductColorSaleInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneProductCommentInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneProductCommentLikeInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneProductInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneProductLikeInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneProductProductCategoryInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneProductRateAverageInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneProductRateInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneProductTagInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneProductVideoInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneProductionPadInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneProductionPadProductionPadStatusInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneProductionPadStatusInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneProductionReceiptTypeInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneProductionRollInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneRateInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneReadyToSendProductInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneRecommendedProductInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneRecommendedSubproductInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneRedisSavedKeyInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneRelatedProductInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneRetargetingWalletChargeInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneReturnItemStatusInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneReturnItemStatusReturnRequestItemInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneReturnReasonInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneReturnRequestAddressInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneReturnRequestHistoryInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneReturnRequestInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneReturnRequestItemHistoryInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneReturnRequestItemImageInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneReturnRequestItemInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneReturnRequestItemReturnItemStatusInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneReturnRequestItemVideoInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneReturnRequestReturnStatusInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneReturnStatusInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneReturnTypeInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneReturnedInvoiceInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneReturnedInvoiceProductInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneRfmReportInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneRipTemplateInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneRipTemplateItemInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneRoleDomainInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneRoleHasPermissionInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneRussianInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneSenderInformationInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneShippingServiceInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneSitemapStaticPageInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneSizeGuideInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneSizeGuidesDetailInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneSocialFacebookAccountInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneSocialGoogleAccountInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneSpecialOfferInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneStateInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneSubcolorInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneSubproductInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneSubproductSpecialImageInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneSubproductStockHistoryInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneSubproductVideoInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneSubscriberInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneTagInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneTempSubproductDiscountInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneTestimonialInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneTextLayerInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneTmpRfmReportInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneTmpRussiaProductInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneTmpSpainOrderInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneTmpSpanishNameInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneTmpTagChangesPrintInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneTorobProductInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneTransactionInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneUserCartInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneUserHasPermissionInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneUserHasRoleInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneUserInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneUserUtmInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneUtmGoogleFormCouponInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneUtmInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneVerifyUserInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneVideoInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneVisitorCouponInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneVisitorGroupInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneVisitorGroupRateInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneVisitorInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneVisitorSaleInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneWalletGiftChargeInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneWalletHistoryInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneWalletInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneWebsitePageInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneWebsiteVisitInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneWithdrawalRequestInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneWithdrawalRequestStatusInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneWonderfulOfferInput {
  """The id of the record to delete."""
  id: ID!
}

type Department {
  contactForms: [ContactForm!]!
  createdAt: DateTime
  id: ID!
  name: String!
  nameEn: String
  updatedAt: DateTime
}

type DepartmentConnection {
  """Array of edges."""
  edges: [DepartmentEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input DepartmentDeleteFilter {
  and: [DepartmentDeleteFilter!]
  id: IDFilterComparison
  or: [DepartmentDeleteFilter!]
}

type DepartmentDeleteResponse {
  contactForms: [ContactForm!]
  createdAt: DateTime
  id: ID
  name: String
  nameEn: String
  updatedAt: DateTime
}

input DepartmentDomain {
  contactForms: [ContactFormDomain!]!
  createdAt: DateTime
  id: ID!
  name: String!
  nameEn: String
  updatedAt: DateTime
}

type DepartmentEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Department"""
  node: Department!
}

input DepartmentFilter {
  and: [DepartmentFilter!]
  id: IDFilterComparison
  or: [DepartmentFilter!]
}

input DepartmentSort {
  direction: SortDirection!
  field: DepartmentSortFields!
  nulls: SortNulls
}

enum DepartmentSortFields {
  id
}

input DepartmentUpdateFilter {
  and: [DepartmentUpdateFilter!]
  id: IDFilterComparison
  or: [DepartmentUpdateFilter!]
}

type Design {
  backgroundColor: String
  borderColor: String
  carpetMaterial: CarpetMaterial!
  carpetMaterialId: Float
  carpetShape: CarpetShape!
  carpetShapeId: Float
  createdAt: DateTime
  deletedAt: DateTime
  filename: String
  fringeColor: String
  id: ID!
  imageLayers: [ImageLayer!]!
  invoiceProductHistories: [InvoiceProductHistory!]!
  invoiceProducts: [InvoiceProduct!]!
  length: Float
  name: String
  path: String
  patternLayers: [PatternLayer!]!
  textLayers: [TextLayer!]!
  updatedAt: DateTime
  user: User!
  userCarts: [UserCart!]!
  userId: Float
  width: Float
}

type DesignConnection {
  """Array of edges."""
  edges: [DesignEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input DesignDeleteFilter {
  and: [DesignDeleteFilter!]
  id: IDFilterComparison
  or: [DesignDeleteFilter!]
}

type DesignDeleteResponse {
  backgroundColor: String
  borderColor: String
  carpetMaterial: CarpetMaterial
  carpetMaterialId: Float
  carpetShape: CarpetShape
  carpetShapeId: Float
  createdAt: DateTime
  deletedAt: DateTime
  filename: String
  fringeColor: String
  id: ID
  imageLayers: [ImageLayer!]
  invoiceProductHistories: [InvoiceProductHistory!]
  invoiceProducts: [InvoiceProduct!]
  length: Float
  name: String
  path: String
  patternLayers: [PatternLayer!]
  textLayers: [TextLayer!]
  updatedAt: DateTime
  user: User
  userCarts: [UserCart!]
  userId: Float
  width: Float
}

input DesignDomain {
  backgroundColor: String = "#FFFFFF"
  borderColor: String = "#FFFFFF"
  carpetMaterial: CarpetMaterialDomain!
  carpetMaterialId: Float
  carpetShape: CarpetShapeDomain!
  carpetShapeId: Float = 1
  createdAt: DateTime
  deletedAt: DateTime
  filename: String
  fringeColor: String = "#FFFFFF"
  id: ID!
  imageLayers: [ImageLayerDomain!]!
  invoiceProductHistories: [InvoiceProductHistoryDomain!]!
  invoiceProducts: [InvoiceProductDomain!]!
  length: Float = 0
  name: String
  path: String = "/"
  patternLayers: [PatternLayerDomain!]!
  textLayers: [TextLayerDomain!]!
  updatedAt: DateTime
  user: UserDomain!
  userCarts: [UserCartDomain!]!
  userId: Float
  width: Float = 0
}

type DesignEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Design"""
  node: Design!
}

input DesignFilter {
  and: [DesignFilter!]
  id: IDFilterComparison
  or: [DesignFilter!]
}

input DesignSort {
  direction: SortDirection!
  field: DesignSortFields!
  nulls: SortNulls
}

enum DesignSortFields {
  id
}

input DesignUpdateFilter {
  and: [DesignUpdateFilter!]
  id: IDFilterComparison
  or: [DesignUpdateFilter!]
}

type DesignersProductPriceRange {
  basicCarpetSize: BasicCarpetSize!
  basicCarpetSizeId: Float!
  createdAt: DateTime
  id: ID!
  maxPrice: Float!
  minPrice: Float!
  updatedAt: DateTime
}

type DesignersProductPriceRangeConnection {
  """Array of edges."""
  edges: [DesignersProductPriceRangeEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input DesignersProductPriceRangeDeleteFilter {
  and: [DesignersProductPriceRangeDeleteFilter!]
  id: IDFilterComparison
  or: [DesignersProductPriceRangeDeleteFilter!]
}

type DesignersProductPriceRangeDeleteResponse {
  basicCarpetSize: BasicCarpetSize
  basicCarpetSizeId: Float
  createdAt: DateTime
  id: ID
  maxPrice: Float
  minPrice: Float
  updatedAt: DateTime
}

input DesignersProductPriceRangeDomain {
  basicCarpetSize: BasicCarpetSizeDomain!
  basicCarpetSizeId: Float!
  createdAt: DateTime
  id: ID!
  maxPrice: Float!
  minPrice: Float!
  updatedAt: DateTime
}

type DesignersProductPriceRangeEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the DesignersProductPriceRange"""
  node: DesignersProductPriceRange!
}

input DesignersProductPriceRangeFilter {
  and: [DesignersProductPriceRangeFilter!]
  id: IDFilterComparison
  or: [DesignersProductPriceRangeFilter!]
}

input DesignersProductPriceRangeSort {
  direction: SortDirection!
  field: DesignersProductPriceRangeSortFields!
  nulls: SortNulls
}

enum DesignersProductPriceRangeSortFields {
  id
}

input DesignersProductPriceRangeUpdateFilter {
  and: [DesignersProductPriceRangeUpdateFilter!]
  id: IDFilterComparison
  or: [DesignersProductPriceRangeUpdateFilter!]
}

type Discount {
  createdAt: DateTime
  createdBy: Float
  createdBy2: User!
  discount: String!
  discountSubjects: [DiscountSubject!]!
  endDate: DateTime!
  hasStockCountOnly: Boolean!
  id: ID!
  incredibleOffers: [IncredibleOffer!]!
  invoiceProductHistories: [InvoiceProductHistory!]!
  invoiceProducts: [InvoiceProduct!]!
  isActive: Float
  maxDiscountPrice: String
  minProductPrice: String
  name: String
  redisForShowoffIsDeleted: Boolean!
  redisIsDeleted: Boolean!
  showoffEndDate: DateTime
  showoffStartDate: DateTime
  sortOrder: Float
  startDate: DateTime!
  type: Float!
  updatedAt: DateTime
  updatedBy: Float
  updatedBy2: User!
  withPad: Boolean!
}

type DiscountConnection {
  """Array of edges."""
  edges: [DiscountEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input DiscountDeleteFilter {
  and: [DiscountDeleteFilter!]
  id: IDFilterComparison
  or: [DiscountDeleteFilter!]
}

type DiscountDeleteResponse {
  createdAt: DateTime
  createdBy: Float
  createdBy2: User
  discount: String
  discountSubjects: [DiscountSubject!]
  endDate: DateTime
  hasStockCountOnly: Boolean
  id: ID
  incredibleOffers: [IncredibleOffer!]
  invoiceProductHistories: [InvoiceProductHistory!]
  invoiceProducts: [InvoiceProduct!]
  isActive: Float
  maxDiscountPrice: String
  minProductPrice: String
  name: String
  redisForShowoffIsDeleted: Boolean
  redisIsDeleted: Boolean
  showoffEndDate: DateTime
  showoffStartDate: DateTime
  sortOrder: Float
  startDate: DateTime
  type: Float
  updatedAt: DateTime
  updatedBy: Float
  updatedBy2: User
  withPad: Boolean
}

input DiscountDomain {
  createdAt: DateTime
  createdBy: Float
  createdBy2: UserDomain!
  discount: String!
  discountSubjects: [DiscountSubjectDomain!]!
  endDate: DateTime!
  hasStockCountOnly: Boolean! = false
  id: ID!
  incredibleOffers: [IncredibleOfferDomain!]!
  invoiceProductHistories: [InvoiceProductHistoryDomain!]!
  invoiceProducts: [InvoiceProductDomain!]!
  isActive: Float = 1
  maxDiscountPrice: String
  minProductPrice: String
  name: String
  redisForShowoffIsDeleted: Boolean! = false
  redisIsDeleted: Boolean! = false
  showoffEndDate: DateTime
  showoffStartDate: DateTime
  sortOrder: Float
  startDate: DateTime!
  type: Float!
  updatedAt: DateTime
  updatedBy: Float
  updatedBy2: UserDomain!
  withPad: Boolean! = false
}

type DiscountEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Discount"""
  node: Discount!
}

input DiscountFilter {
  and: [DiscountFilter!]
  id: IDFilterComparison
  or: [DiscountFilter!]
}

type DiscountNotification {
  createdAt: DateTime
  deletedAt: DateTime
  id: ID!
  product: Product!
  productId: Float
  updatedAt: DateTime
  user: User!
  userId: Float
}

type DiscountNotificationConnection {
  """Array of edges."""
  edges: [DiscountNotificationEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input DiscountNotificationDeleteFilter {
  and: [DiscountNotificationDeleteFilter!]
  id: IDFilterComparison
  or: [DiscountNotificationDeleteFilter!]
}

type DiscountNotificationDeleteResponse {
  createdAt: DateTime
  deletedAt: DateTime
  id: ID
  product: Product
  productId: Float
  updatedAt: DateTime
  user: User
  userId: Float
}

input DiscountNotificationDomain {
  createdAt: DateTime
  deletedAt: DateTime
  id: ID!
  product: ProductDomain!
  productId: Float
  updatedAt: DateTime
  user: UserDomain!
  userId: Float
}

type DiscountNotificationEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the DiscountNotification"""
  node: DiscountNotification!
}

input DiscountNotificationFilter {
  and: [DiscountNotificationFilter!]
  id: IDFilterComparison
  or: [DiscountNotificationFilter!]
}

input DiscountNotificationSort {
  direction: SortDirection!
  field: DiscountNotificationSortFields!
  nulls: SortNulls
}

enum DiscountNotificationSortFields {
  id
}

input DiscountNotificationUpdateFilter {
  and: [DiscountNotificationUpdateFilter!]
  id: IDFilterComparison
  or: [DiscountNotificationUpdateFilter!]
}

input DiscountSort {
  direction: SortDirection!
  field: DiscountSortFields!
  nulls: SortNulls
}

enum DiscountSortFields {
  id
}

type DiscountSubject {
  basicCarpetSize: BasicCarpetSize!
  basicCarpetSizeId: Float
  createdAt: DateTime
  discount: Discount!
  discountId: Float!
  id: ID!
  priceGroup: PriceGroup!
  priceGroupId: Float
  product: Product!
  productCategory: ProductCategory!
  productCategoryId: Float
  productId: Float
  subproduct: Subproduct!
  subproductId: Float
  updatedAt: DateTime
}

type DiscountSubjectConnection {
  """Array of edges."""
  edges: [DiscountSubjectEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input DiscountSubjectDeleteFilter {
  and: [DiscountSubjectDeleteFilter!]
  id: IDFilterComparison
  or: [DiscountSubjectDeleteFilter!]
}

type DiscountSubjectDeleteResponse {
  basicCarpetSize: BasicCarpetSize
  basicCarpetSizeId: Float
  createdAt: DateTime
  discount: Discount
  discountId: Float
  id: ID
  priceGroup: PriceGroup
  priceGroupId: Float
  product: Product
  productCategory: ProductCategory
  productCategoryId: Float
  productId: Float
  subproduct: Subproduct
  subproductId: Float
  updatedAt: DateTime
}

input DiscountSubjectDomain {
  basicCarpetSize: BasicCarpetSizeDomain!
  basicCarpetSizeId: Float
  createdAt: DateTime
  discount: DiscountDomain!
  discountId: Float!
  id: ID!
  priceGroup: PriceGroupDomain!
  priceGroupId: Float
  product: ProductDomain!
  productCategory: ProductCategoryDomain!
  productCategoryId: Float
  productId: Float
  subproduct: SubproductDomain!
  subproductId: Float
  updatedAt: DateTime
}

type DiscountSubjectEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the DiscountSubject"""
  node: DiscountSubject!
}

input DiscountSubjectFilter {
  and: [DiscountSubjectFilter!]
  id: IDFilterComparison
  or: [DiscountSubjectFilter!]
}

input DiscountSubjectSort {
  direction: SortDirection!
  field: DiscountSubjectSortFields!
  nulls: SortNulls
}

enum DiscountSubjectSortFields {
  id
}

input DiscountSubjectUpdateFilter {
  and: [DiscountSubjectUpdateFilter!]
  id: IDFilterComparison
  or: [DiscountSubjectUpdateFilter!]
}

input DiscountUpdateFilter {
  and: [DiscountUpdateFilter!]
  id: IDFilterComparison
  or: [DiscountUpdateFilter!]
}

type ExitControl {
  createdAt: DateTime
  driverName: String!
  driverPhone: String!
  exitControlItems: [ExitControlItem!]!
  exitDate: String!
  id: ID!
  isClosed: Boolean!
  plateNo: String!
  updatedAt: DateTime
  user: User!
  userId: Float!
}

type ExitControlConnection {
  """Array of edges."""
  edges: [ExitControlEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ExitControlDeleteFilter {
  and: [ExitControlDeleteFilter!]
  id: IDFilterComparison
  or: [ExitControlDeleteFilter!]
}

type ExitControlDeleteResponse {
  createdAt: DateTime
  driverName: String
  driverPhone: String
  exitControlItems: [ExitControlItem!]
  exitDate: String
  id: ID
  isClosed: Boolean
  plateNo: String
  updatedAt: DateTime
  user: User
  userId: Float
}

input ExitControlDomain {
  createdAt: DateTime
  driverName: String!
  driverPhone: String!
  exitControlItems: [ExitControlItemDomain!]!
  exitDate: String!
  id: ID!
  isClosed: Boolean! = false
  plateNo: String!
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
}

type ExitControlEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ExitControl"""
  node: ExitControl!
}

input ExitControlFilter {
  and: [ExitControlFilter!]
  id: IDFilterComparison
  or: [ExitControlFilter!]
}

type ExitControlItem {
  boxNo: Float!
  carpetPadScanned: Boolean!
  carpetScanned: Boolean!
  createdAt: DateTime
  exitControl: ExitControl!
  exitControlId: Float!
  id: ID!
  invoiceProductItem: InvoiceProductItem!
  invoiceProductItemId: Float!
  updatedAt: DateTime
}

type ExitControlItemConnection {
  """Array of edges."""
  edges: [ExitControlItemEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ExitControlItemDeleteFilter {
  and: [ExitControlItemDeleteFilter!]
  id: IDFilterComparison
  or: [ExitControlItemDeleteFilter!]
}

type ExitControlItemDeleteResponse {
  boxNo: Float
  carpetPadScanned: Boolean
  carpetScanned: Boolean
  createdAt: DateTime
  exitControl: ExitControl
  exitControlId: Float
  id: ID
  invoiceProductItem: InvoiceProductItem
  invoiceProductItemId: Float
  updatedAt: DateTime
}

input ExitControlItemDomain {
  boxNo: Float!
  carpetPadScanned: Boolean! = false
  carpetScanned: Boolean! = false
  createdAt: DateTime
  exitControl: ExitControlDomain!
  exitControlId: Float!
  id: ID!
  invoiceProductItem: InvoiceProductItemDomain!
  invoiceProductItemId: Float!
  updatedAt: DateTime
}

type ExitControlItemEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ExitControlItem"""
  node: ExitControlItem!
}

input ExitControlItemFilter {
  and: [ExitControlItemFilter!]
  id: IDFilterComparison
  or: [ExitControlItemFilter!]
}

input ExitControlItemSort {
  direction: SortDirection!
  field: ExitControlItemSortFields!
  nulls: SortNulls
}

enum ExitControlItemSortFields {
  id
}

input ExitControlItemUpdateFilter {
  and: [ExitControlItemUpdateFilter!]
  id: IDFilterComparison
  or: [ExitControlItemUpdateFilter!]
}

input ExitControlSort {
  direction: SortDirection!
  field: ExitControlSortFields!
  nulls: SortNulls
}

enum ExitControlSortFields {
  id
}

input ExitControlUpdateFilter {
  and: [ExitControlUpdateFilter!]
  id: IDFilterComparison
  or: [ExitControlUpdateFilter!]
}

type ExportProduct {
  code: String
  id: ID!
  price: Float
}

type ExportProductConnection {
  """Array of edges."""
  edges: [ExportProductEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ExportProductDeleteFilter {
  and: [ExportProductDeleteFilter!]
  id: IDFilterComparison
  or: [ExportProductDeleteFilter!]
}

type ExportProductDeleteResponse {
  code: String
  id: ID
  price: Float
}

input ExportProductDomain {
  code: String
  id: ID!
  price: Float
}

type ExportProductEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ExportProduct"""
  node: ExportProduct!
}

input ExportProductFilter {
  and: [ExportProductFilter!]
  id: IDFilterComparison
  or: [ExportProductFilter!]
}

input ExportProductSort {
  direction: SortDirection!
  field: ExportProductSortFields!
  nulls: SortNulls
}

enum ExportProductSortFields {
  id
}

input ExportProductUpdateFilter {
  and: [ExportProductUpdateFilter!]
  id: IDFilterComparison
  or: [ExportProductUpdateFilter!]
}

type FailedJob {
  connection: String!
  exception: String!
  failedAt: DateTime!
  id: ID!
  payload: String!
  queue: String!
}

type FailedJobConnection {
  """Array of edges."""
  edges: [FailedJobEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input FailedJobDeleteFilter {
  and: [FailedJobDeleteFilter!]
  id: IDFilterComparison
  or: [FailedJobDeleteFilter!]
}

type FailedJobDeleteResponse {
  connection: String
  exception: String
  failedAt: DateTime
  id: ID
  payload: String
  queue: String
}

input FailedJobDomain {
  connection: String!
  exception: String!
  failedAt: DateTime!
  id: ID!
  payload: String!
  queue: String!
}

type FailedJobEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the FailedJob"""
  node: FailedJob!
}

input FailedJobFilter {
  and: [FailedJobFilter!]
  id: IDFilterComparison
  or: [FailedJobFilter!]
}

input FailedJobSort {
  direction: SortDirection!
  field: FailedJobSortFields!
  nulls: SortNulls
}

enum FailedJobSortFields {
  id
}

input FailedJobUpdateFilter {
  and: [FailedJobUpdateFilter!]
  id: IDFilterComparison
  or: [FailedJobUpdateFilter!]
}

type FavoriteProduct {
  createdAt: DateTime
  id: ID!
  product: Product!
  productId: Float!
  subproduct: Subproduct!
  subproductId: Float
  updatedAt: DateTime
  user: User!
  userId: Float!
}

type FavoriteProductConnection {
  """Array of edges."""
  edges: [FavoriteProductEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input FavoriteProductDeleteFilter {
  and: [FavoriteProductDeleteFilter!]
  id: IDFilterComparison
  or: [FavoriteProductDeleteFilter!]
}

type FavoriteProductDeleteResponse {
  createdAt: DateTime
  id: ID
  product: Product
  productId: Float
  subproduct: Subproduct
  subproductId: Float
  updatedAt: DateTime
  user: User
  userId: Float
}

input FavoriteProductDomain {
  createdAt: DateTime
  id: ID!
  product: ProductDomain!
  productId: Float!
  subproduct: SubproductDomain!
  subproductId: Float
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
}

type FavoriteProductEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the FavoriteProduct"""
  node: FavoriteProduct!
}

input FavoriteProductFilter {
  and: [FavoriteProductFilter!]
  id: IDFilterComparison
  or: [FavoriteProductFilter!]
}

input FavoriteProductSort {
  direction: SortDirection!
  field: FavoriteProductSortFields!
  nulls: SortNulls
}

enum FavoriteProductSortFields {
  id
}

input FavoriteProductUpdateFilter {
  and: [FavoriteProductUpdateFilter!]
  id: IDFilterComparison
  or: [FavoriteProductUpdateFilter!]
}

type FedexAddressValidationAttribute {
  code: String!
  correctValue: Boolean!
  createdAt: DateTime!
  description: String!
  id: ID!
  updatedAt: DateTime!
}

type FedexAddressValidationAttributeConnection {
  """Array of edges."""
  edges: [FedexAddressValidationAttributeEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input FedexAddressValidationAttributeDeleteFilter {
  and: [FedexAddressValidationAttributeDeleteFilter!]
  id: IDFilterComparison
  or: [FedexAddressValidationAttributeDeleteFilter!]
}

type FedexAddressValidationAttributeDeleteResponse {
  code: String
  correctValue: Boolean
  createdAt: DateTime
  description: String
  id: ID
  updatedAt: DateTime
}

input FedexAddressValidationAttributeDomain {
  code: String!
  correctValue: Boolean!
  createdAt: DateTime!
  description: String!
  id: ID!
  updatedAt: DateTime!
}

type FedexAddressValidationAttributeEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the FedexAddressValidationAttribute"""
  node: FedexAddressValidationAttribute!
}

input FedexAddressValidationAttributeFilter {
  and: [FedexAddressValidationAttributeFilter!]
  id: IDFilterComparison
  or: [FedexAddressValidationAttributeFilter!]
}

input FedexAddressValidationAttributeSort {
  direction: SortDirection!
  field: FedexAddressValidationAttributeSortFields!
  nulls: SortNulls
}

enum FedexAddressValidationAttributeSortFields {
  id
}

input FedexAddressValidationAttributeUpdateFilter {
  and: [FedexAddressValidationAttributeUpdateFilter!]
  id: IDFilterComparison
  or: [FedexAddressValidationAttributeUpdateFilter!]
}

type FetchSiteUrl {
  createdAt: DateTime
  date: DateTime!
  id: ID!
  isFetch: Boolean!
  updatedAt: DateTime
  url: String!
}

type FetchSiteUrlConnection {
  """Array of edges."""
  edges: [FetchSiteUrlEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input FetchSiteUrlDeleteFilter {
  and: [FetchSiteUrlDeleteFilter!]
  id: IDFilterComparison
  or: [FetchSiteUrlDeleteFilter!]
}

type FetchSiteUrlDeleteResponse {
  createdAt: DateTime
  date: DateTime
  id: ID
  isFetch: Boolean
  updatedAt: DateTime
  url: String
}

input FetchSiteUrlDomain {
  createdAt: DateTime
  date: DateTime!
  id: ID!
  isFetch: Boolean!
  updatedAt: DateTime
  url: String!
}

type FetchSiteUrlEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the FetchSiteUrl"""
  node: FetchSiteUrl!
}

input FetchSiteUrlFilter {
  and: [FetchSiteUrlFilter!]
  id: IDFilterComparison
  or: [FetchSiteUrlFilter!]
}

input FetchSiteUrlSort {
  direction: SortDirection!
  field: FetchSiteUrlSortFields!
  nulls: SortNulls
}

enum FetchSiteUrlSortFields {
  id
}

input FetchSiteUrlUpdateFilter {
  and: [FetchSiteUrlUpdateFilter!]
  id: IDFilterComparison
  or: [FetchSiteUrlUpdateFilter!]
}

type File {
  createdAt: DateTime
  fileNegotiations: [FileNegotiation!]!
  filename: String!
  id: ID!
  mime: String!
  originalFilename: String!
  path: String!
  updatedAt: DateTime
  uploadSource: String!
}

type FileConnection {
  """Array of edges."""
  edges: [FileEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input FileDeleteFilter {
  and: [FileDeleteFilter!]
  id: IDFilterComparison
  or: [FileDeleteFilter!]
}

type FileDeleteResponse {
  createdAt: DateTime
  fileNegotiations: [FileNegotiation!]
  filename: String
  id: ID
  mime: String
  originalFilename: String
  path: String
  updatedAt: DateTime
  uploadSource: String
}

input FileDomain {
  createdAt: DateTime
  fileNegotiations: [FileNegotiationDomain!]!
  filename: String!
  id: ID!
  mime: String!
  originalFilename: String!
  path: String! = "/"
  updatedAt: DateTime
  uploadSource: String!
}

type FileEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the File"""
  node: File!
}

input FileFilter {
  and: [FileFilter!]
  id: IDFilterComparison
  or: [FileFilter!]
}

type FileNegotiation {
  createdAt: DateTime
  file: File!
  fileId: Float!
  id: ID!
  negotiation: Negotiation!
  negotiationId: Float!
  updatedAt: DateTime
}

type FileNegotiationConnection {
  """Array of edges."""
  edges: [FileNegotiationEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input FileNegotiationDeleteFilter {
  and: [FileNegotiationDeleteFilter!]
  id: IDFilterComparison
  or: [FileNegotiationDeleteFilter!]
}

type FileNegotiationDeleteResponse {
  createdAt: DateTime
  file: File
  fileId: Float
  id: ID
  negotiation: Negotiation
  negotiationId: Float
  updatedAt: DateTime
}

input FileNegotiationDomain {
  createdAt: DateTime
  file: FileDomain!
  fileId: Float!
  id: ID!
  negotiation: NegotiationDomain!
  negotiationId: Float!
  updatedAt: DateTime
}

type FileNegotiationEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the FileNegotiation"""
  node: FileNegotiation!
}

input FileNegotiationFilter {
  and: [FileNegotiationFilter!]
  id: IDFilterComparison
  or: [FileNegotiationFilter!]
}

input FileNegotiationSort {
  direction: SortDirection!
  field: FileNegotiationSortFields!
  nulls: SortNulls
}

enum FileNegotiationSortFields {
  id
}

input FileNegotiationUpdateFilter {
  and: [FileNegotiationUpdateFilter!]
  id: IDFilterComparison
  or: [FileNegotiationUpdateFilter!]
}

input FileSort {
  direction: SortDirection!
  field: FileSortFields!
  nulls: SortNulls
}

enum FileSortFields {
  id
}

input FileUpdateFilter {
  and: [FileUpdateFilter!]
  id: IDFilterComparison
  or: [FileUpdateFilter!]
}

type Ghazal {
  createdAt: DateTime
  explanation: String
  id: ID!
  poem: String
  updatedAt: DateTime
}

type GhazalConnection {
  """Array of edges."""
  edges: [GhazalEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input GhazalDeleteFilter {
  and: [GhazalDeleteFilter!]
  id: IDFilterComparison
  or: [GhazalDeleteFilter!]
}

type GhazalDeleteResponse {
  createdAt: DateTime
  explanation: String
  id: ID
  poem: String
  updatedAt: DateTime
}

input GhazalDomain {
  createdAt: DateTime
  explanation: String
  id: ID!
  poem: String
  updatedAt: DateTime
}

type GhazalEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Ghazal"""
  node: Ghazal!
}

input GhazalFilter {
  and: [GhazalFilter!]
  id: IDFilterComparison
  or: [GhazalFilter!]
}

input GhazalSort {
  direction: SortDirection!
  field: GhazalSortFields!
  nulls: SortNulls
}

enum GhazalSortFields {
  id
}

input GhazalUpdateFilter {
  and: [GhazalUpdateFilter!]
  id: IDFilterComparison
  or: [GhazalUpdateFilter!]
}

type GoogleFormUtm {
  createdAt: DateTime
  formId: String!
  id: ID!
  status: Boolean!
  updatedAt: DateTime
  url: String!
  user: User!
  userId: Float!
  utm: String!
}

type GoogleFormUtmConnection {
  """Array of edges."""
  edges: [GoogleFormUtmEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input GoogleFormUtmDeleteFilter {
  and: [GoogleFormUtmDeleteFilter!]
  id: IDFilterComparison
  or: [GoogleFormUtmDeleteFilter!]
}

type GoogleFormUtmDeleteResponse {
  createdAt: DateTime
  formId: String
  id: ID
  status: Boolean
  updatedAt: DateTime
  url: String
  user: User
  userId: Float
  utm: String
}

input GoogleFormUtmDomain {
  createdAt: DateTime
  formId: String!
  id: ID!
  status: Boolean! = false
  updatedAt: DateTime
  url: String!
  user: UserDomain!
  userId: Float!
  utm: String!
}

type GoogleFormUtmEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the GoogleFormUtm"""
  node: GoogleFormUtm!
}

input GoogleFormUtmFilter {
  and: [GoogleFormUtmFilter!]
  id: IDFilterComparison
  or: [GoogleFormUtmFilter!]
}

input GoogleFormUtmSort {
  direction: SortDirection!
  field: GoogleFormUtmSortFields!
  nulls: SortNulls
}

enum GoogleFormUtmSortFields {
  id
}

input GoogleFormUtmUpdateFilter {
  and: [GoogleFormUtmUpdateFilter!]
  id: IDFilterComparison
  or: [GoogleFormUtmUpdateFilter!]
}

type HeardAboutUsOption {
  createdAt: DateTime
  id: ID!
  isActive: Boolean!
  name: String!
  sortOrder: Float!
  updatedAt: DateTime
  users: [User!]!
}

type HeardAboutUsOptionConnection {
  """Array of edges."""
  edges: [HeardAboutUsOptionEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input HeardAboutUsOptionDeleteFilter {
  and: [HeardAboutUsOptionDeleteFilter!]
  id: IDFilterComparison
  or: [HeardAboutUsOptionDeleteFilter!]
}

type HeardAboutUsOptionDeleteResponse {
  createdAt: DateTime
  id: ID
  isActive: Boolean
  name: String
  sortOrder: Float
  updatedAt: DateTime
  users: [User!]
}

input HeardAboutUsOptionDomain {
  createdAt: DateTime
  id: ID!
  isActive: Boolean! = true
  name: String!
  sortOrder: Float! = 1
  updatedAt: DateTime
  users: [UserDomain!]!
}

type HeardAboutUsOptionEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the HeardAboutUsOption"""
  node: HeardAboutUsOption!
}

input HeardAboutUsOptionFilter {
  and: [HeardAboutUsOptionFilter!]
  id: IDFilterComparison
  or: [HeardAboutUsOptionFilter!]
}

input HeardAboutUsOptionSort {
  direction: SortDirection!
  field: HeardAboutUsOptionSortFields!
  nulls: SortNulls
}

enum HeardAboutUsOptionSortFields {
  id
}

input HeardAboutUsOptionUpdateFilter {
  and: [HeardAboutUsOptionUpdateFilter!]
  id: IDFilterComparison
  or: [HeardAboutUsOptionUpdateFilter!]
}

type HelpDesk {
  createdAt: DateTime
  id: ID!
  image: Image
  imageId: Float
  isActive: Float
  isOnline: Float
  phone: String
  title: String
  updatedAt: DateTime
  user: User!
  userId: Float!
}

type HelpDeskConnection {
  """Array of edges."""
  edges: [HelpDeskEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input HelpDeskDeleteFilter {
  and: [HelpDeskDeleteFilter!]
  id: IDFilterComparison
  or: [HelpDeskDeleteFilter!]
}

type HelpDeskDeleteResponse {
  createdAt: DateTime
  id: ID
  image: Image
  imageId: Float
  isActive: Float
  isOnline: Float
  phone: String
  title: String
  updatedAt: DateTime
  user: User
  userId: Float
}

input HelpDeskDomain {
  createdAt: DateTime
  id: ID!
  image: ImageDomain
  imageId: Float
  isActive: Float
  isOnline: Float
  phone: String
  title: String
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
}

type HelpDeskEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the HelpDesk"""
  node: HelpDesk!
}

input HelpDeskFilter {
  and: [HelpDeskFilter!]
  id: IDFilterComparison
  or: [HelpDeskFilter!]
}

input HelpDeskSort {
  direction: SortDirection!
  field: HelpDeskSortFields!
  nulls: SortNulls
}

enum HelpDeskSortFields {
  id
}

input HelpDeskUpdateFilter {
  and: [HelpDeskUpdateFilter!]
  id: IDFilterComparison
  or: [HelpDeskUpdateFilter!]
}

type Holiday {
  createdAt: DateTime
  deletedAt: DateTime
  holidayDate: String!
  id: ID!
  updatedAt: DateTime
  user: User
  userId: Float
  weekday: Float!
}

type HolidayConnection {
  """Array of edges."""
  edges: [HolidayEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input HolidayDeleteFilter {
  and: [HolidayDeleteFilter!]
  id: IDFilterComparison
  or: [HolidayDeleteFilter!]
}

type HolidayDeleteResponse {
  createdAt: DateTime
  deletedAt: DateTime
  holidayDate: String
  id: ID
  updatedAt: DateTime
  user: User
  userId: Float
  weekday: Float
}

input HolidayDomain {
  createdAt: DateTime
  deletedAt: DateTime
  holidayDate: String!
  id: ID!
  updatedAt: DateTime
  user: UserDomain
  userId: Float
  weekday: Float!
}

type HolidayEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Holiday"""
  node: Holiday!
}

input HolidayFilter {
  and: [HolidayFilter!]
  id: IDFilterComparison
  or: [HolidayFilter!]
}

input HolidaySort {
  direction: SortDirection!
  field: HolidaySortFields!
  nulls: SortNulls
}

enum HolidaySortFields {
  id
}

input HolidayUpdateFilter {
  and: [HolidayUpdateFilter!]
  id: IDFilterComparison
  or: [HolidayUpdateFilter!]
}

type HomePageCustomerImage {
  createdAt: DateTime
  desktopImage: Image
  desktopImageAlt: String
  desktopImageId: Float
  id: ID!
  mobileImage: Image
  mobileImageAlt: String
  mobileImageId: Float
  product: Product
  productId: Float
  sortOrder: Float!
  updatedAt: DateTime
}

type HomePageCustomerImageConnection {
  """Array of edges."""
  edges: [HomePageCustomerImageEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input HomePageCustomerImageDeleteFilter {
  and: [HomePageCustomerImageDeleteFilter!]
  id: IDFilterComparison
  or: [HomePageCustomerImageDeleteFilter!]
}

type HomePageCustomerImageDeleteResponse {
  createdAt: DateTime
  desktopImage: Image
  desktopImageAlt: String
  desktopImageId: Float
  id: ID
  mobileImage: Image
  mobileImageAlt: String
  mobileImageId: Float
  product: Product
  productId: Float
  sortOrder: Float
  updatedAt: DateTime
}

input HomePageCustomerImageDomain {
  createdAt: DateTime
  desktopImage: ImageDomain
  desktopImageAlt: String
  desktopImageId: Float
  id: ID!
  mobileImage: ImageDomain
  mobileImageAlt: String
  mobileImageId: Float
  product: ProductDomain
  productId: Float
  sortOrder: Float!
  updatedAt: DateTime
}

type HomePageCustomerImageEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the HomePageCustomerImage"""
  node: HomePageCustomerImage!
}

input HomePageCustomerImageFilter {
  and: [HomePageCustomerImageFilter!]
  id: IDFilterComparison
  or: [HomePageCustomerImageFilter!]
}

input HomePageCustomerImageSort {
  direction: SortDirection!
  field: HomePageCustomerImageSortFields!
  nulls: SortNulls
}

enum HomePageCustomerImageSortFields {
  id
}

input HomePageCustomerImageUpdateFilter {
  and: [HomePageCustomerImageUpdateFilter!]
  id: IDFilterComparison
  or: [HomePageCustomerImageUpdateFilter!]
}

type Hyper {
  code: ID!
  depot: Float
  produce: Float
}

type HyperConnection {
  """Array of edges."""
  edges: [HyperEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input HyperDeleteFilter {
  and: [HyperDeleteFilter!]
  code: IDFilterComparison
  or: [HyperDeleteFilter!]
}

type HyperDeleteResponse {
  code: ID
  depot: Float
  produce: Float
}

input HyperDomain {
  code: ID!
  depot: Float
  produce: Float
}

type HyperEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Hyper"""
  node: Hyper!
}

input HyperFilter {
  and: [HyperFilter!]
  code: IDFilterComparison
  or: [HyperFilter!]
}

input HyperSort {
  direction: SortDirection!
  field: HyperSortFields!
  nulls: SortNulls
}

enum HyperSortFields {
  code
}

input HyperUpdateFilter {
  and: [HyperUpdateFilter!]
  code: IDFilterComparison
  or: [HyperUpdateFilter!]
}

type HyperstarCode {
  code: ID!
  subproductCode: String
}

type HyperstarCodeConnection {
  """Array of edges."""
  edges: [HyperstarCodeEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input HyperstarCodeDeleteFilter {
  and: [HyperstarCodeDeleteFilter!]
  code: IDFilterComparison
  or: [HyperstarCodeDeleteFilter!]
}

type HyperstarCodeDeleteResponse {
  code: ID
  subproductCode: String
}

input HyperstarCodeDomain {
  code: ID!
  subproductCode: String
}

type HyperstarCodeEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the HyperstarCode"""
  node: HyperstarCode!
}

input HyperstarCodeFilter {
  and: [HyperstarCodeFilter!]
  code: IDFilterComparison
  or: [HyperstarCodeFilter!]
}

input HyperstarCodeSort {
  direction: SortDirection!
  field: HyperstarCodeSortFields!
  nulls: SortNulls
}

enum HyperstarCodeSortFields {
  code
}

input HyperstarCodeUpdateFilter {
  and: [HyperstarCodeUpdateFilter!]
  code: IDFilterComparison
  or: [HyperstarCodeUpdateFilter!]
}

input IDFilterComparison {
  eq: ID
  gt: ID
  gte: ID
  iLike: ID
  in: [ID!]
  is: Boolean
  isNot: Boolean
  like: ID
  lt: ID
  lte: ID
  neq: ID
  notILike: ID
  notIn: [ID!]
  notLike: ID
}

type Image {
  altText: String
  altTextEn: String
  basicCarpetSizes: [BasicCarpetSize!]!
  basicCarpetSizes2: [BasicCarpetSize!]!
  campaignVotingImages: [CampaignVotingImage!]!
  colorCategories: [ColorCategory!]!
  colorCategories2: [ColorCategory!]!
  colorCategories3: [ColorCategory!]!
  createdAt: DateTime
  customerImageProducts: [CustomerImageProduct!]!
  filename: String!
  helpDesks: [HelpDesk!]!
  homePageCustomerImages: [HomePageCustomerImage!]!
  homePageCustomerImages2: [HomePageCustomerImage!]!
  id: ID!
  imageProducts: [ImageProduct!]!
  imageRecreated: Boolean!
  imageSubproducts: [ImageSubproduct!]!
  imagesSizeGuidesDetails: [ImagesSizeGuidesDetail!]!
  mime: String!
  originalFilename: String!
  path: String!
  patternCategories: [PatternCategory!]!
  productCategories: [ProductCategory!]!
  productCategories2: [ProductCategory!]!
  productCategories3: [ProductCategory!]!
  productColorImages: [ProductColorImage!]!
  products: [Product!]!
  returnRequestItemImages: [ReturnRequestItemImage!]!
  sizeGuides: [SizeGuide!]!
  sizeGuidesDetails: [SizeGuidesDetail!]!
  subproductSpecialImages: [SubproductSpecialImage!]!
  subproducts: [Subproduct!]!
  tags: [Tag!]!
  tags2: [Tag!]!
  updatedAt: DateTime
  uploadSource: String!
}

type ImageConnection {
  """Array of edges."""
  edges: [ImageEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ImageDeleteFilter {
  and: [ImageDeleteFilter!]
  id: IDFilterComparison
  or: [ImageDeleteFilter!]
}

type ImageDeleteResponse {
  altText: String
  altTextEn: String
  basicCarpetSizes: [BasicCarpetSize!]
  basicCarpetSizes2: [BasicCarpetSize!]
  campaignVotingImages: [CampaignVotingImage!]
  colorCategories: [ColorCategory!]
  colorCategories2: [ColorCategory!]
  colorCategories3: [ColorCategory!]
  createdAt: DateTime
  customerImageProducts: [CustomerImageProduct!]
  filename: String
  helpDesks: [HelpDesk!]
  homePageCustomerImages: [HomePageCustomerImage!]
  homePageCustomerImages2: [HomePageCustomerImage!]
  id: ID
  imageProducts: [ImageProduct!]
  imageRecreated: Boolean
  imageSubproducts: [ImageSubproduct!]
  imagesSizeGuidesDetails: [ImagesSizeGuidesDetail!]
  mime: String
  originalFilename: String
  path: String
  patternCategories: [PatternCategory!]
  productCategories: [ProductCategory!]
  productCategories2: [ProductCategory!]
  productCategories3: [ProductCategory!]
  productColorImages: [ProductColorImage!]
  products: [Product!]
  returnRequestItemImages: [ReturnRequestItemImage!]
  sizeGuides: [SizeGuide!]
  sizeGuidesDetails: [SizeGuidesDetail!]
  subproductSpecialImages: [SubproductSpecialImage!]
  subproducts: [Subproduct!]
  tags: [Tag!]
  tags2: [Tag!]
  updatedAt: DateTime
  uploadSource: String
}

input ImageDomain {
  altText: String
  altTextEn: String
  basicCarpetSizes: [BasicCarpetSizeDomain!]!
  basicCarpetSizes2: [BasicCarpetSizeDomain!]!
  campaignVotingImages: [CampaignVotingImageDomain!]!
  colorCategories: [ColorCategoryDomain!]!
  colorCategories2: [ColorCategoryDomain!]!
  colorCategories3: [ColorCategoryDomain!]!
  createdAt: DateTime
  customerImageProducts: [CustomerImageProductDomain!]!
  filename: String!
  helpDesks: [HelpDeskDomain!]!
  homePageCustomerImages: [HomePageCustomerImageDomain!]!
  homePageCustomerImages2: [HomePageCustomerImageDomain!]!
  id: ID!
  imageProducts: [ImageProductDomain!]!
  imageRecreated: Boolean!
  imageSubproducts: [ImageSubproductDomain!]!
  imagesSizeGuidesDetails: [ImagesSizeGuidesDetailDomain!]!
  mime: String!
  originalFilename: String!
  path: String!
  patternCategories: [PatternCategoryDomain!]!
  productCategories: [ProductCategoryDomain!]!
  productCategories2: [ProductCategoryDomain!]!
  productCategories3: [ProductCategoryDomain!]!
  productColorImages: [ProductColorImageDomain!]!
  products: [ProductDomain!]!
  returnRequestItemImages: [ReturnRequestItemImageDomain!]!
  sizeGuides: [SizeGuideDomain!]!
  sizeGuidesDetails: [SizeGuidesDetailDomain!]!
  subproductSpecialImages: [SubproductSpecialImageDomain!]!
  subproducts: [SubproductDomain!]!
  tags: [TagDomain!]!
  tags2: [TagDomain!]!
  updatedAt: DateTime
  uploadSource: String!
}

type ImageEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Image"""
  node: Image!
}

input ImageFilter {
  and: [ImageFilter!]
  id: IDFilterComparison
  or: [ImageFilter!]
}

type ImageLayer {
  centerX: Float!
  centerY: Float!
  createdAt: DateTime
  deletedAt: DateTime
  design: Design
  designId: Float!
  filename: String!
  id: ID!
  path: String!
  rotation: Float!
  scaleX: Float!
  scaleY: Float!
  sortOrder: Float!
  updatedAt: DateTime
}

type ImageLayerConnection {
  """Array of edges."""
  edges: [ImageLayerEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ImageLayerDeleteFilter {
  and: [ImageLayerDeleteFilter!]
  id: IDFilterComparison
  or: [ImageLayerDeleteFilter!]
}

type ImageLayerDeleteResponse {
  centerX: Float
  centerY: Float
  createdAt: DateTime
  deletedAt: DateTime
  design: Design
  designId: Float
  filename: String
  id: ID
  path: String
  rotation: Float
  scaleX: Float
  scaleY: Float
  sortOrder: Float
  updatedAt: DateTime
}

input ImageLayerDomain {
  centerX: Float!
  centerY: Float!
  createdAt: DateTime
  deletedAt: DateTime
  design: DesignDomain
  designId: Float!
  filename: String!
  id: ID!
  path: String!
  rotation: Float!
  scaleX: Float!
  scaleY: Float!
  sortOrder: Float!
  updatedAt: DateTime
}

type ImageLayerEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ImageLayer"""
  node: ImageLayer!
}

input ImageLayerFilter {
  and: [ImageLayerFilter!]
  id: IDFilterComparison
  or: [ImageLayerFilter!]
}

input ImageLayerSort {
  direction: SortDirection!
  field: ImageLayerSortFields!
  nulls: SortNulls
}

enum ImageLayerSortFields {
  id
}

input ImageLayerUpdateFilter {
  and: [ImageLayerUpdateFilter!]
  id: IDFilterComparison
  or: [ImageLayerUpdateFilter!]
}

type ImageProduct {
  createdAt: DateTime
  id: ID!
  image: Image
  imageId: Float!
  product: Product
  productId: Float!
  sortOrder: Float
  updatedAt: DateTime
}

type ImageProductConnection {
  """Array of edges."""
  edges: [ImageProductEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ImageProductDeleteFilter {
  and: [ImageProductDeleteFilter!]
  id: IDFilterComparison
  or: [ImageProductDeleteFilter!]
}

type ImageProductDeleteResponse {
  createdAt: DateTime
  id: ID
  image: Image
  imageId: Float
  product: Product
  productId: Float
  sortOrder: Float
  updatedAt: DateTime
}

input ImageProductDomain {
  createdAt: DateTime
  id: ID!
  image: ImageDomain
  imageId: Float!
  product: ProductDomain
  productId: Float!
  sortOrder: Float
  updatedAt: DateTime
}

type ImageProductEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ImageProduct"""
  node: ImageProduct!
}

input ImageProductFilter {
  and: [ImageProductFilter!]
  id: IDFilterComparison
  or: [ImageProductFilter!]
}

input ImageProductSort {
  direction: SortDirection!
  field: ImageProductSortFields!
  nulls: SortNulls
}

enum ImageProductSortFields {
  id
}

input ImageProductUpdateFilter {
  and: [ImageProductUpdateFilter!]
  id: IDFilterComparison
  or: [ImageProductUpdateFilter!]
}

type ImageSize {
  createdAt: DateTime
  height: Float!
  id: ID!
  name: String!
  productCategories: [ProductCategory!]!
  shortName: String!
  updatedAt: DateTime
  width: Float!
}

type ImageSizeConnection {
  """Array of edges."""
  edges: [ImageSizeEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ImageSizeDeleteFilter {
  and: [ImageSizeDeleteFilter!]
  id: IDFilterComparison
  or: [ImageSizeDeleteFilter!]
}

type ImageSizeDeleteResponse {
  createdAt: DateTime
  height: Float
  id: ID
  name: String
  productCategories: [ProductCategory!]
  shortName: String
  updatedAt: DateTime
  width: Float
}

input ImageSizeDomain {
  createdAt: DateTime
  height: Float!
  id: ID!
  name: String!
  productCategories: [ProductCategoryDomain!]!
  shortName: String!
  updatedAt: DateTime
  width: Float!
}

type ImageSizeEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ImageSize"""
  node: ImageSize!
}

input ImageSizeFilter {
  and: [ImageSizeFilter!]
  id: IDFilterComparison
  or: [ImageSizeFilter!]
}

input ImageSizeSort {
  direction: SortDirection!
  field: ImageSizeSortFields!
  nulls: SortNulls
}

enum ImageSizeSortFields {
  id
}

input ImageSizeUpdateFilter {
  and: [ImageSizeUpdateFilter!]
  id: IDFilterComparison
  or: [ImageSizeUpdateFilter!]
}

input ImageSort {
  direction: SortDirection!
  field: ImageSortFields!
  nulls: SortNulls
}

enum ImageSortFields {
  id
}

type ImageSubproduct {
  createdAt: DateTime
  id: ID!
  image: Image
  imageId: Float!
  sortOrder: Float
  subproduct: Subproduct
  subproductId: Float!
  updatedAt: DateTime
}

type ImageSubproductConnection {
  """Array of edges."""
  edges: [ImageSubproductEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ImageSubproductDeleteFilter {
  and: [ImageSubproductDeleteFilter!]
  id: IDFilterComparison
  or: [ImageSubproductDeleteFilter!]
}

type ImageSubproductDeleteResponse {
  createdAt: DateTime
  id: ID
  image: Image
  imageId: Float
  sortOrder: Float
  subproduct: Subproduct
  subproductId: Float
  updatedAt: DateTime
}

input ImageSubproductDomain {
  createdAt: DateTime
  id: ID!
  image: ImageDomain
  imageId: Float!
  sortOrder: Float
  subproduct: SubproductDomain
  subproductId: Float!
  updatedAt: DateTime
}

type ImageSubproductEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ImageSubproduct"""
  node: ImageSubproduct!
}

input ImageSubproductFilter {
  and: [ImageSubproductFilter!]
  id: IDFilterComparison
  or: [ImageSubproductFilter!]
}

input ImageSubproductSort {
  direction: SortDirection!
  field: ImageSubproductSortFields!
  nulls: SortNulls
}

enum ImageSubproductSortFields {
  id
}

input ImageSubproductUpdateFilter {
  and: [ImageSubproductUpdateFilter!]
  id: IDFilterComparison
  or: [ImageSubproductUpdateFilter!]
}

input ImageUpdateFilter {
  and: [ImageUpdateFilter!]
  id: IDFilterComparison
  or: [ImageUpdateFilter!]
}

type ImagesSizeGuidesDetail {
  createdAt: DateTime
  id: ID!
  image: Image
  imageId: Float
  sizeGuidesDetails: SizeGuidesDetail
  sizeGuidesDetailsId: Float!
  sortOrder: Float
  updatedAt: DateTime
}

type ImagesSizeGuidesDetailConnection {
  """Array of edges."""
  edges: [ImagesSizeGuidesDetailEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ImagesSizeGuidesDetailDeleteFilter {
  and: [ImagesSizeGuidesDetailDeleteFilter!]
  id: IDFilterComparison
  or: [ImagesSizeGuidesDetailDeleteFilter!]
}

type ImagesSizeGuidesDetailDeleteResponse {
  createdAt: DateTime
  id: ID
  image: Image
  imageId: Float
  sizeGuidesDetails: SizeGuidesDetail
  sizeGuidesDetailsId: Float
  sortOrder: Float
  updatedAt: DateTime
}

input ImagesSizeGuidesDetailDomain {
  createdAt: DateTime
  id: ID!
  image: ImageDomain
  imageId: Float
  sizeGuidesDetails: SizeGuidesDetailDomain
  sizeGuidesDetailsId: Float!
  sortOrder: Float
  updatedAt: DateTime
}

type ImagesSizeGuidesDetailEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ImagesSizeGuidesDetail"""
  node: ImagesSizeGuidesDetail!
}

input ImagesSizeGuidesDetailFilter {
  and: [ImagesSizeGuidesDetailFilter!]
  id: IDFilterComparison
  or: [ImagesSizeGuidesDetailFilter!]
}

input ImagesSizeGuidesDetailSort {
  direction: SortDirection!
  field: ImagesSizeGuidesDetailSortFields!
  nulls: SortNulls
}

enum ImagesSizeGuidesDetailSortFields {
  id
}

input ImagesSizeGuidesDetailUpdateFilter {
  and: [ImagesSizeGuidesDetailUpdateFilter!]
  id: IDFilterComparison
  or: [ImagesSizeGuidesDetailUpdateFilter!]
}

type ImpersonateHistory {
  createdAt: DateTime
  id: ID!
  impersonateUser: User
  impersonateUserId: Float!
  updatedAt: DateTime
  user: User
  userId: Float!
}

type ImpersonateHistoryConnection {
  """Array of edges."""
  edges: [ImpersonateHistoryEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ImpersonateHistoryDeleteFilter {
  and: [ImpersonateHistoryDeleteFilter!]
  id: IDFilterComparison
  or: [ImpersonateHistoryDeleteFilter!]
}

type ImpersonateHistoryDeleteResponse {
  createdAt: DateTime
  id: ID
  impersonateUser: User
  impersonateUserId: Float
  updatedAt: DateTime
  user: User
  userId: Float
}

input ImpersonateHistoryDomain {
  createdAt: DateTime
  id: ID!
  impersonateUser: UserDomain
  impersonateUserId: Float!
  updatedAt: DateTime
  user: UserDomain
  userId: Float!
}

type ImpersonateHistoryEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ImpersonateHistory"""
  node: ImpersonateHistory!
}

input ImpersonateHistoryFilter {
  and: [ImpersonateHistoryFilter!]
  id: IDFilterComparison
  or: [ImpersonateHistoryFilter!]
}

input ImpersonateHistorySort {
  direction: SortDirection!
  field: ImpersonateHistorySortFields!
  nulls: SortNulls
}

enum ImpersonateHistorySortFields {
  id
}

input ImpersonateHistoryUpdateFilter {
  and: [ImpersonateHistoryUpdateFilter!]
  id: IDFilterComparison
  or: [ImpersonateHistoryUpdateFilter!]
}

type IncredibleOffer {
  basicCarpetColor: BasicCarpetColor
  basicCarpetColorId: Float!
  count: Float!
  createdAt: DateTime
  discount: Discount
  discountId: Float
  discountPercent: Float!
  id: ID!
  isFake: Boolean!
  offerDate: String!
  place: Float
  product: Product
  productId: Float!
  soldCount: Float!
  sortOrder: Float!
  updatedAt: DateTime
}

type IncredibleOfferConnection {
  """Array of edges."""
  edges: [IncredibleOfferEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input IncredibleOfferDeleteFilter {
  and: [IncredibleOfferDeleteFilter!]
  id: IDFilterComparison
  or: [IncredibleOfferDeleteFilter!]
}

type IncredibleOfferDeleteResponse {
  basicCarpetColor: BasicCarpetColor
  basicCarpetColorId: Float
  count: Float
  createdAt: DateTime
  discount: Discount
  discountId: Float
  discountPercent: Float
  id: ID
  isFake: Boolean
  offerDate: String
  place: Float
  product: Product
  productId: Float
  soldCount: Float
  sortOrder: Float
  updatedAt: DateTime
}

input IncredibleOfferDomain {
  basicCarpetColor: BasicCarpetColorDomain
  basicCarpetColorId: Float!
  count: Float!
  createdAt: DateTime
  discount: DiscountDomain
  discountId: Float
  discountPercent: Float!
  id: ID!
  isFake: Boolean!
  offerDate: String!
  place: Float
  product: ProductDomain
  productId: Float!
  soldCount: Float!
  sortOrder: Float!
  updatedAt: DateTime
}

type IncredibleOfferEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the IncredibleOffer"""
  node: IncredibleOffer!
}

input IncredibleOfferFilter {
  and: [IncredibleOfferFilter!]
  id: IDFilterComparison
  or: [IncredibleOfferFilter!]
}

type IncredibleOfferSentNotification {
  createdAt: DateTime
  id: ID!
  message: String
  updatedAt: DateTime
  user: User
  userId: Float!
}

type IncredibleOfferSentNotificationConnection {
  """Array of edges."""
  edges: [IncredibleOfferSentNotificationEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input IncredibleOfferSentNotificationDeleteFilter {
  and: [IncredibleOfferSentNotificationDeleteFilter!]
  id: IDFilterComparison
  or: [IncredibleOfferSentNotificationDeleteFilter!]
}

type IncredibleOfferSentNotificationDeleteResponse {
  createdAt: DateTime
  id: ID
  message: String
  updatedAt: DateTime
  user: User
  userId: Float
}

input IncredibleOfferSentNotificationDomain {
  createdAt: DateTime
  id: ID!
  message: String
  updatedAt: DateTime
  user: UserDomain
  userId: Float!
}

type IncredibleOfferSentNotificationEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the IncredibleOfferSentNotification"""
  node: IncredibleOfferSentNotification!
}

input IncredibleOfferSentNotificationFilter {
  and: [IncredibleOfferSentNotificationFilter!]
  id: IDFilterComparison
  or: [IncredibleOfferSentNotificationFilter!]
}

input IncredibleOfferSentNotificationSort {
  direction: SortDirection!
  field: IncredibleOfferSentNotificationSortFields!
  nulls: SortNulls
}

enum IncredibleOfferSentNotificationSortFields {
  id
}

input IncredibleOfferSentNotificationUpdateFilter {
  and: [IncredibleOfferSentNotificationUpdateFilter!]
  id: IDFilterComparison
  or: [IncredibleOfferSentNotificationUpdateFilter!]
}

input IncredibleOfferSort {
  direction: SortDirection!
  field: IncredibleOfferSortFields!
  nulls: SortNulls
}

enum IncredibleOfferSortFields {
  id
}

input IncredibleOfferUpdateFilter {
  and: [IncredibleOfferUpdateFilter!]
  id: IDFilterComparison
  or: [IncredibleOfferUpdateFilter!]
}

type InstagramFeed {
  altText: String
  caption: String
  carouselMedia: String
  comments: String
  commentsCount: Float
  commentsDisabled: Boolean
  commentsNextPage: String
  createdAt: DateTime
  createdTime: String
  data: String
  downloadedImageHighResolutionUrl: String
  downloadedImageLowResolutionUrl: String
  downloadedImageStandardResolutionUrl: String
  downloadedImageThumbnailUrl: String
  hasMoreComments: Boolean
  id: ID!
  imageHighResolutionUrl: String
  imageLowResolutionUrl: String
  imageStandardResolutionUrl: String
  imageThumbnailUrl: String
  instagramId: String!
  isAd: Boolean
  isAutoConstruct: Boolean
  isCaptionEdited: Boolean
  isFake: Boolean
  isLoadEmpty: Boolean
  isLoaded: Boolean
  isNew: Boolean
  likesCount: Float
  link: String
  locationAddressJson: String
  locationId: String
  locationName: String
  locationSlug: String
  modified: String
  owner: String
  ownerId: String
  shortCode: String
  sidecarMedias: String
  squareImages: String
  type: String
  updatedAt: DateTime
  videoDuration: String
  videoLowBandwidthUrl: String
  videoLowResolutionUrl: String
  videoStandardResolutionUrl: String
  videoViews: Float
}

type InstagramFeedConnection {
  """Array of edges."""
  edges: [InstagramFeedEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input InstagramFeedDeleteFilter {
  and: [InstagramFeedDeleteFilter!]
  id: IDFilterComparison
  or: [InstagramFeedDeleteFilter!]
}

type InstagramFeedDeleteResponse {
  altText: String
  caption: String
  carouselMedia: String
  comments: String
  commentsCount: Float
  commentsDisabled: Boolean
  commentsNextPage: String
  createdAt: DateTime
  createdTime: String
  data: String
  downloadedImageHighResolutionUrl: String
  downloadedImageLowResolutionUrl: String
  downloadedImageStandardResolutionUrl: String
  downloadedImageThumbnailUrl: String
  hasMoreComments: Boolean
  id: ID
  imageHighResolutionUrl: String
  imageLowResolutionUrl: String
  imageStandardResolutionUrl: String
  imageThumbnailUrl: String
  instagramId: String
  isAd: Boolean
  isAutoConstruct: Boolean
  isCaptionEdited: Boolean
  isFake: Boolean
  isLoadEmpty: Boolean
  isLoaded: Boolean
  isNew: Boolean
  likesCount: Float
  link: String
  locationAddressJson: String
  locationId: String
  locationName: String
  locationSlug: String
  modified: String
  owner: String
  ownerId: String
  shortCode: String
  sidecarMedias: String
  squareImages: String
  type: String
  updatedAt: DateTime
  videoDuration: String
  videoLowBandwidthUrl: String
  videoLowResolutionUrl: String
  videoStandardResolutionUrl: String
  videoViews: Float
}

input InstagramFeedDomain {
  altText: String
  caption: String
  carouselMedia: String
  comments: String
  commentsCount: Float
  commentsDisabled: Boolean
  commentsNextPage: String
  createdAt: DateTime
  createdTime: String
  data: String
  downloadedImageHighResolutionUrl: String
  downloadedImageLowResolutionUrl: String
  downloadedImageStandardResolutionUrl: String
  downloadedImageThumbnailUrl: String
  hasMoreComments: Boolean
  id: ID!
  imageHighResolutionUrl: String
  imageLowResolutionUrl: String
  imageStandardResolutionUrl: String
  imageThumbnailUrl: String
  instagramId: String!
  isAd: Boolean
  isAutoConstruct: Boolean
  isCaptionEdited: Boolean
  isFake: Boolean
  isLoadEmpty: Boolean
  isLoaded: Boolean
  isNew: Boolean
  likesCount: Float
  link: String
  locationAddressJson: String
  locationId: String
  locationName: String
  locationSlug: String
  modified: String
  owner: String
  ownerId: String
  shortCode: String
  sidecarMedias: String
  squareImages: String
  type: String
  updatedAt: DateTime
  videoDuration: String
  videoLowBandwidthUrl: String
  videoLowResolutionUrl: String
  videoStandardResolutionUrl: String
  videoViews: Float
}

type InstagramFeedEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the InstagramFeed"""
  node: InstagramFeed!
}

input InstagramFeedFilter {
  and: [InstagramFeedFilter!]
  id: IDFilterComparison
  or: [InstagramFeedFilter!]
}

input InstagramFeedSort {
  direction: SortDirection!
  field: InstagramFeedSortFields!
  nulls: SortNulls
}

enum InstagramFeedSortFields {
  id
}

input InstagramFeedUpdateFilter {
  and: [InstagramFeedUpdateFilter!]
  id: IDFilterComparison
  or: [InstagramFeedUpdateFilter!]
}

type InvitationCode {
  code: String!
  createdAt: DateTime
  email: String
  id: ID!
  isActive: Boolean!
  maxUsage: Float
  updatedAt: DateTime
  users: [User!]
}

type InvitationCodeConnection {
  """Array of edges."""
  edges: [InvitationCodeEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input InvitationCodeDeleteFilter {
  and: [InvitationCodeDeleteFilter!]
  id: IDFilterComparison
  or: [InvitationCodeDeleteFilter!]
}

type InvitationCodeDeleteResponse {
  code: String
  createdAt: DateTime
  email: String
  id: ID
  isActive: Boolean
  maxUsage: Float
  updatedAt: DateTime
  users: [User!]
}

input InvitationCodeDomain {
  code: String!
  createdAt: DateTime
  email: String
  id: ID!
  isActive: Boolean!
  maxUsage: Float
  updatedAt: DateTime
  users: [UserDomain!]
}

type InvitationCodeEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the InvitationCode"""
  node: InvitationCode!
}

input InvitationCodeFilter {
  and: [InvitationCodeFilter!]
  id: IDFilterComparison
  or: [InvitationCodeFilter!]
}

input InvitationCodeSort {
  direction: SortDirection!
  field: InvitationCodeSortFields!
  nulls: SortNulls
}

enum InvitationCodeSortFields {
  id
}

input InvitationCodeUpdateFilter {
  and: [InvitationCodeUpdateFilter!]
  id: IDFilterComparison
  or: [InvitationCodeUpdateFilter!]
}

type Invoice {
  accountingDescription: String
  additions: String!
  address: Address
  addressId: Float!
  canReturn: Boolean!
  cashOnDelivery: Boolean!
  chaparSettlementStatus: ChaparSettlementStatus
  chaparSettlementStatusId: Float
  chaparStatus: String
  chaparTrackingHistories: [ChaparTrackingHistory!]
  containsPadsOnly: Boolean!
  coupon: Coupon
  couponId: Float
  coupons: [Coupon!]
  createdAt: DateTime
  crmCompanyId: String
  crmCompanyPersonId: String
  crmPreOrderId: String
  currentInvoiceStatus: InvoiceStatus
  currentInvoiceStatusId: Float!
  deadlineDate: String
  deadlineDateOld: String
  deliveredDate: DateTime
  description: String
  digikalaShare: Float
  digikalaSharePercent: Float
  forDigikala: Boolean!
  freeDelivery: Boolean!
  hasPriority: Boolean!
  id: ID!
  invoiceAddressValidationResults: [InvoiceAddressValidationResult!]
  invoiceAddresses: [InvoiceAddress!]
  invoiceBankGatewayHistories: [InvoiceBankGatewayHistory!]
  invoiceHistories: [InvoiceHistory!]
  invoiceInvoiceStatuses: [InvoiceInvoiceStatus!]
  invoiceMode: InvoiceMode
  invoiceModeId: Float
  invoiceNegotiations: [InvoiceNegotiation!]
  invoiceNumber: String
  invoicePaymentHistories: [InvoicePaymentHistory!]
  invoicePaymentStatus: InvoicePaymentStatus
  invoicePaymentStatusId: Float
  invoicePayments: [InvoicePayment!]
  invoiceProductHistories: [InvoiceProductHistory!]
  invoiceProducts: [InvoiceProduct!]
  invoiceRatesResults: [InvoiceRatesResult!]
  invoiceReversals: [InvoiceReversal!]
  invoiceShippingRates: [InvoiceShippingRate!]
  invoiceType: InvoiceType
  invoiceTypeId: Float
  invoices: [Invoice!]
  isChaparDelivery: Boolean!
  isDepot: Boolean!
  isForAdvertisement: Boolean!
  isReversible: Boolean!
  issueDate: DateTime!
  lastName: String!
  lockState: Float
  lockState2: InvoiceStatus
  lockStateDescription: String
  mah: Float
  moneyTransferConfirmed: Boolean
  moneyTransferConfirmedBy: Float
  moneyTransferConfirmedBy2: User
  moneyTransferRefCode: String
  name: String!
  needsReview: Boolean!
  orderId: String
  packageCount: Float
  paidCodShippingRate: Float!
  parentInvoice: Invoice
  parentInvoiceId: Float
  partnerCode: String!
  paymentCreditable: Boolean!
  paymentErrorMessage: String
  paymentMethodFields: [PaymentMethodField!]
  refId: String
  replacementAdditionalPrice: String!
  replacementPaymentStatus: InvoicePaymentStatus
  replacementPaymentStatusId: Float
  replacementPriceMoneyTransferCode: String
  returnRequestHistories: [ReturnRequestHistory!]
  returnRequests: [ReturnRequest!]
  returnedInvoices: [ReturnedInvoice!]
  returnedInvoices2: [ReturnedInvoice!]
  roz: Float
  sal: Float
  saleRefId: String
  seenAt: DateTime
  selectedShippingServiceId: Float
  sepidarCode: Float
  sepidarId: Float
  shipmentUuid: String
  shippingRate: String
  shippingRateCod: String
  subtotalPrice: String
  taxRate: Float
  totalCouponDiscount: String
  totalDiscount: String
  totalPrice: String
  totalPriceOld: Float
  totalTax: String
  totalVisitorShare: Float
  totalWalletCharged: String
  trackingCode: String
  updatedAt: DateTime
  useWallet: Boolean!
  user: User
  userId: Float
  visitor: Visitor
  visitorCoupon: VisitorCoupon
  visitorCouponId: Float
  visitorCouponRate: Float
  visitorGroup: VisitorGroup
  visitorGroupId: Float
  visitorId: Float
  visitorRate: Float
  visitorShareCalculated: Boolean!
  wholesaleRemainingMoneyTransferRefCode: String
}

type InvoiceAddress {
  address: String!
  address2: String
  addressId: Float!
  address_2: Address
  city: City
  cityId: Float!
  country: Country
  countryId: Float!
  createdAt: DateTime
  crmCompanyId: String
  crmCompanyPersonId: String
  email: String
  fullAddress: String
  fullname: String
  id: ID!
  invoice: Invoice
  invoiceHistories: [InvoiceHistory!]
  invoiceId: Float!
  latitude: String
  longitude: String
  nationalId: String
  phone: String
  phone2: String
  state: State
  stateId: Float!
  updatedAt: DateTime
  user: User
  userId: Float!
  zipCode: String
}

type InvoiceAddressConnection {
  """Array of edges."""
  edges: [InvoiceAddressEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input InvoiceAddressDeleteFilter {
  and: [InvoiceAddressDeleteFilter!]
  id: IDFilterComparison
  or: [InvoiceAddressDeleteFilter!]
}

type InvoiceAddressDeleteResponse {
  address: String
  address2: String
  addressId: Float
  address_2: Address
  city: City
  cityId: Float
  country: Country
  countryId: Float
  createdAt: DateTime
  crmCompanyId: String
  crmCompanyPersonId: String
  email: String
  fullAddress: String
  fullname: String
  id: ID
  invoice: Invoice
  invoiceHistories: [InvoiceHistory!]
  invoiceId: Float
  latitude: String
  longitude: String
  nationalId: String
  phone: String
  phone2: String
  state: State
  stateId: Float
  updatedAt: DateTime
  user: User
  userId: Float
  zipCode: String
}

input InvoiceAddressDomain {
  address: String!
  address2: String
  addressId: Float!
  address_2: AddressDomain
  city: CityDomain
  cityId: Float!
  country: CountryDomain
  countryId: Float!
  createdAt: DateTime
  crmCompanyId: String
  crmCompanyPersonId: String
  email: String
  fullAddress: String
  fullname: String
  id: ID!
  invoice: InvoiceDomain
  invoiceHistories: [InvoiceHistoryDomain!]
  invoiceId: Float!
  latitude: String
  longitude: String
  nationalId: String
  phone: String
  phone2: String
  state: StateDomain
  stateId: Float!
  updatedAt: DateTime
  user: UserDomain
  userId: Float!
  zipCode: String
}

type InvoiceAddressEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the InvoiceAddress"""
  node: InvoiceAddress!
}

input InvoiceAddressFilter {
  and: [InvoiceAddressFilter!]
  id: IDFilterComparison
  or: [InvoiceAddressFilter!]
}

input InvoiceAddressSort {
  direction: SortDirection!
  field: InvoiceAddressSortFields!
  nulls: SortNulls
}

enum InvoiceAddressSortFields {
  id
}

input InvoiceAddressUpdateFilter {
  and: [InvoiceAddressUpdateFilter!]
  id: IDFilterComparison
  or: [InvoiceAddressUpdateFilter!]
}

type InvoiceAddressValidationResult {
  address: Address
  addressId: Float!
  addressValidationResult: String!
  createdAt: DateTime
  id: ID!
  invoice: Invoice
  invoiceId: Float!
  updatedAt: DateTime
}

type InvoiceAddressValidationResultConnection {
  """Array of edges."""
  edges: [InvoiceAddressValidationResultEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input InvoiceAddressValidationResultDeleteFilter {
  and: [InvoiceAddressValidationResultDeleteFilter!]
  id: IDFilterComparison
  or: [InvoiceAddressValidationResultDeleteFilter!]
}

type InvoiceAddressValidationResultDeleteResponse {
  address: Address
  addressId: Float
  addressValidationResult: String
  createdAt: DateTime
  id: ID
  invoice: Invoice
  invoiceId: Float
  updatedAt: DateTime
}

input InvoiceAddressValidationResultDomain {
  address: AddressDomain
  addressId: Float!
  addressValidationResult: String!
  createdAt: DateTime
  id: ID!
  invoice: InvoiceDomain
  invoiceId: Float!
  updatedAt: DateTime
}

type InvoiceAddressValidationResultEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the InvoiceAddressValidationResult"""
  node: InvoiceAddressValidationResult!
}

input InvoiceAddressValidationResultFilter {
  and: [InvoiceAddressValidationResultFilter!]
  id: IDFilterComparison
  or: [InvoiceAddressValidationResultFilter!]
}

input InvoiceAddressValidationResultSort {
  direction: SortDirection!
  field: InvoiceAddressValidationResultSortFields!
  nulls: SortNulls
}

enum InvoiceAddressValidationResultSortFields {
  id
}

input InvoiceAddressValidationResultUpdateFilter {
  and: [InvoiceAddressValidationResultUpdateFilter!]
  id: IDFilterComparison
  or: [InvoiceAddressValidationResultUpdateFilter!]
}

type InvoiceBankGatewayHistory {
  amount: String
  createdAt: DateTime
  id: ID!
  invoice: Invoice
  invoiceId: Float
  orderId: String
  preorderRegister: PreorderRegister
  preorderRegisterId: Float
  refId: String
  saleRefId: String
  updatedAt: DateTime
}

type InvoiceBankGatewayHistoryConnection {
  """Array of edges."""
  edges: [InvoiceBankGatewayHistoryEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input InvoiceBankGatewayHistoryDeleteFilter {
  and: [InvoiceBankGatewayHistoryDeleteFilter!]
  id: IDFilterComparison
  or: [InvoiceBankGatewayHistoryDeleteFilter!]
}

type InvoiceBankGatewayHistoryDeleteResponse {
  amount: String
  createdAt: DateTime
  id: ID
  invoice: Invoice
  invoiceId: Float
  orderId: String
  preorderRegister: PreorderRegister
  preorderRegisterId: Float
  refId: String
  saleRefId: String
  updatedAt: DateTime
}

input InvoiceBankGatewayHistoryDomain {
  amount: String
  createdAt: DateTime
  id: ID!
  invoice: InvoiceDomain
  invoiceId: Float
  orderId: String
  preorderRegister: PreorderRegisterDomain
  preorderRegisterId: Float
  refId: String
  saleRefId: String
  updatedAt: DateTime
}

type InvoiceBankGatewayHistoryEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the InvoiceBankGatewayHistory"""
  node: InvoiceBankGatewayHistory!
}

input InvoiceBankGatewayHistoryFilter {
  and: [InvoiceBankGatewayHistoryFilter!]
  id: IDFilterComparison
  or: [InvoiceBankGatewayHistoryFilter!]
}

input InvoiceBankGatewayHistorySort {
  direction: SortDirection!
  field: InvoiceBankGatewayHistorySortFields!
  nulls: SortNulls
}

enum InvoiceBankGatewayHistorySortFields {
  id
}

input InvoiceBankGatewayHistoryUpdateFilter {
  and: [InvoiceBankGatewayHistoryUpdateFilter!]
  id: IDFilterComparison
  or: [InvoiceBankGatewayHistoryUpdateFilter!]
}

type InvoiceConnection {
  """Array of edges."""
  edges: [InvoiceEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input InvoiceDeleteFilter {
  and: [InvoiceDeleteFilter!]
  id: IDFilterComparison
  or: [InvoiceDeleteFilter!]
}

type InvoiceDeleteResponse {
  accountingDescription: String
  additions: String
  address: Address
  addressId: Float
  canReturn: Boolean
  cashOnDelivery: Boolean
  chaparSettlementStatus: ChaparSettlementStatus
  chaparSettlementStatusId: Float
  chaparStatus: String
  chaparTrackingHistories: [ChaparTrackingHistory!]
  containsPadsOnly: Boolean
  coupon: Coupon
  couponId: Float
  coupons: [Coupon!]
  createdAt: DateTime
  crmCompanyId: String
  crmCompanyPersonId: String
  crmPreOrderId: String
  currentInvoiceStatus: InvoiceStatus
  currentInvoiceStatusId: Float
  deadlineDate: String
  deadlineDateOld: String
  deliveredDate: DateTime
  description: String
  digikalaShare: Float
  digikalaSharePercent: Float
  forDigikala: Boolean
  freeDelivery: Boolean
  hasPriority: Boolean
  id: ID
  invoiceAddressValidationResults: [InvoiceAddressValidationResult!]
  invoiceAddresses: [InvoiceAddress!]
  invoiceBankGatewayHistories: [InvoiceBankGatewayHistory!]
  invoiceHistories: [InvoiceHistory!]
  invoiceInvoiceStatuses: [InvoiceInvoiceStatus!]
  invoiceMode: InvoiceMode
  invoiceModeId: Float
  invoiceNegotiations: [InvoiceNegotiation!]
  invoiceNumber: String
  invoicePaymentHistories: [InvoicePaymentHistory!]
  invoicePaymentStatus: InvoicePaymentStatus
  invoicePaymentStatusId: Float
  invoicePayments: [InvoicePayment!]
  invoiceProductHistories: [InvoiceProductHistory!]
  invoiceProducts: [InvoiceProduct!]
  invoiceRatesResults: [InvoiceRatesResult!]
  invoiceReversals: [InvoiceReversal!]
  invoiceShippingRates: [InvoiceShippingRate!]
  invoiceType: InvoiceType
  invoiceTypeId: Float
  invoices: [Invoice!]
  isChaparDelivery: Boolean
  isDepot: Boolean
  isForAdvertisement: Boolean
  isReversible: Boolean
  issueDate: DateTime
  lastName: String
  lockState: Float
  lockState2: InvoiceStatus
  lockStateDescription: String
  mah: Float
  moneyTransferConfirmed: Boolean
  moneyTransferConfirmedBy: Float
  moneyTransferConfirmedBy2: User
  moneyTransferRefCode: String
  name: String
  needsReview: Boolean
  orderId: String
  packageCount: Float
  paidCodShippingRate: Float
  parentInvoice: Invoice
  parentInvoiceId: Float
  partnerCode: String
  paymentCreditable: Boolean
  paymentErrorMessage: String
  paymentMethodFields: [PaymentMethodField!]
  refId: String
  replacementAdditionalPrice: String
  replacementPaymentStatus: InvoicePaymentStatus
  replacementPaymentStatusId: Float
  replacementPriceMoneyTransferCode: String
  returnRequestHistories: [ReturnRequestHistory!]
  returnRequests: [ReturnRequest!]
  returnedInvoices: [ReturnedInvoice!]
  returnedInvoices2: [ReturnedInvoice!]
  roz: Float
  sal: Float
  saleRefId: String
  seenAt: DateTime
  selectedShippingServiceId: Float
  sepidarCode: Float
  sepidarId: Float
  shipmentUuid: String
  shippingRate: String
  shippingRateCod: String
  subtotalPrice: String
  taxRate: Float
  totalCouponDiscount: String
  totalDiscount: String
  totalPrice: String
  totalPriceOld: Float
  totalTax: String
  totalVisitorShare: Float
  totalWalletCharged: String
  trackingCode: String
  updatedAt: DateTime
  useWallet: Boolean
  user: User
  userId: Float
  visitor: Visitor
  visitorCoupon: VisitorCoupon
  visitorCouponId: Float
  visitorCouponRate: Float
  visitorGroup: VisitorGroup
  visitorGroupId: Float
  visitorId: Float
  visitorRate: Float
  visitorShareCalculated: Boolean
  wholesaleRemainingMoneyTransferRefCode: String
}

input InvoiceDomain {
  accountingDescription: String
  additions: String!
  address: AddressDomain
  addressId: Float!
  canReturn: Boolean!
  cashOnDelivery: Boolean!
  chaparSettlementStatus: ChaparSettlementStatusDomain
  chaparSettlementStatusId: Float
  chaparStatus: String
  chaparTrackingHistories: [ChaparTrackingHistoryDomain!]
  containsPadsOnly: Boolean!
  coupon: CouponDomain
  couponId: Float
  coupons: [CouponDomain!]
  createdAt: DateTime
  crmCompanyId: String
  crmCompanyPersonId: String
  crmPreOrderId: String
  currentInvoiceStatus: InvoiceStatusDomain
  currentInvoiceStatusId: Float!
  deadlineDate: String
  deadlineDateOld: String
  deliveredDate: DateTime
  description: String
  digikalaShare: Float
  digikalaSharePercent: Float
  forDigikala: Boolean!
  freeDelivery: Boolean!
  hasPriority: Boolean!
  id: ID!
  invoiceAddressValidationResults: [InvoiceAddressValidationResultDomain!]
  invoiceAddresses: [InvoiceAddressDomain!]
  invoiceBankGatewayHistories: [InvoiceBankGatewayHistoryDomain!]
  invoiceHistories: [InvoiceHistoryDomain!]
  invoiceInvoiceStatuses: [InvoiceInvoiceStatusDomain!]
  invoiceMode: InvoiceModeDomain
  invoiceModeId: Float
  invoiceNegotiations: [InvoiceNegotiationDomain!]
  invoiceNumber: String
  invoicePaymentHistories: [InvoicePaymentHistoryDomain!]
  invoicePaymentStatus: InvoicePaymentStatusDomain
  invoicePaymentStatusId: Float
  invoicePayments: [InvoicePaymentDomain!]
  invoiceProductHistories: [InvoiceProductHistoryDomain!]
  invoiceProducts: [InvoiceProductDomain!]
  invoiceRatesResults: [InvoiceRatesResultDomain!]
  invoiceReversals: [InvoiceReversalDomain!]
  invoiceShippingRates: [InvoiceShippingRateDomain!]
  invoiceType: InvoiceTypeDomain
  invoiceTypeId: Float
  invoices: [InvoiceDomain!]
  isChaparDelivery: Boolean!
  isDepot: Boolean!
  isForAdvertisement: Boolean!
  isReversible: Boolean!
  issueDate: DateTime!
  lastName: String!
  lockState: Float
  lockState2: InvoiceStatusDomain
  lockStateDescription: String
  mah: Float
  moneyTransferConfirmed: Boolean
  moneyTransferConfirmedBy: Float
  moneyTransferConfirmedBy2: UserDomain
  moneyTransferRefCode: String
  name: String!
  needsReview: Boolean!
  orderId: String
  packageCount: Float
  paidCodShippingRate: Float!
  parentInvoice: InvoiceDomain
  parentInvoiceId: Float
  partnerCode: String!
  paymentCreditable: Boolean!
  paymentErrorMessage: String
  paymentMethodFields: [PaymentMethodFieldDomain!]
  refId: String
  replacementAdditionalPrice: String!
  replacementPaymentStatus: InvoicePaymentStatusDomain
  replacementPaymentStatusId: Float
  replacementPriceMoneyTransferCode: String
  returnRequestHistories: [ReturnRequestHistoryDomain!]
  returnRequests: [ReturnRequestDomain!]
  returnedInvoices: [ReturnedInvoiceDomain!]
  returnedInvoices2: [ReturnedInvoiceDomain!]
  roz: Float
  sal: Float
  saleRefId: String
  seenAt: DateTime
  selectedShippingServiceId: Float
  sepidarCode: Float
  sepidarId: Float
  shipmentUuid: String
  shippingRate: String
  shippingRateCod: String
  subtotalPrice: String
  taxRate: Float
  totalCouponDiscount: String
  totalDiscount: String
  totalPrice: String
  totalPriceOld: Float
  totalTax: String
  totalVisitorShare: Float
  totalWalletCharged: String
  trackingCode: String
  updatedAt: DateTime
  useWallet: Boolean!
  user: UserDomain
  userId: Float
  visitor: VisitorDomain
  visitorCoupon: VisitorCouponDomain
  visitorCouponId: Float
  visitorCouponRate: Float
  visitorGroup: VisitorGroupDomain
  visitorGroupId: Float
  visitorId: Float
  visitorRate: Float
  visitorShareCalculated: Boolean!
  wholesaleRemainingMoneyTransferRefCode: String
}

type InvoiceEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Invoice"""
  node: Invoice!
}

input InvoiceFilter {
  and: [InvoiceFilter!]
  id: IDFilterComparison
  or: [InvoiceFilter!]
}

type InvoiceHistory {
  accountingDescription: String
  additions: String!
  address: String!
  address2: String
  addressId: Float!
  cashOnDelivery: Float!
  chaparSettlementStatusId: Float
  chaparStatus: String
  cityId: Float!
  countryId: Float!
  couponId: Float
  createdAt: DateTime
  crmCompanyId: String
  crmCompanyPersonId: String
  crmPreOrderId: String
  currentInvoiceStatusId: Float!
  deliveredDate: DateTime
  description: String
  digikalaShare: Float
  digikalaSharePercent: Float
  editorUser: User
  editorUserId: Float!
  email: String
  forDigikala: Boolean!
  freeDelivery: Float!
  fullAddress: String
  fullname: String
  hasPriority: Boolean!
  id: ID!
  invoice: Invoice
  invoiceAddress: InvoiceAddress
  invoiceAddressId: Float!
  invoiceId: Float!
  invoiceModeId: Float
  invoiceNumber: String
  invoicePaymentHistories: [InvoicePaymentHistory!]
  invoicePaymentStatusId: Float
  invoiceProductHistories: [InvoiceProductHistory!]
  invoiceTypeId: Float
  isChaparDelivery: Float!
  isDepot: Boolean
  isForAdvertisement: Boolean!
  isReversible: Boolean!
  issueDate: DateTime!
  lastName: String!
  latitude: String
  lockState: Float
  longitude: String
  moneyTransferConfirmed: Boolean
  moneyTransferConfirmedBy: Float
  moneyTransferRefCode: String
  name: String!
  needsReview: Boolean!
  orderId: String
  packageCount: Float
  parentInvoiceId: Float
  partnerCode: String
  paymentCreditable: Boolean
  paymentErrorMessage: String
  phone: String
  phone2: String
  refId: String
  replacementAdditionalPrice: String
  replacementPaymentStatusId: Float
  replacementPriceMoneyTransferCode: String
  saleRefId: String
  selectedShippingServiceId: Float
  shippingRate: String
  shippingRateCod: String
  stateId: Float!
  subtotalPrice: String
  taxRate: Float
  totalCouponDiscount: String
  totalDiscount: String
  totalPrice: String
  totalPriceOld: Float
  totalTax: String
  totalVisitorShare: Float
  totalWalletCharged: String
  trackingCode: String
  updatedAt: DateTime
  useWallet: Boolean
  userId: Float
  visitorCouponId: Float
  visitorCouponRate: Float
  visitorGroupId: Float
  visitorId: Float
  visitorRate: Float
  visitorShareCalculated: Float!
  wholesaleRemainingMoneyTransferRefCode: String
  zipCode: String
}

type InvoiceHistoryConnection {
  """Array of edges."""
  edges: [InvoiceHistoryEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input InvoiceHistoryDeleteFilter {
  and: [InvoiceHistoryDeleteFilter!]
  id: IDFilterComparison
  or: [InvoiceHistoryDeleteFilter!]
}

type InvoiceHistoryDeleteResponse {
  accountingDescription: String
  additions: String
  address: String
  address2: String
  addressId: Float
  cashOnDelivery: Float
  chaparSettlementStatusId: Float
  chaparStatus: String
  cityId: Float
  countryId: Float
  couponId: Float
  createdAt: DateTime
  crmCompanyId: String
  crmCompanyPersonId: String
  crmPreOrderId: String
  currentInvoiceStatusId: Float
  deliveredDate: DateTime
  description: String
  digikalaShare: Float
  digikalaSharePercent: Float
  editorUser: User
  editorUserId: Float
  email: String
  forDigikala: Boolean
  freeDelivery: Float
  fullAddress: String
  fullname: String
  hasPriority: Boolean
  id: ID
  invoice: Invoice
  invoiceAddress: InvoiceAddress
  invoiceAddressId: Float
  invoiceId: Float
  invoiceModeId: Float
  invoiceNumber: String
  invoicePaymentHistories: [InvoicePaymentHistory!]
  invoicePaymentStatusId: Float
  invoiceProductHistories: [InvoiceProductHistory!]
  invoiceTypeId: Float
  isChaparDelivery: Float
  isDepot: Boolean
  isForAdvertisement: Boolean
  isReversible: Boolean
  issueDate: DateTime
  lastName: String
  latitude: String
  lockState: Float
  longitude: String
  moneyTransferConfirmed: Boolean
  moneyTransferConfirmedBy: Float
  moneyTransferRefCode: String
  name: String
  needsReview: Boolean
  orderId: String
  packageCount: Float
  parentInvoiceId: Float
  partnerCode: String
  paymentCreditable: Boolean
  paymentErrorMessage: String
  phone: String
  phone2: String
  refId: String
  replacementAdditionalPrice: String
  replacementPaymentStatusId: Float
  replacementPriceMoneyTransferCode: String
  saleRefId: String
  selectedShippingServiceId: Float
  shippingRate: String
  shippingRateCod: String
  stateId: Float
  subtotalPrice: String
  taxRate: Float
  totalCouponDiscount: String
  totalDiscount: String
  totalPrice: String
  totalPriceOld: Float
  totalTax: String
  totalVisitorShare: Float
  totalWalletCharged: String
  trackingCode: String
  updatedAt: DateTime
  useWallet: Boolean
  userId: Float
  visitorCouponId: Float
  visitorCouponRate: Float
  visitorGroupId: Float
  visitorId: Float
  visitorRate: Float
  visitorShareCalculated: Float
  wholesaleRemainingMoneyTransferRefCode: String
  zipCode: String
}

input InvoiceHistoryDomain {
  accountingDescription: String
  additions: String!
  address: String!
  address2: String
  addressId: Float!
  cashOnDelivery: Float!
  chaparSettlementStatusId: Float
  chaparStatus: String
  cityId: Float!
  countryId: Float!
  couponId: Float
  createdAt: DateTime
  crmCompanyId: String
  crmCompanyPersonId: String
  crmPreOrderId: String
  currentInvoiceStatusId: Float!
  deliveredDate: DateTime
  description: String
  digikalaShare: Float
  digikalaSharePercent: Float
  editorUser: UserDomain
  editorUserId: Float!
  email: String
  forDigikala: Boolean!
  freeDelivery: Float!
  fullAddress: String
  fullname: String
  hasPriority: Boolean!
  id: ID!
  invoice: InvoiceDomain
  invoiceAddress: InvoiceAddressDomain
  invoiceAddressId: Float!
  invoiceId: Float!
  invoiceModeId: Float
  invoiceNumber: String
  invoicePaymentHistories: [InvoicePaymentHistoryDomain!]
  invoicePaymentStatusId: Float
  invoiceProductHistories: [InvoiceProductHistoryDomain!]
  invoiceTypeId: Float
  isChaparDelivery: Float!
  isDepot: Boolean
  isForAdvertisement: Boolean!
  isReversible: Boolean!
  issueDate: DateTime!
  lastName: String!
  latitude: String
  lockState: Float
  longitude: String
  moneyTransferConfirmed: Boolean
  moneyTransferConfirmedBy: Float
  moneyTransferRefCode: String
  name: String!
  needsReview: Boolean!
  orderId: String
  packageCount: Float
  parentInvoiceId: Float
  partnerCode: String
  paymentCreditable: Boolean
  paymentErrorMessage: String
  phone: String
  phone2: String
  refId: String
  replacementAdditionalPrice: String
  replacementPaymentStatusId: Float
  replacementPriceMoneyTransferCode: String
  saleRefId: String
  selectedShippingServiceId: Float
  shippingRate: String
  shippingRateCod: String
  stateId: Float!
  subtotalPrice: String
  taxRate: Float
  totalCouponDiscount: String
  totalDiscount: String
  totalPrice: String
  totalPriceOld: Float
  totalTax: String
  totalVisitorShare: Float
  totalWalletCharged: String
  trackingCode: String
  updatedAt: DateTime
  useWallet: Boolean
  userId: Float
  visitorCouponId: Float
  visitorCouponRate: Float
  visitorGroupId: Float
  visitorId: Float
  visitorRate: Float
  visitorShareCalculated: Float!
  wholesaleRemainingMoneyTransferRefCode: String
  zipCode: String
}

type InvoiceHistoryEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the InvoiceHistory"""
  node: InvoiceHistory!
}

input InvoiceHistoryFilter {
  and: [InvoiceHistoryFilter!]
  id: IDFilterComparison
  or: [InvoiceHistoryFilter!]
}

input InvoiceHistorySort {
  direction: SortDirection!
  field: InvoiceHistorySortFields!
  nulls: SortNulls
}

enum InvoiceHistorySortFields {
  id
}

input InvoiceHistoryUpdateFilter {
  and: [InvoiceHistoryUpdateFilter!]
  id: IDFilterComparison
  or: [InvoiceHistoryUpdateFilter!]
}

type InvoiceInvoiceStatus {
  comment: String
  createdAt: DateTime
  id: ID!
  invoice: Invoice
  invoiceId: Float!
  invoiceStatus: InvoiceStatus
  invoiceStatusId: Float!
  updatedAt: DateTime
  user: User
  userId: Float
}

type InvoiceInvoiceStatusConnection {
  """Array of edges."""
  edges: [InvoiceInvoiceStatusEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input InvoiceInvoiceStatusDeleteFilter {
  and: [InvoiceInvoiceStatusDeleteFilter!]
  id: IDFilterComparison
  or: [InvoiceInvoiceStatusDeleteFilter!]
}

type InvoiceInvoiceStatusDeleteResponse {
  comment: String
  createdAt: DateTime
  id: ID
  invoice: Invoice
  invoiceId: Float
  invoiceStatus: InvoiceStatus
  invoiceStatusId: Float
  updatedAt: DateTime
  user: User
  userId: Float
}

input InvoiceInvoiceStatusDomain {
  comment: String
  createdAt: DateTime
  id: ID!
  invoice: InvoiceDomain
  invoiceId: Float!
  invoiceStatus: InvoiceStatusDomain
  invoiceStatusId: Float!
  updatedAt: DateTime
  user: UserDomain
  userId: Float
}

type InvoiceInvoiceStatusEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the InvoiceInvoiceStatus"""
  node: InvoiceInvoiceStatus!
}

input InvoiceInvoiceStatusFilter {
  and: [InvoiceInvoiceStatusFilter!]
  id: IDFilterComparison
  or: [InvoiceInvoiceStatusFilter!]
}

input InvoiceInvoiceStatusSort {
  direction: SortDirection!
  field: InvoiceInvoiceStatusSortFields!
  nulls: SortNulls
}

enum InvoiceInvoiceStatusSortFields {
  id
}

input InvoiceInvoiceStatusUpdateFilter {
  and: [InvoiceInvoiceStatusUpdateFilter!]
  id: IDFilterComparison
  or: [InvoiceInvoiceStatusUpdateFilter!]
}

type InvoiceMode {
  createdAt: DateTime
  id: ID!
  invoices: [Invoice!]
  name: String!
  updatedAt: DateTime
}

type InvoiceModeConnection {
  """Array of edges."""
  edges: [InvoiceModeEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input InvoiceModeDeleteFilter {
  and: [InvoiceModeDeleteFilter!]
  id: IDFilterComparison
  or: [InvoiceModeDeleteFilter!]
}

type InvoiceModeDeleteResponse {
  createdAt: DateTime
  id: ID
  invoices: [Invoice!]
  name: String
  updatedAt: DateTime
}

input InvoiceModeDomain {
  createdAt: DateTime
  id: ID!
  invoices: [InvoiceDomain!]
  name: String!
  updatedAt: DateTime
}

type InvoiceModeEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the InvoiceMode"""
  node: InvoiceMode!
}

input InvoiceModeFilter {
  and: [InvoiceModeFilter!]
  id: IDFilterComparison
  or: [InvoiceModeFilter!]
}

input InvoiceModeSort {
  direction: SortDirection!
  field: InvoiceModeSortFields!
  nulls: SortNulls
}

enum InvoiceModeSortFields {
  id
}

input InvoiceModeUpdateFilter {
  and: [InvoiceModeUpdateFilter!]
  id: IDFilterComparison
  or: [InvoiceModeUpdateFilter!]
}

type InvoiceNegotiation {
  createdAt: DateTime
  id: ID!
  invoice: Invoice
  invoiceId: Float!
  negotiation: Negotiation
  negotiationId: Float!
  updatedAt: DateTime
}

type InvoiceNegotiationConnection {
  """Array of edges."""
  edges: [InvoiceNegotiationEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input InvoiceNegotiationDeleteFilter {
  and: [InvoiceNegotiationDeleteFilter!]
  id: IDFilterComparison
  or: [InvoiceNegotiationDeleteFilter!]
}

type InvoiceNegotiationDeleteResponse {
  createdAt: DateTime
  id: ID
  invoice: Invoice
  invoiceId: Float
  negotiation: Negotiation
  negotiationId: Float
  updatedAt: DateTime
}

input InvoiceNegotiationDomain {
  createdAt: DateTime
  id: ID!
  invoice: InvoiceDomain
  invoiceId: Float!
  negotiation: NegotiationDomain
  negotiationId: Float!
  updatedAt: DateTime
}

type InvoiceNegotiationEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the InvoiceNegotiation"""
  node: InvoiceNegotiation!
}

input InvoiceNegotiationFilter {
  and: [InvoiceNegotiationFilter!]
  id: IDFilterComparison
  or: [InvoiceNegotiationFilter!]
}

input InvoiceNegotiationSort {
  direction: SortDirection!
  field: InvoiceNegotiationSortFields!
  nulls: SortNulls
}

enum InvoiceNegotiationSortFields {
  id
}

input InvoiceNegotiationUpdateFilter {
  and: [InvoiceNegotiationUpdateFilter!]
  id: IDFilterComparison
  or: [InvoiceNegotiationUpdateFilter!]
}

type InvoicePayment {
  amount: String!
  chequeBank: String
  chequeDate: String
  chequeNumber: String
  chequePayee: String
  confirmedBy: Float
  confirmedBy2: User
  createdAt: DateTime
  description: String
  forShipping: Boolean!
  id: ID!
  invoice: Invoice
  invoiceId: Float!
  invoicePaymentHistories: [InvoicePaymentHistory!]
  invoicePaymentType: InvoicePaymentType
  invoicePaymentTypeId: Float!
  isConfirmed: Boolean
  paymentDate: String
  refCode: String
  refCodeSales: String
  updatedAt: DateTime
  user: User
  userId: Float!
}

type InvoicePaymentConnection {
  """Array of edges."""
  edges: [InvoicePaymentEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input InvoicePaymentDeleteFilter {
  and: [InvoicePaymentDeleteFilter!]
  id: IDFilterComparison
  or: [InvoicePaymentDeleteFilter!]
}

type InvoicePaymentDeleteResponse {
  amount: String
  chequeBank: String
  chequeDate: String
  chequeNumber: String
  chequePayee: String
  confirmedBy: Float
  confirmedBy2: User
  createdAt: DateTime
  description: String
  forShipping: Boolean
  id: ID
  invoice: Invoice
  invoiceId: Float
  invoicePaymentHistories: [InvoicePaymentHistory!]
  invoicePaymentType: InvoicePaymentType
  invoicePaymentTypeId: Float
  isConfirmed: Boolean
  paymentDate: String
  refCode: String
  refCodeSales: String
  updatedAt: DateTime
  user: User
  userId: Float
}

input InvoicePaymentDomain {
  amount: String!
  chequeBank: String
  chequeDate: String
  chequeNumber: String
  chequePayee: String
  confirmedBy: Float
  confirmedBy2: UserDomain
  createdAt: DateTime
  description: String
  forShipping: Boolean!
  id: ID!
  invoice: InvoiceDomain
  invoiceId: Float!
  invoicePaymentHistories: [InvoicePaymentHistoryDomain!]
  invoicePaymentType: InvoicePaymentTypeDomain
  invoicePaymentTypeId: Float!
  isConfirmed: Boolean
  paymentDate: String
  refCode: String
  refCodeSales: String
  updatedAt: DateTime
  user: UserDomain
  userId: Float!
}

type InvoicePaymentEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the InvoicePayment"""
  node: InvoicePayment!
}

input InvoicePaymentFilter {
  and: [InvoicePaymentFilter!]
  id: IDFilterComparison
  or: [InvoicePaymentFilter!]
}

type InvoicePaymentHistory {
  amount: String!
  chequeBank: String
  chequeDate: String
  chequeNumber: String
  chequePayee: String
  confirmedBy: Float
  confirmedBy2: User
  createdAt: DateTime
  description: String
  forShipping: Boolean
  id: ID!
  invoice: Invoice!
  invoiceHistory: InvoiceHistory
  invoiceHistoryId: Float
  invoiceId: Float!
  invoicePayment: InvoicePayment!
  invoicePaymentId: Float!
  invoicePaymentType: InvoicePaymentType!
  invoicePaymentTypeId: Float!
  isConfirmed: Boolean
  paymentDate: String
  refCode: String
  refCodeSales: String
  updatedAt: DateTime
  user: User!
  userId: Float!
}

type InvoicePaymentHistoryConnection {
  """Array of edges."""
  edges: [InvoicePaymentHistoryEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input InvoicePaymentHistoryDeleteFilter {
  and: [InvoicePaymentHistoryDeleteFilter!]
  id: IDFilterComparison
  or: [InvoicePaymentHistoryDeleteFilter!]
}

type InvoicePaymentHistoryDeleteResponse {
  amount: String
  chequeBank: String
  chequeDate: String
  chequeNumber: String
  chequePayee: String
  confirmedBy: Float
  confirmedBy2: User
  createdAt: DateTime
  description: String
  forShipping: Boolean
  id: ID
  invoice: Invoice
  invoiceHistory: InvoiceHistory
  invoiceHistoryId: Float
  invoiceId: Float
  invoicePayment: InvoicePayment
  invoicePaymentId: Float
  invoicePaymentType: InvoicePaymentType
  invoicePaymentTypeId: Float
  isConfirmed: Boolean
  paymentDate: String
  refCode: String
  refCodeSales: String
  updatedAt: DateTime
  user: User
  userId: Float
}

input InvoicePaymentHistoryDomain {
  amount: String!
  chequeBank: String
  chequeDate: String
  chequeNumber: String
  chequePayee: String
  confirmedBy: Float
  confirmedBy2: UserDomain
  createdAt: DateTime
  description: String
  forShipping: Boolean
  id: ID!
  invoice: InvoiceDomain!
  invoiceHistory: InvoiceHistoryDomain
  invoiceHistoryId: Float
  invoiceId: Float!
  invoicePayment: InvoicePaymentDomain!
  invoicePaymentId: Float!
  invoicePaymentType: InvoicePaymentTypeDomain!
  invoicePaymentTypeId: Float!
  isConfirmed: Boolean
  paymentDate: String
  refCode: String
  refCodeSales: String
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
}

type InvoicePaymentHistoryEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the InvoicePaymentHistory"""
  node: InvoicePaymentHistory!
}

input InvoicePaymentHistoryFilter {
  and: [InvoicePaymentHistoryFilter!]
  id: IDFilterComparison
  or: [InvoicePaymentHistoryFilter!]
}

input InvoicePaymentHistorySort {
  direction: SortDirection!
  field: InvoicePaymentHistorySortFields!
  nulls: SortNulls
}

enum InvoicePaymentHistorySortFields {
  id
}

input InvoicePaymentHistoryUpdateFilter {
  and: [InvoicePaymentHistoryUpdateFilter!]
  id: IDFilterComparison
  or: [InvoicePaymentHistoryUpdateFilter!]
}

input InvoicePaymentSort {
  direction: SortDirection!
  field: InvoicePaymentSortFields!
  nulls: SortNulls
}

enum InvoicePaymentSortFields {
  id
}

type InvoicePaymentStatus {
  createdAt: DateTime
  id: ID!
  invoices: [Invoice!]
  invoices2: [Invoice!]
  name: String
  updatedAt: DateTime
}

type InvoicePaymentStatusConnection {
  """Array of edges."""
  edges: [InvoicePaymentStatusEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input InvoicePaymentStatusDeleteFilter {
  and: [InvoicePaymentStatusDeleteFilter!]
  id: IDFilterComparison
  or: [InvoicePaymentStatusDeleteFilter!]
}

type InvoicePaymentStatusDeleteResponse {
  createdAt: DateTime
  id: ID
  invoices: [Invoice!]
  invoices2: [Invoice!]
  name: String
  updatedAt: DateTime
}

input InvoicePaymentStatusDomain {
  createdAt: DateTime
  id: ID!
  invoices: [InvoiceDomain!]
  invoices2: [InvoiceDomain!]
  name: String
  updatedAt: DateTime
}

type InvoicePaymentStatusEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the InvoicePaymentStatus"""
  node: InvoicePaymentStatus!
}

input InvoicePaymentStatusFilter {
  and: [InvoicePaymentStatusFilter!]
  id: IDFilterComparison
  or: [InvoicePaymentStatusFilter!]
}

input InvoicePaymentStatusSort {
  direction: SortDirection!
  field: InvoicePaymentStatusSortFields!
  nulls: SortNulls
}

enum InvoicePaymentStatusSortFields {
  id
}

input InvoicePaymentStatusUpdateFilter {
  and: [InvoicePaymentStatusUpdateFilter!]
  id: IDFilterComparison
  or: [InvoicePaymentStatusUpdateFilter!]
}

type InvoicePaymentType {
  createdAt: DateTime
  id: ID!
  invoicePaymentHistories: [InvoicePaymentHistory!]
  invoicePayments: [InvoicePayment!]
  name: String!
  preorderRegisters: [PreorderRegister!]
  updatedAt: DateTime
}

type InvoicePaymentTypeConnection {
  """Array of edges."""
  edges: [InvoicePaymentTypeEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input InvoicePaymentTypeDeleteFilter {
  and: [InvoicePaymentTypeDeleteFilter!]
  id: IDFilterComparison
  or: [InvoicePaymentTypeDeleteFilter!]
}

type InvoicePaymentTypeDeleteResponse {
  createdAt: DateTime
  id: ID
  invoicePaymentHistories: [InvoicePaymentHistory!]
  invoicePayments: [InvoicePayment!]
  name: String
  preorderRegisters: [PreorderRegister!]
  updatedAt: DateTime
}

input InvoicePaymentTypeDomain {
  createdAt: DateTime
  id: ID!
  invoicePaymentHistories: [InvoicePaymentHistoryDomain!]
  invoicePayments: [InvoicePaymentDomain!]
  name: String!
  preorderRegisters: [PreorderRegisterDomain!]
  updatedAt: DateTime
}

type InvoicePaymentTypeEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the InvoicePaymentType"""
  node: InvoicePaymentType!
}

input InvoicePaymentTypeFilter {
  and: [InvoicePaymentTypeFilter!]
  id: IDFilterComparison
  or: [InvoicePaymentTypeFilter!]
}

input InvoicePaymentTypeSort {
  direction: SortDirection!
  field: InvoicePaymentTypeSortFields!
  nulls: SortNulls
}

enum InvoicePaymentTypeSortFields {
  id
}

input InvoicePaymentTypeUpdateFilter {
  and: [InvoicePaymentTypeUpdateFilter!]
  id: IDFilterComparison
  or: [InvoicePaymentTypeUpdateFilter!]
}

input InvoicePaymentUpdateFilter {
  and: [InvoicePaymentUpdateFilter!]
  id: IDFilterComparison
  or: [InvoicePaymentUpdateFilter!]
}

type InvoiceProduct {
  bundleCount: Float!
  bundlePrice: String!
  carpetUsagePlaceInvoiceProducts: [CarpetUsagePlaceInvoiceProduct!]
  count: Float!
  createdAt: DateTime
  description: String
  design: Design
  designId: Float
  designerPricePercentage: Float
  designerPriceShare: Float
  discount: String
  discountId: Float
  discount_2: Discount
  gift: Float!
  id: ID!
  invoice: Invoice
  invoiceId: Float!
  invoiceProductHistories: [InvoiceProductHistory!]
  invoiceProductItems: [InvoiceProductItem!]
  invoiceProductItemsCreated: Boolean!
  invoiceReversalItems: [InvoiceReversalItem!]
  isCouponApplicable: Boolean!
  itemsFromDepot: Float
  itemsToProduce: Float
  length: Float
  manuallyAdded: Boolean!
  pad: Subproduct
  padId: Float
  price: String!
  pricePerInch: Float
  product: Product
  productId: Float
  relatedProduct: Product
  relatedProductId: Float
  relatedSubproduct: Subproduct
  relatedSubproductId: Float
  returnRequestItemHistories: [ReturnRequestItemHistory!]
  returnRequestItems: [ReturnRequestItem!]
  returnedInvoiceProducts: [ReturnedInvoiceProduct!]
  sepidarId: Float
  stockCount: Float
  subproduct: Subproduct
  subproductId: Float
  subproductStockHistories: [SubproductStockHistory!]
  tempDepotItemsCreated: Boolean!
  totalCouponDiscount: String
  totalDiscount: String
  totalPrice: Float
  updatedAt: DateTime
  width: Float
  withPad: Boolean!
}

type InvoiceProductConnection {
  """Array of edges."""
  edges: [InvoiceProductEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input InvoiceProductDeleteFilter {
  and: [InvoiceProductDeleteFilter!]
  id: IDFilterComparison
  or: [InvoiceProductDeleteFilter!]
}

type InvoiceProductDeleteResponse {
  bundleCount: Float
  bundlePrice: String
  carpetUsagePlaceInvoiceProducts: [CarpetUsagePlaceInvoiceProduct!]
  count: Float
  createdAt: DateTime
  description: String
  design: Design
  designId: Float
  designerPricePercentage: Float
  designerPriceShare: Float
  discount: String
  discountId: Float
  discount_2: Discount
  gift: Float
  id: ID
  invoice: Invoice
  invoiceId: Float
  invoiceProductHistories: [InvoiceProductHistory!]
  invoiceProductItems: [InvoiceProductItem!]
  invoiceProductItemsCreated: Boolean
  invoiceReversalItems: [InvoiceReversalItem!]
  isCouponApplicable: Boolean
  itemsFromDepot: Float
  itemsToProduce: Float
  length: Float
  manuallyAdded: Boolean
  pad: Subproduct
  padId: Float
  price: String
  pricePerInch: Float
  product: Product
  productId: Float
  relatedProduct: Product
  relatedProductId: Float
  relatedSubproduct: Subproduct
  relatedSubproductId: Float
  returnRequestItemHistories: [ReturnRequestItemHistory!]
  returnRequestItems: [ReturnRequestItem!]
  returnedInvoiceProducts: [ReturnedInvoiceProduct!]
  sepidarId: Float
  stockCount: Float
  subproduct: Subproduct
  subproductId: Float
  subproductStockHistories: [SubproductStockHistory!]
  tempDepotItemsCreated: Boolean
  totalCouponDiscount: String
  totalDiscount: String
  totalPrice: Float
  updatedAt: DateTime
  width: Float
  withPad: Boolean
}

input InvoiceProductDomain {
  bundleCount: Float!
  bundlePrice: String!
  carpetUsagePlaceInvoiceProducts: [CarpetUsagePlaceInvoiceProductDomain!]
  count: Float!
  createdAt: DateTime
  description: String
  design: DesignDomain
  designId: Float
  designerPricePercentage: Float
  designerPriceShare: Float
  discount: String
  discountId: Float
  discount_2: DiscountDomain
  gift: Float!
  id: ID!
  invoice: InvoiceDomain
  invoiceId: Float!
  invoiceProductHistories: [InvoiceProductHistoryDomain!]
  invoiceProductItems: [InvoiceProductItemDomain!]
  invoiceProductItemsCreated: Boolean!
  invoiceReversalItems: [InvoiceReversalItemDomain!]
  isCouponApplicable: Boolean!
  itemsFromDepot: Float
  itemsToProduce: Float
  length: Float
  manuallyAdded: Boolean!
  pad: SubproductDomain
  padId: Float
  price: String!
  pricePerInch: Float
  product: ProductDomain
  productId: Float
  relatedProduct: ProductDomain
  relatedProductId: Float
  relatedSubproduct: SubproductDomain
  relatedSubproductId: Float
  returnRequestItemHistories: [ReturnRequestItemHistoryDomain!]
  returnRequestItems: [ReturnRequestItemDomain!]
  returnedInvoiceProducts: [ReturnedInvoiceProductDomain!]
  sepidarId: Float
  stockCount: Float
  subproduct: SubproductDomain
  subproductId: Float
  subproductStockHistories: [SubproductStockHistoryDomain!]
  tempDepotItemsCreated: Boolean!
  totalCouponDiscount: String
  totalDiscount: String
  totalPrice: Float
  updatedAt: DateTime
  width: Float
  withPad: Boolean!
}

type InvoiceProductEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the InvoiceProduct"""
  node: InvoiceProduct!
}

input InvoiceProductFilter {
  and: [InvoiceProductFilter!]
  id: IDFilterComparison
  or: [InvoiceProductFilter!]
}

type InvoiceProductHistory {
  bundleCount: Float!
  bundlePrice: String!
  count: Float!
  createdAt: DateTime
  description: String
  design: Design
  designId: Float
  designerPricePercentage: Float
  designerPriceShare: Float
  discount: String
  discountId: Float
  discount_2: Discount
  id: ID!
  invoice: Invoice!
  invoiceHistory: InvoiceHistory!
  invoiceHistoryId: Float!
  invoiceId: Float!
  invoiceProduct: InvoiceProduct
  invoiceProductId: Float
  invoiceProductItemsCreated: Boolean!
  isCouponApplicable: Boolean!
  itemsFromDepot: Float
  itemsToProduce: Float
  length: Float
  manuallyAdded: Boolean!
  padId: Float
  price: String!
  pricePerInch: Float
  product: Product
  productId: Float
  relatedProduct: Product
  relatedProductId: Float
  relatedSubproduct: Subproduct
  relatedSubproductId: Float
  stockCount: Float
  subproduct: Subproduct
  subproductId: Float
  totalCouponDiscount: String
  totalDiscount: String
  totalPrice: Float
  updatedAt: DateTime
  width: Float
  withPad: Boolean!
}

type InvoiceProductHistoryConnection {
  """Array of edges."""
  edges: [InvoiceProductHistoryEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input InvoiceProductHistoryDeleteFilter {
  and: [InvoiceProductHistoryDeleteFilter!]
  id: IDFilterComparison
  or: [InvoiceProductHistoryDeleteFilter!]
}

type InvoiceProductHistoryDeleteResponse {
  bundleCount: Float
  bundlePrice: String
  count: Float
  createdAt: DateTime
  description: String
  design: Design
  designId: Float
  designerPricePercentage: Float
  designerPriceShare: Float
  discount: String
  discountId: Float
  discount_2: Discount
  id: ID
  invoice: Invoice
  invoiceHistory: InvoiceHistory
  invoiceHistoryId: Float
  invoiceId: Float
  invoiceProduct: InvoiceProduct
  invoiceProductId: Float
  invoiceProductItemsCreated: Boolean
  isCouponApplicable: Boolean
  itemsFromDepot: Float
  itemsToProduce: Float
  length: Float
  manuallyAdded: Boolean
  padId: Float
  price: String
  pricePerInch: Float
  product: Product
  productId: Float
  relatedProduct: Product
  relatedProductId: Float
  relatedSubproduct: Subproduct
  relatedSubproductId: Float
  stockCount: Float
  subproduct: Subproduct
  subproductId: Float
  totalCouponDiscount: String
  totalDiscount: String
  totalPrice: Float
  updatedAt: DateTime
  width: Float
  withPad: Boolean
}

input InvoiceProductHistoryDomain {
  bundleCount: Float!
  bundlePrice: String!
  count: Float!
  createdAt: DateTime
  description: String
  design: DesignDomain
  designId: Float
  designerPricePercentage: Float
  designerPriceShare: Float
  discount: String
  discountId: Float
  discount_2: DiscountDomain
  id: ID!
  invoice: InvoiceDomain!
  invoiceHistory: InvoiceHistoryDomain!
  invoiceHistoryId: Float!
  invoiceId: Float!
  invoiceProduct: InvoiceProductDomain
  invoiceProductId: Float
  invoiceProductItemsCreated: Boolean!
  isCouponApplicable: Boolean!
  itemsFromDepot: Float
  itemsToProduce: Float
  length: Float
  manuallyAdded: Boolean!
  padId: Float
  price: String!
  pricePerInch: Float
  product: ProductDomain
  productId: Float
  relatedProduct: ProductDomain
  relatedProductId: Float
  relatedSubproduct: SubproductDomain
  relatedSubproductId: Float
  stockCount: Float
  subproduct: SubproductDomain
  subproductId: Float
  totalCouponDiscount: String
  totalDiscount: String
  totalPrice: Float
  updatedAt: DateTime
  width: Float
  withPad: Boolean!
}

type InvoiceProductHistoryEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the InvoiceProductHistory"""
  node: InvoiceProductHistory!
}

input InvoiceProductHistoryFilter {
  and: [InvoiceProductHistoryFilter!]
  id: IDFilterComparison
  or: [InvoiceProductHistoryFilter!]
}

input InvoiceProductHistorySort {
  direction: SortDirection!
  field: InvoiceProductHistorySortFields!
  nulls: SortNulls
}

enum InvoiceProductHistorySortFields {
  id
}

input InvoiceProductHistoryUpdateFilter {
  and: [InvoiceProductHistoryUpdateFilter!]
  id: IDFilterComparison
  or: [InvoiceProductHistoryUpdateFilter!]
}

type InvoiceProductItem {
  code: String!
  createdAt: DateTime!
  currentStatus: InvoiceProductStatus
  currentStatusId: Float!
  damageCause: String
  damageReason: DamageReason
  damageReasonId: Float
  damageType: Float
  exitControlItems: [ExitControlItem!]
  fromDepot: Boolean
  id: ID!
  invoiceProduct: InvoiceProduct
  invoiceProductId: Float!
  invoiceProductItemInvoiceProductStatuses: [InvoiceProductItemInvoiceProductStatus!]
  isInsertedIntoSepidar: Boolean!
  isPrintedAndHeated: Boolean
  isReversed: Boolean!
  isTagPrinted: Boolean
  padCode: String
  predictedDateForReceivedByRepository: String
  printProfile: PrintProfile
  printProfileId: Float
  printRip: PrintRip
  printRipId: Float
  productionRoll: ProductionRoll
  productionRollId: Float
  rollReferenceCode: String
  row: Float!
  sortOrder: Float
  tagSortOrder: Float
  tempStatusId: Float
  updatedAt: DateTime!
}

type InvoiceProductItemConnection {
  """Array of edges."""
  edges: [InvoiceProductItemEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input InvoiceProductItemDeleteFilter {
  and: [InvoiceProductItemDeleteFilter!]
  id: IDFilterComparison
  or: [InvoiceProductItemDeleteFilter!]
}

type InvoiceProductItemDeleteResponse {
  code: String
  createdAt: DateTime
  currentStatus: InvoiceProductStatus
  currentStatusId: Float
  damageCause: String
  damageReason: DamageReason
  damageReasonId: Float
  damageType: Float
  exitControlItems: [ExitControlItem!]
  fromDepot: Boolean
  id: ID
  invoiceProduct: InvoiceProduct
  invoiceProductId: Float
  invoiceProductItemInvoiceProductStatuses: [InvoiceProductItemInvoiceProductStatus!]
  isInsertedIntoSepidar: Boolean
  isPrintedAndHeated: Boolean
  isReversed: Boolean
  isTagPrinted: Boolean
  padCode: String
  predictedDateForReceivedByRepository: String
  printProfile: PrintProfile
  printProfileId: Float
  printRip: PrintRip
  printRipId: Float
  productionRoll: ProductionRoll
  productionRollId: Float
  rollReferenceCode: String
  row: Float
  sortOrder: Float
  tagSortOrder: Float
  tempStatusId: Float
  updatedAt: DateTime
}

input InvoiceProductItemDomain {
  code: String!
  createdAt: DateTime!
  currentStatus: InvoiceProductStatusDomain
  currentStatusId: Float!
  damageCause: String
  damageReason: DamageReasonDomain
  damageReasonId: Float
  damageType: Float
  exitControlItems: [ExitControlItemDomain!]
  fromDepot: Boolean
  id: ID!
  invoiceProduct: InvoiceProductDomain
  invoiceProductId: Float!
  invoiceProductItemInvoiceProductStatuses: [InvoiceProductItemInvoiceProductStatusDomain!]
  isInsertedIntoSepidar: Boolean!
  isPrintedAndHeated: Boolean
  isReversed: Boolean!
  isTagPrinted: Boolean
  padCode: String
  predictedDateForReceivedByRepository: String
  printProfile: PrintProfileDomain
  printProfileId: Float
  printRip: PrintRipDomain
  printRipId: Float
  productionRoll: ProductionRollDomain
  productionRollId: Float
  rollReferenceCode: String
  row: Float!
  sortOrder: Float
  tagSortOrder: Float
  tempStatusId: Float
  updatedAt: DateTime!
}

type InvoiceProductItemEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the InvoiceProductItem"""
  node: InvoiceProductItem!
}

input InvoiceProductItemFilter {
  and: [InvoiceProductItemFilter!]
  id: IDFilterComparison
  or: [InvoiceProductItemFilter!]
}

type InvoiceProductItemInvoiceProductStatus {
  comment: String
  createdAt: DateTime!
  id: ID!
  invoiceProductItem: InvoiceProductItem
  invoiceProductItemId: Float!
  invoiceProductStatus: InvoiceProductStatus
  invoiceProductStatusId: Float!
  updatedAt: DateTime!
  user: User
  userId: Float!
}

type InvoiceProductItemInvoiceProductStatusConnection {
  """Array of edges."""
  edges: [InvoiceProductItemInvoiceProductStatusEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input InvoiceProductItemInvoiceProductStatusDeleteFilter {
  and: [InvoiceProductItemInvoiceProductStatusDeleteFilter!]
  id: IDFilterComparison
  or: [InvoiceProductItemInvoiceProductStatusDeleteFilter!]
}

type InvoiceProductItemInvoiceProductStatusDeleteResponse {
  comment: String
  createdAt: DateTime
  id: ID
  invoiceProductItem: InvoiceProductItem
  invoiceProductItemId: Float
  invoiceProductStatus: InvoiceProductStatus
  invoiceProductStatusId: Float
  updatedAt: DateTime
  user: User
  userId: Float
}

input InvoiceProductItemInvoiceProductStatusDomain {
  comment: String
  createdAt: DateTime!
  id: ID!
  invoiceProductItem: InvoiceProductItemDomain
  invoiceProductItemId: Float!
  invoiceProductStatus: InvoiceProductStatusDomain
  invoiceProductStatusId: Float!
  updatedAt: DateTime!
  user: UserDomain
  userId: Float!
}

type InvoiceProductItemInvoiceProductStatusEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the InvoiceProductItemInvoiceProductStatus"""
  node: InvoiceProductItemInvoiceProductStatus!
}

input InvoiceProductItemInvoiceProductStatusFilter {
  and: [InvoiceProductItemInvoiceProductStatusFilter!]
  id: IDFilterComparison
  or: [InvoiceProductItemInvoiceProductStatusFilter!]
}

input InvoiceProductItemInvoiceProductStatusSort {
  direction: SortDirection!
  field: InvoiceProductItemInvoiceProductStatusSortFields!
  nulls: SortNulls
}

enum InvoiceProductItemInvoiceProductStatusSortFields {
  id
}

input InvoiceProductItemInvoiceProductStatusUpdateFilter {
  and: [InvoiceProductItemInvoiceProductStatusUpdateFilter!]
  id: IDFilterComparison
  or: [InvoiceProductItemInvoiceProductStatusUpdateFilter!]
}

input InvoiceProductItemSort {
  direction: SortDirection!
  field: InvoiceProductItemSortFields!
  nulls: SortNulls
}

enum InvoiceProductItemSortFields {
  id
}

input InvoiceProductItemUpdateFilter {
  and: [InvoiceProductItemUpdateFilter!]
  id: IDFilterComparison
  or: [InvoiceProductItemUpdateFilter!]
}

input InvoiceProductSort {
  direction: SortDirection!
  field: InvoiceProductSortFields!
  nulls: SortNulls
}

enum InvoiceProductSortFields {
  id
}

type InvoiceProductStatus {
  color: String!
  createdAt: DateTime!
  id: ID!
  invoiceProductItemInvoiceProductStatuses: [InvoiceProductItemInvoiceProductStatus!]!
  invoiceProductItems: [InvoiceProductItem!]!
  status: String!
  step: Float
  stepShaggy: Float
  updatedAt: DateTime!
}

type InvoiceProductStatusConnection {
  """Array of edges."""
  edges: [InvoiceProductStatusEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input InvoiceProductStatusDeleteFilter {
  and: [InvoiceProductStatusDeleteFilter!]
  id: IDFilterComparison
  or: [InvoiceProductStatusDeleteFilter!]
}

type InvoiceProductStatusDeleteResponse {
  color: String
  createdAt: DateTime
  id: ID
  invoiceProductItemInvoiceProductStatuses: [InvoiceProductItemInvoiceProductStatus!]
  invoiceProductItems: [InvoiceProductItem!]
  status: String
  step: Float
  stepShaggy: Float
  updatedAt: DateTime
}

input InvoiceProductStatusDomain {
  color: String!
  createdAt: DateTime!
  id: ID!
  invoiceProductItemInvoiceProductStatuses: [InvoiceProductItemInvoiceProductStatusDomain!]!
  invoiceProductItems: [InvoiceProductItemDomain!]!
  status: String!
  step: Float
  stepShaggy: Float
  updatedAt: DateTime!
}

type InvoiceProductStatusEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the InvoiceProductStatus"""
  node: InvoiceProductStatus!
}

input InvoiceProductStatusFilter {
  and: [InvoiceProductStatusFilter!]
  id: IDFilterComparison
  or: [InvoiceProductStatusFilter!]
}

input InvoiceProductStatusSort {
  direction: SortDirection!
  field: InvoiceProductStatusSortFields!
  nulls: SortNulls
}

enum InvoiceProductStatusSortFields {
  id
}

input InvoiceProductStatusUpdateFilter {
  and: [InvoiceProductStatusUpdateFilter!]
  id: IDFilterComparison
  or: [InvoiceProductStatusUpdateFilter!]
}

input InvoiceProductUpdateFilter {
  and: [InvoiceProductUpdateFilter!]
  id: IDFilterComparison
  or: [InvoiceProductUpdateFilter!]
}

type InvoiceRatesResult {
  address: Address
  addressId: Float!
  createdAt: DateTime
  id: ID!
  invoice: Invoice
  invoiceId: Float!
  ratesReplyCodResult: String
  ratesReplyResult: String
  shippingService: ShippingService
  shippingServiceId: Float
  updatedAt: DateTime
}

type InvoiceRatesResultConnection {
  """Array of edges."""
  edges: [InvoiceRatesResultEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input InvoiceRatesResultDeleteFilter {
  and: [InvoiceRatesResultDeleteFilter!]
  id: IDFilterComparison
  or: [InvoiceRatesResultDeleteFilter!]
}

type InvoiceRatesResultDeleteResponse {
  address: Address
  addressId: Float
  createdAt: DateTime
  id: ID
  invoice: Invoice
  invoiceId: Float
  ratesReplyCodResult: String
  ratesReplyResult: String
  shippingService: ShippingService
  shippingServiceId: Float
  updatedAt: DateTime
}

input InvoiceRatesResultDomain {
  address: AddressDomain
  addressId: Float!
  createdAt: DateTime
  id: ID!
  invoice: InvoiceDomain
  invoiceId: Float!
  ratesReplyCodResult: String
  ratesReplyResult: String
  shippingService: ShippingServiceDomain
  shippingServiceId: Float
  updatedAt: DateTime
}

type InvoiceRatesResultEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the InvoiceRatesResult"""
  node: InvoiceRatesResult!
}

input InvoiceRatesResultFilter {
  and: [InvoiceRatesResultFilter!]
  id: IDFilterComparison
  or: [InvoiceRatesResultFilter!]
}

input InvoiceRatesResultSort {
  direction: SortDirection!
  field: InvoiceRatesResultSortFields!
  nulls: SortNulls
}

enum InvoiceRatesResultSortFields {
  id
}

input InvoiceRatesResultUpdateFilter {
  and: [InvoiceRatesResultUpdateFilter!]
  id: IDFilterComparison
  or: [InvoiceRatesResultUpdateFilter!]
}

type InvoiceReversal {
  createdAt: DateTime
  id: ID!
  invoice: Invoice
  invoiceId: Float!
  invoiceReversalItems: [InvoiceReversalItem!]
  invoiceStatus: InvoiceStatus
  invoiceStatusId: Float!
  isReviewed: Boolean!
  reviewedBy: Float
  reviewedBy2: User
  reviewedDate: DateTime
  updatedAt: DateTime
  wholeInvoice: Boolean!
}

type InvoiceReversalConnection {
  """Array of edges."""
  edges: [InvoiceReversalEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input InvoiceReversalDeleteFilter {
  and: [InvoiceReversalDeleteFilter!]
  id: IDFilterComparison
  or: [InvoiceReversalDeleteFilter!]
}

type InvoiceReversalDeleteResponse {
  createdAt: DateTime
  id: ID
  invoice: Invoice
  invoiceId: Float
  invoiceReversalItems: [InvoiceReversalItem!]
  invoiceStatus: InvoiceStatus
  invoiceStatusId: Float
  isReviewed: Boolean
  reviewedBy: Float
  reviewedBy2: User
  reviewedDate: DateTime
  updatedAt: DateTime
  wholeInvoice: Boolean
}

input InvoiceReversalDomain {
  createdAt: DateTime
  id: ID!
  invoice: InvoiceDomain
  invoiceId: Float!
  invoiceReversalItems: [InvoiceReversalItemDomain!]
  invoiceStatus: InvoiceStatusDomain
  invoiceStatusId: Float!
  isReviewed: Boolean!
  reviewedBy: Float
  reviewedBy2: UserDomain
  reviewedDate: DateTime
  updatedAt: DateTime
  wholeInvoice: Boolean!
}

type InvoiceReversalEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the InvoiceReversal"""
  node: InvoiceReversal!
}

input InvoiceReversalFilter {
  and: [InvoiceReversalFilter!]
  id: IDFilterComparison
  or: [InvoiceReversalFilter!]
}

type InvoiceReversalItem {
  count: Float!
  createdAt: DateTime
  id: ID!
  invoiceProduct: InvoiceProduct
  invoiceProductId: Float!
  invoiceReversal: InvoiceReversal
  invoiceReversalId: Float!
  updatedAt: DateTime
  withPad: Boolean!
}

type InvoiceReversalItemConnection {
  """Array of edges."""
  edges: [InvoiceReversalItemEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input InvoiceReversalItemDeleteFilter {
  and: [InvoiceReversalItemDeleteFilter!]
  id: IDFilterComparison
  or: [InvoiceReversalItemDeleteFilter!]
}

type InvoiceReversalItemDeleteResponse {
  count: Float
  createdAt: DateTime
  id: ID
  invoiceProduct: InvoiceProduct
  invoiceProductId: Float
  invoiceReversal: InvoiceReversal
  invoiceReversalId: Float
  updatedAt: DateTime
  withPad: Boolean
}

input InvoiceReversalItemDomain {
  count: Float!
  createdAt: DateTime
  id: ID!
  invoiceProduct: InvoiceProductDomain
  invoiceProductId: Float!
  invoiceReversal: InvoiceReversalDomain
  invoiceReversalId: Float!
  updatedAt: DateTime
  withPad: Boolean!
}

type InvoiceReversalItemEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the InvoiceReversalItem"""
  node: InvoiceReversalItem!
}

input InvoiceReversalItemFilter {
  and: [InvoiceReversalItemFilter!]
  id: IDFilterComparison
  or: [InvoiceReversalItemFilter!]
}

input InvoiceReversalItemSort {
  direction: SortDirection!
  field: InvoiceReversalItemSortFields!
  nulls: SortNulls
}

enum InvoiceReversalItemSortFields {
  id
}

input InvoiceReversalItemUpdateFilter {
  and: [InvoiceReversalItemUpdateFilter!]
  id: IDFilterComparison
  or: [InvoiceReversalItemUpdateFilter!]
}

input InvoiceReversalSort {
  direction: SortDirection!
  field: InvoiceReversalSortFields!
  nulls: SortNulls
}

enum InvoiceReversalSortFields {
  id
}

input InvoiceReversalUpdateFilter {
  and: [InvoiceReversalUpdateFilter!]
  id: IDFilterComparison
  or: [InvoiceReversalUpdateFilter!]
}

type InvoiceShippingRate {
  createdAt: DateTime
  id: ID!
  invoice: Invoice
  invoiceId: Float!
  shippingRate: String!
  shippingRateCod: String
  shippingService: ShippingService
  shippingServiceId: Float!
  updatedAt: DateTime
}

type InvoiceShippingRateConnection {
  """Array of edges."""
  edges: [InvoiceShippingRateEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input InvoiceShippingRateDeleteFilter {
  and: [InvoiceShippingRateDeleteFilter!]
  id: IDFilterComparison
  or: [InvoiceShippingRateDeleteFilter!]
}

type InvoiceShippingRateDeleteResponse {
  createdAt: DateTime
  id: ID
  invoice: Invoice
  invoiceId: Float
  shippingRate: String
  shippingRateCod: String
  shippingService: ShippingService
  shippingServiceId: Float
  updatedAt: DateTime
}

input InvoiceShippingRateDomain {
  createdAt: DateTime
  id: ID!
  invoice: InvoiceDomain
  invoiceId: Float!
  shippingRate: String!
  shippingRateCod: String
  shippingService: ShippingServiceDomain
  shippingServiceId: Float!
  updatedAt: DateTime
}

type InvoiceShippingRateEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the InvoiceShippingRate"""
  node: InvoiceShippingRate!
}

input InvoiceShippingRateFilter {
  and: [InvoiceShippingRateFilter!]
  id: IDFilterComparison
  or: [InvoiceShippingRateFilter!]
}

input InvoiceShippingRateSort {
  direction: SortDirection!
  field: InvoiceShippingRateSortFields!
  nulls: SortNulls
}

enum InvoiceShippingRateSortFields {
  id
}

input InvoiceShippingRateUpdateFilter {
  and: [InvoiceShippingRateUpdateFilter!]
  id: IDFilterComparison
  or: [InvoiceShippingRateUpdateFilter!]
}

input InvoiceSort {
  direction: SortDirection!
  field: InvoiceSortFields!
  nulls: SortNulls
}

enum InvoiceSortFields {
  id
}

type InvoiceStatus {
  color: String
  createdAt: DateTime
  id: ID!
  invoiceInvoiceStatuses: [InvoiceInvoiceStatus!]
  invoiceReversals: [InvoiceReversal!]
  invoices: [Invoice!]
  invoices2: [Invoice!]
  notificationEmails: String
  notificationNumbers: String
  smsToCustomer: Boolean
  status: String!
  updatedAt: DateTime
}

type InvoiceStatusConnection {
  """Array of edges."""
  edges: [InvoiceStatusEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input InvoiceStatusDeleteFilter {
  and: [InvoiceStatusDeleteFilter!]
  id: IDFilterComparison
  or: [InvoiceStatusDeleteFilter!]
}

type InvoiceStatusDeleteResponse {
  color: String
  createdAt: DateTime
  id: ID
  invoiceInvoiceStatuses: [InvoiceInvoiceStatus!]
  invoiceReversals: [InvoiceReversal!]
  invoices: [Invoice!]
  invoices2: [Invoice!]
  notificationEmails: String
  notificationNumbers: String
  smsToCustomer: Boolean
  status: String
  updatedAt: DateTime
}

input InvoiceStatusDomain {
  color: String
  createdAt: DateTime
  id: ID!
  invoiceInvoiceStatuses: [InvoiceInvoiceStatusDomain!]
  invoiceReversals: [InvoiceReversalDomain!]
  invoices: [InvoiceDomain!]
  invoices2: [InvoiceDomain!]
  notificationEmails: String
  notificationNumbers: String
  smsToCustomer: Boolean
  status: String!
  updatedAt: DateTime
}

type InvoiceStatusEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the InvoiceStatus"""
  node: InvoiceStatus!
}

input InvoiceStatusFilter {
  and: [InvoiceStatusFilter!]
  id: IDFilterComparison
  or: [InvoiceStatusFilter!]
}

input InvoiceStatusSort {
  direction: SortDirection!
  field: InvoiceStatusSortFields!
  nulls: SortNulls
}

enum InvoiceStatusSortFields {
  id
}

input InvoiceStatusUpdateFilter {
  and: [InvoiceStatusUpdateFilter!]
  id: IDFilterComparison
  or: [InvoiceStatusUpdateFilter!]
}

type InvoiceType {
  createdAt: DateTime
  id: ID!
  invoices: [Invoice!]
  name: String!
  updatedAt: DateTime
}

type InvoiceTypeConnection {
  """Array of edges."""
  edges: [InvoiceTypeEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input InvoiceTypeDeleteFilter {
  and: [InvoiceTypeDeleteFilter!]
  id: IDFilterComparison
  or: [InvoiceTypeDeleteFilter!]
}

type InvoiceTypeDeleteResponse {
  createdAt: DateTime
  id: ID
  invoices: [Invoice!]
  name: String
  updatedAt: DateTime
}

input InvoiceTypeDomain {
  createdAt: DateTime
  id: ID!
  invoices: [InvoiceDomain!]
  name: String!
  updatedAt: DateTime
}

type InvoiceTypeEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the InvoiceType"""
  node: InvoiceType!
}

input InvoiceTypeFilter {
  and: [InvoiceTypeFilter!]
  id: IDFilterComparison
  or: [InvoiceTypeFilter!]
}

input InvoiceTypeSort {
  direction: SortDirection!
  field: InvoiceTypeSortFields!
  nulls: SortNulls
}

enum InvoiceTypeSortFields {
  id
}

input InvoiceTypeUpdateFilter {
  and: [InvoiceTypeUpdateFilter!]
  id: IDFilterComparison
  or: [InvoiceTypeUpdateFilter!]
}

input InvoiceUpdateFilter {
  and: [InvoiceUpdateFilter!]
  id: IDFilterComparison
  or: [InvoiceUpdateFilter!]
}

type Label {
  color: String!
  createdAt: DateTime
  id: ID!
  labelProducts: [LabelProduct!]
  name: String!
  textColor: String!
  updatedAt: DateTime
}

type LabelConnection {
  """Array of edges."""
  edges: [LabelEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input LabelDeleteFilter {
  and: [LabelDeleteFilter!]
  id: IDFilterComparison
  or: [LabelDeleteFilter!]
}

type LabelDeleteResponse {
  color: String
  createdAt: DateTime
  id: ID
  labelProducts: [LabelProduct!]
  name: String
  textColor: String
  updatedAt: DateTime
}

input LabelDomain {
  color: String!
  createdAt: DateTime
  id: ID!
  labelProducts: [LabelProductDomain!]
  name: String!
  textColor: String!
  updatedAt: DateTime
}

type LabelEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Label"""
  node: Label!
}

input LabelFilter {
  and: [LabelFilter!]
  id: IDFilterComparison
  or: [LabelFilter!]
}

type LabelProduct {
  createdAt: DateTime
  id: ID!
  label: Label
  labelId: Float!
  product: Product
  productId: Float!
  updatedAt: DateTime
}

type LabelProductConnection {
  """Array of edges."""
  edges: [LabelProductEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input LabelProductDeleteFilter {
  and: [LabelProductDeleteFilter!]
  id: IDFilterComparison
  or: [LabelProductDeleteFilter!]
}

type LabelProductDeleteResponse {
  createdAt: DateTime
  id: ID
  label: Label
  labelId: Float
  product: Product
  productId: Float
  updatedAt: DateTime
}

input LabelProductDomain {
  createdAt: DateTime
  id: ID!
  label: LabelDomain
  labelId: Float!
  product: ProductDomain
  productId: Float!
  updatedAt: DateTime
}

type LabelProductEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the LabelProduct"""
  node: LabelProduct!
}

input LabelProductFilter {
  and: [LabelProductFilter!]
  id: IDFilterComparison
  or: [LabelProductFilter!]
}

input LabelProductSort {
  direction: SortDirection!
  field: LabelProductSortFields!
  nulls: SortNulls
}

enum LabelProductSortFields {
  id
}

input LabelProductUpdateFilter {
  and: [LabelProductUpdateFilter!]
  id: IDFilterComparison
  or: [LabelProductUpdateFilter!]
}

input LabelSort {
  direction: SortDirection!
  field: LabelSortFields!
  nulls: SortNulls
}

enum LabelSortFields {
  id
}

input LabelUpdateFilter {
  and: [LabelUpdateFilter!]
  id: IDFilterComparison
  or: [LabelUpdateFilter!]
}

type MellatPaymentError {
  code: String
  createdAt: DateTime
  id: ID!
  message: String
  updatedAt: DateTime
}

type MellatPaymentErrorConnection {
  """Array of edges."""
  edges: [MellatPaymentErrorEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input MellatPaymentErrorDeleteFilter {
  and: [MellatPaymentErrorDeleteFilter!]
  id: IDFilterComparison
  or: [MellatPaymentErrorDeleteFilter!]
}

type MellatPaymentErrorDeleteResponse {
  code: String
  createdAt: DateTime
  id: ID
  message: String
  updatedAt: DateTime
}

input MellatPaymentErrorDomain {
  code: String
  createdAt: DateTime
  id: ID!
  message: String
  updatedAt: DateTime
}

type MellatPaymentErrorEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the MellatPaymentError"""
  node: MellatPaymentError!
}

input MellatPaymentErrorFilter {
  and: [MellatPaymentErrorFilter!]
  id: IDFilterComparison
  or: [MellatPaymentErrorFilter!]
}

input MellatPaymentErrorSort {
  direction: SortDirection!
  field: MellatPaymentErrorSortFields!
  nulls: SortNulls
}

enum MellatPaymentErrorSortFields {
  id
}

input MellatPaymentErrorUpdateFilter {
  and: [MellatPaymentErrorUpdateFilter!]
  id: IDFilterComparison
  or: [MellatPaymentErrorUpdateFilter!]
}

type Migration {
  batch: Float!
  id: ID!
  migration: String!
}

type MigrationConnection {
  """Array of edges."""
  edges: [MigrationEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input MigrationDeleteFilter {
  and: [MigrationDeleteFilter!]
  id: IDFilterComparison
  or: [MigrationDeleteFilter!]
}

type MigrationDeleteResponse {
  batch: Float
  id: ID
  migration: String
}

input MigrationDomain {
  batch: Float!
  id: ID!
  migration: String!
}

type MigrationEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Migration"""
  node: Migration!
}

input MigrationFilter {
  and: [MigrationFilter!]
  id: IDFilterComparison
  or: [MigrationFilter!]
}

input MigrationSort {
  direction: SortDirection!
  field: MigrationSortFields!
  nulls: SortNulls
}

enum MigrationSortFields {
  id
}

input MigrationUpdateFilter {
  and: [MigrationUpdateFilter!]
  id: IDFilterComparison
  or: [MigrationUpdateFilter!]
}

type ModelHasPermission {
  modelId: String!
  modelType: String!
  permission: Permission
  permissionId: ID!
}

type ModelHasPermissionConnection {
  """Array of edges."""
  edges: [ModelHasPermissionEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ModelHasPermissionDeleteFilter {
  and: [ModelHasPermissionDeleteFilter!]
  or: [ModelHasPermissionDeleteFilter!]
  permissionId: IDFilterComparison
}

type ModelHasPermissionDeleteResponse {
  modelId: String
  modelType: String
  permission: Permission
  permissionId: ID
}

input ModelHasPermissionDomain {
  modelId: String!
  modelType: String!
  permission: PermissionDomain
  permissionId: ID!
}

type ModelHasPermissionEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ModelHasPermission"""
  node: ModelHasPermission!
}

input ModelHasPermissionFilter {
  and: [ModelHasPermissionFilter!]
  or: [ModelHasPermissionFilter!]
  permissionId: IDFilterComparison
}

input ModelHasPermissionSort {
  direction: SortDirection!
  field: ModelHasPermissionSortFields!
  nulls: SortNulls
}

enum ModelHasPermissionSortFields {
  permissionId
}

input ModelHasPermissionUpdateFilter {
  and: [ModelHasPermissionUpdateFilter!]
  or: [ModelHasPermissionUpdateFilter!]
  permissionId: IDFilterComparison
}

type ModelHasRole {
  modelId: String!
  modelType: String!
  role: RoleDomain
  roleId: ID!
}

type ModelHasRoleConnection {
  """Array of edges."""
  edges: [ModelHasRoleEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ModelHasRoleDeleteFilter {
  and: [ModelHasRoleDeleteFilter!]
  or: [ModelHasRoleDeleteFilter!]
  roleId: IDFilterComparison
}

type ModelHasRoleDeleteResponse {
  modelId: String
  modelType: String
  role: RoleDomain
  roleId: ID
}

input ModelHasRoleDomain {
  modelId: String!
  modelType: String!
  role: RoleDomainInput
  roleId: ID!
}

type ModelHasRoleEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ModelHasRole"""
  node: ModelHasRole!
}

input ModelHasRoleFilter {
  and: [ModelHasRoleFilter!]
  or: [ModelHasRoleFilter!]
  roleId: IDFilterComparison
}

input ModelHasRoleSort {
  direction: SortDirection!
  field: ModelHasRoleSortFields!
  nulls: SortNulls
}

enum ModelHasRoleSortFields {
  roleId
}

input ModelHasRoleUpdateFilter {
  and: [ModelHasRoleUpdateFilter!]
  or: [ModelHasRoleUpdateFilter!]
  roleId: IDFilterComparison
}

type ModelVisit {
  createdAt: DateTime
  id: ID!
  modelId: Float!
  modelName: String!
  updatedAt: DateTime
  user: User
  userId: Float!
}

type ModelVisitConnection {
  """Array of edges."""
  edges: [ModelVisitEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ModelVisitDeleteFilter {
  and: [ModelVisitDeleteFilter!]
  id: IDFilterComparison
  or: [ModelVisitDeleteFilter!]
}

type ModelVisitDeleteResponse {
  createdAt: DateTime
  id: ID
  modelId: Float
  modelName: String
  updatedAt: DateTime
  user: User
  userId: Float
}

input ModelVisitDomain {
  createdAt: DateTime
  id: ID!
  modelId: Float!
  modelName: String!
  updatedAt: DateTime
  user: UserDomain
  userId: Float!
}

type ModelVisitEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ModelVisit"""
  node: ModelVisit!
}

input ModelVisitFilter {
  and: [ModelVisitFilter!]
  id: IDFilterComparison
  or: [ModelVisitFilter!]
}

input ModelVisitSort {
  direction: SortDirection!
  field: ModelVisitSortFields!
  nulls: SortNulls
}

enum ModelVisitSortFields {
  id
}

input ModelVisitUpdateFilter {
  and: [ModelVisitUpdateFilter!]
  id: IDFilterComparison
  or: [ModelVisitUpdateFilter!]
}

type ModemaAccelerator {
  city: String!
  createdAt: DateTime
  details: String!
  hasOffice: String!
  id: ID!
  instagram: String!
  jobCategory: String!
  modemaAcceleratorImages: [ModemaAcceleratorImage!]
  modemaAcceleratorVideos: [ModemaAcceleratorVideo!]
  name: String!
  phone: String!
  pro: String!
  updatedAt: DateTime
}

type ModemaAcceleratorConnection {
  """Array of edges."""
  edges: [ModemaAcceleratorEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ModemaAcceleratorDeleteFilter {
  and: [ModemaAcceleratorDeleteFilter!]
  id: IDFilterComparison
  or: [ModemaAcceleratorDeleteFilter!]
}

type ModemaAcceleratorDeleteResponse {
  city: String
  createdAt: DateTime
  details: String
  hasOffice: String
  id: ID
  instagram: String
  jobCategory: String
  modemaAcceleratorImages: [ModemaAcceleratorImage!]
  modemaAcceleratorVideos: [ModemaAcceleratorVideo!]
  name: String
  phone: String
  pro: String
  updatedAt: DateTime
}

input ModemaAcceleratorDomain {
  city: String!
  createdAt: DateTime
  details: String!
  hasOffice: String!
  id: ID!
  instagram: String!
  jobCategory: String!
  modemaAcceleratorImages: [ModemaAcceleratorImageDomain!]
  modemaAcceleratorVideos: [ModemaAcceleratorVideoDomain!]
  name: String!
  phone: String!
  pro: String!
  updatedAt: DateTime
}

type ModemaAcceleratorEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ModemaAccelerator"""
  node: ModemaAccelerator!
}

input ModemaAcceleratorFilter {
  and: [ModemaAcceleratorFilter!]
  id: IDFilterComparison
  or: [ModemaAcceleratorFilter!]
}

type ModemaAcceleratorImage {
  createdAt: DateTime
  filename: String!
  id: ID!
  mime: String!
  modemaAccelerator: ModemaAccelerator
  modemaAcceleratorId: Float
  originalFilename: String!
  path: String!
  type: String!
  updatedAt: DateTime
  uploadSource: String!
}

type ModemaAcceleratorImageConnection {
  """Array of edges."""
  edges: [ModemaAcceleratorImageEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ModemaAcceleratorImageDeleteFilter {
  and: [ModemaAcceleratorImageDeleteFilter!]
  id: IDFilterComparison
  or: [ModemaAcceleratorImageDeleteFilter!]
}

type ModemaAcceleratorImageDeleteResponse {
  createdAt: DateTime
  filename: String
  id: ID
  mime: String
  modemaAccelerator: ModemaAccelerator
  modemaAcceleratorId: Float
  originalFilename: String
  path: String
  type: String
  updatedAt: DateTime
  uploadSource: String
}

input ModemaAcceleratorImageDomain {
  createdAt: DateTime
  filename: String!
  id: ID!
  mime: String!
  modemaAccelerator: ModemaAcceleratorDomain
  modemaAcceleratorId: Float
  originalFilename: String!
  path: String!
  type: String!
  updatedAt: DateTime
  uploadSource: String!
}

type ModemaAcceleratorImageEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ModemaAcceleratorImage"""
  node: ModemaAcceleratorImage!
}

input ModemaAcceleratorImageFilter {
  and: [ModemaAcceleratorImageFilter!]
  id: IDFilterComparison
  or: [ModemaAcceleratorImageFilter!]
}

input ModemaAcceleratorImageSort {
  direction: SortDirection!
  field: ModemaAcceleratorImageSortFields!
  nulls: SortNulls
}

enum ModemaAcceleratorImageSortFields {
  id
}

input ModemaAcceleratorImageUpdateFilter {
  and: [ModemaAcceleratorImageUpdateFilter!]
  id: IDFilterComparison
  or: [ModemaAcceleratorImageUpdateFilter!]
}

input ModemaAcceleratorSort {
  direction: SortDirection!
  field: ModemaAcceleratorSortFields!
  nulls: SortNulls
}

enum ModemaAcceleratorSortFields {
  id
}

input ModemaAcceleratorUpdateFilter {
  and: [ModemaAcceleratorUpdateFilter!]
  id: IDFilterComparison
  or: [ModemaAcceleratorUpdateFilter!]
}

type ModemaAcceleratorVideo {
  altText: String
  createdAt: DateTime
  filename: String!
  id: ID!
  mime: String!
  modemaAccelerator: ModemaAccelerator
  modemaAcceleratorId: Float
  originalFilename: String!
  path: String!
  type: String!
  updatedAt: DateTime
  uploadSource: String!
}

type ModemaAcceleratorVideoConnection {
  """Array of edges."""
  edges: [ModemaAcceleratorVideoEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ModemaAcceleratorVideoDeleteFilter {
  and: [ModemaAcceleratorVideoDeleteFilter!]
  id: IDFilterComparison
  or: [ModemaAcceleratorVideoDeleteFilter!]
}

type ModemaAcceleratorVideoDeleteResponse {
  altText: String
  createdAt: DateTime
  filename: String
  id: ID
  mime: String
  modemaAccelerator: ModemaAccelerator
  modemaAcceleratorId: Float
  originalFilename: String
  path: String
  type: String
  updatedAt: DateTime
  uploadSource: String
}

input ModemaAcceleratorVideoDomain {
  altText: String
  createdAt: DateTime
  filename: String!
  id: ID!
  mime: String!
  modemaAccelerator: ModemaAcceleratorDomain
  modemaAcceleratorId: Float
  originalFilename: String!
  path: String!
  type: String!
  updatedAt: DateTime
  uploadSource: String!
}

type ModemaAcceleratorVideoEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ModemaAcceleratorVideo"""
  node: ModemaAcceleratorVideo!
}

input ModemaAcceleratorVideoFilter {
  and: [ModemaAcceleratorVideoFilter!]
  id: IDFilterComparison
  or: [ModemaAcceleratorVideoFilter!]
}

input ModemaAcceleratorVideoSort {
  direction: SortDirection!
  field: ModemaAcceleratorVideoSortFields!
  nulls: SortNulls
}

enum ModemaAcceleratorVideoSortFields {
  id
}

input ModemaAcceleratorVideoUpdateFilter {
  and: [ModemaAcceleratorVideoUpdateFilter!]
  id: IDFilterComparison
  or: [ModemaAcceleratorVideoUpdateFilter!]
}

type Mutation {
  createManyActivities(input: CreateManyActivitiesInput!): [Activity!]!
  createManyAddresses(input: CreateManyAddressesInput!): [Address!]!
  createManyAttributeAttributeGroups(input: CreateManyAttributeAttributeGroupsInput!): [AttributeAttributeGroup!]!
  createManyAttributeGroups(input: CreateManyAttributeGroupsInput!): [AttributeGroup!]!
  createManyAttributeItems(input: CreateManyAttributeItemsInput!): [AttributeItem!]!
  createManyAttributeProducts(input: CreateManyAttributeProductsInput!): [AttributeProduct!]!
  createManyAttributeSubproducts(input: CreateManyAttributeSubproductsInput!): [AttributeSubproduct!]!
  createManyAttributes(input: CreateManyAttributesInput!): [Attribute!]!
  createManyAutomationEvents(input: CreateManyAutomationEventsInput!): [AutomationEvent!]!
  createManyAutomationRfmScores(input: CreateManyAutomationRfmScoresInput!): [AutomationRfmScore!]!
  createManyBasicCarpetBorders(input: CreateManyBasicCarpetBordersInput!): [BasicCarpetBorder!]!
  createManyBasicCarpetBrands(input: CreateManyBasicCarpetBrandsInput!): [BasicCarpetBrand!]!
  createManyBasicCarpetColors(input: CreateManyBasicCarpetColorsInput!): [BasicCarpetColor!]!
  createManyBasicCarpetDesigners(input: CreateManyBasicCarpetDesignersInput!): [BasicCarpetDesigner!]!
  createManyBasicCarpetDesigns(input: CreateManyBasicCarpetDesignsInput!): [BasicCarpetDesign!]!
  createManyBasicCarpetMaterials(input: CreateManyBasicCarpetMaterialsInput!): [BasicCarpetMaterial!]!
  createManyBasicCarpetSizeDetails(input: CreateManyBasicCarpetSizeDetailsInput!): [BasicCarpetSizeDetail!]!
  createManyBasicCarpetSizes(input: CreateManyBasicCarpetSizesInput!): [BasicCarpetSize!]!
  createManyBasicCarpetTypes(input: CreateManyBasicCarpetTypesInput!): [BasicCarpetType!]!
  createManyBorders(input: CreateManyBordersInput!): [Border!]!
  createManyCampaignFreeOfferSizes(input: CreateManyCampaignFreeOfferSizesInput!): [CampaignFreeOfferSize!]!
  createManyCampaignFreeOffers(input: CreateManyCampaignFreeOffersInput!): [CampaignFreeOffer!]!
  createManyCampaignGoldCoinSubs(input: CreateManyCampaignGoldCoinSubsInput!): [CampaignGoldCoinSub!]!
  createManyCampaignInstagramFollows(input: CreateManyCampaignInstagramFollowsInput!): [CampaignInstagramFollow!]!
  createManyCampaignPetForms(input: CreateManyCampaignPetFormsInput!): [CampaignPetForm!]!
  createManyCampaignRoomvoImages(input: CreateManyCampaignRoomvoImagesInput!): [CampaignRoomvoImage!]!
  createManyCampaignRoomvoVotes(input: CreateManyCampaignRoomvoVotesInput!): [CampaignRoomvoVote!]!
  createManyCampaignSubscriptions(input: CreateManyCampaignSubscriptionsInput!): [CampaignSubscription!]!
  createManyCampaignUefaEuroSubscriberHistories(input: CreateManyCampaignUefaEuroSubscriberHistoriesInput!): [CampaignUefaEuroSubscriberHistory!]!
  createManyCampaignUefaEuroSubscribers(input: CreateManyCampaignUefaEuroSubscribersInput!): [CampaignUefaEuroSubscriber!]!
  createManyCampaignVotingImageUsers(input: CreateManyCampaignVotingImageUsersInput!): [CampaignVotingImageUser!]!
  createManyCampaignVotingImages(input: CreateManyCampaignVotingImagesInput!): [CampaignVotingImage!]!
  createManyCarpetFeatureUsers(input: CreateManyCarpetFeatureUsersInput!): [CarpetFeatureUser!]!
  createManyCarpetFeatures(input: CreateManyCarpetFeaturesInput!): [CarpetFeature!]!
  createManyCarpetMaterials(input: CreateManyCarpetMaterialsInput!): [CarpetMaterial!]!
  createManyCarpetShapes(input: CreateManyCarpetShapesInput!): [CarpetShape!]!
  createManyCarpetSizes(input: CreateManyCarpetSizesInput!): [CarpetSize!]!
  createManyCarpetUsagePlaceInvoiceProducts(input: CreateManyCarpetUsagePlaceInvoiceProductsInput!): [CarpetUsagePlaceInvoiceProduct!]!
  createManyCarpetUsagePlaceUsers(input: CreateManyCarpetUsagePlaceUsersInput!): [CarpetUsagePlaceUser!]!
  createManyCarpetUsagePlaces(input: CreateManyCarpetUsagePlacesInput!): [CarpetUsagePlace!]!
  createManyChaparSettlementStatuses(input: CreateManyChaparSettlementStatusesInput!): [ChaparSettlementStatus!]!
  createManyChaparTrackingHistories(input: CreateManyChaparTrackingHistoriesInput!): [ChaparTrackingHistory!]!
  createManyCities(input: CreateManyCitiesInput!): [City!]!
  createManyCitiesSepidars(input: CreateManyCitiesSepidarsInput!): [CitiesSepidar!]!
  createManyCity2s(input: CreateManyCity2sInput!): [City2!]!
  createManyColorCategories(input: CreateManyColorCategoriesInput!): [ColorCategory!]!
  createManyColorCategoryDetails(input: CreateManyColorCategoryDetailsInput!): [ColorCategoryDetail!]!
  createManyColorCategorySubproducts(input: CreateManyColorCategorySubproductsInput!): [ColorCategorySubproduct!]!
  createManyColors(input: CreateManyColorsInput!): [Color!]!
  createManyConfigs(input: CreateManyConfigsInput!): [Config!]!
  createManyContactFormHistories(input: CreateManyContactFormHistoriesInput!): [ContactFormHistory!]!
  createManyContactFormStatuses(input: CreateManyContactFormStatusesInput!): [ContactFormStatus!]!
  createManyContactForms(input: CreateManyContactFormsInput!): [ContactForm!]!
  createManyCountries(input: CreateManyCountriesInput!): [Country!]!
  createManyCouponSubjects(input: CreateManyCouponSubjectsInput!): [CouponSubject!]!
  createManyCoupons(input: CreateManyCouponsInput!): [Coupon!]!
  createManyCrmPresentations(input: CreateManyCrmPresentationsInput!): [CrmPresentation!]!
  createManyCustomerImageProducts(input: CreateManyCustomerImageProductsInput!): [CustomerImageProduct!]!
  createManyCustomerRequestFiles(input: CreateManyCustomerRequestFilesInput!): [CustomerRequestFile!]!
  createManyCustomerRequests(input: CreateManyCustomerRequestsInput!): [CustomerRequest!]!
  createManyCustomerVideoProducts(input: CreateManyCustomerVideoProductsInput!): [CustomerVideoProduct!]!
  createManyDamageReasons(input: CreateManyDamageReasonsInput!): [DamageReason!]!
  createManyDepartments(input: CreateManyDepartmentsInput!): [Department!]!
  createManyDesignersProductPriceRanges(input: CreateManyDesignersProductPriceRangesInput!): [DesignersProductPriceRange!]!
  createManyDesigns(input: CreateManyDesignsInput!): [Design!]!
  createManyDiscountNotifications(input: CreateManyDiscountNotificationsInput!): [DiscountNotification!]!
  createManyDiscountSubjects(input: CreateManyDiscountSubjectsInput!): [DiscountSubject!]!
  createManyDiscounts(input: CreateManyDiscountsInput!): [Discount!]!
  createManyExitControlItems(input: CreateManyExitControlItemsInput!): [ExitControlItem!]!
  createManyExitControls(input: CreateManyExitControlsInput!): [ExitControl!]!
  createManyExportProducts(input: CreateManyExportProductsInput!): [ExportProduct!]!
  createManyFailedJobs(input: CreateManyFailedJobsInput!): [FailedJob!]!
  createManyFavoriteProducts(input: CreateManyFavoriteProductsInput!): [FavoriteProduct!]!
  createManyFedexAddressValidationAttributes(input: CreateManyFedexAddressValidationAttributesInput!): [FedexAddressValidationAttribute!]!
  createManyFetchSiteUrls(input: CreateManyFetchSiteUrlsInput!): [FetchSiteUrl!]!
  createManyFileNegotiations(input: CreateManyFileNegotiationsInput!): [FileNegotiation!]!
  createManyFiles(input: CreateManyFilesInput!): [File!]!
  createManyGhazals(input: CreateManyGhazalsInput!): [Ghazal!]!
  createManyGoogleFormUtms(input: CreateManyGoogleFormUtmsInput!): [GoogleFormUtm!]!
  createManyHeardAboutUsOptions(input: CreateManyHeardAboutUsOptionsInput!): [HeardAboutUsOption!]!
  createManyHelpDesks(input: CreateManyHelpDesksInput!): [HelpDesk!]!
  createManyHolidays(input: CreateManyHolidaysInput!): [Holiday!]!
  createManyHomePageCustomerImages(input: CreateManyHomePageCustomerImagesInput!): [HomePageCustomerImage!]!
  createManyHypers(input: CreateManyHypersInput!): [Hyper!]!
  createManyHyperstarCodes(input: CreateManyHyperstarCodesInput!): [HyperstarCode!]!
  createManyImageLayers(input: CreateManyImageLayersInput!): [ImageLayer!]!
  createManyImageProducts(input: CreateManyImageProductsInput!): [ImageProduct!]!
  createManyImageSizes(input: CreateManyImageSizesInput!): [ImageSize!]!
  createManyImageSubproducts(input: CreateManyImageSubproductsInput!): [ImageSubproduct!]!
  createManyImages(input: CreateManyImagesInput!): [Image!]!
  createManyImagesSizeGuidesDetails(input: CreateManyImagesSizeGuidesDetailsInput!): [ImagesSizeGuidesDetail!]!
  createManyImpersonateHistories(input: CreateManyImpersonateHistoriesInput!): [ImpersonateHistory!]!
  createManyIncredibleOfferSentNotifications(input: CreateManyIncredibleOfferSentNotificationsInput!): [IncredibleOfferSentNotification!]!
  createManyIncredibleOffers(input: CreateManyIncredibleOffersInput!): [IncredibleOffer!]!
  createManyInstagramFeeds(input: CreateManyInstagramFeedsInput!): [InstagramFeed!]!
  createManyInvitationCodes(input: CreateManyInvitationCodesInput!): [InvitationCode!]!
  createManyInvoiceAddressValidationResults(input: CreateManyInvoiceAddressValidationResultsInput!): [InvoiceAddressValidationResult!]!
  createManyInvoiceAddresses(input: CreateManyInvoiceAddressesInput!): [InvoiceAddress!]!
  createManyInvoiceBankGatewayHistories(input: CreateManyInvoiceBankGatewayHistoriesInput!): [InvoiceBankGatewayHistory!]!
  createManyInvoiceHistories(input: CreateManyInvoiceHistoriesInput!): [InvoiceHistory!]!
  createManyInvoiceInvoiceStatuses(input: CreateManyInvoiceInvoiceStatusesInput!): [InvoiceInvoiceStatus!]!
  createManyInvoiceModes(input: CreateManyInvoiceModesInput!): [InvoiceMode!]!
  createManyInvoiceNegotiations(input: CreateManyInvoiceNegotiationsInput!): [InvoiceNegotiation!]!
  createManyInvoicePaymentHistories(input: CreateManyInvoicePaymentHistoriesInput!): [InvoicePaymentHistory!]!
  createManyInvoicePaymentStatuses(input: CreateManyInvoicePaymentStatusesInput!): [InvoicePaymentStatus!]!
  createManyInvoicePaymentTypes(input: CreateManyInvoicePaymentTypesInput!): [InvoicePaymentType!]!
  createManyInvoicePayments(input: CreateManyInvoicePaymentsInput!): [InvoicePayment!]!
  createManyInvoiceProductHistories(input: CreateManyInvoiceProductHistoriesInput!): [InvoiceProductHistory!]!
  createManyInvoiceProductItemInvoiceProductStatuses(input: CreateManyInvoiceProductItemInvoiceProductStatusesInput!): [InvoiceProductItemInvoiceProductStatus!]!
  createManyInvoiceProductItems(input: CreateManyInvoiceProductItemsInput!): [InvoiceProductItem!]!
  createManyInvoiceProductStatuses(input: CreateManyInvoiceProductStatusesInput!): [InvoiceProductStatus!]!
  createManyInvoiceProducts(input: CreateManyInvoiceProductsInput!): [InvoiceProduct!]!
  createManyInvoiceRatesResults(input: CreateManyInvoiceRatesResultsInput!): [InvoiceRatesResult!]!
  createManyInvoiceReversalItems(input: CreateManyInvoiceReversalItemsInput!): [InvoiceReversalItem!]!
  createManyInvoiceReversals(input: CreateManyInvoiceReversalsInput!): [InvoiceReversal!]!
  createManyInvoiceShippingRates(input: CreateManyInvoiceShippingRatesInput!): [InvoiceShippingRate!]!
  createManyInvoiceStatuses(input: CreateManyInvoiceStatusesInput!): [InvoiceStatus!]!
  createManyInvoiceTypes(input: CreateManyInvoiceTypesInput!): [InvoiceType!]!
  createManyInvoices(input: CreateManyInvoicesInput!): [Invoice!]!
  createManyLabelProducts(input: CreateManyLabelProductsInput!): [LabelProduct!]!
  createManyLabels(input: CreateManyLabelsInput!): [Label!]!
  createManyMellatPaymentErrors(input: CreateManyMellatPaymentErrorsInput!): [MellatPaymentError!]!
  createManyMigrations(input: CreateManyMigrationsInput!): [Migration!]!
  createManyModelHasPermissions(input: CreateManyModelHasPermissionsInput!): [ModelHasPermission!]!
  createManyModelHasRoles(input: CreateManyModelHasRolesInput!): [ModelHasRole!]!
  createManyModelVisits(input: CreateManyModelVisitsInput!): [ModelVisit!]!
  createManyModemaAcceleratorImages(input: CreateManyModemaAcceleratorImagesInput!): [ModemaAcceleratorImage!]!
  createManyModemaAcceleratorVideos(input: CreateManyModemaAcceleratorVideosInput!): [ModemaAcceleratorVideo!]!
  createManyModemaAccelerators(input: CreateManyModemaAcceleratorsInput!): [ModemaAccelerator!]!
  createManyNeedsPhotographySubproducts(input: CreateManyNeedsPhotographySubproductsInput!): [NeedsPhotographySubproduct!]!
  createManyNegotiationHistories(input: CreateManyNegotiationHistoriesInput!): [NegotiationHistory!]!
  createManyNegotiationStatuses(input: CreateManyNegotiationStatusesInput!): [NegotiationStatus!]!
  createManyNegotiationSteps(input: CreateManyNegotiationStepsInput!): [NegotiationStep!]!
  createManyNegotiationTypes(input: CreateManyNegotiationTypesInput!): [NegotiationType!]!
  createManyNegotiations(input: CreateManyNegotiationsInput!): [Negotiation!]!
  createManyNewBorders(input: CreateManyNewBordersInput!): [NewBorder!]!
  createManyOauthAccessTokens(input: CreateManyOauthAccessTokensInput!): [OauthAccessToken!]!
  createManyOauthAuthCodes(input: CreateManyOauthAuthCodesInput!): [OauthAuthCode!]!
  createManyOauthClients(input: CreateManyOauthClientsInput!): [OauthClient!]!
  createManyOauthPersonalAccessClients(input: CreateManyOauthPersonalAccessClientsInput!): [OauthPersonalAccessClient!]!
  createManyOauthRefreshTokens(input: CreateManyOauthRefreshTokensInput!): [OauthRefreshToken!]!
  createManyOutOfStockButListedProducts(input: CreateManyOutOfStockButListedProductsInput!): [OutOfStockButListedProduct!]!
  createManyPasswordResets(input: CreateManyPasswordResetsInput!): [PasswordReset!]!
  createManyPatternCategories(input: CreateManyPatternCategoriesInput!): [PatternCategory!]!
  createManyPatternLayers(input: CreateManyPatternLayersInput!): [PatternLayer!]!
  createManyPatterns(input: CreateManyPatternsInput!): [Pattern!]!
  createManyPaymentMethodFields(input: CreateManyPaymentMethodFieldsInput!): [PaymentMethodField!]!
  createManyPaymentMethods(input: CreateManyPaymentMethodsInput!): [PaymentMethod!]!
  createManyPaymentRequestStatuses(input: CreateManyPaymentRequestStatusesInput!): [PaymentRequestStatus!]!
  createManyPaymentRequests(input: CreateManyPaymentRequestsInput!): [PaymentRequest!]!
  createManyPermissionGroups(input: CreateManyPermissionGroupsInput!): [PermissionGroup!]!
  createManyPermissions(input: CreateManyPermissionsInput!): [Permission!]!
  createManyPreorderPreorderStatuses(input: CreateManyPreorderPreorderStatusesInput!): [PreorderPreorderStatus!]!
  createManyPreorderRegisters(input: CreateManyPreorderRegistersInput!): [PreorderRegister!]!
  createManyPreorderStatuses(input: CreateManyPreorderStatusesInput!): [PreorderStatus!]!
  createManyPreorders(input: CreateManyPreordersInput!): [Preorder!]!
  createManyPriceGroupSizes(input: CreateManyPriceGroupSizesInput!): [PriceGroupSize!]!
  createManyPriceGroups(input: CreateManyPriceGroupsInput!): [PriceGroup!]!
  createManyPrintProfiles(input: CreateManyPrintProfilesInput!): [PrintProfile!]!
  createManyPrintRips(input: CreateManyPrintRipsInput!): [PrintRip!]!
  createManyProductCategories(input: CreateManyProductCategoriesInput!): [ProductCategory!]!
  createManyProductCategoryDetails(input: CreateManyProductCategoryDetailsInput!): [ProductCategoryDetail!]!
  createManyProductCategoryRates(input: CreateManyProductCategoryRatesInput!): [ProductCategoryRate!]!
  createManyProductColorImages(input: CreateManyProductColorImagesInput!): [ProductColorImage!]!
  createManyProductColorSales(input: CreateManyProductColorSalesInput!): [ProductColorSale!]!
  createManyProductCommentLikes(input: CreateManyProductCommentLikesInput!): [ProductCommentLike!]!
  createManyProductComments(input: CreateManyProductCommentsInput!): [ProductComment!]!
  createManyProductLikes(input: CreateManyProductLikesInput!): [ProductLike!]!
  createManyProductProductCategories(input: CreateManyProductProductCategoriesInput!): [ProductProductCategory!]!
  createManyProductRateAverages(input: CreateManyProductRateAveragesInput!): [ProductRateAverage!]!
  createManyProductRates(input: CreateManyProductRatesInput!): [ProductRate!]!
  createManyProductTags(input: CreateManyProductTagsInput!): [ProductTag!]!
  createManyProductVideos(input: CreateManyProductVideosInput!): [ProductVideo!]!
  createManyProductionPadProductionPadStatuses(input: CreateManyProductionPadProductionPadStatusesInput!): [ProductionPadProductionPadStatus!]!
  createManyProductionPadStatuses(input: CreateManyProductionPadStatusesInput!): [ProductionPadStatus!]!
  createManyProductionPads(input: CreateManyProductionPadsInput!): [ProductionPad!]!
  createManyProductionReceiptTypes(input: CreateManyProductionReceiptTypesInput!): [ProductionReceiptType!]!
  createManyProductionRolls(input: CreateManyProductionRollsInput!): [ProductionRoll!]!
  createManyProducts(input: CreateManyProductsInput!): [Product!]!
  createManyRates(input: CreateManyRatesInput!): [Rate!]!
  createManyReadyToSendProducts(input: CreateManyReadyToSendProductsInput!): [ReadyToSendProduct!]!
  createManyRecommendedProducts(input: CreateManyRecommendedProductsInput!): [RecommendedProduct!]!
  createManyRecommendedSubproducts(input: CreateManyRecommendedSubproductsInput!): [RecommendedSubproduct!]!
  createManyRedisSavedKeys(input: CreateManyRedisSavedKeysInput!): [RedisSavedKey!]!
  createManyRelatedProducts(input: CreateManyRelatedProductsInput!): [RelatedProduct!]!
  createManyRetargetingWalletCharges(input: CreateManyRetargetingWalletChargesInput!): [RetargetingWalletCharge!]!
  createManyReturnItemStatusReturnRequestItems(input: CreateManyReturnItemStatusReturnRequestItemsInput!): [ReturnItemStatusReturnRequestItem!]!
  createManyReturnItemStatuses(input: CreateManyReturnItemStatusesInput!): [ReturnItemStatus!]!
  createManyReturnReasons(input: CreateManyReturnReasonsInput!): [ReturnReason!]!
  createManyReturnRequestAddresses(input: CreateManyReturnRequestAddressesInput!): [ReturnRequestAddress!]!
  createManyReturnRequestHistories(input: CreateManyReturnRequestHistoriesInput!): [ReturnRequestHistory!]!
  createManyReturnRequestItemHistories(input: CreateManyReturnRequestItemHistoriesInput!): [ReturnRequestItemHistory!]!
  createManyReturnRequestItemImages(input: CreateManyReturnRequestItemImagesInput!): [ReturnRequestItemImage!]!
  createManyReturnRequestItemReturnItemStatuses(input: CreateManyReturnRequestItemReturnItemStatusesInput!): [ReturnRequestItemReturnItemStatus!]!
  createManyReturnRequestItemVideos(input: CreateManyReturnRequestItemVideosInput!): [ReturnRequestItemVideo!]!
  createManyReturnRequestItems(input: CreateManyReturnRequestItemsInput!): [ReturnRequestItem!]!
  createManyReturnRequestReturnStatuses(input: CreateManyReturnRequestReturnStatusesInput!): [ReturnRequestReturnStatus!]!
  createManyReturnRequests(input: CreateManyReturnRequestsInput!): [ReturnRequest!]!
  createManyReturnStatuses(input: CreateManyReturnStatusesInput!): [ReturnStatus!]!
  createManyReturnTypes(input: CreateManyReturnTypesInput!): [ReturnType!]!
  createManyReturnedInvoiceProducts(input: CreateManyReturnedInvoiceProductsInput!): [ReturnedInvoiceProduct!]!
  createManyReturnedInvoices(input: CreateManyReturnedInvoicesInput!): [ReturnedInvoice!]!
  createManyRfmReports(input: CreateManyRfmReportsInput!): [RfmReport!]!
  createManyRipTemplateItems(input: CreateManyRipTemplateItemsInput!): [RipTemplateItem!]!
  createManyRipTemplates(input: CreateManyRipTemplatesInput!): [RipTemplate!]!
  createManyRoleDomains(input: CreateManyRoleDomainsInput!): [RoleDomain!]!
  createManyRoleHasPermissions(input: CreateManyRoleHasPermissionsInput!): [RoleHasPermission!]!
  createManyRussians(input: CreateManyRussiansInput!): [Russian!]!
  createManySenderInformations(input: CreateManySenderInformationsInput!): [SenderInformation!]!
  createManyShippingServices(input: CreateManyShippingServicesInput!): [ShippingService!]!
  createManySitemapStaticPages(input: CreateManySitemapStaticPagesInput!): [SitemapStaticPage!]!
  createManySizeGuides(input: CreateManySizeGuidesInput!): [SizeGuide!]!
  createManySizeGuidesDetails(input: CreateManySizeGuidesDetailsInput!): [SizeGuidesDetail!]!
  createManySocialFacebookAccounts(input: CreateManySocialFacebookAccountsInput!): [SocialFacebookAccount!]!
  createManySocialGoogleAccounts(input: CreateManySocialGoogleAccountsInput!): [SocialGoogleAccount!]!
  createManySpecialOffers(input: CreateManySpecialOffersInput!): [SpecialOffer!]!
  createManyStates(input: CreateManyStatesInput!): [State!]!
  createManySubcolors(input: CreateManySubcolorsInput!): [Subcolor!]!
  createManySubproductSpecialImages(input: CreateManySubproductSpecialImagesInput!): [SubproductSpecialImage!]!
  createManySubproductStockHistories(input: CreateManySubproductStockHistoriesInput!): [SubproductStockHistory!]!
  createManySubproductVideos(input: CreateManySubproductVideosInput!): [SubproductVideo!]!
  createManySubproducts(input: CreateManySubproductsInput!): [Subproduct!]!
  createManySubscribers(input: CreateManySubscribersInput!): [Subscriber!]!
  createManyTags(input: CreateManyTagsInput!): [Tag!]!
  createManyTempSubproductDiscounts(input: CreateManyTempSubproductDiscountsInput!): [TempSubproductDiscount!]!
  createManyTestimonials(input: CreateManyTestimonialsInput!): [Testimonial!]!
  createManyTextLayers(input: CreateManyTextLayersInput!): [TextLayer!]!
  createManyTmpRfmReports(input: CreateManyTmpRfmReportsInput!): [TmpRfmReport!]!
  createManyTmpRussiaProducts(input: CreateManyTmpRussiaProductsInput!): [TmpRussiaProduct!]!
  createManyTmpSpainOrders(input: CreateManyTmpSpainOrdersInput!): [TmpSpainOrder!]!
  createManyTmpSpanishNames(input: CreateManyTmpSpanishNamesInput!): [TmpSpanishName!]!
  createManyTmpTagChangesPrints(input: CreateManyTmpTagChangesPrintsInput!): [TmpTagChangesPrint!]!
  createManyTorobProducts(input: CreateManyTorobProductsInput!): [TorobProduct!]!
  createManyTransactions(input: CreateManyTransactionsInput!): [Transaction!]!
  createManyUserCarts(input: CreateManyUserCartsInput!): [UserCart!]!
  createManyUserHasPermissions(input: CreateManyUserHasPermissionsInput!): [UserHasPermission!]!
  createManyUserHasRoles(input: CreateManyUserHasRolesInput!): [UserHasRole!]!
  createManyUserUtms(input: CreateManyUserUtmsInput!): [UserUtm!]!
  createManyUsers(input: CreateManyUsersInput!): [User!]!
  createManyUtmGoogleFormCoupons(input: CreateManyUtmGoogleFormCouponsInput!): [UtmGoogleFormCoupon!]!
  createManyUtms(input: CreateManyUtmsInput!): [Utm!]!
  createManyVerifyUsers(input: CreateManyVerifyUsersInput!): [VerifyUser!]!
  createManyVideos(input: CreateManyVideosInput!): [Video!]!
  createManyVisitorCoupons(input: CreateManyVisitorCouponsInput!): [VisitorCoupon!]!
  createManyVisitorGroupRates(input: CreateManyVisitorGroupRatesInput!): [VisitorGroupRate!]!
  createManyVisitorGroups(input: CreateManyVisitorGroupsInput!): [VisitorGroup!]!
  createManyVisitorSales(input: CreateManyVisitorSalesInput!): [VisitorSale!]!
  createManyVisitors(input: CreateManyVisitorsInput!): [Visitor!]!
  createManyWalletGiftCharges(input: CreateManyWalletGiftChargesInput!): [WalletGiftCharge!]!
  createManyWalletHistories(input: CreateManyWalletHistoriesInput!): [WalletHistory!]!
  createManyWallets(input: CreateManyWalletsInput!): [Wallet!]!
  createManyWebsitePages(input: CreateManyWebsitePagesInput!): [WebsitePage!]!
  createManyWebsiteVisits(input: CreateManyWebsiteVisitsInput!): [WebsiteVisit!]!
  createManyWithdrawalRequestStatuses(input: CreateManyWithdrawalRequestStatusesInput!): [WithdrawalRequestStatus!]!
  createManyWithdrawalRequests(input: CreateManyWithdrawalRequestsInput!): [WithdrawalRequest!]!
  createManyWonderfulOffers(input: CreateManyWonderfulOffersInput!): [WonderfulOffer!]!
  createNegotiationStep(createNegotiationStepInput: CreateNegotiationStepInput!): NegotiationStep!
  createOneActivity(input: CreateOneActivityInput!): Activity!
  createOneAddress(input: CreateOneAddressInput!): Address!
  createOneAttribute(input: CreateOneAttributeInput!): Attribute!
  createOneAttributeAttributeGroup(input: CreateOneAttributeAttributeGroupInput!): AttributeAttributeGroup!
  createOneAttributeGroup(input: CreateOneAttributeGroupInput!): AttributeGroup!
  createOneAttributeItem(input: CreateOneAttributeItemInput!): AttributeItem!
  createOneAttributeProduct(input: CreateOneAttributeProductInput!): AttributeProduct!
  createOneAttributeSubproduct(input: CreateOneAttributeSubproductInput!): AttributeSubproduct!
  createOneAutomationEvent(input: CreateOneAutomationEventInput!): AutomationEvent!
  createOneAutomationRfmScore(input: CreateOneAutomationRfmScoreInput!): AutomationRfmScore!
  createOneBasicCarpetBorder(input: CreateOneBasicCarpetBorderInput!): BasicCarpetBorder!
  createOneBasicCarpetBrand(input: CreateOneBasicCarpetBrandInput!): BasicCarpetBrand!
  createOneBasicCarpetColor(input: CreateOneBasicCarpetColorInput!): BasicCarpetColor!
  createOneBasicCarpetDesign(input: CreateOneBasicCarpetDesignInput!): BasicCarpetDesign!
  createOneBasicCarpetDesigner(input: CreateOneBasicCarpetDesignerInput!): BasicCarpetDesigner!
  createOneBasicCarpetMaterial(input: CreateOneBasicCarpetMaterialInput!): BasicCarpetMaterial!
  createOneBasicCarpetSize(input: CreateOneBasicCarpetSizeInput!): BasicCarpetSize!
  createOneBasicCarpetSizeDetail(input: CreateOneBasicCarpetSizeDetailInput!): BasicCarpetSizeDetail!
  createOneBasicCarpetType(input: CreateOneBasicCarpetTypeInput!): BasicCarpetType!
  createOneBorder(input: CreateOneBorderInput!): Border!
  createOneCampaignFreeOffer(input: CreateOneCampaignFreeOfferInput!): CampaignFreeOffer!
  createOneCampaignFreeOfferSize(input: CreateOneCampaignFreeOfferSizeInput!): CampaignFreeOfferSize!
  createOneCampaignGoldCoinSub(input: CreateOneCampaignGoldCoinSubInput!): CampaignGoldCoinSub!
  createOneCampaignInstagramFollow(input: CreateOneCampaignInstagramFollowInput!): CampaignInstagramFollow!
  createOneCampaignPetForm(input: CreateOneCampaignPetFormInput!): CampaignPetForm!
  createOneCampaignRoomvoImage(input: CreateOneCampaignRoomvoImageInput!): CampaignRoomvoImage!
  createOneCampaignRoomvoVote(input: CreateOneCampaignRoomvoVoteInput!): CampaignRoomvoVote!
  createOneCampaignSubscription(input: CreateOneCampaignSubscriptionInput!): CampaignSubscription!
  createOneCampaignUefaEuroSubscriber(input: CreateOneCampaignUefaEuroSubscriberInput!): CampaignUefaEuroSubscriber!
  createOneCampaignUefaEuroSubscriberHistory(input: CreateOneCampaignUefaEuroSubscriberHistoryInput!): CampaignUefaEuroSubscriberHistory!
  createOneCampaignVotingImage(input: CreateOneCampaignVotingImageInput!): CampaignVotingImage!
  createOneCampaignVotingImageUser(input: CreateOneCampaignVotingImageUserInput!): CampaignVotingImageUser!
  createOneCarpetFeature(input: CreateOneCarpetFeatureInput!): CarpetFeature!
  createOneCarpetFeatureUser(input: CreateOneCarpetFeatureUserInput!): CarpetFeatureUser!
  createOneCarpetMaterial(input: CreateOneCarpetMaterialInput!): CarpetMaterial!
  createOneCarpetShape(input: CreateOneCarpetShapeInput!): CarpetShape!
  createOneCarpetSize(input: CreateOneCarpetSizeInput!): CarpetSize!
  createOneCarpetUsagePlace(input: CreateOneCarpetUsagePlaceInput!): CarpetUsagePlace!
  createOneCarpetUsagePlaceInvoiceProduct(input: CreateOneCarpetUsagePlaceInvoiceProductInput!): CarpetUsagePlaceInvoiceProduct!
  createOneCarpetUsagePlaceUser(input: CreateOneCarpetUsagePlaceUserInput!): CarpetUsagePlaceUser!
  createOneChaparSettlementStatus(input: CreateOneChaparSettlementStatusInput!): ChaparSettlementStatus!
  createOneChaparTrackingHistory(input: CreateOneChaparTrackingHistoryInput!): ChaparTrackingHistory!
  createOneCitiesSepidar(input: CreateOneCitiesSepidarInput!): CitiesSepidar!
  createOneCity(input: CreateOneCityInput!): City!
  createOneCity2(input: CreateOneCity2Input!): City2!
  createOneColor(input: CreateOneColorInput!): Color!
  createOneColorCategory(input: CreateOneColorCategoryInput!): ColorCategory!
  createOneColorCategoryDetail(input: CreateOneColorCategoryDetailInput!): ColorCategoryDetail!
  createOneColorCategorySubproduct(input: CreateOneColorCategorySubproductInput!): ColorCategorySubproduct!
  createOneConfig(input: CreateOneConfigInput!): Config!
  createOneContactForm(input: CreateOneContactFormInput!): ContactForm!
  createOneContactFormHistory(input: CreateOneContactFormHistoryInput!): ContactFormHistory!
  createOneContactFormStatus(input: CreateOneContactFormStatusInput!): ContactFormStatus!
  createOneCountry(input: CreateOneCountryInput!): Country!
  createOneCoupon(input: CreateOneCouponInput!): Coupon!
  createOneCouponSubject(input: CreateOneCouponSubjectInput!): CouponSubject!
  createOneCrmPresentation(input: CreateOneCrmPresentationInput!): CrmPresentation!
  createOneCustomerImageProduct(input: CreateOneCustomerImageProductInput!): CustomerImageProduct!
  createOneCustomerRequest(input: CreateOneCustomerRequestInput!): CustomerRequest!
  createOneCustomerRequestFile(input: CreateOneCustomerRequestFileInput!): CustomerRequestFile!
  createOneCustomerVideoProduct(input: CreateOneCustomerVideoProductInput!): CustomerVideoProduct!
  createOneDamageReason(input: CreateOneDamageReasonInput!): DamageReason!
  createOneDepartment(input: CreateOneDepartmentInput!): Department!
  createOneDesign(input: CreateOneDesignInput!): Design!
  createOneDesignersProductPriceRange(input: CreateOneDesignersProductPriceRangeInput!): DesignersProductPriceRange!
  createOneDiscount(input: CreateOneDiscountInput!): Discount!
  createOneDiscountNotification(input: CreateOneDiscountNotificationInput!): DiscountNotification!
  createOneDiscountSubject(input: CreateOneDiscountSubjectInput!): DiscountSubject!
  createOneExitControl(input: CreateOneExitControlInput!): ExitControl!
  createOneExitControlItem(input: CreateOneExitControlItemInput!): ExitControlItem!
  createOneExportProduct(input: CreateOneExportProductInput!): ExportProduct!
  createOneFailedJob(input: CreateOneFailedJobInput!): FailedJob!
  createOneFavoriteProduct(input: CreateOneFavoriteProductInput!): FavoriteProduct!
  createOneFedexAddressValidationAttribute(input: CreateOneFedexAddressValidationAttributeInput!): FedexAddressValidationAttribute!
  createOneFetchSiteUrl(input: CreateOneFetchSiteUrlInput!): FetchSiteUrl!
  createOneFile(input: CreateOneFileInput!): File!
  createOneFileNegotiation(input: CreateOneFileNegotiationInput!): FileNegotiation!
  createOneGhazal(input: CreateOneGhazalInput!): Ghazal!
  createOneGoogleFormUtm(input: CreateOneGoogleFormUtmInput!): GoogleFormUtm!
  createOneHeardAboutUsOption(input: CreateOneHeardAboutUsOptionInput!): HeardAboutUsOption!
  createOneHelpDesk(input: CreateOneHelpDeskInput!): HelpDesk!
  createOneHoliday(input: CreateOneHolidayInput!): Holiday!
  createOneHomePageCustomerImage(input: CreateOneHomePageCustomerImageInput!): HomePageCustomerImage!
  createOneHyper(input: CreateOneHyperInput!): Hyper!
  createOneHyperstarCode(input: CreateOneHyperstarCodeInput!): HyperstarCode!
  createOneImage(input: CreateOneImageInput!): Image!
  createOneImageLayer(input: CreateOneImageLayerInput!): ImageLayer!
  createOneImageProduct(input: CreateOneImageProductInput!): ImageProduct!
  createOneImageSize(input: CreateOneImageSizeInput!): ImageSize!
  createOneImageSubproduct(input: CreateOneImageSubproductInput!): ImageSubproduct!
  createOneImagesSizeGuidesDetail(input: CreateOneImagesSizeGuidesDetailInput!): ImagesSizeGuidesDetail!
  createOneImpersonateHistory(input: CreateOneImpersonateHistoryInput!): ImpersonateHistory!
  createOneIncredibleOffer(input: CreateOneIncredibleOfferInput!): IncredibleOffer!
  createOneIncredibleOfferSentNotification(input: CreateOneIncredibleOfferSentNotificationInput!): IncredibleOfferSentNotification!
  createOneInstagramFeed(input: CreateOneInstagramFeedInput!): InstagramFeed!
  createOneInvitationCode(input: CreateOneInvitationCodeInput!): InvitationCode!
  createOneInvoice(input: CreateOneInvoiceInput!): Invoice!
  createOneInvoiceAddress(input: CreateOneInvoiceAddressInput!): InvoiceAddress!
  createOneInvoiceAddressValidationResult(input: CreateOneInvoiceAddressValidationResultInput!): InvoiceAddressValidationResult!
  createOneInvoiceBankGatewayHistory(input: CreateOneInvoiceBankGatewayHistoryInput!): InvoiceBankGatewayHistory!
  createOneInvoiceHistory(input: CreateOneInvoiceHistoryInput!): InvoiceHistory!
  createOneInvoiceInvoiceStatus(input: CreateOneInvoiceInvoiceStatusInput!): InvoiceInvoiceStatus!
  createOneInvoiceMode(input: CreateOneInvoiceModeInput!): InvoiceMode!
  createOneInvoiceNegotiation(input: CreateOneInvoiceNegotiationInput!): InvoiceNegotiation!
  createOneInvoicePayment(input: CreateOneInvoicePaymentInput!): InvoicePayment!
  createOneInvoicePaymentHistory(input: CreateOneInvoicePaymentHistoryInput!): InvoicePaymentHistory!
  createOneInvoicePaymentStatus(input: CreateOneInvoicePaymentStatusInput!): InvoicePaymentStatus!
  createOneInvoicePaymentType(input: CreateOneInvoicePaymentTypeInput!): InvoicePaymentType!
  createOneInvoiceProduct(input: CreateOneInvoiceProductInput!): InvoiceProduct!
  createOneInvoiceProductHistory(input: CreateOneInvoiceProductHistoryInput!): InvoiceProductHistory!
  createOneInvoiceProductItem(input: CreateOneInvoiceProductItemInput!): InvoiceProductItem!
  createOneInvoiceProductItemInvoiceProductStatus(input: CreateOneInvoiceProductItemInvoiceProductStatusInput!): InvoiceProductItemInvoiceProductStatus!
  createOneInvoiceProductStatus(input: CreateOneInvoiceProductStatusInput!): InvoiceProductStatus!
  createOneInvoiceRatesResult(input: CreateOneInvoiceRatesResultInput!): InvoiceRatesResult!
  createOneInvoiceReversal(input: CreateOneInvoiceReversalInput!): InvoiceReversal!
  createOneInvoiceReversalItem(input: CreateOneInvoiceReversalItemInput!): InvoiceReversalItem!
  createOneInvoiceShippingRate(input: CreateOneInvoiceShippingRateInput!): InvoiceShippingRate!
  createOneInvoiceStatus(input: CreateOneInvoiceStatusInput!): InvoiceStatus!
  createOneInvoiceType(input: CreateOneInvoiceTypeInput!): InvoiceType!
  createOneLabel(input: CreateOneLabelInput!): Label!
  createOneLabelProduct(input: CreateOneLabelProductInput!): LabelProduct!
  createOneMellatPaymentError(input: CreateOneMellatPaymentErrorInput!): MellatPaymentError!
  createOneMigration(input: CreateOneMigrationInput!): Migration!
  createOneModelHasPermission(input: CreateOneModelHasPermissionInput!): ModelHasPermission!
  createOneModelHasRole(input: CreateOneModelHasRoleInput!): ModelHasRole!
  createOneModelVisit(input: CreateOneModelVisitInput!): ModelVisit!
  createOneModemaAccelerator(input: CreateOneModemaAcceleratorInput!): ModemaAccelerator!
  createOneModemaAcceleratorImage(input: CreateOneModemaAcceleratorImageInput!): ModemaAcceleratorImage!
  createOneModemaAcceleratorVideo(input: CreateOneModemaAcceleratorVideoInput!): ModemaAcceleratorVideo!
  createOneNeedsPhotographySubproduct(input: CreateOneNeedsPhotographySubproductInput!): NeedsPhotographySubproduct!
  createOneNegotiation(input: CreateOneNegotiationInput!): Negotiation!
  createOneNegotiationHistory(input: CreateOneNegotiationHistoryInput!): NegotiationHistory!
  createOneNegotiationStatus(input: CreateOneNegotiationStatusInput!): NegotiationStatus!
  createOneNegotiationStep(input: CreateOneNegotiationStepInput!): NegotiationStep!
  createOneNegotiationType(input: CreateOneNegotiationTypeInput!): NegotiationType!
  createOneNewBorder(input: CreateOneNewBorderInput!): NewBorder!
  createOneOauthAccessToken(input: CreateOneOauthAccessTokenInput!): OauthAccessToken!
  createOneOauthAuthCode(input: CreateOneOauthAuthCodeInput!): OauthAuthCode!
  createOneOauthClient(input: CreateOneOauthClientInput!): OauthClient!
  createOneOauthPersonalAccessClient(input: CreateOneOauthPersonalAccessClientInput!): OauthPersonalAccessClient!
  createOneOauthRefreshToken(input: CreateOneOauthRefreshTokenInput!): OauthRefreshToken!
  createOneOutOfStockButListedProduct(input: CreateOneOutOfStockButListedProductInput!): OutOfStockButListedProduct!
  createOnePasswordReset(input: CreateOnePasswordResetInput!): PasswordReset!
  createOnePattern(input: CreateOnePatternInput!): Pattern!
  createOnePatternCategory(input: CreateOnePatternCategoryInput!): PatternCategory!
  createOnePatternLayer(input: CreateOnePatternLayerInput!): PatternLayer!
  createOnePaymentMethod(input: CreateOnePaymentMethodInput!): PaymentMethod!
  createOnePaymentMethodField(input: CreateOnePaymentMethodFieldInput!): PaymentMethodField!
  createOnePaymentRequest(input: CreateOnePaymentRequestInput!): PaymentRequest!
  createOnePaymentRequestStatus(input: CreateOnePaymentRequestStatusInput!): PaymentRequestStatus!
  createOnePermission(input: CreateOnePermissionInput!): Permission!
  createOnePermissionGroup(input: CreateOnePermissionGroupInput!): PermissionGroup!
  createOnePreorder(input: CreateOnePreorderInput!): Preorder!
  createOnePreorderPreorderStatus(input: CreateOnePreorderPreorderStatusInput!): PreorderPreorderStatus!
  createOnePreorderRegister(input: CreateOnePreorderRegisterInput!): PreorderRegister!
  createOnePreorderStatus(input: CreateOnePreorderStatusInput!): PreorderStatus!
  createOnePriceGroup(input: CreateOnePriceGroupInput!): PriceGroup!
  createOnePriceGroupSize(input: CreateOnePriceGroupSizeInput!): PriceGroupSize!
  createOnePrintProfile(input: CreateOnePrintProfileInput!): PrintProfile!
  createOnePrintRip(input: CreateOnePrintRipInput!): PrintRip!
  createOneProduct(input: CreateOneProductInput!): Product!
  createOneProductCategory(input: CreateOneProductCategoryInput!): ProductCategory!
  createOneProductCategoryDetail(input: CreateOneProductCategoryDetailInput!): ProductCategoryDetail!
  createOneProductCategoryRate(input: CreateOneProductCategoryRateInput!): ProductCategoryRate!
  createOneProductColorImage(input: CreateOneProductColorImageInput!): ProductColorImage!
  createOneProductColorSale(input: CreateOneProductColorSaleInput!): ProductColorSale!
  createOneProductComment(input: CreateOneProductCommentInput!): ProductComment!
  createOneProductCommentLike(input: CreateOneProductCommentLikeInput!): ProductCommentLike!
  createOneProductLike(input: CreateOneProductLikeInput!): ProductLike!
  createOneProductProductCategory(input: CreateOneProductProductCategoryInput!): ProductProductCategory!
  createOneProductRate(input: CreateOneProductRateInput!): ProductRate!
  createOneProductRateAverage(input: CreateOneProductRateAverageInput!): ProductRateAverage!
  createOneProductTag(input: CreateOneProductTagInput!): ProductTag!
  createOneProductVideo(input: CreateOneProductVideoInput!): ProductVideo!
  createOneProductionPad(input: CreateOneProductionPadInput!): ProductionPad!
  createOneProductionPadProductionPadStatus(input: CreateOneProductionPadProductionPadStatusInput!): ProductionPadProductionPadStatus!
  createOneProductionPadStatus(input: CreateOneProductionPadStatusInput!): ProductionPadStatus!
  createOneProductionReceiptType(input: CreateOneProductionReceiptTypeInput!): ProductionReceiptType!
  createOneProductionRoll(input: CreateOneProductionRollInput!): ProductionRoll!
  createOneRate(input: CreateOneRateInput!): Rate!
  createOneReadyToSendProduct(input: CreateOneReadyToSendProductInput!): ReadyToSendProduct!
  createOneRecommendedProduct(input: CreateOneRecommendedProductInput!): RecommendedProduct!
  createOneRecommendedSubproduct(input: CreateOneRecommendedSubproductInput!): RecommendedSubproduct!
  createOneRedisSavedKey(input: CreateOneRedisSavedKeyInput!): RedisSavedKey!
  createOneRelatedProduct(input: CreateOneRelatedProductInput!): RelatedProduct!
  createOneRetargetingWalletCharge(input: CreateOneRetargetingWalletChargeInput!): RetargetingWalletCharge!
  createOneReturnItemStatus(input: CreateOneReturnItemStatusInput!): ReturnItemStatus!
  createOneReturnItemStatusReturnRequestItem(input: CreateOneReturnItemStatusReturnRequestItemInput!): ReturnItemStatusReturnRequestItem!
  createOneReturnReason(input: CreateOneReturnReasonInput!): ReturnReason!
  createOneReturnRequest(input: CreateOneReturnRequestInput!): ReturnRequest!
  createOneReturnRequestAddress(input: CreateOneReturnRequestAddressInput!): ReturnRequestAddress!
  createOneReturnRequestHistory(input: CreateOneReturnRequestHistoryInput!): ReturnRequestHistory!
  createOneReturnRequestItem(input: CreateOneReturnRequestItemInput!): ReturnRequestItem!
  createOneReturnRequestItemHistory(input: CreateOneReturnRequestItemHistoryInput!): ReturnRequestItemHistory!
  createOneReturnRequestItemImage(input: CreateOneReturnRequestItemImageInput!): ReturnRequestItemImage!
  createOneReturnRequestItemReturnItemStatus(input: CreateOneReturnRequestItemReturnItemStatusInput!): ReturnRequestItemReturnItemStatus!
  createOneReturnRequestItemVideo(input: CreateOneReturnRequestItemVideoInput!): ReturnRequestItemVideo!
  createOneReturnRequestReturnStatus(input: CreateOneReturnRequestReturnStatusInput!): ReturnRequestReturnStatus!
  createOneReturnStatus(input: CreateOneReturnStatusInput!): ReturnStatus!
  createOneReturnType(input: CreateOneReturnTypeInput!): ReturnType!
  createOneReturnedInvoice(input: CreateOneReturnedInvoiceInput!): ReturnedInvoice!
  createOneReturnedInvoiceProduct(input: CreateOneReturnedInvoiceProductInput!): ReturnedInvoiceProduct!
  createOneRfmReport(input: CreateOneRfmReportInput!): RfmReport!
  createOneRipTemplate(input: CreateOneRipTemplateInput!): RipTemplate!
  createOneRipTemplateItem(input: CreateOneRipTemplateItemInput!): RipTemplateItem!
  createOneRoleDomain(input: CreateOneRoleDomainInput!): RoleDomain!
  createOneRoleHasPermission(input: CreateOneRoleHasPermissionInput!): RoleHasPermission!
  createOneRussian(input: CreateOneRussianInput!): Russian!
  createOneSenderInformation(input: CreateOneSenderInformationInput!): SenderInformation!
  createOneShippingService(input: CreateOneShippingServiceInput!): ShippingService!
  createOneSitemapStaticPage(input: CreateOneSitemapStaticPageInput!): SitemapStaticPage!
  createOneSizeGuide(input: CreateOneSizeGuideInput!): SizeGuide!
  createOneSizeGuidesDetail(input: CreateOneSizeGuidesDetailInput!): SizeGuidesDetail!
  createOneSocialFacebookAccount(input: CreateOneSocialFacebookAccountInput!): SocialFacebookAccount!
  createOneSocialGoogleAccount(input: CreateOneSocialGoogleAccountInput!): SocialGoogleAccount!
  createOneSpecialOffer(input: CreateOneSpecialOfferInput!): SpecialOffer!
  createOneState(input: CreateOneStateInput!): State!
  createOneSubcolor(input: CreateOneSubcolorInput!): Subcolor!
  createOneSubproduct(input: CreateOneSubproductInput!): Subproduct!
  createOneSubproductSpecialImage(input: CreateOneSubproductSpecialImageInput!): SubproductSpecialImage!
  createOneSubproductStockHistory(input: CreateOneSubproductStockHistoryInput!): SubproductStockHistory!
  createOneSubproductVideo(input: CreateOneSubproductVideoInput!): SubproductVideo!
  createOneSubscriber(input: CreateOneSubscriberInput!): Subscriber!
  createOneTag(input: CreateOneTagInput!): Tag!
  createOneTempSubproductDiscount(input: CreateOneTempSubproductDiscountInput!): TempSubproductDiscount!
  createOneTestimonial(input: CreateOneTestimonialInput!): Testimonial!
  createOneTextLayer(input: CreateOneTextLayerInput!): TextLayer!
  createOneTmpRfmReport(input: CreateOneTmpRfmReportInput!): TmpRfmReport!
  createOneTmpRussiaProduct(input: CreateOneTmpRussiaProductInput!): TmpRussiaProduct!
  createOneTmpSpainOrder(input: CreateOneTmpSpainOrderInput!): TmpSpainOrder!
  createOneTmpSpanishName(input: CreateOneTmpSpanishNameInput!): TmpSpanishName!
  createOneTmpTagChangesPrint(input: CreateOneTmpTagChangesPrintInput!): TmpTagChangesPrint!
  createOneTorobProduct(input: CreateOneTorobProductInput!): TorobProduct!
  createOneTransaction(input: CreateOneTransactionInput!): Transaction!
  createOneUser(input: CreateOneUserInput!): User!
  createOneUserCart(input: CreateOneUserCartInput!): UserCart!
  createOneUserHasPermission(input: CreateOneUserHasPermissionInput!): UserHasPermission!
  createOneUserHasRole(input: CreateOneUserHasRoleInput!): UserHasRole!
  createOneUserUtm(input: CreateOneUserUtmInput!): UserUtm!
  createOneUtm(input: CreateOneUtmInput!): Utm!
  createOneUtmGoogleFormCoupon(input: CreateOneUtmGoogleFormCouponInput!): UtmGoogleFormCoupon!
  createOneVerifyUser(input: CreateOneVerifyUserInput!): VerifyUser!
  createOneVideo(input: CreateOneVideoInput!): Video!
  createOneVisitor(input: CreateOneVisitorInput!): Visitor!
  createOneVisitorCoupon(input: CreateOneVisitorCouponInput!): VisitorCoupon!
  createOneVisitorGroup(input: CreateOneVisitorGroupInput!): VisitorGroup!
  createOneVisitorGroupRate(input: CreateOneVisitorGroupRateInput!): VisitorGroupRate!
  createOneVisitorSale(input: CreateOneVisitorSaleInput!): VisitorSale!
  createOneWallet(input: CreateOneWalletInput!): Wallet!
  createOneWalletGiftCharge(input: CreateOneWalletGiftChargeInput!): WalletGiftCharge!
  createOneWalletHistory(input: CreateOneWalletHistoryInput!): WalletHistory!
  createOneWebsitePage(input: CreateOneWebsitePageInput!): WebsitePage!
  createOneWebsiteVisit(input: CreateOneWebsiteVisitInput!): WebsiteVisit!
  createOneWithdrawalRequest(input: CreateOneWithdrawalRequestInput!): WithdrawalRequest!
  createOneWithdrawalRequestStatus(input: CreateOneWithdrawalRequestStatusInput!): WithdrawalRequestStatus!
  createOneWonderfulOffer(input: CreateOneWonderfulOfferInput!): WonderfulOffer!
  createUser(createUserInput: CreateUserInput!): CreateUserResponseDto!
  createWallet(createWalletInput: CreateWalletInputs!): Boolean!
  deleteManyActivities(input: DeleteManyActivitiesInput!): DeleteManyResponse!
  deleteManyAddresses(input: DeleteManyAddressesInput!): DeleteManyResponse!
  deleteManyAttributeAttributeGroups(input: DeleteManyAttributeAttributeGroupsInput!): DeleteManyResponse!
  deleteManyAttributeGroups(input: DeleteManyAttributeGroupsInput!): DeleteManyResponse!
  deleteManyAttributeItems(input: DeleteManyAttributeItemsInput!): DeleteManyResponse!
  deleteManyAttributeProducts(input: DeleteManyAttributeProductsInput!): DeleteManyResponse!
  deleteManyAttributeSubproducts(input: DeleteManyAttributeSubproductsInput!): DeleteManyResponse!
  deleteManyAttributes(input: DeleteManyAttributesInput!): DeleteManyResponse!
  deleteManyAutomationEvents(input: DeleteManyAutomationEventsInput!): DeleteManyResponse!
  deleteManyAutomationRfmScores(input: DeleteManyAutomationRfmScoresInput!): DeleteManyResponse!
  deleteManyBasicCarpetBorders(input: DeleteManyBasicCarpetBordersInput!): DeleteManyResponse!
  deleteManyBasicCarpetBrands(input: DeleteManyBasicCarpetBrandsInput!): DeleteManyResponse!
  deleteManyBasicCarpetColors(input: DeleteManyBasicCarpetColorsInput!): DeleteManyResponse!
  deleteManyBasicCarpetDesigners(input: DeleteManyBasicCarpetDesignersInput!): DeleteManyResponse!
  deleteManyBasicCarpetDesigns(input: DeleteManyBasicCarpetDesignsInput!): DeleteManyResponse!
  deleteManyBasicCarpetMaterials(input: DeleteManyBasicCarpetMaterialsInput!): DeleteManyResponse!
  deleteManyBasicCarpetSizeDetails(input: DeleteManyBasicCarpetSizeDetailsInput!): DeleteManyResponse!
  deleteManyBasicCarpetSizes(input: DeleteManyBasicCarpetSizesInput!): DeleteManyResponse!
  deleteManyBasicCarpetTypes(input: DeleteManyBasicCarpetTypesInput!): DeleteManyResponse!
  deleteManyBorders(input: DeleteManyBordersInput!): DeleteManyResponse!
  deleteManyCampaignFreeOfferSizes(input: DeleteManyCampaignFreeOfferSizesInput!): DeleteManyResponse!
  deleteManyCampaignFreeOffers(input: DeleteManyCampaignFreeOffersInput!): DeleteManyResponse!
  deleteManyCampaignGoldCoinSubs(input: DeleteManyCampaignGoldCoinSubsInput!): DeleteManyResponse!
  deleteManyCampaignInstagramFollows(input: DeleteManyCampaignInstagramFollowsInput!): DeleteManyResponse!
  deleteManyCampaignPetForms(input: DeleteManyCampaignPetFormsInput!): DeleteManyResponse!
  deleteManyCampaignRoomvoImages(input: DeleteManyCampaignRoomvoImagesInput!): DeleteManyResponse!
  deleteManyCampaignRoomvoVotes(input: DeleteManyCampaignRoomvoVotesInput!): DeleteManyResponse!
  deleteManyCampaignSubscriptions(input: DeleteManyCampaignSubscriptionsInput!): DeleteManyResponse!
  deleteManyCampaignUefaEuroSubscriberHistories(input: DeleteManyCampaignUefaEuroSubscriberHistoriesInput!): DeleteManyResponse!
  deleteManyCampaignUefaEuroSubscribers(input: DeleteManyCampaignUefaEuroSubscribersInput!): DeleteManyResponse!
  deleteManyCampaignVotingImageUsers(input: DeleteManyCampaignVotingImageUsersInput!): DeleteManyResponse!
  deleteManyCampaignVotingImages(input: DeleteManyCampaignVotingImagesInput!): DeleteManyResponse!
  deleteManyCarpetFeatureUsers(input: DeleteManyCarpetFeatureUsersInput!): DeleteManyResponse!
  deleteManyCarpetFeatures(input: DeleteManyCarpetFeaturesInput!): DeleteManyResponse!
  deleteManyCarpetMaterials(input: DeleteManyCarpetMaterialsInput!): DeleteManyResponse!
  deleteManyCarpetShapes(input: DeleteManyCarpetShapesInput!): DeleteManyResponse!
  deleteManyCarpetSizes(input: DeleteManyCarpetSizesInput!): DeleteManyResponse!
  deleteManyCarpetUsagePlaceInvoiceProducts(input: DeleteManyCarpetUsagePlaceInvoiceProductsInput!): DeleteManyResponse!
  deleteManyCarpetUsagePlaceUsers(input: DeleteManyCarpetUsagePlaceUsersInput!): DeleteManyResponse!
  deleteManyCarpetUsagePlaces(input: DeleteManyCarpetUsagePlacesInput!): DeleteManyResponse!
  deleteManyChaparSettlementStatuses(input: DeleteManyChaparSettlementStatusesInput!): DeleteManyResponse!
  deleteManyChaparTrackingHistories(input: DeleteManyChaparTrackingHistoriesInput!): DeleteManyResponse!
  deleteManyCities(input: DeleteManyCitiesInput!): DeleteManyResponse!
  deleteManyCitiesSepidars(input: DeleteManyCitiesSepidarsInput!): DeleteManyResponse!
  deleteManyCity2s(input: DeleteManyCity2sInput!): DeleteManyResponse!
  deleteManyColorCategories(input: DeleteManyColorCategoriesInput!): DeleteManyResponse!
  deleteManyColorCategoryDetails(input: DeleteManyColorCategoryDetailsInput!): DeleteManyResponse!
  deleteManyColorCategorySubproducts(input: DeleteManyColorCategorySubproductsInput!): DeleteManyResponse!
  deleteManyColors(input: DeleteManyColorsInput!): DeleteManyResponse!
  deleteManyConfigs(input: DeleteManyConfigsInput!): DeleteManyResponse!
  deleteManyContactFormHistories(input: DeleteManyContactFormHistoriesInput!): DeleteManyResponse!
  deleteManyContactFormStatuses(input: DeleteManyContactFormStatusesInput!): DeleteManyResponse!
  deleteManyContactForms(input: DeleteManyContactFormsInput!): DeleteManyResponse!
  deleteManyCountries(input: DeleteManyCountriesInput!): DeleteManyResponse!
  deleteManyCouponSubjects(input: DeleteManyCouponSubjectsInput!): DeleteManyResponse!
  deleteManyCoupons(input: DeleteManyCouponsInput!): DeleteManyResponse!
  deleteManyCrmPresentations(input: DeleteManyCrmPresentationsInput!): DeleteManyResponse!
  deleteManyCustomerImageProducts(input: DeleteManyCustomerImageProductsInput!): DeleteManyResponse!
  deleteManyCustomerRequestFiles(input: DeleteManyCustomerRequestFilesInput!): DeleteManyResponse!
  deleteManyCustomerRequests(input: DeleteManyCustomerRequestsInput!): DeleteManyResponse!
  deleteManyCustomerVideoProducts(input: DeleteManyCustomerVideoProductsInput!): DeleteManyResponse!
  deleteManyDamageReasons(input: DeleteManyDamageReasonsInput!): DeleteManyResponse!
  deleteManyDepartments(input: DeleteManyDepartmentsInput!): DeleteManyResponse!
  deleteManyDesignersProductPriceRanges(input: DeleteManyDesignersProductPriceRangesInput!): DeleteManyResponse!
  deleteManyDesigns(input: DeleteManyDesignsInput!): DeleteManyResponse!
  deleteManyDiscountNotifications(input: DeleteManyDiscountNotificationsInput!): DeleteManyResponse!
  deleteManyDiscountSubjects(input: DeleteManyDiscountSubjectsInput!): DeleteManyResponse!
  deleteManyDiscounts(input: DeleteManyDiscountsInput!): DeleteManyResponse!
  deleteManyExitControlItems(input: DeleteManyExitControlItemsInput!): DeleteManyResponse!
  deleteManyExitControls(input: DeleteManyExitControlsInput!): DeleteManyResponse!
  deleteManyExportProducts(input: DeleteManyExportProductsInput!): DeleteManyResponse!
  deleteManyFailedJobs(input: DeleteManyFailedJobsInput!): DeleteManyResponse!
  deleteManyFavoriteProducts(input: DeleteManyFavoriteProductsInput!): DeleteManyResponse!
  deleteManyFedexAddressValidationAttributes(input: DeleteManyFedexAddressValidationAttributesInput!): DeleteManyResponse!
  deleteManyFetchSiteUrls(input: DeleteManyFetchSiteUrlsInput!): DeleteManyResponse!
  deleteManyFileNegotiations(input: DeleteManyFileNegotiationsInput!): DeleteManyResponse!
  deleteManyFiles(input: DeleteManyFilesInput!): DeleteManyResponse!
  deleteManyGhazals(input: DeleteManyGhazalsInput!): DeleteManyResponse!
  deleteManyGoogleFormUtms(input: DeleteManyGoogleFormUtmsInput!): DeleteManyResponse!
  deleteManyHeardAboutUsOptions(input: DeleteManyHeardAboutUsOptionsInput!): DeleteManyResponse!
  deleteManyHelpDesks(input: DeleteManyHelpDesksInput!): DeleteManyResponse!
  deleteManyHolidays(input: DeleteManyHolidaysInput!): DeleteManyResponse!
  deleteManyHomePageCustomerImages(input: DeleteManyHomePageCustomerImagesInput!): DeleteManyResponse!
  deleteManyHypers(input: DeleteManyHypersInput!): DeleteManyResponse!
  deleteManyHyperstarCodes(input: DeleteManyHyperstarCodesInput!): DeleteManyResponse!
  deleteManyImageLayers(input: DeleteManyImageLayersInput!): DeleteManyResponse!
  deleteManyImageProducts(input: DeleteManyImageProductsInput!): DeleteManyResponse!
  deleteManyImageSizes(input: DeleteManyImageSizesInput!): DeleteManyResponse!
  deleteManyImageSubproducts(input: DeleteManyImageSubproductsInput!): DeleteManyResponse!
  deleteManyImages(input: DeleteManyImagesInput!): DeleteManyResponse!
  deleteManyImagesSizeGuidesDetails(input: DeleteManyImagesSizeGuidesDetailsInput!): DeleteManyResponse!
  deleteManyImpersonateHistories(input: DeleteManyImpersonateHistoriesInput!): DeleteManyResponse!
  deleteManyIncredibleOfferSentNotifications(input: DeleteManyIncredibleOfferSentNotificationsInput!): DeleteManyResponse!
  deleteManyIncredibleOffers(input: DeleteManyIncredibleOffersInput!): DeleteManyResponse!
  deleteManyInstagramFeeds(input: DeleteManyInstagramFeedsInput!): DeleteManyResponse!
  deleteManyInvitationCodes(input: DeleteManyInvitationCodesInput!): DeleteManyResponse!
  deleteManyInvoiceAddressValidationResults(input: DeleteManyInvoiceAddressValidationResultsInput!): DeleteManyResponse!
  deleteManyInvoiceAddresses(input: DeleteManyInvoiceAddressesInput!): DeleteManyResponse!
  deleteManyInvoiceBankGatewayHistories(input: DeleteManyInvoiceBankGatewayHistoriesInput!): DeleteManyResponse!
  deleteManyInvoiceHistories(input: DeleteManyInvoiceHistoriesInput!): DeleteManyResponse!
  deleteManyInvoiceInvoiceStatuses(input: DeleteManyInvoiceInvoiceStatusesInput!): DeleteManyResponse!
  deleteManyInvoiceModes(input: DeleteManyInvoiceModesInput!): DeleteManyResponse!
  deleteManyInvoiceNegotiations(input: DeleteManyInvoiceNegotiationsInput!): DeleteManyResponse!
  deleteManyInvoicePaymentHistories(input: DeleteManyInvoicePaymentHistoriesInput!): DeleteManyResponse!
  deleteManyInvoicePaymentStatuses(input: DeleteManyInvoicePaymentStatusesInput!): DeleteManyResponse!
  deleteManyInvoicePaymentTypes(input: DeleteManyInvoicePaymentTypesInput!): DeleteManyResponse!
  deleteManyInvoicePayments(input: DeleteManyInvoicePaymentsInput!): DeleteManyResponse!
  deleteManyInvoiceProductHistories(input: DeleteManyInvoiceProductHistoriesInput!): DeleteManyResponse!
  deleteManyInvoiceProductItemInvoiceProductStatuses(input: DeleteManyInvoiceProductItemInvoiceProductStatusesInput!): DeleteManyResponse!
  deleteManyInvoiceProductItems(input: DeleteManyInvoiceProductItemsInput!): DeleteManyResponse!
  deleteManyInvoiceProductStatuses(input: DeleteManyInvoiceProductStatusesInput!): DeleteManyResponse!
  deleteManyInvoiceProducts(input: DeleteManyInvoiceProductsInput!): DeleteManyResponse!
  deleteManyInvoiceRatesResults(input: DeleteManyInvoiceRatesResultsInput!): DeleteManyResponse!
  deleteManyInvoiceReversalItems(input: DeleteManyInvoiceReversalItemsInput!): DeleteManyResponse!
  deleteManyInvoiceReversals(input: DeleteManyInvoiceReversalsInput!): DeleteManyResponse!
  deleteManyInvoiceShippingRates(input: DeleteManyInvoiceShippingRatesInput!): DeleteManyResponse!
  deleteManyInvoiceStatuses(input: DeleteManyInvoiceStatusesInput!): DeleteManyResponse!
  deleteManyInvoiceTypes(input: DeleteManyInvoiceTypesInput!): DeleteManyResponse!
  deleteManyInvoices(input: DeleteManyInvoicesInput!): DeleteManyResponse!
  deleteManyLabelProducts(input: DeleteManyLabelProductsInput!): DeleteManyResponse!
  deleteManyLabels(input: DeleteManyLabelsInput!): DeleteManyResponse!
  deleteManyMellatPaymentErrors(input: DeleteManyMellatPaymentErrorsInput!): DeleteManyResponse!
  deleteManyMigrations(input: DeleteManyMigrationsInput!): DeleteManyResponse!
  deleteManyModelHasPermissions(input: DeleteManyModelHasPermissionsInput!): DeleteManyResponse!
  deleteManyModelHasRoles(input: DeleteManyModelHasRolesInput!): DeleteManyResponse!
  deleteManyModelVisits(input: DeleteManyModelVisitsInput!): DeleteManyResponse!
  deleteManyModemaAcceleratorImages(input: DeleteManyModemaAcceleratorImagesInput!): DeleteManyResponse!
  deleteManyModemaAcceleratorVideos(input: DeleteManyModemaAcceleratorVideosInput!): DeleteManyResponse!
  deleteManyModemaAccelerators(input: DeleteManyModemaAcceleratorsInput!): DeleteManyResponse!
  deleteManyNeedsPhotographySubproducts(input: DeleteManyNeedsPhotographySubproductsInput!): DeleteManyResponse!
  deleteManyNegotiationHistories(input: DeleteManyNegotiationHistoriesInput!): DeleteManyResponse!
  deleteManyNegotiationStatuses(input: DeleteManyNegotiationStatusesInput!): DeleteManyResponse!
  deleteManyNegotiationSteps(input: DeleteManyNegotiationStepsInput!): DeleteManyResponse!
  deleteManyNegotiationTypes(input: DeleteManyNegotiationTypesInput!): DeleteManyResponse!
  deleteManyNegotiations(input: DeleteManyNegotiationsInput!): DeleteManyResponse!
  deleteManyNewBorders(input: DeleteManyNewBordersInput!): DeleteManyResponse!
  deleteManyOauthAccessTokens(input: DeleteManyOauthAccessTokensInput!): DeleteManyResponse!
  deleteManyOauthAuthCodes(input: DeleteManyOauthAuthCodesInput!): DeleteManyResponse!
  deleteManyOauthClients(input: DeleteManyOauthClientsInput!): DeleteManyResponse!
  deleteManyOauthPersonalAccessClients(input: DeleteManyOauthPersonalAccessClientsInput!): DeleteManyResponse!
  deleteManyOauthRefreshTokens(input: DeleteManyOauthRefreshTokensInput!): DeleteManyResponse!
  deleteManyOutOfStockButListedProducts(input: DeleteManyOutOfStockButListedProductsInput!): DeleteManyResponse!
  deleteManyPasswordResets(input: DeleteManyPasswordResetsInput!): DeleteManyResponse!
  deleteManyPatternCategories(input: DeleteManyPatternCategoriesInput!): DeleteManyResponse!
  deleteManyPatternLayers(input: DeleteManyPatternLayersInput!): DeleteManyResponse!
  deleteManyPatterns(input: DeleteManyPatternsInput!): DeleteManyResponse!
  deleteManyPaymentMethodFields(input: DeleteManyPaymentMethodFieldsInput!): DeleteManyResponse!
  deleteManyPaymentMethods(input: DeleteManyPaymentMethodsInput!): DeleteManyResponse!
  deleteManyPaymentRequestStatuses(input: DeleteManyPaymentRequestStatusesInput!): DeleteManyResponse!
  deleteManyPaymentRequests(input: DeleteManyPaymentRequestsInput!): DeleteManyResponse!
  deleteManyPermissionGroups(input: DeleteManyPermissionGroupsInput!): DeleteManyResponse!
  deleteManyPermissions(input: DeleteManyPermissionsInput!): DeleteManyResponse!
  deleteManyPreorderPreorderStatuses(input: DeleteManyPreorderPreorderStatusesInput!): DeleteManyResponse!
  deleteManyPreorderRegisters(input: DeleteManyPreorderRegistersInput!): DeleteManyResponse!
  deleteManyPreorderStatuses(input: DeleteManyPreorderStatusesInput!): DeleteManyResponse!
  deleteManyPreorders(input: DeleteManyPreordersInput!): DeleteManyResponse!
  deleteManyPriceGroupSizes(input: DeleteManyPriceGroupSizesInput!): DeleteManyResponse!
  deleteManyPriceGroups(input: DeleteManyPriceGroupsInput!): DeleteManyResponse!
  deleteManyPrintProfiles(input: DeleteManyPrintProfilesInput!): DeleteManyResponse!
  deleteManyPrintRips(input: DeleteManyPrintRipsInput!): DeleteManyResponse!
  deleteManyProductCategories(input: DeleteManyProductCategoriesInput!): DeleteManyResponse!
  deleteManyProductCategoryDetails(input: DeleteManyProductCategoryDetailsInput!): DeleteManyResponse!
  deleteManyProductCategoryRates(input: DeleteManyProductCategoryRatesInput!): DeleteManyResponse!
  deleteManyProductColorImages(input: DeleteManyProductColorImagesInput!): DeleteManyResponse!
  deleteManyProductColorSales(input: DeleteManyProductColorSalesInput!): DeleteManyResponse!
  deleteManyProductCommentLikes(input: DeleteManyProductCommentLikesInput!): DeleteManyResponse!
  deleteManyProductComments(input: DeleteManyProductCommentsInput!): DeleteManyResponse!
  deleteManyProductLikes(input: DeleteManyProductLikesInput!): DeleteManyResponse!
  deleteManyProductProductCategories(input: DeleteManyProductProductCategoriesInput!): DeleteManyResponse!
  deleteManyProductRateAverages(input: DeleteManyProductRateAveragesInput!): DeleteManyResponse!
  deleteManyProductRates(input: DeleteManyProductRatesInput!): DeleteManyResponse!
  deleteManyProductTags(input: DeleteManyProductTagsInput!): DeleteManyResponse!
  deleteManyProductVideos(input: DeleteManyProductVideosInput!): DeleteManyResponse!
  deleteManyProductionPadProductionPadStatuses(input: DeleteManyProductionPadProductionPadStatusesInput!): DeleteManyResponse!
  deleteManyProductionPadStatuses(input: DeleteManyProductionPadStatusesInput!): DeleteManyResponse!
  deleteManyProductionPads(input: DeleteManyProductionPadsInput!): DeleteManyResponse!
  deleteManyProductionReceiptTypes(input: DeleteManyProductionReceiptTypesInput!): DeleteManyResponse!
  deleteManyProductionRolls(input: DeleteManyProductionRollsInput!): DeleteManyResponse!
  deleteManyProducts(input: DeleteManyProductsInput!): DeleteManyResponse!
  deleteManyRates(input: DeleteManyRatesInput!): DeleteManyResponse!
  deleteManyReadyToSendProducts(input: DeleteManyReadyToSendProductsInput!): DeleteManyResponse!
  deleteManyRecommendedProducts(input: DeleteManyRecommendedProductsInput!): DeleteManyResponse!
  deleteManyRecommendedSubproducts(input: DeleteManyRecommendedSubproductsInput!): DeleteManyResponse!
  deleteManyRedisSavedKeys(input: DeleteManyRedisSavedKeysInput!): DeleteManyResponse!
  deleteManyRelatedProducts(input: DeleteManyRelatedProductsInput!): DeleteManyResponse!
  deleteManyRetargetingWalletCharges(input: DeleteManyRetargetingWalletChargesInput!): DeleteManyResponse!
  deleteManyReturnItemStatusReturnRequestItems(input: DeleteManyReturnItemStatusReturnRequestItemsInput!): DeleteManyResponse!
  deleteManyReturnItemStatuses(input: DeleteManyReturnItemStatusesInput!): DeleteManyResponse!
  deleteManyReturnReasons(input: DeleteManyReturnReasonsInput!): DeleteManyResponse!
  deleteManyReturnRequestAddresses(input: DeleteManyReturnRequestAddressesInput!): DeleteManyResponse!
  deleteManyReturnRequestHistories(input: DeleteManyReturnRequestHistoriesInput!): DeleteManyResponse!
  deleteManyReturnRequestItemHistories(input: DeleteManyReturnRequestItemHistoriesInput!): DeleteManyResponse!
  deleteManyReturnRequestItemImages(input: DeleteManyReturnRequestItemImagesInput!): DeleteManyResponse!
  deleteManyReturnRequestItemReturnItemStatuses(input: DeleteManyReturnRequestItemReturnItemStatusesInput!): DeleteManyResponse!
  deleteManyReturnRequestItemVideos(input: DeleteManyReturnRequestItemVideosInput!): DeleteManyResponse!
  deleteManyReturnRequestItems(input: DeleteManyReturnRequestItemsInput!): DeleteManyResponse!
  deleteManyReturnRequestReturnStatuses(input: DeleteManyReturnRequestReturnStatusesInput!): DeleteManyResponse!
  deleteManyReturnRequests(input: DeleteManyReturnRequestsInput!): DeleteManyResponse!
  deleteManyReturnStatuses(input: DeleteManyReturnStatusesInput!): DeleteManyResponse!
  deleteManyReturnTypes(input: DeleteManyReturnTypesInput!): DeleteManyResponse!
  deleteManyReturnedInvoiceProducts(input: DeleteManyReturnedInvoiceProductsInput!): DeleteManyResponse!
  deleteManyReturnedInvoices(input: DeleteManyReturnedInvoicesInput!): DeleteManyResponse!
  deleteManyRfmReports(input: DeleteManyRfmReportsInput!): DeleteManyResponse!
  deleteManyRipTemplateItems(input: DeleteManyRipTemplateItemsInput!): DeleteManyResponse!
  deleteManyRipTemplates(input: DeleteManyRipTemplatesInput!): DeleteManyResponse!
  deleteManyRoleDomains(input: DeleteManyRoleDomainsInput!): DeleteManyResponse!
  deleteManyRoleHasPermissions(input: DeleteManyRoleHasPermissionsInput!): DeleteManyResponse!
  deleteManyRussians(input: DeleteManyRussiansInput!): DeleteManyResponse!
  deleteManySenderInformations(input: DeleteManySenderInformationsInput!): DeleteManyResponse!
  deleteManyShippingServices(input: DeleteManyShippingServicesInput!): DeleteManyResponse!
  deleteManySitemapStaticPages(input: DeleteManySitemapStaticPagesInput!): DeleteManyResponse!
  deleteManySizeGuides(input: DeleteManySizeGuidesInput!): DeleteManyResponse!
  deleteManySizeGuidesDetails(input: DeleteManySizeGuidesDetailsInput!): DeleteManyResponse!
  deleteManySocialFacebookAccounts(input: DeleteManySocialFacebookAccountsInput!): DeleteManyResponse!
  deleteManySocialGoogleAccounts(input: DeleteManySocialGoogleAccountsInput!): DeleteManyResponse!
  deleteManySpecialOffers(input: DeleteManySpecialOffersInput!): DeleteManyResponse!
  deleteManyStates(input: DeleteManyStatesInput!): DeleteManyResponse!
  deleteManySubcolors(input: DeleteManySubcolorsInput!): DeleteManyResponse!
  deleteManySubproductSpecialImages(input: DeleteManySubproductSpecialImagesInput!): DeleteManyResponse!
  deleteManySubproductStockHistories(input: DeleteManySubproductStockHistoriesInput!): DeleteManyResponse!
  deleteManySubproductVideos(input: DeleteManySubproductVideosInput!): DeleteManyResponse!
  deleteManySubproducts(input: DeleteManySubproductsInput!): DeleteManyResponse!
  deleteManySubscribers(input: DeleteManySubscribersInput!): DeleteManyResponse!
  deleteManyTags(input: DeleteManyTagsInput!): DeleteManyResponse!
  deleteManyTempSubproductDiscounts(input: DeleteManyTempSubproductDiscountsInput!): DeleteManyResponse!
  deleteManyTestimonials(input: DeleteManyTestimonialsInput!): DeleteManyResponse!
  deleteManyTextLayers(input: DeleteManyTextLayersInput!): DeleteManyResponse!
  deleteManyTmpRfmReports(input: DeleteManyTmpRfmReportsInput!): DeleteManyResponse!
  deleteManyTmpRussiaProducts(input: DeleteManyTmpRussiaProductsInput!): DeleteManyResponse!
  deleteManyTmpSpainOrders(input: DeleteManyTmpSpainOrdersInput!): DeleteManyResponse!
  deleteManyTmpSpanishNames(input: DeleteManyTmpSpanishNamesInput!): DeleteManyResponse!
  deleteManyTmpTagChangesPrints(input: DeleteManyTmpTagChangesPrintsInput!): DeleteManyResponse!
  deleteManyTorobProducts(input: DeleteManyTorobProductsInput!): DeleteManyResponse!
  deleteManyTransactions(input: DeleteManyTransactionsInput!): DeleteManyResponse!
  deleteManyUserCarts(input: DeleteManyUserCartsInput!): DeleteManyResponse!
  deleteManyUserHasPermissions(input: DeleteManyUserHasPermissionsInput!): DeleteManyResponse!
  deleteManyUserHasRoles(input: DeleteManyUserHasRolesInput!): DeleteManyResponse!
  deleteManyUserUtms(input: DeleteManyUserUtmsInput!): DeleteManyResponse!
  deleteManyUsers(input: DeleteManyUsersInput!): DeleteManyResponse!
  deleteManyUtmGoogleFormCoupons(input: DeleteManyUtmGoogleFormCouponsInput!): DeleteManyResponse!
  deleteManyUtms(input: DeleteManyUtmsInput!): DeleteManyResponse!
  deleteManyVerifyUsers(input: DeleteManyVerifyUsersInput!): DeleteManyResponse!
  deleteManyVideos(input: DeleteManyVideosInput!): DeleteManyResponse!
  deleteManyVisitorCoupons(input: DeleteManyVisitorCouponsInput!): DeleteManyResponse!
  deleteManyVisitorGroupRates(input: DeleteManyVisitorGroupRatesInput!): DeleteManyResponse!
  deleteManyVisitorGroups(input: DeleteManyVisitorGroupsInput!): DeleteManyResponse!
  deleteManyVisitorSales(input: DeleteManyVisitorSalesInput!): DeleteManyResponse!
  deleteManyVisitors(input: DeleteManyVisitorsInput!): DeleteManyResponse!
  deleteManyWalletGiftCharges(input: DeleteManyWalletGiftChargesInput!): DeleteManyResponse!
  deleteManyWalletHistories(input: DeleteManyWalletHistoriesInput!): DeleteManyResponse!
  deleteManyWallets(input: DeleteManyWalletsInput!): DeleteManyResponse!
  deleteManyWebsitePages(input: DeleteManyWebsitePagesInput!): DeleteManyResponse!
  deleteManyWebsiteVisits(input: DeleteManyWebsiteVisitsInput!): DeleteManyResponse!
  deleteManyWithdrawalRequestStatuses(input: DeleteManyWithdrawalRequestStatusesInput!): DeleteManyResponse!
  deleteManyWithdrawalRequests(input: DeleteManyWithdrawalRequestsInput!): DeleteManyResponse!
  deleteManyWonderfulOffers(input: DeleteManyWonderfulOffersInput!): DeleteManyResponse!
  deleteOneActivity(input: DeleteOneActivityInput!): ActivityDeleteResponse!
  deleteOneAddress(input: DeleteOneAddressInput!): AddressDeleteResponse!
  deleteOneAttribute(input: DeleteOneAttributeInput!): AttributeDeleteResponse!
  deleteOneAttributeAttributeGroup(input: DeleteOneAttributeAttributeGroupInput!): AttributeAttributeGroupDeleteResponse!
  deleteOneAttributeGroup(input: DeleteOneAttributeGroupInput!): AttributeGroupDeleteResponse!
  deleteOneAttributeItem(input: DeleteOneAttributeItemInput!): AttributeItemDeleteResponse!
  deleteOneAttributeProduct(input: DeleteOneAttributeProductInput!): AttributeProductDeleteResponse!
  deleteOneAttributeSubproduct(input: DeleteOneAttributeSubproductInput!): AttributeSubproductDeleteResponse!
  deleteOneAutomationEvent(input: DeleteOneAutomationEventInput!): AutomationEventDeleteResponse!
  deleteOneAutomationRfmScore(input: DeleteOneAutomationRfmScoreInput!): AutomationRfmScoreDeleteResponse!
  deleteOneBasicCarpetBorder(input: DeleteOneBasicCarpetBorderInput!): BasicCarpetBorderDeleteResponse!
  deleteOneBasicCarpetBrand(input: DeleteOneBasicCarpetBrandInput!): BasicCarpetBrandDeleteResponse!
  deleteOneBasicCarpetColor(input: DeleteOneBasicCarpetColorInput!): BasicCarpetColorDeleteResponse!
  deleteOneBasicCarpetDesign(input: DeleteOneBasicCarpetDesignInput!): BasicCarpetDesignDeleteResponse!
  deleteOneBasicCarpetDesigner(input: DeleteOneBasicCarpetDesignerInput!): BasicCarpetDesignerDeleteResponse!
  deleteOneBasicCarpetMaterial(input: DeleteOneBasicCarpetMaterialInput!): BasicCarpetMaterialDeleteResponse!
  deleteOneBasicCarpetSize(input: DeleteOneBasicCarpetSizeInput!): BasicCarpetSizeDeleteResponse!
  deleteOneBasicCarpetSizeDetail(input: DeleteOneBasicCarpetSizeDetailInput!): BasicCarpetSizeDetailDeleteResponse!
  deleteOneBasicCarpetType(input: DeleteOneBasicCarpetTypeInput!): BasicCarpetTypeDeleteResponse!
  deleteOneBorder(input: DeleteOneBorderInput!): BorderDeleteResponse!
  deleteOneCampaignFreeOffer(input: DeleteOneCampaignFreeOfferInput!): CampaignFreeOfferDeleteResponse!
  deleteOneCampaignFreeOfferSize(input: DeleteOneCampaignFreeOfferSizeInput!): CampaignFreeOfferSizeDeleteResponse!
  deleteOneCampaignGoldCoinSub(input: DeleteOneCampaignGoldCoinSubInput!): CampaignGoldCoinSubDeleteResponse!
  deleteOneCampaignInstagramFollow(input: DeleteOneCampaignInstagramFollowInput!): CampaignInstagramFollowDeleteResponse!
  deleteOneCampaignPetForm(input: DeleteOneCampaignPetFormInput!): CampaignPetFormDeleteResponse!
  deleteOneCampaignRoomvoImage(input: DeleteOneCampaignRoomvoImageInput!): CampaignRoomvoImageDeleteResponse!
  deleteOneCampaignRoomvoVote(input: DeleteOneCampaignRoomvoVoteInput!): CampaignRoomvoVoteDeleteResponse!
  deleteOneCampaignSubscription(input: DeleteOneCampaignSubscriptionInput!): CampaignSubscriptionDeleteResponse!
  deleteOneCampaignUefaEuroSubscriber(input: DeleteOneCampaignUefaEuroSubscriberInput!): CampaignUefaEuroSubscriberDeleteResponse!
  deleteOneCampaignUefaEuroSubscriberHistory(input: DeleteOneCampaignUefaEuroSubscriberHistoryInput!): CampaignUefaEuroSubscriberHistoryDeleteResponse!
  deleteOneCampaignVotingImage(input: DeleteOneCampaignVotingImageInput!): CampaignVotingImageDeleteResponse!
  deleteOneCampaignVotingImageUser(input: DeleteOneCampaignVotingImageUserInput!): CampaignVotingImageUserDeleteResponse!
  deleteOneCarpetFeature(input: DeleteOneCarpetFeatureInput!): CarpetFeatureDeleteResponse!
  deleteOneCarpetFeatureUser(input: DeleteOneCarpetFeatureUserInput!): CarpetFeatureUserDeleteResponse!
  deleteOneCarpetMaterial(input: DeleteOneCarpetMaterialInput!): CarpetMaterialDeleteResponse!
  deleteOneCarpetShape(input: DeleteOneCarpetShapeInput!): CarpetShapeDeleteResponse!
  deleteOneCarpetSize(input: DeleteOneCarpetSizeInput!): CarpetSizeDeleteResponse!
  deleteOneCarpetUsagePlace(input: DeleteOneCarpetUsagePlaceInput!): CarpetUsagePlaceDeleteResponse!
  deleteOneCarpetUsagePlaceInvoiceProduct(input: DeleteOneCarpetUsagePlaceInvoiceProductInput!): CarpetUsagePlaceInvoiceProductDeleteResponse!
  deleteOneCarpetUsagePlaceUser(input: DeleteOneCarpetUsagePlaceUserInput!): CarpetUsagePlaceUserDeleteResponse!
  deleteOneChaparSettlementStatus(input: DeleteOneChaparSettlementStatusInput!): ChaparSettlementStatusDeleteResponse!
  deleteOneChaparTrackingHistory(input: DeleteOneChaparTrackingHistoryInput!): ChaparTrackingHistoryDeleteResponse!
  deleteOneCitiesSepidar(input: DeleteOneCitiesSepidarInput!): CitiesSepidarDeleteResponse!
  deleteOneCity(input: DeleteOneCityInput!): CityDeleteResponse!
  deleteOneCity2(input: DeleteOneCity2Input!): City2DeleteResponse!
  deleteOneColor(input: DeleteOneColorInput!): ColorDeleteResponse!
  deleteOneColorCategory(input: DeleteOneColorCategoryInput!): ColorCategoryDeleteResponse!
  deleteOneColorCategoryDetail(input: DeleteOneColorCategoryDetailInput!): ColorCategoryDetailDeleteResponse!
  deleteOneColorCategorySubproduct(input: DeleteOneColorCategorySubproductInput!): ColorCategorySubproductDeleteResponse!
  deleteOneConfig(input: DeleteOneConfigInput!): ConfigDeleteResponse!
  deleteOneContactForm(input: DeleteOneContactFormInput!): ContactFormDeleteResponse!
  deleteOneContactFormHistory(input: DeleteOneContactFormHistoryInput!): ContactFormHistoryDeleteResponse!
  deleteOneContactFormStatus(input: DeleteOneContactFormStatusInput!): ContactFormStatusDeleteResponse!
  deleteOneCountry(input: DeleteOneCountryInput!): CountryDeleteResponse!
  deleteOneCoupon(input: DeleteOneCouponInput!): CouponDeleteResponse!
  deleteOneCouponSubject(input: DeleteOneCouponSubjectInput!): CouponSubjectDeleteResponse!
  deleteOneCrmPresentation(input: DeleteOneCrmPresentationInput!): CrmPresentationDeleteResponse!
  deleteOneCustomerImageProduct(input: DeleteOneCustomerImageProductInput!): CustomerImageProductDeleteResponse!
  deleteOneCustomerRequest(input: DeleteOneCustomerRequestInput!): CustomerRequestDeleteResponse!
  deleteOneCustomerRequestFile(input: DeleteOneCustomerRequestFileInput!): CustomerRequestFileDeleteResponse!
  deleteOneCustomerVideoProduct(input: DeleteOneCustomerVideoProductInput!): CustomerVideoProductDeleteResponse!
  deleteOneDamageReason(input: DeleteOneDamageReasonInput!): DamageReasonDeleteResponse!
  deleteOneDepartment(input: DeleteOneDepartmentInput!): DepartmentDeleteResponse!
  deleteOneDesign(input: DeleteOneDesignInput!): DesignDeleteResponse!
  deleteOneDesignersProductPriceRange(input: DeleteOneDesignersProductPriceRangeInput!): DesignersProductPriceRangeDeleteResponse!
  deleteOneDiscount(input: DeleteOneDiscountInput!): DiscountDeleteResponse!
  deleteOneDiscountNotification(input: DeleteOneDiscountNotificationInput!): DiscountNotificationDeleteResponse!
  deleteOneDiscountSubject(input: DeleteOneDiscountSubjectInput!): DiscountSubjectDeleteResponse!
  deleteOneExitControl(input: DeleteOneExitControlInput!): ExitControlDeleteResponse!
  deleteOneExitControlItem(input: DeleteOneExitControlItemInput!): ExitControlItemDeleteResponse!
  deleteOneExportProduct(input: DeleteOneExportProductInput!): ExportProductDeleteResponse!
  deleteOneFailedJob(input: DeleteOneFailedJobInput!): FailedJobDeleteResponse!
  deleteOneFavoriteProduct(input: DeleteOneFavoriteProductInput!): FavoriteProductDeleteResponse!
  deleteOneFedexAddressValidationAttribute(input: DeleteOneFedexAddressValidationAttributeInput!): FedexAddressValidationAttributeDeleteResponse!
  deleteOneFetchSiteUrl(input: DeleteOneFetchSiteUrlInput!): FetchSiteUrlDeleteResponse!
  deleteOneFile(input: DeleteOneFileInput!): FileDeleteResponse!
  deleteOneFileNegotiation(input: DeleteOneFileNegotiationInput!): FileNegotiationDeleteResponse!
  deleteOneGhazal(input: DeleteOneGhazalInput!): GhazalDeleteResponse!
  deleteOneGoogleFormUtm(input: DeleteOneGoogleFormUtmInput!): GoogleFormUtmDeleteResponse!
  deleteOneHeardAboutUsOption(input: DeleteOneHeardAboutUsOptionInput!): HeardAboutUsOptionDeleteResponse!
  deleteOneHelpDesk(input: DeleteOneHelpDeskInput!): HelpDeskDeleteResponse!
  deleteOneHoliday(input: DeleteOneHolidayInput!): HolidayDeleteResponse!
  deleteOneHomePageCustomerImage(input: DeleteOneHomePageCustomerImageInput!): HomePageCustomerImageDeleteResponse!
  deleteOneHyper(input: DeleteOneHyperInput!): HyperDeleteResponse!
  deleteOneHyperstarCode(input: DeleteOneHyperstarCodeInput!): HyperstarCodeDeleteResponse!
  deleteOneImage(input: DeleteOneImageInput!): ImageDeleteResponse!
  deleteOneImageLayer(input: DeleteOneImageLayerInput!): ImageLayerDeleteResponse!
  deleteOneImageProduct(input: DeleteOneImageProductInput!): ImageProductDeleteResponse!
  deleteOneImageSize(input: DeleteOneImageSizeInput!): ImageSizeDeleteResponse!
  deleteOneImageSubproduct(input: DeleteOneImageSubproductInput!): ImageSubproductDeleteResponse!
  deleteOneImagesSizeGuidesDetail(input: DeleteOneImagesSizeGuidesDetailInput!): ImagesSizeGuidesDetailDeleteResponse!
  deleteOneImpersonateHistory(input: DeleteOneImpersonateHistoryInput!): ImpersonateHistoryDeleteResponse!
  deleteOneIncredibleOffer(input: DeleteOneIncredibleOfferInput!): IncredibleOfferDeleteResponse!
  deleteOneIncredibleOfferSentNotification(input: DeleteOneIncredibleOfferSentNotificationInput!): IncredibleOfferSentNotificationDeleteResponse!
  deleteOneInstagramFeed(input: DeleteOneInstagramFeedInput!): InstagramFeedDeleteResponse!
  deleteOneInvitationCode(input: DeleteOneInvitationCodeInput!): InvitationCodeDeleteResponse!
  deleteOneInvoice(input: DeleteOneInvoiceInput!): InvoiceDeleteResponse!
  deleteOneInvoiceAddress(input: DeleteOneInvoiceAddressInput!): InvoiceAddressDeleteResponse!
  deleteOneInvoiceAddressValidationResult(input: DeleteOneInvoiceAddressValidationResultInput!): InvoiceAddressValidationResultDeleteResponse!
  deleteOneInvoiceBankGatewayHistory(input: DeleteOneInvoiceBankGatewayHistoryInput!): InvoiceBankGatewayHistoryDeleteResponse!
  deleteOneInvoiceHistory(input: DeleteOneInvoiceHistoryInput!): InvoiceHistoryDeleteResponse!
  deleteOneInvoiceInvoiceStatus(input: DeleteOneInvoiceInvoiceStatusInput!): InvoiceInvoiceStatusDeleteResponse!
  deleteOneInvoiceMode(input: DeleteOneInvoiceModeInput!): InvoiceModeDeleteResponse!
  deleteOneInvoiceNegotiation(input: DeleteOneInvoiceNegotiationInput!): InvoiceNegotiationDeleteResponse!
  deleteOneInvoicePayment(input: DeleteOneInvoicePaymentInput!): InvoicePaymentDeleteResponse!
  deleteOneInvoicePaymentHistory(input: DeleteOneInvoicePaymentHistoryInput!): InvoicePaymentHistoryDeleteResponse!
  deleteOneInvoicePaymentStatus(input: DeleteOneInvoicePaymentStatusInput!): InvoicePaymentStatusDeleteResponse!
  deleteOneInvoicePaymentType(input: DeleteOneInvoicePaymentTypeInput!): InvoicePaymentTypeDeleteResponse!
  deleteOneInvoiceProduct(input: DeleteOneInvoiceProductInput!): InvoiceProductDeleteResponse!
  deleteOneInvoiceProductHistory(input: DeleteOneInvoiceProductHistoryInput!): InvoiceProductHistoryDeleteResponse!
  deleteOneInvoiceProductItem(input: DeleteOneInvoiceProductItemInput!): InvoiceProductItemDeleteResponse!
  deleteOneInvoiceProductItemInvoiceProductStatus(input: DeleteOneInvoiceProductItemInvoiceProductStatusInput!): InvoiceProductItemInvoiceProductStatusDeleteResponse!
  deleteOneInvoiceProductStatus(input: DeleteOneInvoiceProductStatusInput!): InvoiceProductStatusDeleteResponse!
  deleteOneInvoiceRatesResult(input: DeleteOneInvoiceRatesResultInput!): InvoiceRatesResultDeleteResponse!
  deleteOneInvoiceReversal(input: DeleteOneInvoiceReversalInput!): InvoiceReversalDeleteResponse!
  deleteOneInvoiceReversalItem(input: DeleteOneInvoiceReversalItemInput!): InvoiceReversalItemDeleteResponse!
  deleteOneInvoiceShippingRate(input: DeleteOneInvoiceShippingRateInput!): InvoiceShippingRateDeleteResponse!
  deleteOneInvoiceStatus(input: DeleteOneInvoiceStatusInput!): InvoiceStatusDeleteResponse!
  deleteOneInvoiceType(input: DeleteOneInvoiceTypeInput!): InvoiceTypeDeleteResponse!
  deleteOneLabel(input: DeleteOneLabelInput!): LabelDeleteResponse!
  deleteOneLabelProduct(input: DeleteOneLabelProductInput!): LabelProductDeleteResponse!
  deleteOneMellatPaymentError(input: DeleteOneMellatPaymentErrorInput!): MellatPaymentErrorDeleteResponse!
  deleteOneMigration(input: DeleteOneMigrationInput!): MigrationDeleteResponse!
  deleteOneModelHasPermission(input: DeleteOneModelHasPermissionInput!): ModelHasPermissionDeleteResponse!
  deleteOneModelHasRole(input: DeleteOneModelHasRoleInput!): ModelHasRoleDeleteResponse!
  deleteOneModelVisit(input: DeleteOneModelVisitInput!): ModelVisitDeleteResponse!
  deleteOneModemaAccelerator(input: DeleteOneModemaAcceleratorInput!): ModemaAcceleratorDeleteResponse!
  deleteOneModemaAcceleratorImage(input: DeleteOneModemaAcceleratorImageInput!): ModemaAcceleratorImageDeleteResponse!
  deleteOneModemaAcceleratorVideo(input: DeleteOneModemaAcceleratorVideoInput!): ModemaAcceleratorVideoDeleteResponse!
  deleteOneNeedsPhotographySubproduct(input: DeleteOneNeedsPhotographySubproductInput!): NeedsPhotographySubproductDeleteResponse!
  deleteOneNegotiation(input: DeleteOneNegotiationInput!): NegotiationDeleteResponse!
  deleteOneNegotiationHistory(input: DeleteOneNegotiationHistoryInput!): NegotiationHistoryDeleteResponse!
  deleteOneNegotiationStatus(input: DeleteOneNegotiationStatusInput!): NegotiationStatusDeleteResponse!
  deleteOneNegotiationStep(input: DeleteOneNegotiationStepInput!): NegotiationStepDeleteResponse!
  deleteOneNegotiationType(input: DeleteOneNegotiationTypeInput!): NegotiationTypeDeleteResponse!
  deleteOneNewBorder(input: DeleteOneNewBorderInput!): NewBorderDeleteResponse!
  deleteOneOauthAccessToken(input: DeleteOneOauthAccessTokenInput!): OauthAccessTokenDeleteResponse!
  deleteOneOauthAuthCode(input: DeleteOneOauthAuthCodeInput!): OauthAuthCodeDeleteResponse!
  deleteOneOauthClient(input: DeleteOneOauthClientInput!): OauthClientDeleteResponse!
  deleteOneOauthPersonalAccessClient(input: DeleteOneOauthPersonalAccessClientInput!): OauthPersonalAccessClientDeleteResponse!
  deleteOneOauthRefreshToken(input: DeleteOneOauthRefreshTokenInput!): OauthRefreshTokenDeleteResponse!
  deleteOneOutOfStockButListedProduct(input: DeleteOneOutOfStockButListedProductInput!): OutOfStockButListedProductDeleteResponse!
  deleteOnePasswordReset(input: DeleteOnePasswordResetInput!): PasswordResetDeleteResponse!
  deleteOnePattern(input: DeleteOnePatternInput!): PatternDeleteResponse!
  deleteOnePatternCategory(input: DeleteOnePatternCategoryInput!): PatternCategoryDeleteResponse!
  deleteOnePatternLayer(input: DeleteOnePatternLayerInput!): PatternLayerDeleteResponse!
  deleteOnePaymentMethod(input: DeleteOnePaymentMethodInput!): PaymentMethodDeleteResponse!
  deleteOnePaymentMethodField(input: DeleteOnePaymentMethodFieldInput!): PaymentMethodFieldDeleteResponse!
  deleteOnePaymentRequest(input: DeleteOnePaymentRequestInput!): PaymentRequestDeleteResponse!
  deleteOnePaymentRequestStatus(input: DeleteOnePaymentRequestStatusInput!): PaymentRequestStatusDeleteResponse!
  deleteOnePermission(input: DeleteOnePermissionInput!): PermissionDeleteResponse!
  deleteOnePermissionGroup(input: DeleteOnePermissionGroupInput!): PermissionGroupDeleteResponse!
  deleteOnePreorder(input: DeleteOnePreorderInput!): PreorderDeleteResponse!
  deleteOnePreorderPreorderStatus(input: DeleteOnePreorderPreorderStatusInput!): PreorderPreorderStatusDeleteResponse!
  deleteOnePreorderRegister(input: DeleteOnePreorderRegisterInput!): PreorderRegisterDeleteResponse!
  deleteOnePreorderStatus(input: DeleteOnePreorderStatusInput!): PreorderStatusDeleteResponse!
  deleteOnePriceGroup(input: DeleteOnePriceGroupInput!): PriceGroupDeleteResponse!
  deleteOnePriceGroupSize(input: DeleteOnePriceGroupSizeInput!): PriceGroupSizeDeleteResponse!
  deleteOnePrintProfile(input: DeleteOnePrintProfileInput!): PrintProfileDeleteResponse!
  deleteOnePrintRip(input: DeleteOnePrintRipInput!): PrintRipDeleteResponse!
  deleteOneProduct(input: DeleteOneProductInput!): ProductDeleteResponse!
  deleteOneProductCategory(input: DeleteOneProductCategoryInput!): ProductCategoryDeleteResponse!
  deleteOneProductCategoryDetail(input: DeleteOneProductCategoryDetailInput!): ProductCategoryDetailDeleteResponse!
  deleteOneProductCategoryRate(input: DeleteOneProductCategoryRateInput!): ProductCategoryRateDeleteResponse!
  deleteOneProductColorImage(input: DeleteOneProductColorImageInput!): ProductColorImageDeleteResponse!
  deleteOneProductColorSale(input: DeleteOneProductColorSaleInput!): ProductColorSaleDeleteResponse!
  deleteOneProductComment(input: DeleteOneProductCommentInput!): ProductCommentDeleteResponse!
  deleteOneProductCommentLike(input: DeleteOneProductCommentLikeInput!): ProductCommentLikeDeleteResponse!
  deleteOneProductLike(input: DeleteOneProductLikeInput!): ProductLikeDeleteResponse!
  deleteOneProductProductCategory(input: DeleteOneProductProductCategoryInput!): ProductProductCategoryDeleteResponse!
  deleteOneProductRate(input: DeleteOneProductRateInput!): ProductRateDeleteResponse!
  deleteOneProductRateAverage(input: DeleteOneProductRateAverageInput!): ProductRateAverageDeleteResponse!
  deleteOneProductTag(input: DeleteOneProductTagInput!): ProductTagDeleteResponse!
  deleteOneProductVideo(input: DeleteOneProductVideoInput!): ProductVideoDeleteResponse!
  deleteOneProductionPad(input: DeleteOneProductionPadInput!): ProductionPadDeleteResponse!
  deleteOneProductionPadProductionPadStatus(input: DeleteOneProductionPadProductionPadStatusInput!): ProductionPadProductionPadStatusDeleteResponse!
  deleteOneProductionPadStatus(input: DeleteOneProductionPadStatusInput!): ProductionPadStatusDeleteResponse!
  deleteOneProductionReceiptType(input: DeleteOneProductionReceiptTypeInput!): ProductionReceiptTypeDeleteResponse!
  deleteOneProductionRoll(input: DeleteOneProductionRollInput!): ProductionRollDeleteResponse!
  deleteOneRate(input: DeleteOneRateInput!): RateDeleteResponse!
  deleteOneReadyToSendProduct(input: DeleteOneReadyToSendProductInput!): ReadyToSendProductDeleteResponse!
  deleteOneRecommendedProduct(input: DeleteOneRecommendedProductInput!): RecommendedProductDeleteResponse!
  deleteOneRecommendedSubproduct(input: DeleteOneRecommendedSubproductInput!): RecommendedSubproductDeleteResponse!
  deleteOneRedisSavedKey(input: DeleteOneRedisSavedKeyInput!): RedisSavedKeyDeleteResponse!
  deleteOneRelatedProduct(input: DeleteOneRelatedProductInput!): RelatedProductDeleteResponse!
  deleteOneRetargetingWalletCharge(input: DeleteOneRetargetingWalletChargeInput!): RetargetingWalletChargeDeleteResponse!
  deleteOneReturnItemStatus(input: DeleteOneReturnItemStatusInput!): ReturnItemStatusDeleteResponse!
  deleteOneReturnItemStatusReturnRequestItem(input: DeleteOneReturnItemStatusReturnRequestItemInput!): ReturnItemStatusReturnRequestItemDeleteResponse!
  deleteOneReturnReason(input: DeleteOneReturnReasonInput!): ReturnReasonDeleteResponse!
  deleteOneReturnRequest(input: DeleteOneReturnRequestInput!): ReturnRequestDeleteResponse!
  deleteOneReturnRequestAddress(input: DeleteOneReturnRequestAddressInput!): ReturnRequestAddressDeleteResponse!
  deleteOneReturnRequestHistory(input: DeleteOneReturnRequestHistoryInput!): ReturnRequestHistoryDeleteResponse!
  deleteOneReturnRequestItem(input: DeleteOneReturnRequestItemInput!): ReturnRequestItemDeleteResponse!
  deleteOneReturnRequestItemHistory(input: DeleteOneReturnRequestItemHistoryInput!): ReturnRequestItemHistoryDeleteResponse!
  deleteOneReturnRequestItemImage(input: DeleteOneReturnRequestItemImageInput!): ReturnRequestItemImageDeleteResponse!
  deleteOneReturnRequestItemReturnItemStatus(input: DeleteOneReturnRequestItemReturnItemStatusInput!): ReturnRequestItemReturnItemStatusDeleteResponse!
  deleteOneReturnRequestItemVideo(input: DeleteOneReturnRequestItemVideoInput!): ReturnRequestItemVideoDeleteResponse!
  deleteOneReturnRequestReturnStatus(input: DeleteOneReturnRequestReturnStatusInput!): ReturnRequestReturnStatusDeleteResponse!
  deleteOneReturnStatus(input: DeleteOneReturnStatusInput!): ReturnStatusDeleteResponse!
  deleteOneReturnType(input: DeleteOneReturnTypeInput!): ReturnTypeDeleteResponse!
  deleteOneReturnedInvoice(input: DeleteOneReturnedInvoiceInput!): ReturnedInvoiceDeleteResponse!
  deleteOneReturnedInvoiceProduct(input: DeleteOneReturnedInvoiceProductInput!): ReturnedInvoiceProductDeleteResponse!
  deleteOneRfmReport(input: DeleteOneRfmReportInput!): RfmReportDeleteResponse!
  deleteOneRipTemplate(input: DeleteOneRipTemplateInput!): RipTemplateDeleteResponse!
  deleteOneRipTemplateItem(input: DeleteOneRipTemplateItemInput!): RipTemplateItemDeleteResponse!
  deleteOneRoleDomain(input: DeleteOneRoleDomainInput!): RoleDomainDeleteResponse!
  deleteOneRoleHasPermission(input: DeleteOneRoleHasPermissionInput!): RoleHasPermissionDeleteResponse!
  deleteOneRussian(input: DeleteOneRussianInput!): RussianDeleteResponse!
  deleteOneSenderInformation(input: DeleteOneSenderInformationInput!): SenderInformationDeleteResponse!
  deleteOneShippingService(input: DeleteOneShippingServiceInput!): ShippingServiceDeleteResponse!
  deleteOneSitemapStaticPage(input: DeleteOneSitemapStaticPageInput!): SitemapStaticPageDeleteResponse!
  deleteOneSizeGuide(input: DeleteOneSizeGuideInput!): SizeGuideDeleteResponse!
  deleteOneSizeGuidesDetail(input: DeleteOneSizeGuidesDetailInput!): SizeGuidesDetailDeleteResponse!
  deleteOneSocialFacebookAccount(input: DeleteOneSocialFacebookAccountInput!): SocialFacebookAccountDeleteResponse!
  deleteOneSocialGoogleAccount(input: DeleteOneSocialGoogleAccountInput!): SocialGoogleAccountDeleteResponse!
  deleteOneSpecialOffer(input: DeleteOneSpecialOfferInput!): SpecialOfferDeleteResponse!
  deleteOneState(input: DeleteOneStateInput!): StateDeleteResponse!
  deleteOneSubcolor(input: DeleteOneSubcolorInput!): SubcolorDeleteResponse!
  deleteOneSubproduct(input: DeleteOneSubproductInput!): SubproductDeleteResponse!
  deleteOneSubproductSpecialImage(input: DeleteOneSubproductSpecialImageInput!): SubproductSpecialImageDeleteResponse!
  deleteOneSubproductStockHistory(input: DeleteOneSubproductStockHistoryInput!): SubproductStockHistoryDeleteResponse!
  deleteOneSubproductVideo(input: DeleteOneSubproductVideoInput!): SubproductVideoDeleteResponse!
  deleteOneSubscriber(input: DeleteOneSubscriberInput!): SubscriberDeleteResponse!
  deleteOneTag(input: DeleteOneTagInput!): TagDeleteResponse!
  deleteOneTempSubproductDiscount(input: DeleteOneTempSubproductDiscountInput!): TempSubproductDiscountDeleteResponse!
  deleteOneTestimonial(input: DeleteOneTestimonialInput!): TestimonialDeleteResponse!
  deleteOneTextLayer(input: DeleteOneTextLayerInput!): TextLayerDeleteResponse!
  deleteOneTmpRfmReport(input: DeleteOneTmpRfmReportInput!): TmpRfmReportDeleteResponse!
  deleteOneTmpRussiaProduct(input: DeleteOneTmpRussiaProductInput!): TmpRussiaProductDeleteResponse!
  deleteOneTmpSpainOrder(input: DeleteOneTmpSpainOrderInput!): TmpSpainOrderDeleteResponse!
  deleteOneTmpSpanishName(input: DeleteOneTmpSpanishNameInput!): TmpSpanishNameDeleteResponse!
  deleteOneTmpTagChangesPrint(input: DeleteOneTmpTagChangesPrintInput!): TmpTagChangesPrintDeleteResponse!
  deleteOneTorobProduct(input: DeleteOneTorobProductInput!): TorobProductDeleteResponse!
  deleteOneTransaction(input: DeleteOneTransactionInput!): TransactionDeleteResponse!
  deleteOneUser(input: DeleteOneUserInput!): UserDeleteResponse!
  deleteOneUserCart(input: DeleteOneUserCartInput!): UserCartDeleteResponse!
  deleteOneUserHasPermission(input: DeleteOneUserHasPermissionInput!): UserHasPermissionDeleteResponse!
  deleteOneUserHasRole(input: DeleteOneUserHasRoleInput!): UserHasRoleDeleteResponse!
  deleteOneUserUtm(input: DeleteOneUserUtmInput!): UserUtmDeleteResponse!
  deleteOneUtm(input: DeleteOneUtmInput!): UtmDeleteResponse!
  deleteOneUtmGoogleFormCoupon(input: DeleteOneUtmGoogleFormCouponInput!): UtmGoogleFormCouponDeleteResponse!
  deleteOneVerifyUser(input: DeleteOneVerifyUserInput!): VerifyUserDeleteResponse!
  deleteOneVideo(input: DeleteOneVideoInput!): VideoDeleteResponse!
  deleteOneVisitor(input: DeleteOneVisitorInput!): VisitorDeleteResponse!
  deleteOneVisitorCoupon(input: DeleteOneVisitorCouponInput!): VisitorCouponDeleteResponse!
  deleteOneVisitorGroup(input: DeleteOneVisitorGroupInput!): VisitorGroupDeleteResponse!
  deleteOneVisitorGroupRate(input: DeleteOneVisitorGroupRateInput!): VisitorGroupRateDeleteResponse!
  deleteOneVisitorSale(input: DeleteOneVisitorSaleInput!): VisitorSaleDeleteResponse!
  deleteOneWallet(input: DeleteOneWalletInput!): WalletDeleteResponse!
  deleteOneWalletGiftCharge(input: DeleteOneWalletGiftChargeInput!): WalletGiftChargeDeleteResponse!
  deleteOneWalletHistory(input: DeleteOneWalletHistoryInput!): WalletHistoryDeleteResponse!
  deleteOneWebsitePage(input: DeleteOneWebsitePageInput!): WebsitePageDeleteResponse!
  deleteOneWebsiteVisit(input: DeleteOneWebsiteVisitInput!): WebsiteVisitDeleteResponse!
  deleteOneWithdrawalRequest(input: DeleteOneWithdrawalRequestInput!): WithdrawalRequestDeleteResponse!
  deleteOneWithdrawalRequestStatus(input: DeleteOneWithdrawalRequestStatusInput!): WithdrawalRequestStatusDeleteResponse!
  deleteOneWonderfulOffer(input: DeleteOneWonderfulOfferInput!): WonderfulOfferDeleteResponse!
  removeNegotiationStep(id: Int!): NegotiationStep!
  removeUser(id: Int!): User!
  updateManyActivities(input: UpdateManyActivitiesInput!): UpdateManyResponse!
  updateManyAddresses(input: UpdateManyAddressesInput!): UpdateManyResponse!
  updateManyAttributeAttributeGroups(input: UpdateManyAttributeAttributeGroupsInput!): UpdateManyResponse!
  updateManyAttributeGroups(input: UpdateManyAttributeGroupsInput!): UpdateManyResponse!
  updateManyAttributeItems(input: UpdateManyAttributeItemsInput!): UpdateManyResponse!
  updateManyAttributeProducts(input: UpdateManyAttributeProductsInput!): UpdateManyResponse!
  updateManyAttributeSubproducts(input: UpdateManyAttributeSubproductsInput!): UpdateManyResponse!
  updateManyAttributes(input: UpdateManyAttributesInput!): UpdateManyResponse!
  updateManyAutomationEvents(input: UpdateManyAutomationEventsInput!): UpdateManyResponse!
  updateManyAutomationRfmScores(input: UpdateManyAutomationRfmScoresInput!): UpdateManyResponse!
  updateManyBasicCarpetBorders(input: UpdateManyBasicCarpetBordersInput!): UpdateManyResponse!
  updateManyBasicCarpetBrands(input: UpdateManyBasicCarpetBrandsInput!): UpdateManyResponse!
  updateManyBasicCarpetColors(input: UpdateManyBasicCarpetColorsInput!): UpdateManyResponse!
  updateManyBasicCarpetDesigners(input: UpdateManyBasicCarpetDesignersInput!): UpdateManyResponse!
  updateManyBasicCarpetDesigns(input: UpdateManyBasicCarpetDesignsInput!): UpdateManyResponse!
  updateManyBasicCarpetMaterials(input: UpdateManyBasicCarpetMaterialsInput!): UpdateManyResponse!
  updateManyBasicCarpetSizeDetails(input: UpdateManyBasicCarpetSizeDetailsInput!): UpdateManyResponse!
  updateManyBasicCarpetSizes(input: UpdateManyBasicCarpetSizesInput!): UpdateManyResponse!
  updateManyBasicCarpetTypes(input: UpdateManyBasicCarpetTypesInput!): UpdateManyResponse!
  updateManyBorders(input: UpdateManyBordersInput!): UpdateManyResponse!
  updateManyCampaignFreeOfferSizes(input: UpdateManyCampaignFreeOfferSizesInput!): UpdateManyResponse!
  updateManyCampaignFreeOffers(input: UpdateManyCampaignFreeOffersInput!): UpdateManyResponse!
  updateManyCampaignGoldCoinSubs(input: UpdateManyCampaignGoldCoinSubsInput!): UpdateManyResponse!
  updateManyCampaignInstagramFollows(input: UpdateManyCampaignInstagramFollowsInput!): UpdateManyResponse!
  updateManyCampaignPetForms(input: UpdateManyCampaignPetFormsInput!): UpdateManyResponse!
  updateManyCampaignRoomvoImages(input: UpdateManyCampaignRoomvoImagesInput!): UpdateManyResponse!
  updateManyCampaignRoomvoVotes(input: UpdateManyCampaignRoomvoVotesInput!): UpdateManyResponse!
  updateManyCampaignSubscriptions(input: UpdateManyCampaignSubscriptionsInput!): UpdateManyResponse!
  updateManyCampaignUefaEuroSubscriberHistories(input: UpdateManyCampaignUefaEuroSubscriberHistoriesInput!): UpdateManyResponse!
  updateManyCampaignUefaEuroSubscribers(input: UpdateManyCampaignUefaEuroSubscribersInput!): UpdateManyResponse!
  updateManyCampaignVotingImageUsers(input: UpdateManyCampaignVotingImageUsersInput!): UpdateManyResponse!
  updateManyCampaignVotingImages(input: UpdateManyCampaignVotingImagesInput!): UpdateManyResponse!
  updateManyCarpetFeatureUsers(input: UpdateManyCarpetFeatureUsersInput!): UpdateManyResponse!
  updateManyCarpetFeatures(input: UpdateManyCarpetFeaturesInput!): UpdateManyResponse!
  updateManyCarpetMaterials(input: UpdateManyCarpetMaterialsInput!): UpdateManyResponse!
  updateManyCarpetShapes(input: UpdateManyCarpetShapesInput!): UpdateManyResponse!
  updateManyCarpetSizes(input: UpdateManyCarpetSizesInput!): UpdateManyResponse!
  updateManyCarpetUsagePlaceInvoiceProducts(input: UpdateManyCarpetUsagePlaceInvoiceProductsInput!): UpdateManyResponse!
  updateManyCarpetUsagePlaceUsers(input: UpdateManyCarpetUsagePlaceUsersInput!): UpdateManyResponse!
  updateManyCarpetUsagePlaces(input: UpdateManyCarpetUsagePlacesInput!): UpdateManyResponse!
  updateManyChaparSettlementStatuses(input: UpdateManyChaparSettlementStatusesInput!): UpdateManyResponse!
  updateManyChaparTrackingHistories(input: UpdateManyChaparTrackingHistoriesInput!): UpdateManyResponse!
  updateManyCities(input: UpdateManyCitiesInput!): UpdateManyResponse!
  updateManyCitiesSepidars(input: UpdateManyCitiesSepidarsInput!): UpdateManyResponse!
  updateManyCity2s(input: UpdateManyCity2sInput!): UpdateManyResponse!
  updateManyColorCategories(input: UpdateManyColorCategoriesInput!): UpdateManyResponse!
  updateManyColorCategoryDetails(input: UpdateManyColorCategoryDetailsInput!): UpdateManyResponse!
  updateManyColorCategorySubproducts(input: UpdateManyColorCategorySubproductsInput!): UpdateManyResponse!
  updateManyColors(input: UpdateManyColorsInput!): UpdateManyResponse!
  updateManyConfigs(input: UpdateManyConfigsInput!): UpdateManyResponse!
  updateManyContactFormHistories(input: UpdateManyContactFormHistoriesInput!): UpdateManyResponse!
  updateManyContactFormStatuses(input: UpdateManyContactFormStatusesInput!): UpdateManyResponse!
  updateManyContactForms(input: UpdateManyContactFormsInput!): UpdateManyResponse!
  updateManyCountries(input: UpdateManyCountriesInput!): UpdateManyResponse!
  updateManyCouponSubjects(input: UpdateManyCouponSubjectsInput!): UpdateManyResponse!
  updateManyCoupons(input: UpdateManyCouponsInput!): UpdateManyResponse!
  updateManyCrmPresentations(input: UpdateManyCrmPresentationsInput!): UpdateManyResponse!
  updateManyCustomerImageProducts(input: UpdateManyCustomerImageProductsInput!): UpdateManyResponse!
  updateManyCustomerRequestFiles(input: UpdateManyCustomerRequestFilesInput!): UpdateManyResponse!
  updateManyCustomerRequests(input: UpdateManyCustomerRequestsInput!): UpdateManyResponse!
  updateManyCustomerVideoProducts(input: UpdateManyCustomerVideoProductsInput!): UpdateManyResponse!
  updateManyDamageReasons(input: UpdateManyDamageReasonsInput!): UpdateManyResponse!
  updateManyDepartments(input: UpdateManyDepartmentsInput!): UpdateManyResponse!
  updateManyDesignersProductPriceRanges(input: UpdateManyDesignersProductPriceRangesInput!): UpdateManyResponse!
  updateManyDesigns(input: UpdateManyDesignsInput!): UpdateManyResponse!
  updateManyDiscountNotifications(input: UpdateManyDiscountNotificationsInput!): UpdateManyResponse!
  updateManyDiscountSubjects(input: UpdateManyDiscountSubjectsInput!): UpdateManyResponse!
  updateManyDiscounts(input: UpdateManyDiscountsInput!): UpdateManyResponse!
  updateManyExitControlItems(input: UpdateManyExitControlItemsInput!): UpdateManyResponse!
  updateManyExitControls(input: UpdateManyExitControlsInput!): UpdateManyResponse!
  updateManyExportProducts(input: UpdateManyExportProductsInput!): UpdateManyResponse!
  updateManyFailedJobs(input: UpdateManyFailedJobsInput!): UpdateManyResponse!
  updateManyFavoriteProducts(input: UpdateManyFavoriteProductsInput!): UpdateManyResponse!
  updateManyFedexAddressValidationAttributes(input: UpdateManyFedexAddressValidationAttributesInput!): UpdateManyResponse!
  updateManyFetchSiteUrls(input: UpdateManyFetchSiteUrlsInput!): UpdateManyResponse!
  updateManyFileNegotiations(input: UpdateManyFileNegotiationsInput!): UpdateManyResponse!
  updateManyFiles(input: UpdateManyFilesInput!): UpdateManyResponse!
  updateManyGhazals(input: UpdateManyGhazalsInput!): UpdateManyResponse!
  updateManyGoogleFormUtms(input: UpdateManyGoogleFormUtmsInput!): UpdateManyResponse!
  updateManyHeardAboutUsOptions(input: UpdateManyHeardAboutUsOptionsInput!): UpdateManyResponse!
  updateManyHelpDesks(input: UpdateManyHelpDesksInput!): UpdateManyResponse!
  updateManyHolidays(input: UpdateManyHolidaysInput!): UpdateManyResponse!
  updateManyHomePageCustomerImages(input: UpdateManyHomePageCustomerImagesInput!): UpdateManyResponse!
  updateManyHypers(input: UpdateManyHypersInput!): UpdateManyResponse!
  updateManyHyperstarCodes(input: UpdateManyHyperstarCodesInput!): UpdateManyResponse!
  updateManyImageLayers(input: UpdateManyImageLayersInput!): UpdateManyResponse!
  updateManyImageProducts(input: UpdateManyImageProductsInput!): UpdateManyResponse!
  updateManyImageSizes(input: UpdateManyImageSizesInput!): UpdateManyResponse!
  updateManyImageSubproducts(input: UpdateManyImageSubproductsInput!): UpdateManyResponse!
  updateManyImages(input: UpdateManyImagesInput!): UpdateManyResponse!
  updateManyImagesSizeGuidesDetails(input: UpdateManyImagesSizeGuidesDetailsInput!): UpdateManyResponse!
  updateManyImpersonateHistories(input: UpdateManyImpersonateHistoriesInput!): UpdateManyResponse!
  updateManyIncredibleOfferSentNotifications(input: UpdateManyIncredibleOfferSentNotificationsInput!): UpdateManyResponse!
  updateManyIncredibleOffers(input: UpdateManyIncredibleOffersInput!): UpdateManyResponse!
  updateManyInstagramFeeds(input: UpdateManyInstagramFeedsInput!): UpdateManyResponse!
  updateManyInvitationCodes(input: UpdateManyInvitationCodesInput!): UpdateManyResponse!
  updateManyInvoiceAddressValidationResults(input: UpdateManyInvoiceAddressValidationResultsInput!): UpdateManyResponse!
  updateManyInvoiceAddresses(input: UpdateManyInvoiceAddressesInput!): UpdateManyResponse!
  updateManyInvoiceBankGatewayHistories(input: UpdateManyInvoiceBankGatewayHistoriesInput!): UpdateManyResponse!
  updateManyInvoiceHistories(input: UpdateManyInvoiceHistoriesInput!): UpdateManyResponse!
  updateManyInvoiceInvoiceStatuses(input: UpdateManyInvoiceInvoiceStatusesInput!): UpdateManyResponse!
  updateManyInvoiceModes(input: UpdateManyInvoiceModesInput!): UpdateManyResponse!
  updateManyInvoiceNegotiations(input: UpdateManyInvoiceNegotiationsInput!): UpdateManyResponse!
  updateManyInvoicePaymentHistories(input: UpdateManyInvoicePaymentHistoriesInput!): UpdateManyResponse!
  updateManyInvoicePaymentStatuses(input: UpdateManyInvoicePaymentStatusesInput!): UpdateManyResponse!
  updateManyInvoicePaymentTypes(input: UpdateManyInvoicePaymentTypesInput!): UpdateManyResponse!
  updateManyInvoicePayments(input: UpdateManyInvoicePaymentsInput!): UpdateManyResponse!
  updateManyInvoiceProductHistories(input: UpdateManyInvoiceProductHistoriesInput!): UpdateManyResponse!
  updateManyInvoiceProductItemInvoiceProductStatuses(input: UpdateManyInvoiceProductItemInvoiceProductStatusesInput!): UpdateManyResponse!
  updateManyInvoiceProductItems(input: UpdateManyInvoiceProductItemsInput!): UpdateManyResponse!
  updateManyInvoiceProductStatuses(input: UpdateManyInvoiceProductStatusesInput!): UpdateManyResponse!
  updateManyInvoiceProducts(input: UpdateManyInvoiceProductsInput!): UpdateManyResponse!
  updateManyInvoiceRatesResults(input: UpdateManyInvoiceRatesResultsInput!): UpdateManyResponse!
  updateManyInvoiceReversalItems(input: UpdateManyInvoiceReversalItemsInput!): UpdateManyResponse!
  updateManyInvoiceReversals(input: UpdateManyInvoiceReversalsInput!): UpdateManyResponse!
  updateManyInvoiceShippingRates(input: UpdateManyInvoiceShippingRatesInput!): UpdateManyResponse!
  updateManyInvoiceStatuses(input: UpdateManyInvoiceStatusesInput!): UpdateManyResponse!
  updateManyInvoiceTypes(input: UpdateManyInvoiceTypesInput!): UpdateManyResponse!
  updateManyInvoices(input: UpdateManyInvoicesInput!): UpdateManyResponse!
  updateManyLabelProducts(input: UpdateManyLabelProductsInput!): UpdateManyResponse!
  updateManyLabels(input: UpdateManyLabelsInput!): UpdateManyResponse!
  updateManyMellatPaymentErrors(input: UpdateManyMellatPaymentErrorsInput!): UpdateManyResponse!
  updateManyMigrations(input: UpdateManyMigrationsInput!): UpdateManyResponse!
  updateManyModelHasPermissions(input: UpdateManyModelHasPermissionsInput!): UpdateManyResponse!
  updateManyModelHasRoles(input: UpdateManyModelHasRolesInput!): UpdateManyResponse!
  updateManyModelVisits(input: UpdateManyModelVisitsInput!): UpdateManyResponse!
  updateManyModemaAcceleratorImages(input: UpdateManyModemaAcceleratorImagesInput!): UpdateManyResponse!
  updateManyModemaAcceleratorVideos(input: UpdateManyModemaAcceleratorVideosInput!): UpdateManyResponse!
  updateManyModemaAccelerators(input: UpdateManyModemaAcceleratorsInput!): UpdateManyResponse!
  updateManyNeedsPhotographySubproducts(input: UpdateManyNeedsPhotographySubproductsInput!): UpdateManyResponse!
  updateManyNegotiationHistories(input: UpdateManyNegotiationHistoriesInput!): UpdateManyResponse!
  updateManyNegotiationStatuses(input: UpdateManyNegotiationStatusesInput!): UpdateManyResponse!
  updateManyNegotiationSteps(input: UpdateManyNegotiationStepsInput!): UpdateManyResponse!
  updateManyNegotiationTypes(input: UpdateManyNegotiationTypesInput!): UpdateManyResponse!
  updateManyNegotiations(input: UpdateManyNegotiationsInput!): UpdateManyResponse!
  updateManyNewBorders(input: UpdateManyNewBordersInput!): UpdateManyResponse!
  updateManyOauthAccessTokens(input: UpdateManyOauthAccessTokensInput!): UpdateManyResponse!
  updateManyOauthAuthCodes(input: UpdateManyOauthAuthCodesInput!): UpdateManyResponse!
  updateManyOauthClients(input: UpdateManyOauthClientsInput!): UpdateManyResponse!
  updateManyOauthPersonalAccessClients(input: UpdateManyOauthPersonalAccessClientsInput!): UpdateManyResponse!
  updateManyOauthRefreshTokens(input: UpdateManyOauthRefreshTokensInput!): UpdateManyResponse!
  updateManyOutOfStockButListedProducts(input: UpdateManyOutOfStockButListedProductsInput!): UpdateManyResponse!
  updateManyPasswordResets(input: UpdateManyPasswordResetsInput!): UpdateManyResponse!
  updateManyPatternCategories(input: UpdateManyPatternCategoriesInput!): UpdateManyResponse!
  updateManyPatternLayers(input: UpdateManyPatternLayersInput!): UpdateManyResponse!
  updateManyPatterns(input: UpdateManyPatternsInput!): UpdateManyResponse!
  updateManyPaymentMethodFields(input: UpdateManyPaymentMethodFieldsInput!): UpdateManyResponse!
  updateManyPaymentMethods(input: UpdateManyPaymentMethodsInput!): UpdateManyResponse!
  updateManyPaymentRequestStatuses(input: UpdateManyPaymentRequestStatusesInput!): UpdateManyResponse!
  updateManyPaymentRequests(input: UpdateManyPaymentRequestsInput!): UpdateManyResponse!
  updateManyPermissionGroups(input: UpdateManyPermissionGroupsInput!): UpdateManyResponse!
  updateManyPermissions(input: UpdateManyPermissionsInput!): UpdateManyResponse!
  updateManyPreorderPreorderStatuses(input: UpdateManyPreorderPreorderStatusesInput!): UpdateManyResponse!
  updateManyPreorderRegisters(input: UpdateManyPreorderRegistersInput!): UpdateManyResponse!
  updateManyPreorderStatuses(input: UpdateManyPreorderStatusesInput!): UpdateManyResponse!
  updateManyPreorders(input: UpdateManyPreordersInput!): UpdateManyResponse!
  updateManyPriceGroupSizes(input: UpdateManyPriceGroupSizesInput!): UpdateManyResponse!
  updateManyPriceGroups(input: UpdateManyPriceGroupsInput!): UpdateManyResponse!
  updateManyPrintProfiles(input: UpdateManyPrintProfilesInput!): UpdateManyResponse!
  updateManyPrintRips(input: UpdateManyPrintRipsInput!): UpdateManyResponse!
  updateManyProductCategories(input: UpdateManyProductCategoriesInput!): UpdateManyResponse!
  updateManyProductCategoryDetails(input: UpdateManyProductCategoryDetailsInput!): UpdateManyResponse!
  updateManyProductCategoryRates(input: UpdateManyProductCategoryRatesInput!): UpdateManyResponse!
  updateManyProductColorImages(input: UpdateManyProductColorImagesInput!): UpdateManyResponse!
  updateManyProductColorSales(input: UpdateManyProductColorSalesInput!): UpdateManyResponse!
  updateManyProductCommentLikes(input: UpdateManyProductCommentLikesInput!): UpdateManyResponse!
  updateManyProductComments(input: UpdateManyProductCommentsInput!): UpdateManyResponse!
  updateManyProductLikes(input: UpdateManyProductLikesInput!): UpdateManyResponse!
  updateManyProductProductCategories(input: UpdateManyProductProductCategoriesInput!): UpdateManyResponse!
  updateManyProductRateAverages(input: UpdateManyProductRateAveragesInput!): UpdateManyResponse!
  updateManyProductRates(input: UpdateManyProductRatesInput!): UpdateManyResponse!
  updateManyProductTags(input: UpdateManyProductTagsInput!): UpdateManyResponse!
  updateManyProductVideos(input: UpdateManyProductVideosInput!): UpdateManyResponse!
  updateManyProductionPadProductionPadStatuses(input: UpdateManyProductionPadProductionPadStatusesInput!): UpdateManyResponse!
  updateManyProductionPadStatuses(input: UpdateManyProductionPadStatusesInput!): UpdateManyResponse!
  updateManyProductionPads(input: UpdateManyProductionPadsInput!): UpdateManyResponse!
  updateManyProductionReceiptTypes(input: UpdateManyProductionReceiptTypesInput!): UpdateManyResponse!
  updateManyProductionRolls(input: UpdateManyProductionRollsInput!): UpdateManyResponse!
  updateManyProducts(input: UpdateManyProductsInput!): UpdateManyResponse!
  updateManyRates(input: UpdateManyRatesInput!): UpdateManyResponse!
  updateManyReadyToSendProducts(input: UpdateManyReadyToSendProductsInput!): UpdateManyResponse!
  updateManyRecommendedProducts(input: UpdateManyRecommendedProductsInput!): UpdateManyResponse!
  updateManyRecommendedSubproducts(input: UpdateManyRecommendedSubproductsInput!): UpdateManyResponse!
  updateManyRedisSavedKeys(input: UpdateManyRedisSavedKeysInput!): UpdateManyResponse!
  updateManyRelatedProducts(input: UpdateManyRelatedProductsInput!): UpdateManyResponse!
  updateManyRetargetingWalletCharges(input: UpdateManyRetargetingWalletChargesInput!): UpdateManyResponse!
  updateManyReturnItemStatusReturnRequestItems(input: UpdateManyReturnItemStatusReturnRequestItemsInput!): UpdateManyResponse!
  updateManyReturnItemStatuses(input: UpdateManyReturnItemStatusesInput!): UpdateManyResponse!
  updateManyReturnReasons(input: UpdateManyReturnReasonsInput!): UpdateManyResponse!
  updateManyReturnRequestAddresses(input: UpdateManyReturnRequestAddressesInput!): UpdateManyResponse!
  updateManyReturnRequestHistories(input: UpdateManyReturnRequestHistoriesInput!): UpdateManyResponse!
  updateManyReturnRequestItemHistories(input: UpdateManyReturnRequestItemHistoriesInput!): UpdateManyResponse!
  updateManyReturnRequestItemImages(input: UpdateManyReturnRequestItemImagesInput!): UpdateManyResponse!
  updateManyReturnRequestItemReturnItemStatuses(input: UpdateManyReturnRequestItemReturnItemStatusesInput!): UpdateManyResponse!
  updateManyReturnRequestItemVideos(input: UpdateManyReturnRequestItemVideosInput!): UpdateManyResponse!
  updateManyReturnRequestItems(input: UpdateManyReturnRequestItemsInput!): UpdateManyResponse!
  updateManyReturnRequestReturnStatuses(input: UpdateManyReturnRequestReturnStatusesInput!): UpdateManyResponse!
  updateManyReturnRequests(input: UpdateManyReturnRequestsInput!): UpdateManyResponse!
  updateManyReturnStatuses(input: UpdateManyReturnStatusesInput!): UpdateManyResponse!
  updateManyReturnTypes(input: UpdateManyReturnTypesInput!): UpdateManyResponse!
  updateManyReturnedInvoiceProducts(input: UpdateManyReturnedInvoiceProductsInput!): UpdateManyResponse!
  updateManyReturnedInvoices(input: UpdateManyReturnedInvoicesInput!): UpdateManyResponse!
  updateManyRfmReports(input: UpdateManyRfmReportsInput!): UpdateManyResponse!
  updateManyRipTemplateItems(input: UpdateManyRipTemplateItemsInput!): UpdateManyResponse!
  updateManyRipTemplates(input: UpdateManyRipTemplatesInput!): UpdateManyResponse!
  updateManyRoleDomains(input: UpdateManyRoleDomainsInput!): UpdateManyResponse!
  updateManyRoleHasPermissions(input: UpdateManyRoleHasPermissionsInput!): UpdateManyResponse!
  updateManyRussians(input: UpdateManyRussiansInput!): UpdateManyResponse!
  updateManySenderInformations(input: UpdateManySenderInformationsInput!): UpdateManyResponse!
  updateManyShippingServices(input: UpdateManyShippingServicesInput!): UpdateManyResponse!
  updateManySitemapStaticPages(input: UpdateManySitemapStaticPagesInput!): UpdateManyResponse!
  updateManySizeGuides(input: UpdateManySizeGuidesInput!): UpdateManyResponse!
  updateManySizeGuidesDetails(input: UpdateManySizeGuidesDetailsInput!): UpdateManyResponse!
  updateManySocialFacebookAccounts(input: UpdateManySocialFacebookAccountsInput!): UpdateManyResponse!
  updateManySocialGoogleAccounts(input: UpdateManySocialGoogleAccountsInput!): UpdateManyResponse!
  updateManySpecialOffers(input: UpdateManySpecialOffersInput!): UpdateManyResponse!
  updateManyStates(input: UpdateManyStatesInput!): UpdateManyResponse!
  updateManySubcolors(input: UpdateManySubcolorsInput!): UpdateManyResponse!
  updateManySubproductSpecialImages(input: UpdateManySubproductSpecialImagesInput!): UpdateManyResponse!
  updateManySubproductStockHistories(input: UpdateManySubproductStockHistoriesInput!): UpdateManyResponse!
  updateManySubproductVideos(input: UpdateManySubproductVideosInput!): UpdateManyResponse!
  updateManySubproducts(input: UpdateManySubproductsInput!): UpdateManyResponse!
  updateManySubscribers(input: UpdateManySubscribersInput!): UpdateManyResponse!
  updateManyTags(input: UpdateManyTagsInput!): UpdateManyResponse!
  updateManyTempSubproductDiscounts(input: UpdateManyTempSubproductDiscountsInput!): UpdateManyResponse!
  updateManyTestimonials(input: UpdateManyTestimonialsInput!): UpdateManyResponse!
  updateManyTextLayers(input: UpdateManyTextLayersInput!): UpdateManyResponse!
  updateManyTmpRfmReports(input: UpdateManyTmpRfmReportsInput!): UpdateManyResponse!
  updateManyTmpRussiaProducts(input: UpdateManyTmpRussiaProductsInput!): UpdateManyResponse!
  updateManyTmpSpainOrders(input: UpdateManyTmpSpainOrdersInput!): UpdateManyResponse!
  updateManyTmpSpanishNames(input: UpdateManyTmpSpanishNamesInput!): UpdateManyResponse!
  updateManyTmpTagChangesPrints(input: UpdateManyTmpTagChangesPrintsInput!): UpdateManyResponse!
  updateManyTorobProducts(input: UpdateManyTorobProductsInput!): UpdateManyResponse!
  updateManyTransactions(input: UpdateManyTransactionsInput!): UpdateManyResponse!
  updateManyUserCarts(input: UpdateManyUserCartsInput!): UpdateManyResponse!
  updateManyUserHasPermissions(input: UpdateManyUserHasPermissionsInput!): UpdateManyResponse!
  updateManyUserHasRoles(input: UpdateManyUserHasRolesInput!): UpdateManyResponse!
  updateManyUserUtms(input: UpdateManyUserUtmsInput!): UpdateManyResponse!
  updateManyUsers(input: UpdateManyUsersInput!): UpdateManyResponse!
  updateManyUtmGoogleFormCoupons(input: UpdateManyUtmGoogleFormCouponsInput!): UpdateManyResponse!
  updateManyUtms(input: UpdateManyUtmsInput!): UpdateManyResponse!
  updateManyVerifyUsers(input: UpdateManyVerifyUsersInput!): UpdateManyResponse!
  updateManyVideos(input: UpdateManyVideosInput!): UpdateManyResponse!
  updateManyVisitorCoupons(input: UpdateManyVisitorCouponsInput!): UpdateManyResponse!
  updateManyVisitorGroupRates(input: UpdateManyVisitorGroupRatesInput!): UpdateManyResponse!
  updateManyVisitorGroups(input: UpdateManyVisitorGroupsInput!): UpdateManyResponse!
  updateManyVisitorSales(input: UpdateManyVisitorSalesInput!): UpdateManyResponse!
  updateManyVisitors(input: UpdateManyVisitorsInput!): UpdateManyResponse!
  updateManyWalletGiftCharges(input: UpdateManyWalletGiftChargesInput!): UpdateManyResponse!
  updateManyWalletHistories(input: UpdateManyWalletHistoriesInput!): UpdateManyResponse!
  updateManyWallets(input: UpdateManyWalletsInput!): UpdateManyResponse!
  updateManyWebsitePages(input: UpdateManyWebsitePagesInput!): UpdateManyResponse!
  updateManyWebsiteVisits(input: UpdateManyWebsiteVisitsInput!): UpdateManyResponse!
  updateManyWithdrawalRequestStatuses(input: UpdateManyWithdrawalRequestStatusesInput!): UpdateManyResponse!
  updateManyWithdrawalRequests(input: UpdateManyWithdrawalRequestsInput!): UpdateManyResponse!
  updateManyWonderfulOffers(input: UpdateManyWonderfulOffersInput!): UpdateManyResponse!
  updateNegotiationStep(updateNegotiationStepInput: UpdateNegotiationStepInput!): NegotiationStep!
  updateOneActivity(input: UpdateOneActivityInput!): Activity!
  updateOneAddress(input: UpdateOneAddressInput!): Address!
  updateOneAttribute(input: UpdateOneAttributeInput!): Attribute!
  updateOneAttributeAttributeGroup(input: UpdateOneAttributeAttributeGroupInput!): AttributeAttributeGroup!
  updateOneAttributeGroup(input: UpdateOneAttributeGroupInput!): AttributeGroup!
  updateOneAttributeItem(input: UpdateOneAttributeItemInput!): AttributeItem!
  updateOneAttributeProduct(input: UpdateOneAttributeProductInput!): AttributeProduct!
  updateOneAttributeSubproduct(input: UpdateOneAttributeSubproductInput!): AttributeSubproduct!
  updateOneAutomationEvent(input: UpdateOneAutomationEventInput!): AutomationEvent!
  updateOneAutomationRfmScore(input: UpdateOneAutomationRfmScoreInput!): AutomationRfmScore!
  updateOneBasicCarpetBorder(input: UpdateOneBasicCarpetBorderInput!): BasicCarpetBorder!
  updateOneBasicCarpetBrand(input: UpdateOneBasicCarpetBrandInput!): BasicCarpetBrand!
  updateOneBasicCarpetColor(input: UpdateOneBasicCarpetColorInput!): BasicCarpetColor!
  updateOneBasicCarpetDesign(input: UpdateOneBasicCarpetDesignInput!): BasicCarpetDesign!
  updateOneBasicCarpetDesigner(input: UpdateOneBasicCarpetDesignerInput!): BasicCarpetDesigner!
  updateOneBasicCarpetMaterial(input: UpdateOneBasicCarpetMaterialInput!): BasicCarpetMaterial!
  updateOneBasicCarpetSize(input: UpdateOneBasicCarpetSizeInput!): BasicCarpetSize!
  updateOneBasicCarpetSizeDetail(input: UpdateOneBasicCarpetSizeDetailInput!): BasicCarpetSizeDetail!
  updateOneBasicCarpetType(input: UpdateOneBasicCarpetTypeInput!): BasicCarpetType!
  updateOneBorder(input: UpdateOneBorderInput!): Border!
  updateOneCampaignFreeOffer(input: UpdateOneCampaignFreeOfferInput!): CampaignFreeOffer!
  updateOneCampaignFreeOfferSize(input: UpdateOneCampaignFreeOfferSizeInput!): CampaignFreeOfferSize!
  updateOneCampaignGoldCoinSub(input: UpdateOneCampaignGoldCoinSubInput!): CampaignGoldCoinSub!
  updateOneCampaignInstagramFollow(input: UpdateOneCampaignInstagramFollowInput!): CampaignInstagramFollow!
  updateOneCampaignPetForm(input: UpdateOneCampaignPetFormInput!): CampaignPetForm!
  updateOneCampaignRoomvoImage(input: UpdateOneCampaignRoomvoImageInput!): CampaignRoomvoImage!
  updateOneCampaignRoomvoVote(input: UpdateOneCampaignRoomvoVoteInput!): CampaignRoomvoVote!
  updateOneCampaignSubscription(input: UpdateOneCampaignSubscriptionInput!): CampaignSubscription!
  updateOneCampaignUefaEuroSubscriber(input: UpdateOneCampaignUefaEuroSubscriberInput!): CampaignUefaEuroSubscriber!
  updateOneCampaignUefaEuroSubscriberHistory(input: UpdateOneCampaignUefaEuroSubscriberHistoryInput!): CampaignUefaEuroSubscriberHistory!
  updateOneCampaignVotingImage(input: UpdateOneCampaignVotingImageInput!): CampaignVotingImage!
  updateOneCampaignVotingImageUser(input: UpdateOneCampaignVotingImageUserInput!): CampaignVotingImageUser!
  updateOneCarpetFeature(input: UpdateOneCarpetFeatureInput!): CarpetFeature!
  updateOneCarpetFeatureUser(input: UpdateOneCarpetFeatureUserInput!): CarpetFeatureUser!
  updateOneCarpetMaterial(input: UpdateOneCarpetMaterialInput!): CarpetMaterial!
  updateOneCarpetShape(input: UpdateOneCarpetShapeInput!): CarpetShape!
  updateOneCarpetSize(input: UpdateOneCarpetSizeInput!): CarpetSize!
  updateOneCarpetUsagePlace(input: UpdateOneCarpetUsagePlaceInput!): CarpetUsagePlace!
  updateOneCarpetUsagePlaceInvoiceProduct(input: UpdateOneCarpetUsagePlaceInvoiceProductInput!): CarpetUsagePlaceInvoiceProduct!
  updateOneCarpetUsagePlaceUser(input: UpdateOneCarpetUsagePlaceUserInput!): CarpetUsagePlaceUser!
  updateOneChaparSettlementStatus(input: UpdateOneChaparSettlementStatusInput!): ChaparSettlementStatus!
  updateOneChaparTrackingHistory(input: UpdateOneChaparTrackingHistoryInput!): ChaparTrackingHistory!
  updateOneCitiesSepidar(input: UpdateOneCitiesSepidarInput!): CitiesSepidar!
  updateOneCity(input: UpdateOneCityInput!): City!
  updateOneCity2(input: UpdateOneCity2Input!): City2!
  updateOneColor(input: UpdateOneColorInput!): Color!
  updateOneColorCategory(input: UpdateOneColorCategoryInput!): ColorCategory!
  updateOneColorCategoryDetail(input: UpdateOneColorCategoryDetailInput!): ColorCategoryDetail!
  updateOneColorCategorySubproduct(input: UpdateOneColorCategorySubproductInput!): ColorCategorySubproduct!
  updateOneConfig(input: UpdateOneConfigInput!): Config!
  updateOneContactForm(input: UpdateOneContactFormInput!): ContactForm!
  updateOneContactFormHistory(input: UpdateOneContactFormHistoryInput!): ContactFormHistory!
  updateOneContactFormStatus(input: UpdateOneContactFormStatusInput!): ContactFormStatus!
  updateOneCountry(input: UpdateOneCountryInput!): Country!
  updateOneCoupon(input: UpdateOneCouponInput!): Coupon!
  updateOneCouponSubject(input: UpdateOneCouponSubjectInput!): CouponSubject!
  updateOneCrmPresentation(input: UpdateOneCrmPresentationInput!): CrmPresentation!
  updateOneCustomerImageProduct(input: UpdateOneCustomerImageProductInput!): CustomerImageProduct!
  updateOneCustomerRequest(input: UpdateOneCustomerRequestInput!): CustomerRequest!
  updateOneCustomerRequestFile(input: UpdateOneCustomerRequestFileInput!): CustomerRequestFile!
  updateOneCustomerVideoProduct(input: UpdateOneCustomerVideoProductInput!): CustomerVideoProduct!
  updateOneDamageReason(input: UpdateOneDamageReasonInput!): DamageReason!
  updateOneDepartment(input: UpdateOneDepartmentInput!): Department!
  updateOneDesign(input: UpdateOneDesignInput!): Design!
  updateOneDesignersProductPriceRange(input: UpdateOneDesignersProductPriceRangeInput!): DesignersProductPriceRange!
  updateOneDiscount(input: UpdateOneDiscountInput!): Discount!
  updateOneDiscountNotification(input: UpdateOneDiscountNotificationInput!): DiscountNotification!
  updateOneDiscountSubject(input: UpdateOneDiscountSubjectInput!): DiscountSubject!
  updateOneExitControl(input: UpdateOneExitControlInput!): ExitControl!
  updateOneExitControlItem(input: UpdateOneExitControlItemInput!): ExitControlItem!
  updateOneExportProduct(input: UpdateOneExportProductInput!): ExportProduct!
  updateOneFailedJob(input: UpdateOneFailedJobInput!): FailedJob!
  updateOneFavoriteProduct(input: UpdateOneFavoriteProductInput!): FavoriteProduct!
  updateOneFedexAddressValidationAttribute(input: UpdateOneFedexAddressValidationAttributeInput!): FedexAddressValidationAttribute!
  updateOneFetchSiteUrl(input: UpdateOneFetchSiteUrlInput!): FetchSiteUrl!
  updateOneFile(input: UpdateOneFileInput!): File!
  updateOneFileNegotiation(input: UpdateOneFileNegotiationInput!): FileNegotiation!
  updateOneGhazal(input: UpdateOneGhazalInput!): Ghazal!
  updateOneGoogleFormUtm(input: UpdateOneGoogleFormUtmInput!): GoogleFormUtm!
  updateOneHeardAboutUsOption(input: UpdateOneHeardAboutUsOptionInput!): HeardAboutUsOption!
  updateOneHelpDesk(input: UpdateOneHelpDeskInput!): HelpDesk!
  updateOneHoliday(input: UpdateOneHolidayInput!): Holiday!
  updateOneHomePageCustomerImage(input: UpdateOneHomePageCustomerImageInput!): HomePageCustomerImage!
  updateOneHyper(input: UpdateOneHyperInput!): Hyper!
  updateOneHyperstarCode(input: UpdateOneHyperstarCodeInput!): HyperstarCode!
  updateOneImage(input: UpdateOneImageInput!): Image!
  updateOneImageLayer(input: UpdateOneImageLayerInput!): ImageLayer!
  updateOneImageProduct(input: UpdateOneImageProductInput!): ImageProduct!
  updateOneImageSize(input: UpdateOneImageSizeInput!): ImageSize!
  updateOneImageSubproduct(input: UpdateOneImageSubproductInput!): ImageSubproduct!
  updateOneImagesSizeGuidesDetail(input: UpdateOneImagesSizeGuidesDetailInput!): ImagesSizeGuidesDetail!
  updateOneImpersonateHistory(input: UpdateOneImpersonateHistoryInput!): ImpersonateHistory!
  updateOneIncredibleOffer(input: UpdateOneIncredibleOfferInput!): IncredibleOffer!
  updateOneIncredibleOfferSentNotification(input: UpdateOneIncredibleOfferSentNotificationInput!): IncredibleOfferSentNotification!
  updateOneInstagramFeed(input: UpdateOneInstagramFeedInput!): InstagramFeed!
  updateOneInvitationCode(input: UpdateOneInvitationCodeInput!): InvitationCode!
  updateOneInvoice(input: UpdateOneInvoiceInput!): Invoice!
  updateOneInvoiceAddress(input: UpdateOneInvoiceAddressInput!): InvoiceAddress!
  updateOneInvoiceAddressValidationResult(input: UpdateOneInvoiceAddressValidationResultInput!): InvoiceAddressValidationResult!
  updateOneInvoiceBankGatewayHistory(input: UpdateOneInvoiceBankGatewayHistoryInput!): InvoiceBankGatewayHistory!
  updateOneInvoiceHistory(input: UpdateOneInvoiceHistoryInput!): InvoiceHistory!
  updateOneInvoiceInvoiceStatus(input: UpdateOneInvoiceInvoiceStatusInput!): InvoiceInvoiceStatus!
  updateOneInvoiceMode(input: UpdateOneInvoiceModeInput!): InvoiceMode!
  updateOneInvoiceNegotiation(input: UpdateOneInvoiceNegotiationInput!): InvoiceNegotiation!
  updateOneInvoicePayment(input: UpdateOneInvoicePaymentInput!): InvoicePayment!
  updateOneInvoicePaymentHistory(input: UpdateOneInvoicePaymentHistoryInput!): InvoicePaymentHistory!
  updateOneInvoicePaymentStatus(input: UpdateOneInvoicePaymentStatusInput!): InvoicePaymentStatus!
  updateOneInvoicePaymentType(input: UpdateOneInvoicePaymentTypeInput!): InvoicePaymentType!
  updateOneInvoiceProduct(input: UpdateOneInvoiceProductInput!): InvoiceProduct!
  updateOneInvoiceProductHistory(input: UpdateOneInvoiceProductHistoryInput!): InvoiceProductHistory!
  updateOneInvoiceProductItem(input: UpdateOneInvoiceProductItemInput!): InvoiceProductItem!
  updateOneInvoiceProductItemInvoiceProductStatus(input: UpdateOneInvoiceProductItemInvoiceProductStatusInput!): InvoiceProductItemInvoiceProductStatus!
  updateOneInvoiceProductStatus(input: UpdateOneInvoiceProductStatusInput!): InvoiceProductStatus!
  updateOneInvoiceRatesResult(input: UpdateOneInvoiceRatesResultInput!): InvoiceRatesResult!
  updateOneInvoiceReversal(input: UpdateOneInvoiceReversalInput!): InvoiceReversal!
  updateOneInvoiceReversalItem(input: UpdateOneInvoiceReversalItemInput!): InvoiceReversalItem!
  updateOneInvoiceShippingRate(input: UpdateOneInvoiceShippingRateInput!): InvoiceShippingRate!
  updateOneInvoiceStatus(input: UpdateOneInvoiceStatusInput!): InvoiceStatus!
  updateOneInvoiceType(input: UpdateOneInvoiceTypeInput!): InvoiceType!
  updateOneLabel(input: UpdateOneLabelInput!): Label!
  updateOneLabelProduct(input: UpdateOneLabelProductInput!): LabelProduct!
  updateOneMellatPaymentError(input: UpdateOneMellatPaymentErrorInput!): MellatPaymentError!
  updateOneMigration(input: UpdateOneMigrationInput!): Migration!
  updateOneModelHasPermission(input: UpdateOneModelHasPermissionInput!): ModelHasPermission!
  updateOneModelHasRole(input: UpdateOneModelHasRoleInput!): ModelHasRole!
  updateOneModelVisit(input: UpdateOneModelVisitInput!): ModelVisit!
  updateOneModemaAccelerator(input: UpdateOneModemaAcceleratorInput!): ModemaAccelerator!
  updateOneModemaAcceleratorImage(input: UpdateOneModemaAcceleratorImageInput!): ModemaAcceleratorImage!
  updateOneModemaAcceleratorVideo(input: UpdateOneModemaAcceleratorVideoInput!): ModemaAcceleratorVideo!
  updateOneNeedsPhotographySubproduct(input: UpdateOneNeedsPhotographySubproductInput!): NeedsPhotographySubproduct!
  updateOneNegotiation(input: UpdateOneNegotiationInput!): Negotiation!
  updateOneNegotiationHistory(input: UpdateOneNegotiationHistoryInput!): NegotiationHistory!
  updateOneNegotiationStatus(input: UpdateOneNegotiationStatusInput!): NegotiationStatus!
  updateOneNegotiationStep(input: UpdateOneNegotiationStepInput!): NegotiationStep!
  updateOneNegotiationType(input: UpdateOneNegotiationTypeInput!): NegotiationType!
  updateOneNewBorder(input: UpdateOneNewBorderInput!): NewBorder!
  updateOneOauthAccessToken(input: UpdateOneOauthAccessTokenInput!): OauthAccessToken!
  updateOneOauthAuthCode(input: UpdateOneOauthAuthCodeInput!): OauthAuthCode!
  updateOneOauthClient(input: UpdateOneOauthClientInput!): OauthClient!
  updateOneOauthPersonalAccessClient(input: UpdateOneOauthPersonalAccessClientInput!): OauthPersonalAccessClient!
  updateOneOauthRefreshToken(input: UpdateOneOauthRefreshTokenInput!): OauthRefreshToken!
  updateOneOutOfStockButListedProduct(input: UpdateOneOutOfStockButListedProductInput!): OutOfStockButListedProduct!
  updateOnePasswordReset(input: UpdateOnePasswordResetInput!): PasswordReset!
  updateOnePattern(input: UpdateOnePatternInput!): Pattern!
  updateOnePatternCategory(input: UpdateOnePatternCategoryInput!): PatternCategory!
  updateOnePatternLayer(input: UpdateOnePatternLayerInput!): PatternLayer!
  updateOnePaymentMethod(input: UpdateOnePaymentMethodInput!): PaymentMethod!
  updateOnePaymentMethodField(input: UpdateOnePaymentMethodFieldInput!): PaymentMethodField!
  updateOnePaymentRequest(input: UpdateOnePaymentRequestInput!): PaymentRequest!
  updateOnePaymentRequestStatus(input: UpdateOnePaymentRequestStatusInput!): PaymentRequestStatus!
  updateOnePermission(input: UpdateOnePermissionInput!): Permission!
  updateOnePermissionGroup(input: UpdateOnePermissionGroupInput!): PermissionGroup!
  updateOnePreorder(input: UpdateOnePreorderInput!): Preorder!
  updateOnePreorderPreorderStatus(input: UpdateOnePreorderPreorderStatusInput!): PreorderPreorderStatus!
  updateOnePreorderRegister(input: UpdateOnePreorderRegisterInput!): PreorderRegister!
  updateOnePreorderStatus(input: UpdateOnePreorderStatusInput!): PreorderStatus!
  updateOnePriceGroup(input: UpdateOnePriceGroupInput!): PriceGroup!
  updateOnePriceGroupSize(input: UpdateOnePriceGroupSizeInput!): PriceGroupSize!
  updateOnePrintProfile(input: UpdateOnePrintProfileInput!): PrintProfile!
  updateOnePrintRip(input: UpdateOnePrintRipInput!): PrintRip!
  updateOneProduct(input: UpdateOneProductInput!): Product!
  updateOneProductCategory(input: UpdateOneProductCategoryInput!): ProductCategory!
  updateOneProductCategoryDetail(input: UpdateOneProductCategoryDetailInput!): ProductCategoryDetail!
  updateOneProductCategoryRate(input: UpdateOneProductCategoryRateInput!): ProductCategoryRate!
  updateOneProductColorImage(input: UpdateOneProductColorImageInput!): ProductColorImage!
  updateOneProductColorSale(input: UpdateOneProductColorSaleInput!): ProductColorSale!
  updateOneProductComment(input: UpdateOneProductCommentInput!): ProductComment!
  updateOneProductCommentLike(input: UpdateOneProductCommentLikeInput!): ProductCommentLike!
  updateOneProductLike(input: UpdateOneProductLikeInput!): ProductLike!
  updateOneProductProductCategory(input: UpdateOneProductProductCategoryInput!): ProductProductCategory!
  updateOneProductRate(input: UpdateOneProductRateInput!): ProductRate!
  updateOneProductRateAverage(input: UpdateOneProductRateAverageInput!): ProductRateAverage!
  updateOneProductTag(input: UpdateOneProductTagInput!): ProductTag!
  updateOneProductVideo(input: UpdateOneProductVideoInput!): ProductVideo!
  updateOneProductionPad(input: UpdateOneProductionPadInput!): ProductionPad!
  updateOneProductionPadProductionPadStatus(input: UpdateOneProductionPadProductionPadStatusInput!): ProductionPadProductionPadStatus!
  updateOneProductionPadStatus(input: UpdateOneProductionPadStatusInput!): ProductionPadStatus!
  updateOneProductionReceiptType(input: UpdateOneProductionReceiptTypeInput!): ProductionReceiptType!
  updateOneProductionRoll(input: UpdateOneProductionRollInput!): ProductionRoll!
  updateOneRate(input: UpdateOneRateInput!): Rate!
  updateOneReadyToSendProduct(input: UpdateOneReadyToSendProductInput!): ReadyToSendProduct!
  updateOneRecommendedProduct(input: UpdateOneRecommendedProductInput!): RecommendedProduct!
  updateOneRecommendedSubproduct(input: UpdateOneRecommendedSubproductInput!): RecommendedSubproduct!
  updateOneRedisSavedKey(input: UpdateOneRedisSavedKeyInput!): RedisSavedKey!
  updateOneRelatedProduct(input: UpdateOneRelatedProductInput!): RelatedProduct!
  updateOneRetargetingWalletCharge(input: UpdateOneRetargetingWalletChargeInput!): RetargetingWalletCharge!
  updateOneReturnItemStatus(input: UpdateOneReturnItemStatusInput!): ReturnItemStatus!
  updateOneReturnItemStatusReturnRequestItem(input: UpdateOneReturnItemStatusReturnRequestItemInput!): ReturnItemStatusReturnRequestItem!
  updateOneReturnReason(input: UpdateOneReturnReasonInput!): ReturnReason!
  updateOneReturnRequest(input: UpdateOneReturnRequestInput!): ReturnRequest!
  updateOneReturnRequestAddress(input: UpdateOneReturnRequestAddressInput!): ReturnRequestAddress!
  updateOneReturnRequestHistory(input: UpdateOneReturnRequestHistoryInput!): ReturnRequestHistory!
  updateOneReturnRequestItem(input: UpdateOneReturnRequestItemInput!): ReturnRequestItem!
  updateOneReturnRequestItemHistory(input: UpdateOneReturnRequestItemHistoryInput!): ReturnRequestItemHistory!
  updateOneReturnRequestItemImage(input: UpdateOneReturnRequestItemImageInput!): ReturnRequestItemImage!
  updateOneReturnRequestItemReturnItemStatus(input: UpdateOneReturnRequestItemReturnItemStatusInput!): ReturnRequestItemReturnItemStatus!
  updateOneReturnRequestItemVideo(input: UpdateOneReturnRequestItemVideoInput!): ReturnRequestItemVideo!
  updateOneReturnRequestReturnStatus(input: UpdateOneReturnRequestReturnStatusInput!): ReturnRequestReturnStatus!
  updateOneReturnStatus(input: UpdateOneReturnStatusInput!): ReturnStatus!
  updateOneReturnType(input: UpdateOneReturnTypeInput!): ReturnType!
  updateOneReturnedInvoice(input: UpdateOneReturnedInvoiceInput!): ReturnedInvoice!
  updateOneReturnedInvoiceProduct(input: UpdateOneReturnedInvoiceProductInput!): ReturnedInvoiceProduct!
  updateOneRfmReport(input: UpdateOneRfmReportInput!): RfmReport!
  updateOneRipTemplate(input: UpdateOneRipTemplateInput!): RipTemplate!
  updateOneRipTemplateItem(input: UpdateOneRipTemplateItemInput!): RipTemplateItem!
  updateOneRoleDomain(input: UpdateOneRoleDomainInput!): RoleDomain!
  updateOneRoleHasPermission(input: UpdateOneRoleHasPermissionInput!): RoleHasPermission!
  updateOneRussian(input: UpdateOneRussianInput!): Russian!
  updateOneSenderInformation(input: UpdateOneSenderInformationInput!): SenderInformation!
  updateOneShippingService(input: UpdateOneShippingServiceInput!): ShippingService!
  updateOneSitemapStaticPage(input: UpdateOneSitemapStaticPageInput!): SitemapStaticPage!
  updateOneSizeGuide(input: UpdateOneSizeGuideInput!): SizeGuide!
  updateOneSizeGuidesDetail(input: UpdateOneSizeGuidesDetailInput!): SizeGuidesDetail!
  updateOneSocialFacebookAccount(input: UpdateOneSocialFacebookAccountInput!): SocialFacebookAccount!
  updateOneSocialGoogleAccount(input: UpdateOneSocialGoogleAccountInput!): SocialGoogleAccount!
  updateOneSpecialOffer(input: UpdateOneSpecialOfferInput!): SpecialOffer!
  updateOneState(input: UpdateOneStateInput!): State!
  updateOneSubcolor(input: UpdateOneSubcolorInput!): Subcolor!
  updateOneSubproduct(input: UpdateOneSubproductInput!): Subproduct!
  updateOneSubproductSpecialImage(input: UpdateOneSubproductSpecialImageInput!): SubproductSpecialImage!
  updateOneSubproductStockHistory(input: UpdateOneSubproductStockHistoryInput!): SubproductStockHistory!
  updateOneSubproductVideo(input: UpdateOneSubproductVideoInput!): SubproductVideo!
  updateOneSubscriber(input: UpdateOneSubscriberInput!): Subscriber!
  updateOneTag(input: UpdateOneTagInput!): Tag!
  updateOneTempSubproductDiscount(input: UpdateOneTempSubproductDiscountInput!): TempSubproductDiscount!
  updateOneTestimonial(input: UpdateOneTestimonialInput!): Testimonial!
  updateOneTextLayer(input: UpdateOneTextLayerInput!): TextLayer!
  updateOneTmpRfmReport(input: UpdateOneTmpRfmReportInput!): TmpRfmReport!
  updateOneTmpRussiaProduct(input: UpdateOneTmpRussiaProductInput!): TmpRussiaProduct!
  updateOneTmpSpainOrder(input: UpdateOneTmpSpainOrderInput!): TmpSpainOrder!
  updateOneTmpSpanishName(input: UpdateOneTmpSpanishNameInput!): TmpSpanishName!
  updateOneTmpTagChangesPrint(input: UpdateOneTmpTagChangesPrintInput!): TmpTagChangesPrint!
  updateOneTorobProduct(input: UpdateOneTorobProductInput!): TorobProduct!
  updateOneTransaction(input: UpdateOneTransactionInput!): Transaction!
  updateOneUser(input: UpdateOneUserInput!): User!
  updateOneUserCart(input: UpdateOneUserCartInput!): UserCart!
  updateOneUserHasPermission(input: UpdateOneUserHasPermissionInput!): UserHasPermission!
  updateOneUserHasRole(input: UpdateOneUserHasRoleInput!): UserHasRole!
  updateOneUserUtm(input: UpdateOneUserUtmInput!): UserUtm!
  updateOneUtm(input: UpdateOneUtmInput!): Utm!
  updateOneUtmGoogleFormCoupon(input: UpdateOneUtmGoogleFormCouponInput!): UtmGoogleFormCoupon!
  updateOneVerifyUser(input: UpdateOneVerifyUserInput!): VerifyUser!
  updateOneVideo(input: UpdateOneVideoInput!): Video!
  updateOneVisitor(input: UpdateOneVisitorInput!): Visitor!
  updateOneVisitorCoupon(input: UpdateOneVisitorCouponInput!): VisitorCoupon!
  updateOneVisitorGroup(input: UpdateOneVisitorGroupInput!): VisitorGroup!
  updateOneVisitorGroupRate(input: UpdateOneVisitorGroupRateInput!): VisitorGroupRate!
  updateOneVisitorSale(input: UpdateOneVisitorSaleInput!): VisitorSale!
  updateOneWallet(input: UpdateOneWalletInput!): Wallet!
  updateOneWalletGiftCharge(input: UpdateOneWalletGiftChargeInput!): WalletGiftCharge!
  updateOneWalletHistory(input: UpdateOneWalletHistoryInput!): WalletHistory!
  updateOneWebsitePage(input: UpdateOneWebsitePageInput!): WebsitePage!
  updateOneWebsiteVisit(input: UpdateOneWebsiteVisitInput!): WebsiteVisit!
  updateOneWithdrawalRequest(input: UpdateOneWithdrawalRequestInput!): WithdrawalRequest!
  updateOneWithdrawalRequestStatus(input: UpdateOneWithdrawalRequestStatusInput!): WithdrawalRequestStatus!
  updateOneWonderfulOffer(input: UpdateOneWonderfulOfferInput!): WonderfulOffer!
  updateUser(updateUserInput: UpdateUserInput!): UpdateUserResponseDto!
  updateWallet(updateWalletInput: UpdateWalletInput!): UpdateWalletResponseDto!
}

type NeedsPhotographySubproduct {
  announcedDate: DateTime
  announcedUser: User
  announcedUserId: Float
  createdAt: DateTime
  deletedAt: DateTime
  id: ID!
  photographyDate: DateTime
  photographyUser: User
  photographyUserId: Float
  subproduct: Subproduct
  subproductId: Float!
  updatedAt: DateTime
}

type NeedsPhotographySubproductConnection {
  """Array of edges."""
  edges: [NeedsPhotographySubproductEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input NeedsPhotographySubproductDeleteFilter {
  and: [NeedsPhotographySubproductDeleteFilter!]
  id: IDFilterComparison
  or: [NeedsPhotographySubproductDeleteFilter!]
}

type NeedsPhotographySubproductDeleteResponse {
  announcedDate: DateTime
  announcedUser: User
  announcedUserId: Float
  createdAt: DateTime
  deletedAt: DateTime
  id: ID
  photographyDate: DateTime
  photographyUser: User
  photographyUserId: Float
  subproduct: Subproduct
  subproductId: Float
  updatedAt: DateTime
}

input NeedsPhotographySubproductDomain {
  announcedDate: DateTime
  announcedUser: UserDomain
  announcedUserId: Float
  createdAt: DateTime
  deletedAt: DateTime
  id: ID!
  photographyDate: DateTime
  photographyUser: UserDomain
  photographyUserId: Float
  subproduct: SubproductDomain
  subproductId: Float!
  updatedAt: DateTime
}

type NeedsPhotographySubproductEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the NeedsPhotographySubproduct"""
  node: NeedsPhotographySubproduct!
}

input NeedsPhotographySubproductFilter {
  and: [NeedsPhotographySubproductFilter!]
  id: IDFilterComparison
  or: [NeedsPhotographySubproductFilter!]
}

input NeedsPhotographySubproductSort {
  direction: SortDirection!
  field: NeedsPhotographySubproductSortFields!
  nulls: SortNulls
}

enum NeedsPhotographySubproductSortFields {
  id
}

input NeedsPhotographySubproductUpdateFilter {
  and: [NeedsPhotographySubproductUpdateFilter!]
  id: IDFilterComparison
  or: [NeedsPhotographySubproductUpdateFilter!]
}

type Negotiation {
  createdAt: DateTime
  customerId: Float
  dateTime: DateTime!
  fileNegotiations: [FileNegotiation!]
  id: ID!
  invoiceNegotiations: [InvoiceNegotiation!]
  isRead: Boolean!
  name: String
  negotiationHistories: [NegotiationHistory!]
  negotiationStatus: NegotiationStatus
  negotiationStatusId: Float!
  negotiationSteps: [NegotiationStep!]
  negotiator: User
  negotiatorId: Float!
  priority: Float!
  submittedBy: Float!
  submittedBy2: User
  tel: String
  updatedAt: DateTime
}

type NegotiationConnection {
  """Array of edges."""
  edges: [NegotiationEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input NegotiationDeleteFilter {
  and: [NegotiationDeleteFilter!]
  id: IDFilterComparison
  or: [NegotiationDeleteFilter!]
}

type NegotiationDeleteResponse {
  createdAt: DateTime
  customerId: Float
  dateTime: DateTime
  fileNegotiations: [FileNegotiation!]
  id: ID
  invoiceNegotiations: [InvoiceNegotiation!]
  isRead: Boolean
  name: String
  negotiationHistories: [NegotiationHistory!]
  negotiationStatus: NegotiationStatus
  negotiationStatusId: Float
  negotiationSteps: [NegotiationStep!]
  negotiator: User
  negotiatorId: Float
  priority: Float
  submittedBy: Float
  submittedBy2: User
  tel: String
  updatedAt: DateTime
}

input NegotiationDomain {
  createdAt: DateTime
  customerId: Float
  dateTime: DateTime!
  fileNegotiations: [FileNegotiationDomain!]
  id: ID!
  invoiceNegotiations: [InvoiceNegotiationDomain!]
  isRead: Boolean!
  name: String
  negotiationHistories: [NegotiationHistoryDomain!]
  negotiationStatus: NegotiationStatusDomain
  negotiationStatusId: Float!
  negotiationSteps: [NegotiationStepDomain!]
  negotiator: UserDomain
  negotiatorId: Float!
  priority: Float!
  submittedBy: Float!
  submittedBy2: UserDomain
  tel: String
  updatedAt: DateTime
}

type NegotiationEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Negotiation"""
  node: Negotiation!
}

input NegotiationFilter {
  and: [NegotiationFilter!]
  id: IDFilterComparison
  or: [NegotiationFilter!]
}

type NegotiationHistory {
  createdAt: DateTime
  id: ID!
  negotiation: Negotiation
  negotiationId: Float!
  negotiationStatus: NegotiationStatus
  negotiationStatusId: Float!
  newNegotiator: User
  newNegotiatorId: Float!
  oldNegotiator: User
  oldNegotiatorId: Float!
  submittedBy: Float!
  submittedBy2: User
  updatedAt: DateTime
}

type NegotiationHistoryConnection {
  """Array of edges."""
  edges: [NegotiationHistoryEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input NegotiationHistoryDeleteFilter {
  and: [NegotiationHistoryDeleteFilter!]
  id: IDFilterComparison
  or: [NegotiationHistoryDeleteFilter!]
}

type NegotiationHistoryDeleteResponse {
  createdAt: DateTime
  id: ID
  negotiation: Negotiation
  negotiationId: Float
  negotiationStatus: NegotiationStatus
  negotiationStatusId: Float
  newNegotiator: User
  newNegotiatorId: Float
  oldNegotiator: User
  oldNegotiatorId: Float
  submittedBy: Float
  submittedBy2: User
  updatedAt: DateTime
}

input NegotiationHistoryDomain {
  createdAt: DateTime
  id: ID!
  negotiation: NegotiationDomain
  negotiationId: Float!
  negotiationStatus: NegotiationStatusDomain
  negotiationStatusId: Float!
  newNegotiator: UserDomain
  newNegotiatorId: Float!
  oldNegotiator: UserDomain
  oldNegotiatorId: Float!
  submittedBy: Float!
  submittedBy2: UserDomain
  updatedAt: DateTime
}

type NegotiationHistoryEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the NegotiationHistory"""
  node: NegotiationHistory!
}

input NegotiationHistoryFilter {
  and: [NegotiationHistoryFilter!]
  id: IDFilterComparison
  or: [NegotiationHistoryFilter!]
}

input NegotiationHistorySort {
  direction: SortDirection!
  field: NegotiationHistorySortFields!
  nulls: SortNulls
}

enum NegotiationHistorySortFields {
  id
}

input NegotiationHistoryUpdateFilter {
  and: [NegotiationHistoryUpdateFilter!]
  id: IDFilterComparison
  or: [NegotiationHistoryUpdateFilter!]
}

input NegotiationSort {
  direction: SortDirection!
  field: NegotiationSortFields!
  nulls: SortNulls
}

enum NegotiationSortFields {
  id
}

type NegotiationStatus {
  createdAt: DateTime
  id: ID!
  name: String
  negotiationHistories: [NegotiationHistory!]
  negotiations: [Negotiation!]
  updatedAt: DateTime
}

type NegotiationStatusConnection {
  """Array of edges."""
  edges: [NegotiationStatusEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input NegotiationStatusDeleteFilter {
  and: [NegotiationStatusDeleteFilter!]
  id: IDFilterComparison
  or: [NegotiationStatusDeleteFilter!]
}

type NegotiationStatusDeleteResponse {
  createdAt: DateTime
  id: ID
  name: String
  negotiationHistories: [NegotiationHistory!]
  negotiations: [Negotiation!]
  updatedAt: DateTime
}

input NegotiationStatusDomain {
  createdAt: DateTime
  id: ID!
  name: String
  negotiationHistories: [NegotiationHistoryDomain!]
  negotiations: [NegotiationDomain!]
  updatedAt: DateTime
}

type NegotiationStatusEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the NegotiationStatus"""
  node: NegotiationStatus!
}

input NegotiationStatusFilter {
  and: [NegotiationStatusFilter!]
  id: IDFilterComparison
  or: [NegotiationStatusFilter!]
}

input NegotiationStatusSort {
  direction: SortDirection!
  field: NegotiationStatusSortFields!
  nulls: SortNulls
}

enum NegotiationStatusSortFields {
  id
}

input NegotiationStatusUpdateFilter {
  and: [NegotiationStatusUpdateFilter!]
  id: IDFilterComparison
  or: [NegotiationStatusUpdateFilter!]
}

type NegotiationStep {
  content: String!
  createdAt: DateTime
  id: ID!
  negotiation: Negotiation
  negotiationId: Float!
  negotiationType: NegotiationType
  negotiationTypeId: Float!
  submittedAt: DateTime!
  submittedBy: Float!
  submittedBy2: User
  updatedAt: DateTime
}

type NegotiationStepConnection {
  """Array of edges."""
  edges: [NegotiationStepEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input NegotiationStepDeleteFilter {
  and: [NegotiationStepDeleteFilter!]
  id: IDFilterComparison
  or: [NegotiationStepDeleteFilter!]
}

type NegotiationStepDeleteResponse {
  content: String
  createdAt: DateTime
  id: ID
  negotiation: Negotiation
  negotiationId: Float
  negotiationType: NegotiationType
  negotiationTypeId: Float
  submittedAt: DateTime
  submittedBy: Float
  submittedBy2: User
  updatedAt: DateTime
}

input NegotiationStepDomain {
  content: String!
  createdAt: DateTime
  id: ID!
  negotiation: NegotiationDomain
  negotiationId: Float!
  negotiationType: NegotiationTypeDomain
  negotiationTypeId: Float!
  submittedAt: DateTime!
  submittedBy: Float!
  submittedBy2: UserDomain
  updatedAt: DateTime
}

type NegotiationStepEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the NegotiationStep"""
  node: NegotiationStep!
}

input NegotiationStepFilter {
  and: [NegotiationStepFilter!]
  id: IDFilterComparison
  or: [NegotiationStepFilter!]
}

input NegotiationStepSort {
  direction: SortDirection!
  field: NegotiationStepSortFields!
  nulls: SortNulls
}

enum NegotiationStepSortFields {
  id
}

input NegotiationStepUpdateFilter {
  and: [NegotiationStepUpdateFilter!]
  id: IDFilterComparison
  or: [NegotiationStepUpdateFilter!]
}

type NegotiationType {
  createdAt: DateTime
  id: ID!
  name: String
  negotiationSteps: [NegotiationStep!]
  updatedAt: DateTime
}

type NegotiationTypeConnection {
  """Array of edges."""
  edges: [NegotiationTypeEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input NegotiationTypeDeleteFilter {
  and: [NegotiationTypeDeleteFilter!]
  id: IDFilterComparison
  or: [NegotiationTypeDeleteFilter!]
}

type NegotiationTypeDeleteResponse {
  createdAt: DateTime
  id: ID
  name: String
  negotiationSteps: [NegotiationStep!]
  updatedAt: DateTime
}

input NegotiationTypeDomain {
  createdAt: DateTime
  id: ID!
  name: String
  negotiationSteps: [NegotiationStepDomain!]
  updatedAt: DateTime
}

type NegotiationTypeEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the NegotiationType"""
  node: NegotiationType!
}

input NegotiationTypeFilter {
  and: [NegotiationTypeFilter!]
  id: IDFilterComparison
  or: [NegotiationTypeFilter!]
}

input NegotiationTypeSort {
  direction: SortDirection!
  field: NegotiationTypeSortFields!
  nulls: SortNulls
}

enum NegotiationTypeSortFields {
  id
}

input NegotiationTypeUpdateFilter {
  and: [NegotiationTypeUpdateFilter!]
  id: IDFilterComparison
  or: [NegotiationTypeUpdateFilter!]
}

input NegotiationUpdateFilter {
  and: [NegotiationUpdateFilter!]
  id: IDFilterComparison
  or: [NegotiationUpdateFilter!]
}

type NewBorder {
  brand: String
  color: String
  design: String
  designer: String
  id: ID!
  material: String
  name: String
  newBorder: String
  oldBorder: String
  sizes: String
  type: String
}

type NewBorderConnection {
  """Array of edges."""
  edges: [NewBorderEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input NewBorderDeleteFilter {
  and: [NewBorderDeleteFilter!]
  id: IDFilterComparison
  or: [NewBorderDeleteFilter!]
}

type NewBorderDeleteResponse {
  brand: String
  color: String
  design: String
  designer: String
  id: ID
  material: String
  name: String
  newBorder: String
  oldBorder: String
  sizes: String
  type: String
}

input NewBorderDomain {
  brand: String
  color: String
  design: String
  designer: String
  id: ID!
  material: String
  name: String
  newBorder: String
  oldBorder: String
  sizes: String
  type: String
}

type NewBorderEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the NewBorder"""
  node: NewBorder!
}

input NewBorderFilter {
  and: [NewBorderFilter!]
  id: IDFilterComparison
  or: [NewBorderFilter!]
}

input NewBorderSort {
  direction: SortDirection!
  field: NewBorderSortFields!
  nulls: SortNulls
}

enum NewBorderSortFields {
  id
}

input NewBorderUpdateFilter {
  and: [NewBorderUpdateFilter!]
  id: IDFilterComparison
  or: [NewBorderUpdateFilter!]
}

input NumberFieldComparison {
  between: NumberFieldComparisonBetween
  eq: Float
  gt: Float
  gte: Float
  in: [Float!]
  is: Boolean
  isNot: Boolean
  lt: Float
  lte: Float
  neq: Float
  notBetween: NumberFieldComparisonBetween
  notIn: [Float!]
}

input NumberFieldComparisonBetween {
  lower: Float!
  upper: Float!
}

type OauthAccessToken {
  clientId: Float!
  createdAt: DateTime
  expiresAt: DateTime
  id: ID!
  name: String
  revoked: Boolean!
  scopes: String
  updatedAt: DateTime
  userId: Float
}

type OauthAccessTokenConnection {
  """Array of edges."""
  edges: [OauthAccessTokenEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input OauthAccessTokenDeleteFilter {
  and: [OauthAccessTokenDeleteFilter!]
  id: IDFilterComparison
  or: [OauthAccessTokenDeleteFilter!]
}

type OauthAccessTokenDeleteResponse {
  clientId: Float
  createdAt: DateTime
  expiresAt: DateTime
  id: ID
  name: String
  revoked: Boolean
  scopes: String
  updatedAt: DateTime
  userId: Float
}

input OauthAccessTokenDomain {
  clientId: Float!
  createdAt: DateTime
  expiresAt: DateTime
  id: ID!
  name: String
  revoked: Boolean!
  scopes: String
  updatedAt: DateTime
  userId: Float
}

type OauthAccessTokenEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the OauthAccessToken"""
  node: OauthAccessToken!
}

input OauthAccessTokenFilter {
  and: [OauthAccessTokenFilter!]
  id: IDFilterComparison
  or: [OauthAccessTokenFilter!]
}

input OauthAccessTokenSort {
  direction: SortDirection!
  field: OauthAccessTokenSortFields!
  nulls: SortNulls
}

enum OauthAccessTokenSortFields {
  id
}

input OauthAccessTokenUpdateFilter {
  and: [OauthAccessTokenUpdateFilter!]
  id: IDFilterComparison
  or: [OauthAccessTokenUpdateFilter!]
}

type OauthAuthCode {
  clientId: Float!
  expiresAt: DateTime
  id: ID!
  revoked: Boolean!
  scopes: String
  userId: Float!
}

type OauthAuthCodeConnection {
  """Array of edges."""
  edges: [OauthAuthCodeEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input OauthAuthCodeDeleteFilter {
  and: [OauthAuthCodeDeleteFilter!]
  id: IDFilterComparison
  or: [OauthAuthCodeDeleteFilter!]
}

type OauthAuthCodeDeleteResponse {
  clientId: Float
  expiresAt: DateTime
  id: ID
  revoked: Boolean
  scopes: String
  userId: Float
}

input OauthAuthCodeDomain {
  clientId: Float!
  expiresAt: DateTime
  id: ID!
  revoked: Boolean!
  scopes: String
  userId: Float!
}

type OauthAuthCodeEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the OauthAuthCode"""
  node: OauthAuthCode!
}

input OauthAuthCodeFilter {
  and: [OauthAuthCodeFilter!]
  id: IDFilterComparison
  or: [OauthAuthCodeFilter!]
}

input OauthAuthCodeSort {
  direction: SortDirection!
  field: OauthAuthCodeSortFields!
  nulls: SortNulls
}

enum OauthAuthCodeSortFields {
  id
}

input OauthAuthCodeUpdateFilter {
  and: [OauthAuthCodeUpdateFilter!]
  id: IDFilterComparison
  or: [OauthAuthCodeUpdateFilter!]
}

type OauthClient {
  createdAt: DateTime
  id: ID!
  name: String!
  passwordClient: Boolean!
  personalAccessClient: Boolean!
  provider: String
  redirect: String!
  revoked: Boolean!
  secret: String
  updatedAt: DateTime
  userId: Float
}

type OauthClientConnection {
  """Array of edges."""
  edges: [OauthClientEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input OauthClientDeleteFilter {
  and: [OauthClientDeleteFilter!]
  id: IDFilterComparison
  or: [OauthClientDeleteFilter!]
}

type OauthClientDeleteResponse {
  createdAt: DateTime
  id: ID
  name: String
  passwordClient: Boolean
  personalAccessClient: Boolean
  provider: String
  redirect: String
  revoked: Boolean
  secret: String
  updatedAt: DateTime
  userId: Float
}

input OauthClientDomain {
  createdAt: DateTime
  id: ID!
  name: String!
  passwordClient: Boolean!
  personalAccessClient: Boolean!
  provider: String
  redirect: String!
  revoked: Boolean!
  secret: String
  updatedAt: DateTime
  userId: Float
}

type OauthClientEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the OauthClient"""
  node: OauthClient!
}

input OauthClientFilter {
  and: [OauthClientFilter!]
  id: IDFilterComparison
  or: [OauthClientFilter!]
}

input OauthClientSort {
  direction: SortDirection!
  field: OauthClientSortFields!
  nulls: SortNulls
}

enum OauthClientSortFields {
  id
}

input OauthClientUpdateFilter {
  and: [OauthClientUpdateFilter!]
  id: IDFilterComparison
  or: [OauthClientUpdateFilter!]
}

type OauthPersonalAccessClient {
  clientId: Float!
  createdAt: DateTime
  id: ID!
  updatedAt: DateTime
}

type OauthPersonalAccessClientConnection {
  """Array of edges."""
  edges: [OauthPersonalAccessClientEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input OauthPersonalAccessClientDeleteFilter {
  and: [OauthPersonalAccessClientDeleteFilter!]
  id: IDFilterComparison
  or: [OauthPersonalAccessClientDeleteFilter!]
}

type OauthPersonalAccessClientDeleteResponse {
  clientId: Float
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
}

input OauthPersonalAccessClientDomain {
  clientId: Float!
  createdAt: DateTime
  id: ID!
  updatedAt: DateTime
}

type OauthPersonalAccessClientEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the OauthPersonalAccessClient"""
  node: OauthPersonalAccessClient!
}

input OauthPersonalAccessClientFilter {
  and: [OauthPersonalAccessClientFilter!]
  id: IDFilterComparison
  or: [OauthPersonalAccessClientFilter!]
}

input OauthPersonalAccessClientSort {
  direction: SortDirection!
  field: OauthPersonalAccessClientSortFields!
  nulls: SortNulls
}

enum OauthPersonalAccessClientSortFields {
  id
}

input OauthPersonalAccessClientUpdateFilter {
  and: [OauthPersonalAccessClientUpdateFilter!]
  id: IDFilterComparison
  or: [OauthPersonalAccessClientUpdateFilter!]
}

type OauthRefreshToken {
  accessTokenId: String!
  expiresAt: DateTime
  id: ID!
  revoked: Boolean!
}

type OauthRefreshTokenConnection {
  """Array of edges."""
  edges: [OauthRefreshTokenEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input OauthRefreshTokenDeleteFilter {
  and: [OauthRefreshTokenDeleteFilter!]
  id: IDFilterComparison
  or: [OauthRefreshTokenDeleteFilter!]
}

type OauthRefreshTokenDeleteResponse {
  accessTokenId: String
  expiresAt: DateTime
  id: ID
  revoked: Boolean
}

input OauthRefreshTokenDomain {
  accessTokenId: String!
  expiresAt: DateTime
  id: ID!
  revoked: Boolean!
}

type OauthRefreshTokenEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the OauthRefreshToken"""
  node: OauthRefreshToken!
}

input OauthRefreshTokenFilter {
  and: [OauthRefreshTokenFilter!]
  id: IDFilterComparison
  or: [OauthRefreshTokenFilter!]
}

input OauthRefreshTokenSort {
  direction: SortDirection!
  field: OauthRefreshTokenSortFields!
  nulls: SortNulls
}

enum OauthRefreshTokenSortFields {
  id
}

input OauthRefreshTokenUpdateFilter {
  and: [OauthRefreshTokenUpdateFilter!]
  id: IDFilterComparison
  or: [OauthRefreshTokenUpdateFilter!]
}

type OffsetPageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean
}

input OffsetPaging {
  """Limit the number of records returned"""
  limit: Int

  """Offset to start returning records from"""
  offset: Int
}

type OutOfStockButListedProduct {
  createdAt: DateTime
  id: ID!
  product: Product!
  productId: Float!
  updatedAt: DateTime
}

type OutOfStockButListedProductConnection {
  """Array of edges."""
  edges: [OutOfStockButListedProductEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input OutOfStockButListedProductDeleteFilter {
  and: [OutOfStockButListedProductDeleteFilter!]
  id: IDFilterComparison
  or: [OutOfStockButListedProductDeleteFilter!]
}

type OutOfStockButListedProductDeleteResponse {
  createdAt: DateTime
  id: ID
  product: Product
  productId: Float
  updatedAt: DateTime
}

input OutOfStockButListedProductDomain {
  createdAt: DateTime
  id: ID!
  product: ProductDomain!
  productId: Float!
  updatedAt: DateTime
}

type OutOfStockButListedProductEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the OutOfStockButListedProduct"""
  node: OutOfStockButListedProduct!
}

input OutOfStockButListedProductFilter {
  and: [OutOfStockButListedProductFilter!]
  id: IDFilterComparison
  or: [OutOfStockButListedProductFilter!]
}

input OutOfStockButListedProductSort {
  direction: SortDirection!
  field: OutOfStockButListedProductSortFields!
  nulls: SortNulls
}

enum OutOfStockButListedProductSortFields {
  id
}

input OutOfStockButListedProductUpdateFilter {
  and: [OutOfStockButListedProductUpdateFilter!]
  id: IDFilterComparison
  or: [OutOfStockButListedProductUpdateFilter!]
}

type PageInfo {
  """The cursor of the last returned record."""
  endCursor: ConnectionCursor

  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean

  """The cursor of the first returned record."""
  startCursor: ConnectionCursor
}

type PasswordReset {
  createdAt: DateTime
  email: ID!
  token: String!
}

type PasswordResetConnection {
  """Array of edges."""
  edges: [PasswordResetEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input PasswordResetDeleteFilter {
  and: [PasswordResetDeleteFilter!]
  email: IDFilterComparison
  or: [PasswordResetDeleteFilter!]
}

type PasswordResetDeleteResponse {
  createdAt: DateTime
  email: ID
  token: String
}

input PasswordResetDomain {
  createdAt: DateTime
  email: ID!
  token: String!
}

type PasswordResetEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the PasswordReset"""
  node: PasswordReset!
}

input PasswordResetFilter {
  and: [PasswordResetFilter!]
  email: IDFilterComparison
  or: [PasswordResetFilter!]
}

input PasswordResetSort {
  direction: SortDirection!
  field: PasswordResetSortFields!
  nulls: SortNulls
}

enum PasswordResetSortFields {
  email
}

input PasswordResetUpdateFilter {
  and: [PasswordResetUpdateFilter!]
  email: IDFilterComparison
  or: [PasswordResetUpdateFilter!]
}

type Pattern {
  createdAt: DateTime
  filename: String
  id: ID!
  isActive: Float
  keywords: String
  mime: String
  name: String!
  originalFilename: String
  path: String!
  patternCategory: PatternCategory!
  patternCategoryId: Float!
  patternLayers: [PatternLayer!]!
  sortOrder: Float
  thumbnailFilename: String
  updatedAt: DateTime
  viewCounter: Float
}

type PatternCategory {
  createdAt: DateTime
  id: ID!
  image: Image
  imageId: Float
  isActive: Float
  name: String!
  patterns: [Pattern!]!
  sortOrder: Float
  updatedAt: DateTime
  viewCounter: Float
}

type PatternCategoryConnection {
  """Array of edges."""
  edges: [PatternCategoryEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input PatternCategoryDeleteFilter {
  and: [PatternCategoryDeleteFilter!]
  id: IDFilterComparison
  or: [PatternCategoryDeleteFilter!]
}

type PatternCategoryDeleteResponse {
  createdAt: DateTime
  id: ID
  image: Image
  imageId: Float
  isActive: Float
  name: String
  patterns: [Pattern!]
  sortOrder: Float
  updatedAt: DateTime
  viewCounter: Float
}

input PatternCategoryDomain {
  createdAt: DateTime
  id: ID!
  image: ImageDomain
  imageId: Float
  isActive: Float
  name: String!
  patterns: [PatternDomain!]!
  sortOrder: Float
  updatedAt: DateTime
  viewCounter: Float
}

type PatternCategoryEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the PatternCategory"""
  node: PatternCategory!
}

input PatternCategoryFilter {
  and: [PatternCategoryFilter!]
  id: IDFilterComparison
  or: [PatternCategoryFilter!]
}

input PatternCategorySort {
  direction: SortDirection!
  field: PatternCategorySortFields!
  nulls: SortNulls
}

enum PatternCategorySortFields {
  id
}

input PatternCategoryUpdateFilter {
  and: [PatternCategoryUpdateFilter!]
  id: IDFilterComparison
  or: [PatternCategoryUpdateFilter!]
}

type PatternConnection {
  """Array of edges."""
  edges: [PatternEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input PatternDeleteFilter {
  and: [PatternDeleteFilter!]
  id: IDFilterComparison
  or: [PatternDeleteFilter!]
}

type PatternDeleteResponse {
  createdAt: DateTime
  filename: String
  id: ID
  isActive: Float
  keywords: String
  mime: String
  name: String
  originalFilename: String
  path: String
  patternCategory: PatternCategory
  patternCategoryId: Float
  patternLayers: [PatternLayer!]
  sortOrder: Float
  thumbnailFilename: String
  updatedAt: DateTime
  viewCounter: Float
}

input PatternDomain {
  createdAt: DateTime
  filename: String
  id: ID!
  isActive: Float
  keywords: String
  mime: String
  name: String!
  originalFilename: String
  path: String!
  patternCategory: PatternCategoryDomain!
  patternCategoryId: Float!
  patternLayers: [PatternLayerDomain!]!
  sortOrder: Float
  thumbnailFilename: String
  updatedAt: DateTime
  viewCounter: Float
}

type PatternEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Pattern"""
  node: Pattern!
}

input PatternFilter {
  and: [PatternFilter!]
  id: IDFilterComparison
  or: [PatternFilter!]
}

type PatternLayer {
  centerX: Float!
  centerY: Float!
  createdAt: DateTime
  design: Design!
  designId: Float!
  filename: String!
  id: ID!
  path: String!
  pattern: Pattern!
  patternId: Float!
  repeat: Float!
  rotation: Float!
  scaleX: Float!
  scaleY: Float!
  sortOrder: Float!
  updatedAt: DateTime
}

type PatternLayerConnection {
  """Array of edges."""
  edges: [PatternLayerEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input PatternLayerDeleteFilter {
  and: [PatternLayerDeleteFilter!]
  id: IDFilterComparison
  or: [PatternLayerDeleteFilter!]
}

type PatternLayerDeleteResponse {
  centerX: Float
  centerY: Float
  createdAt: DateTime
  design: Design
  designId: Float
  filename: String
  id: ID
  path: String
  pattern: Pattern
  patternId: Float
  repeat: Float
  rotation: Float
  scaleX: Float
  scaleY: Float
  sortOrder: Float
  updatedAt: DateTime
}

input PatternLayerDomain {
  centerX: Float!
  centerY: Float!
  createdAt: DateTime
  design: DesignDomain!
  designId: Float!
  filename: String!
  id: ID!
  path: String!
  pattern: PatternDomain!
  patternId: Float!
  repeat: Float!
  rotation: Float!
  scaleX: Float!
  scaleY: Float!
  sortOrder: Float!
  updatedAt: DateTime
}

type PatternLayerEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the PatternLayer"""
  node: PatternLayer!
}

input PatternLayerFilter {
  and: [PatternLayerFilter!]
  id: IDFilterComparison
  or: [PatternLayerFilter!]
}

input PatternLayerSort {
  direction: SortDirection!
  field: PatternLayerSortFields!
  nulls: SortNulls
}

enum PatternLayerSortFields {
  id
}

input PatternLayerUpdateFilter {
  and: [PatternLayerUpdateFilter!]
  id: IDFilterComparison
  or: [PatternLayerUpdateFilter!]
}

input PatternSort {
  direction: SortDirection!
  field: PatternSortFields!
  nulls: SortNulls
}

enum PatternSortFields {
  id
}

input PatternUpdateFilter {
  and: [PatternUpdateFilter!]
  id: IDFilterComparison
  or: [PatternUpdateFilter!]
}

type PaymentMethod {
  id: ID!
  name: String!
  paymentMethodFields: [PaymentMethodField!]!
}

type PaymentMethodConnection {
  """Array of edges."""
  edges: [PaymentMethodEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input PaymentMethodDeleteFilter {
  and: [PaymentMethodDeleteFilter!]
  id: IDFilterComparison
  or: [PaymentMethodDeleteFilter!]
}

type PaymentMethodDeleteResponse {
  id: ID
  name: String
  paymentMethodFields: [PaymentMethodField!]
}

input PaymentMethodDomain {
  id: ID!
  name: String!
  paymentMethodFields: [PaymentMethodFieldDomain!]!
}

type PaymentMethodEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the PaymentMethod"""
  node: PaymentMethod!
}

type PaymentMethodField {
  createdAt: DateTime
  id: ID!
  invoice: Invoice!
  invoiceId: Float!
  name: String!
  paymentIdentifier: String!
  paymentMethod: PaymentMethod!
  paymentMethodId: Float!
  updatedAt: DateTime
  value: String!
}

type PaymentMethodFieldConnection {
  """Array of edges."""
  edges: [PaymentMethodFieldEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input PaymentMethodFieldDeleteFilter {
  and: [PaymentMethodFieldDeleteFilter!]
  id: IDFilterComparison
  or: [PaymentMethodFieldDeleteFilter!]
}

type PaymentMethodFieldDeleteResponse {
  createdAt: DateTime
  id: ID
  invoice: Invoice
  invoiceId: Float
  name: String
  paymentIdentifier: String
  paymentMethod: PaymentMethod
  paymentMethodId: Float
  updatedAt: DateTime
  value: String
}

input PaymentMethodFieldDomain {
  createdAt: DateTime
  id: ID!
  invoice: InvoiceDomain!
  invoiceId: Float!
  name: String!
  paymentIdentifier: String!
  paymentMethod: PaymentMethodDomain!
  paymentMethodId: Float!
  updatedAt: DateTime
  value: String!
}

type PaymentMethodFieldEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the PaymentMethodField"""
  node: PaymentMethodField!
}

input PaymentMethodFieldFilter {
  and: [PaymentMethodFieldFilter!]
  id: IDFilterComparison
  or: [PaymentMethodFieldFilter!]
}

input PaymentMethodFieldSort {
  direction: SortDirection!
  field: PaymentMethodFieldSortFields!
  nulls: SortNulls
}

enum PaymentMethodFieldSortFields {
  id
}

input PaymentMethodFieldUpdateFilter {
  and: [PaymentMethodFieldUpdateFilter!]
  id: IDFilterComparison
  or: [PaymentMethodFieldUpdateFilter!]
}

input PaymentMethodFilter {
  and: [PaymentMethodFilter!]
  id: IDFilterComparison
  or: [PaymentMethodFilter!]
}

input PaymentMethodSort {
  direction: SortDirection!
  field: PaymentMethodSortFields!
  nulls: SortNulls
}

enum PaymentMethodSortFields {
  id
}

input PaymentMethodUpdateFilter {
  and: [PaymentMethodUpdateFilter!]
  id: IDFilterComparison
  or: [PaymentMethodUpdateFilter!]
}

type PaymentRequest {
  adminUser: User
  adminUserId: Float
  amount: String
  bankAccountNumber: String
  createdAt: DateTime!
  id: ID!
  message: String
  paymentRequestStatus: PaymentRequestStatus!
  paymentRequestStatusId: Float!
  updatedAt: DateTime
  visitor: Visitor!
  visitorId: Float!
}

type PaymentRequestConnection {
  """Array of edges."""
  edges: [PaymentRequestEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input PaymentRequestDeleteFilter {
  and: [PaymentRequestDeleteFilter!]
  id: IDFilterComparison
  or: [PaymentRequestDeleteFilter!]
}

type PaymentRequestDeleteResponse {
  adminUser: User
  adminUserId: Float
  amount: String
  bankAccountNumber: String
  createdAt: DateTime
  id: ID
  message: String
  paymentRequestStatus: PaymentRequestStatus
  paymentRequestStatusId: Float
  updatedAt: DateTime
  visitor: Visitor
  visitorId: Float
}

input PaymentRequestDomain {
  adminUser: UserDomain
  adminUserId: Float
  amount: String
  bankAccountNumber: String
  createdAt: DateTime!
  id: ID!
  message: String
  paymentRequestStatus: PaymentRequestStatusDomain!
  paymentRequestStatusId: Float!
  updatedAt: DateTime
  visitor: VisitorDomain!
  visitorId: Float!
}

type PaymentRequestEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the PaymentRequest"""
  node: PaymentRequest!
}

input PaymentRequestFilter {
  and: [PaymentRequestFilter!]
  id: IDFilterComparison
  or: [PaymentRequestFilter!]
}

input PaymentRequestSort {
  direction: SortDirection!
  field: PaymentRequestSortFields!
  nulls: SortNulls
}

enum PaymentRequestSortFields {
  id
}

type PaymentRequestStatus {
  createdAt: DateTime!
  id: ID!
  name: String!
  paymentRequests: [PaymentRequest!]!
  updatedAt: DateTime!
}

type PaymentRequestStatusConnection {
  """Array of edges."""
  edges: [PaymentRequestStatusEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input PaymentRequestStatusDeleteFilter {
  and: [PaymentRequestStatusDeleteFilter!]
  id: IDFilterComparison
  or: [PaymentRequestStatusDeleteFilter!]
}

type PaymentRequestStatusDeleteResponse {
  createdAt: DateTime
  id: ID
  name: String
  paymentRequests: [PaymentRequest!]
  updatedAt: DateTime
}

input PaymentRequestStatusDomain {
  createdAt: DateTime!
  id: ID!
  name: String!
  paymentRequests: [PaymentRequestDomain!]!
  updatedAt: DateTime!
}

type PaymentRequestStatusEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the PaymentRequestStatus"""
  node: PaymentRequestStatus!
}

input PaymentRequestStatusFilter {
  and: [PaymentRequestStatusFilter!]
  id: IDFilterComparison
  or: [PaymentRequestStatusFilter!]
}

input PaymentRequestStatusSort {
  direction: SortDirection!
  field: PaymentRequestStatusSortFields!
  nulls: SortNulls
}

enum PaymentRequestStatusSortFields {
  id
}

input PaymentRequestStatusUpdateFilter {
  and: [PaymentRequestStatusUpdateFilter!]
  id: IDFilterComparison
  or: [PaymentRequestStatusUpdateFilter!]
}

input PaymentRequestUpdateFilter {
  and: [PaymentRequestUpdateFilter!]
  id: IDFilterComparison
  or: [PaymentRequestUpdateFilter!]
}

type Permission {
  createdAt: DateTime
  guardName: String!
  id: ID!
  modelHasPermissions: [ModelHasPermission!]!
  name: String!
  parent(
    """Specify to filter the records returned."""
    filter: PermissionFilter! = {}

    """Specify to sort results."""
    sorting: [PermissionSort!]! = []
  ): [Permission!]!
  parentId: Float
  permissionGroup: PermissionGroup
  permissionGroupId: Float
  permissions(
    """Specify to filter the records returned."""
    filter: PermissionFilter! = {}

    """Specify to sort results."""
    sorting: [PermissionSort!]! = []
  ): [Permission!]!
  roles(
    """Specify to filter the records returned."""
    filter: RoleDomainFilter! = {}

    """Specify to sort results."""
    sorting: [RoleDomainSort!]! = []
  ): [RoleDomain!]!
  updatedAt: DateTime
}

input PermissionDeleteFilter {
  and: [PermissionDeleteFilter!]
  id: IDFilterComparison
  or: [PermissionDeleteFilter!]
  parentId: NumberFieldComparison
  permissionGroupId: NumberFieldComparison
}

type PermissionDeleteResponse {
  createdAt: DateTime
  guardName: String
  id: ID
  modelHasPermissions: [ModelHasPermission!]
  name: String
  parent: Permission
  parentId: Float
  permissionGroup: PermissionGroup
  permissionGroupId: Float
  permissions: [Permission!]
  roles: [RoleDomain!]
  updatedAt: DateTime
}

input PermissionDomain {
  createdAt: DateTime
  guardName: String!
  id: ID!
  modelHasPermissions: [ModelHasPermissionDomain!]!
  name: String!
  parent: PermissionDomain
  parentId: Float
  permissionGroup: PermissionGroupDomain
  permissionGroupId: Float
  permissions: [PermissionDomain!]!
  roles: [RoleDomainInput!]!
  updatedAt: DateTime
}

input PermissionFilter {
  and: [PermissionFilter!]
  id: IDFilterComparison
  or: [PermissionFilter!]
  parentId: NumberFieldComparison
  permissionGroupId: NumberFieldComparison
}

type PermissionGroup {
  createdAt: DateTime
  id: ID!
  name: String!
  permissions(
    """Specify to filter the records returned."""
    filter: PermissionFilter! = {}

    """Specify to sort results."""
    sorting: [PermissionSort!]! = []
  ): [Permission!]!
  updatedAt: DateTime
}

type PermissionGroupConnection {
  """Array of edges."""
  edges: [PermissionGroupEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input PermissionGroupDeleteFilter {
  and: [PermissionGroupDeleteFilter!]
  id: IDFilterComparison
  or: [PermissionGroupDeleteFilter!]
}

type PermissionGroupDeleteResponse {
  createdAt: DateTime
  id: ID
  name: String
  permissions: [Permission!]
  updatedAt: DateTime
}

input PermissionGroupDomain {
  createdAt: DateTime
  id: ID!
  name: String!
  permissions: [PermissionDomain!]!
  updatedAt: DateTime
}

type PermissionGroupEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the PermissionGroup"""
  node: PermissionGroup!
}

input PermissionGroupFilter {
  and: [PermissionGroupFilter!]
  id: IDFilterComparison
  or: [PermissionGroupFilter!]
}

input PermissionGroupSort {
  direction: SortDirection!
  field: PermissionGroupSortFields!
  nulls: SortNulls
}

enum PermissionGroupSortFields {
  id
}

input PermissionGroupUpdateFilter {
  and: [PermissionGroupUpdateFilter!]
  id: IDFilterComparison
  or: [PermissionGroupUpdateFilter!]
}

input PermissionSort {
  direction: SortDirection!
  field: PermissionSortFields!
  nulls: SortNulls
}

enum PermissionSortFields {
  id
  parentId
  permissionGroupId
}

input PermissionUpdateFilter {
  and: [PermissionUpdateFilter!]
  id: IDFilterComparison
  or: [PermissionUpdateFilter!]
  parentId: NumberFieldComparison
  permissionGroupId: NumberFieldComparison
}

type Preorder {
  activationCode: String
  activationSendDate: DateTime
  activationSendDateP: String
  activationSendTurn: Float!
  assignedUser: User
  assignedUserId: Float
  companyDescription: String
  createdAt: DateTime
  createdAtP: String
  customerDescription: String
  dateOfTurn: String
  dateOfTurnP: String
  deletedAt: DateTime
  expirationDate: DateTime
  expirationDateP: String
  id: ID!
  isActivated: Boolean!
  lastCallDate: DateTime
  lastCallDateP: String
  name: String
  phone: String
  phone2: String
  preorderPreorderStatuses: [PreorderPreorderStatus!]!
  preorderStatus: PreorderStatus!
  preorderStatusId: Float!
  product: Product
  productId: Float
  salesPerson: User
  salesPersonId: Float
  subproduct: Subproduct
  subproductId: Float
  trackingCode: String
  updatedAt: DateTime
  user: User
  userId: Float
}

type PreorderConnection {
  """Array of edges."""
  edges: [PreorderEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input PreorderDeleteFilter {
  and: [PreorderDeleteFilter!]
  id: IDFilterComparison
  or: [PreorderDeleteFilter!]
}

type PreorderDeleteResponse {
  activationCode: String
  activationSendDate: DateTime
  activationSendDateP: String
  activationSendTurn: Float
  assignedUser: User
  assignedUserId: Float
  companyDescription: String
  createdAt: DateTime
  createdAtP: String
  customerDescription: String
  dateOfTurn: String
  dateOfTurnP: String
  deletedAt: DateTime
  expirationDate: DateTime
  expirationDateP: String
  id: ID
  isActivated: Boolean
  lastCallDate: DateTime
  lastCallDateP: String
  name: String
  phone: String
  phone2: String
  preorderPreorderStatuses: [PreorderPreorderStatus!]
  preorderStatus: PreorderStatus
  preorderStatusId: Float
  product: Product
  productId: Float
  salesPerson: User
  salesPersonId: Float
  subproduct: Subproduct
  subproductId: Float
  trackingCode: String
  updatedAt: DateTime
  user: User
  userId: Float
}

input PreorderDomain {
  activationCode: String
  activationSendDate: DateTime
  activationSendDateP: String
  activationSendTurn: Float!
  assignedUser: UserDomain
  assignedUserId: Float
  companyDescription: String
  createdAt: DateTime
  createdAtP: String
  customerDescription: String
  dateOfTurn: String
  dateOfTurnP: String
  deletedAt: DateTime
  expirationDate: DateTime
  expirationDateP: String
  id: ID!
  isActivated: Boolean!
  lastCallDate: DateTime
  lastCallDateP: String
  name: String
  phone: String
  phone2: String
  preorderPreorderStatuses: [PreorderPreorderStatusDomain!]!
  preorderStatus: PreorderStatusDomain!
  preorderStatusId: Float!
  product: ProductDomain
  productId: Float
  salesPerson: UserDomain
  salesPersonId: Float
  subproduct: SubproductDomain
  subproductId: Float
  trackingCode: String
  updatedAt: DateTime
  user: UserDomain
  userId: Float
}

type PreorderEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Preorder"""
  node: Preorder!
}

input PreorderFilter {
  and: [PreorderFilter!]
  id: IDFilterComparison
  or: [PreorderFilter!]
}

type PreorderPreorderStatus {
  companyDescription: String
  createdAt: DateTime
  id: ID!
  preorder: Preorder!
  preorderId: Float!
  preorderStatus: PreorderStatus!
  preorderStatusId: Float!
  updatedAt: DateTime
  user: User
  userId: Float
}

type PreorderPreorderStatusConnection {
  """Array of edges."""
  edges: [PreorderPreorderStatusEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input PreorderPreorderStatusDeleteFilter {
  and: [PreorderPreorderStatusDeleteFilter!]
  id: IDFilterComparison
  or: [PreorderPreorderStatusDeleteFilter!]
}

type PreorderPreorderStatusDeleteResponse {
  companyDescription: String
  createdAt: DateTime
  id: ID
  preorder: Preorder
  preorderId: Float
  preorderStatus: PreorderStatus
  preorderStatusId: Float
  updatedAt: DateTime
  user: User
  userId: Float
}

input PreorderPreorderStatusDomain {
  companyDescription: String
  createdAt: DateTime
  id: ID!
  preorder: PreorderDomain!
  preorderId: Float!
  preorderStatus: PreorderStatusDomain!
  preorderStatusId: Float!
  updatedAt: DateTime
  user: UserDomain
  userId: Float
}

type PreorderPreorderStatusEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the PreorderPreorderStatus"""
  node: PreorderPreorderStatus!
}

input PreorderPreorderStatusFilter {
  and: [PreorderPreorderStatusFilter!]
  id: IDFilterComparison
  or: [PreorderPreorderStatusFilter!]
}

input PreorderPreorderStatusSort {
  direction: SortDirection!
  field: PreorderPreorderStatusSortFields!
  nulls: SortNulls
}

enum PreorderPreorderStatusSortFields {
  id
}

input PreorderPreorderStatusUpdateFilter {
  and: [PreorderPreorderStatusUpdateFilter!]
  id: IDFilterComparison
  or: [PreorderPreorderStatusUpdateFilter!]
}

type PreorderRegister {
  createdAt: DateTime
  id: ID!
  invoiceBankGatewayHistories: [InvoiceBankGatewayHistory!]!
  isConfirmed: Boolean!
  isPaid: Boolean!
  moneyTransferConfirmedBy: Float
  moneyTransferConfirmedBy2: User
  moneyTransferRefCode: String
  orderId: String
  paymentAmount: String!
  paymentType: InvoicePaymentType
  paymentTypeId: Float
  preorderDate: DateTime
  preorderNumber: String
  refCodeSales: String
  refId: String
  saleRefId: String
  updatedAt: DateTime
  user: User!
  userId: Float!
  withdrawnAmount: String!
}

type PreorderRegisterConnection {
  """Array of edges."""
  edges: [PreorderRegisterEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input PreorderRegisterDeleteFilter {
  and: [PreorderRegisterDeleteFilter!]
  id: IDFilterComparison
  or: [PreorderRegisterDeleteFilter!]
}

type PreorderRegisterDeleteResponse {
  createdAt: DateTime
  id: ID
  invoiceBankGatewayHistories: [InvoiceBankGatewayHistory!]
  isConfirmed: Boolean
  isPaid: Boolean
  moneyTransferConfirmedBy: Float
  moneyTransferConfirmedBy2: User
  moneyTransferRefCode: String
  orderId: String
  paymentAmount: String
  paymentType: InvoicePaymentType
  paymentTypeId: Float
  preorderDate: DateTime
  preorderNumber: String
  refCodeSales: String
  refId: String
  saleRefId: String
  updatedAt: DateTime
  user: User
  userId: Float
  withdrawnAmount: String
}

input PreorderRegisterDomain {
  createdAt: DateTime
  id: ID!
  invoiceBankGatewayHistories: [InvoiceBankGatewayHistoryDomain!]!
  isConfirmed: Boolean!
  isPaid: Boolean!
  moneyTransferConfirmedBy: Float
  moneyTransferConfirmedBy2: UserDomain
  moneyTransferRefCode: String
  orderId: String
  paymentAmount: String!
  paymentType: InvoicePaymentTypeDomain
  paymentTypeId: Float
  preorderDate: DateTime
  preorderNumber: String
  refCodeSales: String
  refId: String
  saleRefId: String
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
  withdrawnAmount: String!
}

type PreorderRegisterEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the PreorderRegister"""
  node: PreorderRegister!
}

input PreorderRegisterFilter {
  and: [PreorderRegisterFilter!]
  id: IDFilterComparison
  or: [PreorderRegisterFilter!]
}

input PreorderRegisterSort {
  direction: SortDirection!
  field: PreorderRegisterSortFields!
  nulls: SortNulls
}

enum PreorderRegisterSortFields {
  id
}

input PreorderRegisterUpdateFilter {
  and: [PreorderRegisterUpdateFilter!]
  id: IDFilterComparison
  or: [PreorderRegisterUpdateFilter!]
}

input PreorderSort {
  direction: SortDirection!
  field: PreorderSortFields!
  nulls: SortNulls
}

enum PreorderSortFields {
  id
}

type PreorderStatus {
  createdAt: DateTime
  id: ID!
  preorderPreorderStatuses: [PreorderPreorderStatus!]!
  preorders: [Preorder!]!
  status: String!
  updatedAt: DateTime
}

type PreorderStatusConnection {
  """Array of edges."""
  edges: [PreorderStatusEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input PreorderStatusDeleteFilter {
  and: [PreorderStatusDeleteFilter!]
  id: IDFilterComparison
  or: [PreorderStatusDeleteFilter!]
}

type PreorderStatusDeleteResponse {
  createdAt: DateTime
  id: ID
  preorderPreorderStatuses: [PreorderPreorderStatus!]
  preorders: [Preorder!]
  status: String
  updatedAt: DateTime
}

input PreorderStatusDomain {
  createdAt: DateTime
  id: ID!
  preorderPreorderStatuses: [PreorderPreorderStatusDomain!]!
  preorders: [PreorderDomain!]!
  status: String!
  updatedAt: DateTime
}

type PreorderStatusEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the PreorderStatus"""
  node: PreorderStatus!
}

input PreorderStatusFilter {
  and: [PreorderStatusFilter!]
  id: IDFilterComparison
  or: [PreorderStatusFilter!]
}

input PreorderStatusSort {
  direction: SortDirection!
  field: PreorderStatusSortFields!
  nulls: SortNulls
}

enum PreorderStatusSortFields {
  id
}

input PreorderStatusUpdateFilter {
  and: [PreorderStatusUpdateFilter!]
  id: IDFilterComparison
  or: [PreorderStatusUpdateFilter!]
}

input PreorderUpdateFilter {
  and: [PreorderUpdateFilter!]
  id: IDFilterComparison
  or: [PreorderUpdateFilter!]
}

type PriceGroup {
  createdAt: DateTime
  discountSubjects: [DiscountSubject!]!
  id: ID!
  name: String!
  priceGroupSizes: [PriceGroupSize!]!
  products: [Product!]!
  updatedAt: DateTime
}

type PriceGroupConnection {
  """Array of edges."""
  edges: [PriceGroupEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input PriceGroupDeleteFilter {
  and: [PriceGroupDeleteFilter!]
  id: IDFilterComparison
  or: [PriceGroupDeleteFilter!]
}

type PriceGroupDeleteResponse {
  createdAt: DateTime
  discountSubjects: [DiscountSubject!]
  id: ID
  name: String
  priceGroupSizes: [PriceGroupSize!]
  products: [Product!]
  updatedAt: DateTime
}

input PriceGroupDomain {
  createdAt: DateTime
  discountSubjects: [DiscountSubjectDomain!]!
  id: ID!
  name: String!
  priceGroupSizes: [PriceGroupSizeDomain!]!
  products: [ProductDomain!]!
  updatedAt: DateTime
}

type PriceGroupEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the PriceGroup"""
  node: PriceGroup!
}

input PriceGroupFilter {
  and: [PriceGroupFilter!]
  id: IDFilterComparison
  or: [PriceGroupFilter!]
}

type PriceGroupSize {
  basicCarpetSize: BasicCarpetSize!
  basicCarpetSizeId: Float!
  bundlePadPrice: String
  bundlePrice: String
  createdAt: DateTime
  id: ID!
  padPrice: String!
  price: String!
  priceGroup: PriceGroup!
  priceGroupId: Float!
  updatedAt: DateTime
}

type PriceGroupSizeConnection {
  """Array of edges."""
  edges: [PriceGroupSizeEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input PriceGroupSizeDeleteFilter {
  and: [PriceGroupSizeDeleteFilter!]
  id: IDFilterComparison
  or: [PriceGroupSizeDeleteFilter!]
}

type PriceGroupSizeDeleteResponse {
  basicCarpetSize: BasicCarpetSize
  basicCarpetSizeId: Float
  bundlePadPrice: String
  bundlePrice: String
  createdAt: DateTime
  id: ID
  padPrice: String
  price: String
  priceGroup: PriceGroup
  priceGroupId: Float
  updatedAt: DateTime
}

input PriceGroupSizeDomain {
  basicCarpetSize: BasicCarpetSizeDomain!
  basicCarpetSizeId: Float!
  bundlePadPrice: String
  bundlePrice: String
  createdAt: DateTime
  id: ID!
  padPrice: String!
  price: String!
  priceGroup: PriceGroupDomain!
  priceGroupId: Float!
  updatedAt: DateTime
}

type PriceGroupSizeEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the PriceGroupSize"""
  node: PriceGroupSize!
}

input PriceGroupSizeFilter {
  and: [PriceGroupSizeFilter!]
  id: IDFilterComparison
  or: [PriceGroupSizeFilter!]
}

input PriceGroupSizeSort {
  direction: SortDirection!
  field: PriceGroupSizeSortFields!
  nulls: SortNulls
}

enum PriceGroupSizeSortFields {
  id
}

input PriceGroupSizeUpdateFilter {
  and: [PriceGroupSizeUpdateFilter!]
  id: IDFilterComparison
  or: [PriceGroupSizeUpdateFilter!]
}

input PriceGroupSort {
  direction: SortDirection!
  field: PriceGroupSortFields!
  nulls: SortNulls
}

enum PriceGroupSortFields {
  id
}

input PriceGroupUpdateFilter {
  and: [PriceGroupUpdateFilter!]
  id: IDFilterComparison
  or: [PriceGroupUpdateFilter!]
}

type PrintProfile {
  blackCurve: String
  blackGain: String
  createdAt: DateTime
  createdBy: Float
  createdBy2: User
  cyanCurve: String
  cyanGain: String
  fabricsBackgroundColor: String
  fabricsPerSquareMeterWeight: String
  fabricsTextureGrade: String
  headHeight: String
  heatSpeed: String
  heatTemperature: String
  id: ID!
  inkCode: String
  invoiceProductItems: [InvoiceProductItem!]!
  isActive: Boolean!
  laminateGlueType: String
  magentaCurve: String
  magentaGain: String
  passCount: String
  totalInkLimit: String
  updatedAt: DateTime
  updatedBy: Float
  updatedBy2: User
  versionChangeDate: DateTime!
  versionNo: String!
  yellowCurve: String
  yellowGain: String
}

type PrintProfileConnection {
  """Array of edges."""
  edges: [PrintProfileEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input PrintProfileDeleteFilter {
  and: [PrintProfileDeleteFilter!]
  id: IDFilterComparison
  or: [PrintProfileDeleteFilter!]
}

type PrintProfileDeleteResponse {
  blackCurve: String
  blackGain: String
  createdAt: DateTime
  createdBy: Float
  createdBy2: User
  cyanCurve: String
  cyanGain: String
  fabricsBackgroundColor: String
  fabricsPerSquareMeterWeight: String
  fabricsTextureGrade: String
  headHeight: String
  heatSpeed: String
  heatTemperature: String
  id: ID
  inkCode: String
  invoiceProductItems: [InvoiceProductItem!]
  isActive: Boolean
  laminateGlueType: String
  magentaCurve: String
  magentaGain: String
  passCount: String
  totalInkLimit: String
  updatedAt: DateTime
  updatedBy: Float
  updatedBy2: User
  versionChangeDate: DateTime
  versionNo: String
  yellowCurve: String
  yellowGain: String
}

input PrintProfileDomain {
  blackCurve: String
  blackGain: String
  createdAt: DateTime
  createdBy: Float
  createdBy2: UserDomain
  cyanCurve: String
  cyanGain: String
  fabricsBackgroundColor: String
  fabricsPerSquareMeterWeight: String
  fabricsTextureGrade: String
  headHeight: String
  heatSpeed: String
  heatTemperature: String
  id: ID!
  inkCode: String
  invoiceProductItems: [InvoiceProductItemDomain!]!
  isActive: Boolean!
  laminateGlueType: String
  magentaCurve: String
  magentaGain: String
  passCount: String
  totalInkLimit: String
  updatedAt: DateTime
  updatedBy: Float
  updatedBy2: UserDomain
  versionChangeDate: DateTime!
  versionNo: String!
  yellowCurve: String
  yellowGain: String
}

type PrintProfileEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the PrintProfile"""
  node: PrintProfile!
}

input PrintProfileFilter {
  and: [PrintProfileFilter!]
  id: IDFilterComparison
  or: [PrintProfileFilter!]
}

input PrintProfileSort {
  direction: SortDirection!
  field: PrintProfileSortFields!
  nulls: SortNulls
}

enum PrintProfileSortFields {
  id
}

input PrintProfileUpdateFilter {
  and: [PrintProfileUpdateFilter!]
  id: IDFilterComparison
  or: [PrintProfileUpdateFilter!]
}

type PrintRip {
  createdAt: DateTime
  id: ID!
  invoiceProductItems: [InvoiceProductItem!]!
  ripNumber: String!
  ripTemplate: RipTemplate!
  ripTemplateId: Float!
  updatedAt: DateTime
  user: User
  userId: Float
}

type PrintRipConnection {
  """Array of edges."""
  edges: [PrintRipEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input PrintRipDeleteFilter {
  and: [PrintRipDeleteFilter!]
  id: IDFilterComparison
  or: [PrintRipDeleteFilter!]
}

type PrintRipDeleteResponse {
  createdAt: DateTime
  id: ID
  invoiceProductItems: [InvoiceProductItem!]
  ripNumber: String
  ripTemplate: RipTemplate
  ripTemplateId: Float
  updatedAt: DateTime
  user: User
  userId: Float
}

input PrintRipDomain {
  createdAt: DateTime
  id: ID!
  invoiceProductItems: [InvoiceProductItemDomain!]!
  ripNumber: String!
  ripTemplate: RipTemplateDomain!
  ripTemplateId: Float!
  updatedAt: DateTime
  user: UserDomain
  userId: Float
}

type PrintRipEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the PrintRip"""
  node: PrintRip!
}

input PrintRipFilter {
  and: [PrintRipFilter!]
  id: IDFilterComparison
  or: [PrintRipFilter!]
}

input PrintRipSort {
  direction: SortDirection!
  field: PrintRipSortFields!
  nulls: SortNulls
}

enum PrintRipSortFields {
  id
}

input PrintRipUpdateFilter {
  and: [PrintRipUpdateFilter!]
  id: IDFilterComparison
  or: [PrintRipUpdateFilter!]
}

type Product {
  activeUpdatedAt: DateTime!
  attributeProducts: [AttributeProduct!]!
  bestSellerColor: BasicCarpetColor!
  bestSellerColorId: Float
  carpetHasRoots: Boolean!
  code: String
  collectionName: String
  colors: String
  couponSubjects: [CouponSubject!]!
  createdAt: DateTime
  customerImageProducts: [CustomerImageProduct!]!
  customerVideoProducts: [CustomerVideoProduct!]!
  description: String
  descriptionEn: String
  designerIsGeneral: Float!
  discountNotifications: [DiscountNotification!]!
  discountSubjects: [DiscountSubject!]!
  emallsActive: Boolean!
  emallsTitle: String
  favoriteProducts: [FavoriteProduct!]!
  homePageCustomerImages: [HomePageCustomerImage!]!
  id: ID!
  image: Image!
  imageId: Float
  imageProducts: [ImageProduct!]!
  incredibleOffers: [IncredibleOffer!]!
  invoiceProductHistories: [InvoiceProductHistory!]!
  invoiceProductHistories2: [InvoiceProductHistory!]!
  invoiceProducts: [InvoiceProduct!]!
  invoiceProducts2: [InvoiceProduct!]!
  isActive: Boolean!
  isCarpetPad: Boolean
  isSelfEmployedDesigner: Float!
  isShaggy: Boolean!
  labelProducts: [LabelProduct!]!
  length: Float
  metaTags: String
  metaTagsEn: String
  minBasicCarpetSize: BasicCarpetSize!
  minBasicCarpetSizeId: Float
  name: String!
  nameEn: String
  nameEs: String
  newSubproductsCreated: Float!
  outOfStockButListedProducts: [OutOfStockButListedProduct!]!
  pageTitle: String
  pageTitleEn: String
  parentProduct: Product
  parentProductId: Float
  preorders: [Preorder!]!
  price: String
  priceGroup: PriceGroup!
  priceGroupId: Float
  productColorImages: [ProductColorImage!]!
  productColorSales: [ProductColorSale!]!
  productComments: [ProductComment!]!
  productLikes: [ProductLike!]!
  productProductCategories: [ProductProductCategory!]!
  productRateAverages: [ProductRateAverage!]!
  productRates: [ProductRate!]!
  productTags: [ProductTag!]!
  productVideos: [ProductVideo!]!
  products: [Product!]
  rate: Float!
  rateCount: Float
  readyToSendProducts: [ReadyToSendProduct!]!
  recommendedProducts: [RecommendedProduct!]!
  relatedProducts: [RelatedProduct!]!
  relatedProducts2: [RelatedProduct!]!
  returnRequestItemHistories: [ReturnRequestItemHistory!]!
  returnRequestItems: [ReturnRequestItem!]!
  returnedInvoiceProducts: [ReturnedInvoiceProduct!]!
  russianName: String
  saleCount: Float!
  saleCountDaily: Float!
  searchName: String
  searchNameEn: String
  size: Float!
  sizeIsCustomizable: Float!
  snapppayActive: Boolean!
  snapppaySortOrder: Boolean
  sortOrder: Float
  specialOffers: [SpecialOffer!]!
  specialOffers2: [SpecialOffer!]!
  subproducts: [Subproduct!]!
  torobProducts: [TorobProduct!]!
  totalDislike: Float!
  totalLike: Float!
  updatedAt: DateTime
  urlSlug: String
  urlSlugEn: String
  userCarts: [UserCart!]!
  userCarts2: [UserCart!]!
  viewCounter: Float
  width: Float
  wonderfulOffers: [WonderfulOffer!]!
}

type ProductCategory {
  attributeGroups: [AttributeGroup!]!
  couponSubjects: [CouponSubject!]!
  createdAt: DateTime
  description: String
  descriptionEn: String
  descriptionSingleSize: String
  discountSubjects: [DiscountSubject!]!
  hierarchyCode: String
  homepageImage: Image!
  homepageImageId: Float
  id: ID!
  image: Image
  imageId: Float
  imageSize: ImageSize
  imageSizeId: Float
  isActive: Boolean!
  metaTags: String
  metaTagsEn: String
  metaTagsSingleSize: String
  mobileImage: Image!
  mobileImageId: Float
  name: String!
  nameEn: String
  pageTitle: String
  pageTitleEn: String
  pageTitleSingleSize: String
  parent: ProductCategory
  parentId: Float
  productCategories: [ProductCategory!]!
  productCategoryRates: [ProductCategoryRate!]!
  productProductCategories: [ProductProductCategory!]!
  searchName: String
  searchNameEn: String
  showOnHomepage: Boolean!
  sortOrder: Float
  updatedAt: DateTime
  urlSlug: String
  urlSlugEn: String
  viewCounter: Float
}

type ProductCategoryConnection {
  """Array of edges."""
  edges: [ProductCategoryEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ProductCategoryDeleteFilter {
  and: [ProductCategoryDeleteFilter!]
  id: IDFilterComparison
  or: [ProductCategoryDeleteFilter!]
}

type ProductCategoryDeleteResponse {
  attributeGroups: [AttributeGroup!]
  couponSubjects: [CouponSubject!]
  createdAt: DateTime
  description: String
  descriptionEn: String
  descriptionSingleSize: String
  discountSubjects: [DiscountSubject!]
  hierarchyCode: String
  homepageImage: Image
  homepageImageId: Float
  id: ID
  image: Image
  imageId: Float
  imageSize: ImageSize
  imageSizeId: Float
  isActive: Boolean
  metaTags: String
  metaTagsEn: String
  metaTagsSingleSize: String
  mobileImage: Image
  mobileImageId: Float
  name: String
  nameEn: String
  pageTitle: String
  pageTitleEn: String
  pageTitleSingleSize: String
  parent: ProductCategory
  parentId: Float
  productCategories: [ProductCategory!]
  productCategoryRates: [ProductCategoryRate!]
  productProductCategories: [ProductProductCategory!]
  searchName: String
  searchNameEn: String
  showOnHomepage: Boolean
  sortOrder: Float
  updatedAt: DateTime
  urlSlug: String
  urlSlugEn: String
  viewCounter: Float
}

type ProductCategoryDetail {
  createdAt: DateTime
  detailText: String
  detailTextEn: String
  id: ID!
  isActive: Boolean!
  productCategoryId: Float
  sortOrder: Float
  title: String
  titleEn: String
  updatedAt: DateTime
}

type ProductCategoryDetailConnection {
  """Array of edges."""
  edges: [ProductCategoryDetailEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ProductCategoryDetailDeleteFilter {
  and: [ProductCategoryDetailDeleteFilter!]
  id: IDFilterComparison
  or: [ProductCategoryDetailDeleteFilter!]
}

type ProductCategoryDetailDeleteResponse {
  createdAt: DateTime
  detailText: String
  detailTextEn: String
  id: ID
  isActive: Boolean
  productCategoryId: Float
  sortOrder: Float
  title: String
  titleEn: String
  updatedAt: DateTime
}

input ProductCategoryDetailDomain {
  createdAt: DateTime
  detailText: String
  detailTextEn: String
  id: ID!
  isActive: Boolean!
  productCategoryId: Float
  sortOrder: Float
  title: String
  titleEn: String
  updatedAt: DateTime
}

type ProductCategoryDetailEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ProductCategoryDetail"""
  node: ProductCategoryDetail!
}

input ProductCategoryDetailFilter {
  and: [ProductCategoryDetailFilter!]
  id: IDFilterComparison
  or: [ProductCategoryDetailFilter!]
}

input ProductCategoryDetailSort {
  direction: SortDirection!
  field: ProductCategoryDetailSortFields!
  nulls: SortNulls
}

enum ProductCategoryDetailSortFields {
  id
}

input ProductCategoryDetailUpdateFilter {
  and: [ProductCategoryDetailUpdateFilter!]
  id: IDFilterComparison
  or: [ProductCategoryDetailUpdateFilter!]
}

input ProductCategoryDomain {
  attributeGroups: [AttributeGroupDomain!]!
  couponSubjects: [CouponSubjectDomain!]!
  createdAt: DateTime
  description: String
  descriptionEn: String
  descriptionSingleSize: String
  discountSubjects: [DiscountSubjectDomain!]!
  hierarchyCode: String
  homepageImage: ImageDomain!
  homepageImageId: Float
  id: ID!
  image: ImageDomain
  imageId: Float
  imageSize: ImageSizeDomain
  imageSizeId: Float
  isActive: Boolean!
  metaTags: String
  metaTagsEn: String
  metaTagsSingleSize: String
  mobileImage: ImageDomain!
  mobileImageId: Float
  name: String!
  nameEn: String
  pageTitle: String
  pageTitleEn: String
  pageTitleSingleSize: String
  parent: ProductCategoryDomain
  parentId: Float
  productCategories: [ProductCategoryDomain!]!
  productCategoryRates: [ProductCategoryRateDomain!]!
  productProductCategories: [ProductProductCategoryDomain!]!
  searchName: String
  searchNameEn: String
  showOnHomepage: Boolean!
  sortOrder: Float
  updatedAt: DateTime
  urlSlug: String
  urlSlugEn: String
  viewCounter: Float
}

type ProductCategoryEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ProductCategory"""
  node: ProductCategory!
}

input ProductCategoryFilter {
  and: [ProductCategoryFilter!]
  id: IDFilterComparison
  or: [ProductCategoryFilter!]
}

type ProductCategoryRate {
  createdAt: DateTime
  id: ID!
  productCategory: ProductCategory!
  productCategoryId: Float!
  rate: Rate!
  rateId: Float!
  updatedAt: DateTime
}

type ProductCategoryRateConnection {
  """Array of edges."""
  edges: [ProductCategoryRateEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ProductCategoryRateDeleteFilter {
  and: [ProductCategoryRateDeleteFilter!]
  id: IDFilterComparison
  or: [ProductCategoryRateDeleteFilter!]
}

type ProductCategoryRateDeleteResponse {
  createdAt: DateTime
  id: ID
  productCategory: ProductCategory
  productCategoryId: Float
  rate: Rate
  rateId: Float
  updatedAt: DateTime
}

input ProductCategoryRateDomain {
  createdAt: DateTime
  id: ID!
  productCategory: ProductCategoryDomain!
  productCategoryId: Float!
  rate: RateDomain!
  rateId: Float!
  updatedAt: DateTime
}

type ProductCategoryRateEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ProductCategoryRate"""
  node: ProductCategoryRate!
}

input ProductCategoryRateFilter {
  and: [ProductCategoryRateFilter!]
  id: IDFilterComparison
  or: [ProductCategoryRateFilter!]
}

input ProductCategoryRateSort {
  direction: SortDirection!
  field: ProductCategoryRateSortFields!
  nulls: SortNulls
}

enum ProductCategoryRateSortFields {
  id
}

input ProductCategoryRateUpdateFilter {
  and: [ProductCategoryRateUpdateFilter!]
  id: IDFilterComparison
  or: [ProductCategoryRateUpdateFilter!]
}

input ProductCategorySort {
  direction: SortDirection!
  field: ProductCategorySortFields!
  nulls: SortNulls
}

enum ProductCategorySortFields {
  id
}

input ProductCategoryUpdateFilter {
  and: [ProductCategoryUpdateFilter!]
  id: IDFilterComparison
  or: [ProductCategoryUpdateFilter!]
}

type ProductColorImage {
  basicCarpetColor: BasicCarpetColor
  basicCarpetColorId: Float
  createdAt: DateTime
  id: ID!
  image: Image!
  imageId: Float!
  product: Product!
  productId: Float!
  sortOrder: Float
  updatedAt: DateTime
}

type ProductColorImageConnection {
  """Array of edges."""
  edges: [ProductColorImageEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ProductColorImageDeleteFilter {
  and: [ProductColorImageDeleteFilter!]
  id: IDFilterComparison
  or: [ProductColorImageDeleteFilter!]
}

type ProductColorImageDeleteResponse {
  basicCarpetColor: BasicCarpetColor
  basicCarpetColorId: Float
  createdAt: DateTime
  id: ID
  image: Image
  imageId: Float
  product: Product
  productId: Float
  sortOrder: Float
  updatedAt: DateTime
}

input ProductColorImageDomain {
  basicCarpetColor: BasicCarpetColorDomain
  basicCarpetColorId: Float
  createdAt: DateTime
  id: ID!
  image: ImageDomain!
  imageId: Float!
  product: ProductDomain!
  productId: Float!
  sortOrder: Float
  updatedAt: DateTime
}

type ProductColorImageEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ProductColorImage"""
  node: ProductColorImage!
}

input ProductColorImageFilter {
  and: [ProductColorImageFilter!]
  id: IDFilterComparison
  or: [ProductColorImageFilter!]
}

input ProductColorImageSort {
  direction: SortDirection!
  field: ProductColorImageSortFields!
  nulls: SortNulls
}

enum ProductColorImageSortFields {
  id
}

input ProductColorImageUpdateFilter {
  and: [ProductColorImageUpdateFilter!]
  id: IDFilterComparison
  or: [ProductColorImageUpdateFilter!]
}

type ProductColorSale {
  averageSaleCount: Float!
  basicCarpetColor: BasicCarpetColor!
  basicCarpetColorId: Float!
  createdAt: DateTime
  id: ID!
  product: Product!
  productId: Float!
  saleCount: Float!
  saleCountYear: Float!
  updatedAt: DateTime
}

type ProductColorSaleConnection {
  """Array of edges."""
  edges: [ProductColorSaleEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ProductColorSaleDeleteFilter {
  and: [ProductColorSaleDeleteFilter!]
  id: IDFilterComparison
  or: [ProductColorSaleDeleteFilter!]
}

type ProductColorSaleDeleteResponse {
  averageSaleCount: Float
  basicCarpetColor: BasicCarpetColor
  basicCarpetColorId: Float
  createdAt: DateTime
  id: ID
  product: Product
  productId: Float
  saleCount: Float
  saleCountYear: Float
  updatedAt: DateTime
}

input ProductColorSaleDomain {
  averageSaleCount: Float!
  basicCarpetColor: BasicCarpetColorDomain!
  basicCarpetColorId: Float!
  createdAt: DateTime
  id: ID!
  product: ProductDomain!
  productId: Float!
  saleCount: Float!
  saleCountYear: Float!
  updatedAt: DateTime
}

type ProductColorSaleEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ProductColorSale"""
  node: ProductColorSale!
}

input ProductColorSaleFilter {
  and: [ProductColorSaleFilter!]
  id: IDFilterComparison
  or: [ProductColorSaleFilter!]
}

input ProductColorSaleSort {
  direction: SortDirection!
  field: ProductColorSaleSortFields!
  nulls: SortNulls
}

enum ProductColorSaleSortFields {
  id
}

input ProductColorSaleUpdateFilter {
  and: [ProductColorSaleUpdateFilter!]
  id: IDFilterComparison
  or: [ProductColorSaleUpdateFilter!]
}

type ProductComment {
  approved: Boolean!
  approvedBy: Float
  approvedBy2: User
  comment: String!
  createdAt: DateTime
  id: ID!
  isBuyer: Boolean
  parentComment: ProductComment
  parentCommentId: Float
  product: Product!
  productCommentLikes: [ProductCommentLike!]!
  productComments: [ProductComment!]!
  productId: Float!
  productRates: [ProductRate!]!
  recommended: Boolean
  starred: Boolean!
  subproduct: Subproduct
  subproductId: Float
  totalDislikes: Float!
  totalLikes: Float!
  updatedAt: DateTime
  user: User!
  userId: Float!
  walletGiftCharges: WalletGiftCharge
}

type ProductCommentConnection {
  """Array of edges."""
  edges: [ProductCommentEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ProductCommentDeleteFilter {
  and: [ProductCommentDeleteFilter!]
  id: IDFilterComparison
  or: [ProductCommentDeleteFilter!]
}

type ProductCommentDeleteResponse {
  approved: Boolean
  approvedBy: Float
  approvedBy2: User
  comment: String
  createdAt: DateTime
  id: ID
  isBuyer: Boolean
  parentComment: ProductComment
  parentCommentId: Float
  product: Product
  productCommentLikes: [ProductCommentLike!]
  productComments: [ProductComment!]
  productId: Float
  productRates: [ProductRate!]
  recommended: Boolean
  starred: Boolean
  subproduct: Subproduct
  subproductId: Float
  totalDislikes: Float
  totalLikes: Float
  updatedAt: DateTime
  user: User
  userId: Float
  walletGiftCharges: WalletGiftCharge
}

input ProductCommentDomain {
  approved: Boolean!
  approvedBy: Float
  approvedBy2: UserDomain
  comment: String!
  createdAt: DateTime
  id: ID!
  isBuyer: Boolean
  parentComment: ProductCommentDomain
  parentCommentId: Float
  product: ProductDomain!
  productCommentLikes: [ProductCommentLikeDomain!]!
  productComments: [ProductCommentDomain!]!
  productId: Float!
  productRates: [ProductRateDomain!]!
  recommended: Boolean
  starred: Boolean!
  subproduct: SubproductDomain
  subproductId: Float
  totalDislikes: Float!
  totalLikes: Float!
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
  walletGiftCharges: WalletGiftChargeDomain
}

type ProductCommentEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ProductComment"""
  node: ProductComment!
}

input ProductCommentFilter {
  and: [ProductCommentFilter!]
  id: IDFilterComparison
  or: [ProductCommentFilter!]
}

type ProductCommentLike {
  createdAt: DateTime
  id: ID!
  isDisliked: Boolean
  isLiked: Boolean
  productComment: ProductComment!
  productCommentId: Float!
  updatedAt: DateTime
  user: User!
  userId: Float!
}

type ProductCommentLikeConnection {
  """Array of edges."""
  edges: [ProductCommentLikeEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ProductCommentLikeDeleteFilter {
  and: [ProductCommentLikeDeleteFilter!]
  id: IDFilterComparison
  or: [ProductCommentLikeDeleteFilter!]
}

type ProductCommentLikeDeleteResponse {
  createdAt: DateTime
  id: ID
  isDisliked: Boolean
  isLiked: Boolean
  productComment: ProductComment
  productCommentId: Float
  updatedAt: DateTime
  user: User
  userId: Float
}

input ProductCommentLikeDomain {
  createdAt: DateTime
  id: ID!
  isDisliked: Boolean
  isLiked: Boolean
  productComment: ProductCommentDomain!
  productCommentId: Float!
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
}

type ProductCommentLikeEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ProductCommentLike"""
  node: ProductCommentLike!
}

input ProductCommentLikeFilter {
  and: [ProductCommentLikeFilter!]
  id: IDFilterComparison
  or: [ProductCommentLikeFilter!]
}

input ProductCommentLikeSort {
  direction: SortDirection!
  field: ProductCommentLikeSortFields!
  nulls: SortNulls
}

enum ProductCommentLikeSortFields {
  id
}

input ProductCommentLikeUpdateFilter {
  and: [ProductCommentLikeUpdateFilter!]
  id: IDFilterComparison
  or: [ProductCommentLikeUpdateFilter!]
}

input ProductCommentSort {
  direction: SortDirection!
  field: ProductCommentSortFields!
  nulls: SortNulls
}

enum ProductCommentSortFields {
  id
}

input ProductCommentUpdateFilter {
  and: [ProductCommentUpdateFilter!]
  id: IDFilterComparison
  or: [ProductCommentUpdateFilter!]
}

type ProductConnection {
  """Array of edges."""
  edges: [ProductEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ProductDeleteFilter {
  and: [ProductDeleteFilter!]
  id: IDFilterComparison
  or: [ProductDeleteFilter!]
}

type ProductDeleteResponse {
  activeUpdatedAt: DateTime
  attributeProducts: [AttributeProduct!]
  bestSellerColor: BasicCarpetColor
  bestSellerColorId: Float
  carpetHasRoots: Boolean
  code: String
  collectionName: String
  colors: String
  couponSubjects: [CouponSubject!]
  createdAt: DateTime
  customerImageProducts: [CustomerImageProduct!]
  customerVideoProducts: [CustomerVideoProduct!]
  description: String
  descriptionEn: String
  designerIsGeneral: Float
  discountNotifications: [DiscountNotification!]
  discountSubjects: [DiscountSubject!]
  emallsActive: Boolean
  emallsTitle: String
  favoriteProducts: [FavoriteProduct!]
  homePageCustomerImages: [HomePageCustomerImage!]
  id: ID
  image: Image
  imageId: Float
  imageProducts: [ImageProduct!]
  incredibleOffers: [IncredibleOffer!]
  invoiceProductHistories: [InvoiceProductHistory!]
  invoiceProductHistories2: [InvoiceProductHistory!]
  invoiceProducts: [InvoiceProduct!]
  invoiceProducts2: [InvoiceProduct!]
  isActive: Boolean
  isCarpetPad: Boolean
  isSelfEmployedDesigner: Float
  isShaggy: Boolean
  labelProducts: [LabelProduct!]
  length: Float
  metaTags: String
  metaTagsEn: String
  minBasicCarpetSize: BasicCarpetSize
  minBasicCarpetSizeId: Float
  name: String
  nameEn: String
  nameEs: String
  newSubproductsCreated: Float
  outOfStockButListedProducts: [OutOfStockButListedProduct!]
  pageTitle: String
  pageTitleEn: String
  parentProduct: Product
  parentProductId: Float
  preorders: [Preorder!]
  price: String
  priceGroup: PriceGroup
  priceGroupId: Float
  productColorImages: [ProductColorImage!]
  productColorSales: [ProductColorSale!]
  productComments: [ProductComment!]
  productLikes: [ProductLike!]
  productProductCategories: [ProductProductCategory!]
  productRateAverages: [ProductRateAverage!]
  productRates: [ProductRate!]
  productTags: [ProductTag!]
  productVideos: [ProductVideo!]
  products: [Product!]
  rate: Float
  rateCount: Float
  readyToSendProducts: [ReadyToSendProduct!]
  recommendedProducts: [RecommendedProduct!]
  relatedProducts: [RelatedProduct!]
  relatedProducts2: [RelatedProduct!]
  returnRequestItemHistories: [ReturnRequestItemHistory!]
  returnRequestItems: [ReturnRequestItem!]
  returnedInvoiceProducts: [ReturnedInvoiceProduct!]
  russianName: String
  saleCount: Float
  saleCountDaily: Float
  searchName: String
  searchNameEn: String
  size: Float
  sizeIsCustomizable: Float
  snapppayActive: Boolean
  snapppaySortOrder: Boolean
  sortOrder: Float
  specialOffers: [SpecialOffer!]
  specialOffers2: [SpecialOffer!]
  subproducts: [Subproduct!]
  torobProducts: [TorobProduct!]
  totalDislike: Float
  totalLike: Float
  updatedAt: DateTime
  urlSlug: String
  urlSlugEn: String
  userCarts: [UserCart!]
  userCarts2: [UserCart!]
  viewCounter: Float
  width: Float
  wonderfulOffers: [WonderfulOffer!]
}

input ProductDomain {
  activeUpdatedAt: DateTime!
  attributeProducts: [AttributeProductDomain!]!
  bestSellerColor: BasicCarpetColorDomain!
  bestSellerColorId: Float
  carpetHasRoots: Boolean!
  code: String
  collectionName: String
  colors: String
  couponSubjects: [CouponSubjectDomain!]!
  createdAt: DateTime
  customerImageProducts: [CustomerImageProductDomain!]!
  customerVideoProducts: [CustomerVideoProductDomain!]!
  description: String
  descriptionEn: String
  designerIsGeneral: Float!
  discountNotifications: [DiscountNotificationDomain!]!
  discountSubjects: [DiscountSubjectDomain!]!
  emallsActive: Boolean!
  emallsTitle: String
  favoriteProducts: [FavoriteProductDomain!]!
  homePageCustomerImages: [HomePageCustomerImageDomain!]!
  id: ID!
  image: ImageDomain!
  imageId: Float
  imageProducts: [ImageProductDomain!]!
  incredibleOffers: [IncredibleOfferDomain!]!
  invoiceProductHistories: [InvoiceProductHistoryDomain!]!
  invoiceProductHistories2: [InvoiceProductHistoryDomain!]!
  invoiceProducts: [InvoiceProductDomain!]!
  invoiceProducts2: [InvoiceProductDomain!]!
  isActive: Boolean!
  isCarpetPad: Boolean
  isSelfEmployedDesigner: Float!
  isShaggy: Boolean!
  labelProducts: [LabelProductDomain!]!
  length: Float
  metaTags: String
  metaTagsEn: String
  minBasicCarpetSize: BasicCarpetSizeDomain!
  minBasicCarpetSizeId: Float
  name: String!
  nameEn: String
  nameEs: String
  newSubproductsCreated: Float!
  outOfStockButListedProducts: [OutOfStockButListedProductDomain!]!
  pageTitle: String
  pageTitleEn: String
  parentProduct: ProductDomain
  parentProductId: Float
  preorders: [PreorderDomain!]!
  price: String
  priceGroup: PriceGroupDomain!
  priceGroupId: Float
  productColorImages: [ProductColorImageDomain!]!
  productColorSales: [ProductColorSaleDomain!]!
  productComments: [ProductCommentDomain!]!
  productLikes: [ProductLikeDomain!]!
  productProductCategories: [ProductProductCategoryDomain!]!
  productRateAverages: [ProductRateAverageDomain!]!
  productRates: [ProductRateDomain!]!
  productTags: [ProductTagDomain!]!
  productVideos: [ProductVideoDomain!]!
  products: [ProductDomain!]
  rate: Float!
  rateCount: Float
  readyToSendProducts: [ReadyToSendProductDomain!]!
  recommendedProducts: [RecommendedProductDomain!]!
  relatedProducts: [RelatedProductDomain!]!
  relatedProducts2: [RelatedProductDomain!]!
  returnRequestItemHistories: [ReturnRequestItemHistoryDomain!]!
  returnRequestItems: [ReturnRequestItemDomain!]!
  returnedInvoiceProducts: [ReturnedInvoiceProductDomain!]!
  russianName: String
  saleCount: Float!
  saleCountDaily: Float!
  searchName: String
  searchNameEn: String
  size: Float!
  sizeIsCustomizable: Float!
  snapppayActive: Boolean!
  snapppaySortOrder: Boolean
  sortOrder: Float
  specialOffers: [SpecialOfferDomain!]!
  specialOffers2: [SpecialOfferDomain!]!
  subproducts: [SubproductDomain!]!
  torobProducts: [TorobProductDomain!]!
  totalDislike: Float!
  totalLike: Float!
  updatedAt: DateTime
  urlSlug: String
  urlSlugEn: String
  userCarts: [UserCartDomain!]!
  userCarts2: [UserCartDomain!]!
  viewCounter: Float
  width: Float
  wonderfulOffers: [WonderfulOfferDomain!]!
}

type ProductEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Product"""
  node: Product!
}

input ProductFilter {
  and: [ProductFilter!]
  id: IDFilterComparison
  or: [ProductFilter!]
}

type ProductLike {
  createdAt: DateTime
  id: ID!
  isLike: Boolean!
  product: Product!
  productId: Float!
  subproduct: Subproduct
  subproductId: Float
  updatedAt: DateTime
  user: User!
  userId: Float!
}

type ProductLikeConnection {
  """Array of edges."""
  edges: [ProductLikeEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ProductLikeDeleteFilter {
  and: [ProductLikeDeleteFilter!]
  id: IDFilterComparison
  or: [ProductLikeDeleteFilter!]
}

type ProductLikeDeleteResponse {
  createdAt: DateTime
  id: ID
  isLike: Boolean
  product: Product
  productId: Float
  subproduct: Subproduct
  subproductId: Float
  updatedAt: DateTime
  user: User
  userId: Float
}

input ProductLikeDomain {
  createdAt: DateTime
  id: ID!
  isLike: Boolean!
  product: ProductDomain!
  productId: Float!
  subproduct: SubproductDomain
  subproductId: Float
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
}

type ProductLikeEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ProductLike"""
  node: ProductLike!
}

input ProductLikeFilter {
  and: [ProductLikeFilter!]
  id: IDFilterComparison
  or: [ProductLikeFilter!]
}

input ProductLikeSort {
  direction: SortDirection!
  field: ProductLikeSortFields!
  nulls: SortNulls
}

enum ProductLikeSortFields {
  id
}

input ProductLikeUpdateFilter {
  and: [ProductLikeUpdateFilter!]
  id: IDFilterComparison
  or: [ProductLikeUpdateFilter!]
}

type ProductProductCategory {
  createdAt: DateTime
  id: ID!
  product: Product!
  productCategory: ProductCategory!
  productCategoryId: Float!
  productId: Float!
  updatedAt: DateTime
}

type ProductProductCategoryConnection {
  """Array of edges."""
  edges: [ProductProductCategoryEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ProductProductCategoryDeleteFilter {
  and: [ProductProductCategoryDeleteFilter!]
  id: IDFilterComparison
  or: [ProductProductCategoryDeleteFilter!]
}

type ProductProductCategoryDeleteResponse {
  createdAt: DateTime
  id: ID
  product: Product
  productCategory: ProductCategory
  productCategoryId: Float
  productId: Float
  updatedAt: DateTime
}

input ProductProductCategoryDomain {
  createdAt: DateTime
  id: ID!
  product: ProductDomain!
  productCategory: ProductCategoryDomain!
  productCategoryId: Float!
  productId: Float!
  updatedAt: DateTime
}

type ProductProductCategoryEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ProductProductCategory"""
  node: ProductProductCategory!
}

input ProductProductCategoryFilter {
  and: [ProductProductCategoryFilter!]
  id: IDFilterComparison
  or: [ProductProductCategoryFilter!]
}

input ProductProductCategorySort {
  direction: SortDirection!
  field: ProductProductCategorySortFields!
  nulls: SortNulls
}

enum ProductProductCategorySortFields {
  id
}

input ProductProductCategoryUpdateFilter {
  and: [ProductProductCategoryUpdateFilter!]
  id: IDFilterComparison
  or: [ProductProductCategoryUpdateFilter!]
}

type ProductRate {
  createdAt: DateTime
  id: ID!
  oldRate: Float
  product: Product!
  productComment: ProductComment
  productCommentId: Float
  productId: Float!
  rate: Rate
  rateId: Float
  rateValue: Float!
  subproduct: Subproduct
  subproductId: Float
  updatedAt: DateTime
  user: User!
  userId: Float!
}

type ProductRateAverage {
  averageRate: Float!
  createdAt: DateTime
  id: ID!
  product: Product!
  productId: Float!
  rate: Rate!
  rateCount: Float!
  rateId: Float!
  subproduct: Subproduct
  subproductId: Float
  updatedAt: DateTime
}

type ProductRateAverageConnection {
  """Array of edges."""
  edges: [ProductRateAverageEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ProductRateAverageDeleteFilter {
  and: [ProductRateAverageDeleteFilter!]
  id: IDFilterComparison
  or: [ProductRateAverageDeleteFilter!]
}

type ProductRateAverageDeleteResponse {
  averageRate: Float
  createdAt: DateTime
  id: ID
  product: Product
  productId: Float
  rate: Rate
  rateCount: Float
  rateId: Float
  subproduct: Subproduct
  subproductId: Float
  updatedAt: DateTime
}

input ProductRateAverageDomain {
  averageRate: Float!
  createdAt: DateTime
  id: ID!
  product: ProductDomain!
  productId: Float!
  rate: RateDomain!
  rateCount: Float!
  rateId: Float!
  subproduct: SubproductDomain
  subproductId: Float
  updatedAt: DateTime
}

type ProductRateAverageEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ProductRateAverage"""
  node: ProductRateAverage!
}

input ProductRateAverageFilter {
  and: [ProductRateAverageFilter!]
  id: IDFilterComparison
  or: [ProductRateAverageFilter!]
}

input ProductRateAverageSort {
  direction: SortDirection!
  field: ProductRateAverageSortFields!
  nulls: SortNulls
}

enum ProductRateAverageSortFields {
  id
}

input ProductRateAverageUpdateFilter {
  and: [ProductRateAverageUpdateFilter!]
  id: IDFilterComparison
  or: [ProductRateAverageUpdateFilter!]
}

type ProductRateConnection {
  """Array of edges."""
  edges: [ProductRateEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ProductRateDeleteFilter {
  and: [ProductRateDeleteFilter!]
  id: IDFilterComparison
  or: [ProductRateDeleteFilter!]
}

type ProductRateDeleteResponse {
  createdAt: DateTime
  id: ID
  oldRate: Float
  product: Product
  productComment: ProductComment
  productCommentId: Float
  productId: Float
  rate: Rate
  rateId: Float
  rateValue: Float
  subproduct: Subproduct
  subproductId: Float
  updatedAt: DateTime
  user: User
  userId: Float
}

input ProductRateDomain {
  createdAt: DateTime
  id: ID!
  oldRate: Float
  product: ProductDomain!
  productComment: ProductCommentDomain
  productCommentId: Float
  productId: Float!
  rate: RateDomain
  rateId: Float
  rateValue: Float!
  subproduct: SubproductDomain
  subproductId: Float
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
}

type ProductRateEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ProductRate"""
  node: ProductRate!
}

input ProductRateFilter {
  and: [ProductRateFilter!]
  id: IDFilterComparison
  or: [ProductRateFilter!]
}

input ProductRateSort {
  direction: SortDirection!
  field: ProductRateSortFields!
  nulls: SortNulls
}

enum ProductRateSortFields {
  id
}

input ProductRateUpdateFilter {
  and: [ProductRateUpdateFilter!]
  id: IDFilterComparison
  or: [ProductRateUpdateFilter!]
}

input ProductSort {
  direction: SortDirection!
  field: ProductSortFields!
  nulls: SortNulls
}

enum ProductSortFields {
  id
}

type ProductTag {
  createdAt: DateTime
  id: ID!
  product: Product!
  productId: Float!
  subproduct: Subproduct
  subproductId: Float
  tag: Tag!
  tagId: Float!
  updatedAt: DateTime
}

type ProductTagConnection {
  """Array of edges."""
  edges: [ProductTagEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ProductTagDeleteFilter {
  and: [ProductTagDeleteFilter!]
  id: IDFilterComparison
  or: [ProductTagDeleteFilter!]
}

type ProductTagDeleteResponse {
  createdAt: DateTime
  id: ID
  product: Product
  productId: Float
  subproduct: Subproduct
  subproductId: Float
  tag: Tag
  tagId: Float
  updatedAt: DateTime
}

input ProductTagDomain {
  createdAt: DateTime
  id: ID!
  product: ProductDomain!
  productId: Float!
  subproduct: SubproductDomain
  subproductId: Float
  tag: TagDomain!
  tagId: Float!
  updatedAt: DateTime
}

type ProductTagEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ProductTag"""
  node: ProductTag!
}

input ProductTagFilter {
  and: [ProductTagFilter!]
  id: IDFilterComparison
  or: [ProductTagFilter!]
}

input ProductTagSort {
  direction: SortDirection!
  field: ProductTagSortFields!
  nulls: SortNulls
}

enum ProductTagSortFields {
  id
}

input ProductTagUpdateFilter {
  and: [ProductTagUpdateFilter!]
  id: IDFilterComparison
  or: [ProductTagUpdateFilter!]
}

input ProductUpdateFilter {
  and: [ProductUpdateFilter!]
  id: IDFilterComparison
  or: [ProductUpdateFilter!]
}

type ProductVideo {
  basicCarpetColor: BasicCarpetColor
  basicCarpetColorId: Float
  createdAt: DateTime
  id: ID!
  product: Product!
  productId: Float!
  sortOrder: Float
  updatedAt: DateTime
  video: Video!
  videoId: Float!
}

type ProductVideoConnection {
  """Array of edges."""
  edges: [ProductVideoEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ProductVideoDeleteFilter {
  and: [ProductVideoDeleteFilter!]
  id: IDFilterComparison
  or: [ProductVideoDeleteFilter!]
}

type ProductVideoDeleteResponse {
  basicCarpetColor: BasicCarpetColor
  basicCarpetColorId: Float
  createdAt: DateTime
  id: ID
  product: Product
  productId: Float
  sortOrder: Float
  updatedAt: DateTime
  video: Video
  videoId: Float
}

input ProductVideoDomain {
  basicCarpetColor: BasicCarpetColorDomain
  basicCarpetColorId: Float
  createdAt: DateTime
  id: ID!
  product: ProductDomain!
  productId: Float!
  sortOrder: Float
  updatedAt: DateTime
  video: VideoDomain!
  videoId: Float!
}

type ProductVideoEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ProductVideo"""
  node: ProductVideo!
}

input ProductVideoFilter {
  and: [ProductVideoFilter!]
  id: IDFilterComparison
  or: [ProductVideoFilter!]
}

input ProductVideoSort {
  direction: SortDirection!
  field: ProductVideoSortFields!
  nulls: SortNulls
}

enum ProductVideoSortFields {
  id
}

input ProductVideoUpdateFilter {
  and: [ProductVideoUpdateFilter!]
  id: IDFilterComparison
  or: [ProductVideoUpdateFilter!]
}

type ProductionPad {
  basicCarpetSize: BasicCarpetSize!
  basicCarpetSizeId: Float!
  code: String!
  createdAt: DateTime
  id: ID!
  isTagPrinted: Boolean!
  isUsed: Boolean!
  productionPadProductionPadStatuses: [ProductionPadProductionPadStatus!]!
  productionPadStatus: ProductionPadStatus!
  productionPadStatusId: Float!
  requestDate: DateTime
  rollRefCode: String
  rowNo: Float!
  updatedAt: DateTime
}

type ProductionPadConnection {
  """Array of edges."""
  edges: [ProductionPadEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ProductionPadDeleteFilter {
  and: [ProductionPadDeleteFilter!]
  id: IDFilterComparison
  or: [ProductionPadDeleteFilter!]
}

type ProductionPadDeleteResponse {
  basicCarpetSize: BasicCarpetSize
  basicCarpetSizeId: Float
  code: String
  createdAt: DateTime
  id: ID
  isTagPrinted: Boolean
  isUsed: Boolean
  productionPadProductionPadStatuses: [ProductionPadProductionPadStatus!]
  productionPadStatus: ProductionPadStatus
  productionPadStatusId: Float
  requestDate: DateTime
  rollRefCode: String
  rowNo: Float
  updatedAt: DateTime
}

input ProductionPadDomain {
  basicCarpetSize: BasicCarpetSizeDomain!
  basicCarpetSizeId: Float!
  code: String!
  createdAt: DateTime
  id: ID!
  isTagPrinted: Boolean!
  isUsed: Boolean!
  productionPadProductionPadStatuses: [ProductionPadProductionPadStatusDomain!]!
  productionPadStatus: ProductionPadStatusDomain!
  productionPadStatusId: Float!
  requestDate: DateTime
  rollRefCode: String
  rowNo: Float!
  updatedAt: DateTime
}

type ProductionPadEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ProductionPad"""
  node: ProductionPad!
}

input ProductionPadFilter {
  and: [ProductionPadFilter!]
  id: IDFilterComparison
  or: [ProductionPadFilter!]
}

type ProductionPadProductionPadStatus {
  createdAt: DateTime
  id: ID!
  productionPad: ProductionPad!
  productionPadId: Float!
  productionPadStatus: ProductionPadStatus!
  productionPadStatusId: Float!
  updatedAt: DateTime
  user: User!
  userId: Float!
}

type ProductionPadProductionPadStatusConnection {
  """Array of edges."""
  edges: [ProductionPadProductionPadStatusEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ProductionPadProductionPadStatusDeleteFilter {
  and: [ProductionPadProductionPadStatusDeleteFilter!]
  id: IDFilterComparison
  or: [ProductionPadProductionPadStatusDeleteFilter!]
}

type ProductionPadProductionPadStatusDeleteResponse {
  createdAt: DateTime
  id: ID
  productionPad: ProductionPad
  productionPadId: Float
  productionPadStatus: ProductionPadStatus
  productionPadStatusId: Float
  updatedAt: DateTime
  user: User
  userId: Float
}

input ProductionPadProductionPadStatusDomain {
  createdAt: DateTime
  id: ID!
  productionPad: ProductionPadDomain!
  productionPadId: Float!
  productionPadStatus: ProductionPadStatusDomain!
  productionPadStatusId: Float!
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
}

type ProductionPadProductionPadStatusEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ProductionPadProductionPadStatus"""
  node: ProductionPadProductionPadStatus!
}

input ProductionPadProductionPadStatusFilter {
  and: [ProductionPadProductionPadStatusFilter!]
  id: IDFilterComparison
  or: [ProductionPadProductionPadStatusFilter!]
}

input ProductionPadProductionPadStatusSort {
  direction: SortDirection!
  field: ProductionPadProductionPadStatusSortFields!
  nulls: SortNulls
}

enum ProductionPadProductionPadStatusSortFields {
  id
}

input ProductionPadProductionPadStatusUpdateFilter {
  and: [ProductionPadProductionPadStatusUpdateFilter!]
  id: IDFilterComparison
  or: [ProductionPadProductionPadStatusUpdateFilter!]
}

input ProductionPadSort {
  direction: SortDirection!
  field: ProductionPadSortFields!
  nulls: SortNulls
}

enum ProductionPadSortFields {
  id
}

type ProductionPadStatus {
  createdAt: DateTime
  id: ID!
  name: String!
  productionPadProductionPadStatuses: [ProductionPadProductionPadStatus!]!
  productionPads: [ProductionPad!]!
  step: Float!
  updatedAt: DateTime
}

type ProductionPadStatusConnection {
  """Array of edges."""
  edges: [ProductionPadStatusEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ProductionPadStatusDeleteFilter {
  and: [ProductionPadStatusDeleteFilter!]
  id: IDFilterComparison
  or: [ProductionPadStatusDeleteFilter!]
}

type ProductionPadStatusDeleteResponse {
  createdAt: DateTime
  id: ID
  name: String
  productionPadProductionPadStatuses: [ProductionPadProductionPadStatus!]
  productionPads: [ProductionPad!]
  step: Float
  updatedAt: DateTime
}

input ProductionPadStatusDomain {
  createdAt: DateTime
  id: ID!
  name: String!
  productionPadProductionPadStatuses: [ProductionPadProductionPadStatusDomain!]!
  productionPads: [ProductionPadDomain!]!
  step: Float!
  updatedAt: DateTime
}

type ProductionPadStatusEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ProductionPadStatus"""
  node: ProductionPadStatus!
}

input ProductionPadStatusFilter {
  and: [ProductionPadStatusFilter!]
  id: IDFilterComparison
  or: [ProductionPadStatusFilter!]
}

input ProductionPadStatusSort {
  direction: SortDirection!
  field: ProductionPadStatusSortFields!
  nulls: SortNulls
}

enum ProductionPadStatusSortFields {
  id
}

input ProductionPadStatusUpdateFilter {
  and: [ProductionPadStatusUpdateFilter!]
  id: IDFilterComparison
  or: [ProductionPadStatusUpdateFilter!]
}

input ProductionPadUpdateFilter {
  and: [ProductionPadUpdateFilter!]
  id: IDFilterComparison
  or: [ProductionPadUpdateFilter!]
}

type ProductionReceiptType {
  createdAt: DateTime
  id: ID!
  name: String!
  updatedAt: DateTime
}

type ProductionReceiptTypeConnection {
  """Array of edges."""
  edges: [ProductionReceiptTypeEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ProductionReceiptTypeDeleteFilter {
  and: [ProductionReceiptTypeDeleteFilter!]
  id: IDFilterComparison
  or: [ProductionReceiptTypeDeleteFilter!]
}

type ProductionReceiptTypeDeleteResponse {
  createdAt: DateTime
  id: ID
  name: String
  updatedAt: DateTime
}

input ProductionReceiptTypeDomain {
  createdAt: DateTime
  id: ID!
  name: String!
  updatedAt: DateTime
}

type ProductionReceiptTypeEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ProductionReceiptType"""
  node: ProductionReceiptType!
}

input ProductionReceiptTypeFilter {
  and: [ProductionReceiptTypeFilter!]
  id: IDFilterComparison
  or: [ProductionReceiptTypeFilter!]
}

input ProductionReceiptTypeSort {
  direction: SortDirection!
  field: ProductionReceiptTypeSortFields!
  nulls: SortNulls
}

enum ProductionReceiptTypeSortFields {
  id
}

input ProductionReceiptTypeUpdateFilter {
  and: [ProductionReceiptTypeUpdateFilter!]
  id: IDFilterComparison
  or: [ProductionReceiptTypeUpdateFilter!]
}

type ProductionRoll {
  billNumber: String
  closeDate: DateTime
  closedBy: Float
  closedBy2: User
  createdAt: DateTime
  createdBy: Float
  createdBy2: User
  id: ID!
  invoiceProductItems: [InvoiceProductItem!]!
  isClosed: Boolean!
  isShaggy: Boolean!
  length: Float!
  rollNumber: String!
  shaggyColor: String
  updatedAt: DateTime
  weight: Float!
  width: Float!
}

type ProductionRollConnection {
  """Array of edges."""
  edges: [ProductionRollEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ProductionRollDeleteFilter {
  and: [ProductionRollDeleteFilter!]
  id: IDFilterComparison
  or: [ProductionRollDeleteFilter!]
}

type ProductionRollDeleteResponse {
  billNumber: String
  closeDate: DateTime
  closedBy: Float
  closedBy2: User
  createdAt: DateTime
  createdBy: Float
  createdBy2: User
  id: ID
  invoiceProductItems: [InvoiceProductItem!]
  isClosed: Boolean
  isShaggy: Boolean
  length: Float
  rollNumber: String
  shaggyColor: String
  updatedAt: DateTime
  weight: Float
  width: Float
}

input ProductionRollDomain {
  billNumber: String
  closeDate: DateTime
  closedBy: Float
  closedBy2: UserDomain
  createdAt: DateTime
  createdBy: Float
  createdBy2: UserDomain
  id: ID!
  invoiceProductItems: [InvoiceProductItemDomain!]!
  isClosed: Boolean!
  isShaggy: Boolean!
  length: Float!
  rollNumber: String!
  shaggyColor: String
  updatedAt: DateTime
  weight: Float!
  width: Float!
}

type ProductionRollEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ProductionRoll"""
  node: ProductionRoll!
}

input ProductionRollFilter {
  and: [ProductionRollFilter!]
  id: IDFilterComparison
  or: [ProductionRollFilter!]
}

input ProductionRollSort {
  direction: SortDirection!
  field: ProductionRollSortFields!
  nulls: SortNulls
}

enum ProductionRollSortFields {
  id
}

input ProductionRollUpdateFilter {
  and: [ProductionRollUpdateFilter!]
  id: IDFilterComparison
  or: [ProductionRollUpdateFilter!]
}

type Query {
  activities(
    """Specify to filter the records returned."""
    filter: ActivityFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ActivitySort!]! = []
  ): ActivityConnection!
  activity(
    """The id of the record to find."""
    id: ID!
  ): Activity!
  address(
    """The id of the record to find."""
    id: ID!
  ): Address!
  addresses(
    """Specify to filter the records returned."""
    filter: AddressFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [AddressSort!]! = []
  ): AddressConnection!
  attribute(
    """The id of the record to find."""
    id: ID!
  ): Attribute!
  attributeAttributeGroup(
    """The id of the record to find."""
    id: ID!
  ): AttributeAttributeGroup!
  attributeAttributeGroups(
    """Specify to filter the records returned."""
    filter: AttributeAttributeGroupFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [AttributeAttributeGroupSort!]! = []
  ): AttributeAttributeGroupConnection!
  attributeGroup(
    """The id of the record to find."""
    id: ID!
  ): AttributeGroup!
  attributeGroups(
    """Specify to filter the records returned."""
    filter: AttributeGroupFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [AttributeGroupSort!]! = []
  ): AttributeGroupConnection!
  attributeItem(
    """The id of the record to find."""
    id: ID!
  ): AttributeItem!
  attributeItems(
    """Specify to filter the records returned."""
    filter: AttributeItemFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [AttributeItemSort!]! = []
  ): AttributeItemConnection!
  attributeProduct(
    """The id of the record to find."""
    id: ID!
  ): AttributeProduct!
  attributeProducts(
    """Specify to filter the records returned."""
    filter: AttributeProductFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [AttributeProductSort!]! = []
  ): AttributeProductConnection!
  attributeSubproduct(
    """The id of the record to find."""
    id: ID!
  ): AttributeSubproduct!
  attributeSubproducts(
    """Specify to filter the records returned."""
    filter: AttributeSubproductFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [AttributeSubproductSort!]! = []
  ): AttributeSubproductConnection!
  attributes(
    """Specify to filter the records returned."""
    filter: AttributeFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [AttributeSort!]! = []
  ): AttributeConnection!
  automationEvent(
    """The id of the record to find."""
    id: ID!
  ): AutomationEvent!
  automationEvents(
    """Specify to filter the records returned."""
    filter: AutomationEventFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [AutomationEventSort!]! = []
  ): AutomationEventConnection!
  automationRfmScore(
    """The id of the record to find."""
    id: ID!
  ): AutomationRfmScore!
  automationRfmScores(
    """Specify to filter the records returned."""
    filter: AutomationRfmScoreFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [AutomationRfmScoreSort!]! = []
  ): AutomationRfmScoreConnection!
  basicCarpetBorder(
    """The id of the record to find."""
    id: ID!
  ): BasicCarpetBorder!
  basicCarpetBorders(
    """Specify to filter the records returned."""
    filter: BasicCarpetBorderFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [BasicCarpetBorderSort!]! = []
  ): BasicCarpetBorderConnection!
  basicCarpetBrand(
    """The id of the record to find."""
    id: ID!
  ): BasicCarpetBrand!
  basicCarpetBrands(
    """Specify to filter the records returned."""
    filter: BasicCarpetBrandFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [BasicCarpetBrandSort!]! = []
  ): BasicCarpetBrandConnection!
  basicCarpetColor(
    """The id of the record to find."""
    id: ID!
  ): BasicCarpetColor!
  basicCarpetColors(
    """Specify to filter the records returned."""
    filter: BasicCarpetColorFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [BasicCarpetColorSort!]! = []
  ): BasicCarpetColorConnection!
  basicCarpetDesign(
    """The id of the record to find."""
    id: ID!
  ): BasicCarpetDesign!
  basicCarpetDesigner(
    """The id of the record to find."""
    id: ID!
  ): BasicCarpetDesigner!
  basicCarpetDesigners(
    """Specify to filter the records returned."""
    filter: BasicCarpetDesignerFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [BasicCarpetDesignerSort!]! = []
  ): BasicCarpetDesignerConnection!
  basicCarpetDesigns(
    """Specify to filter the records returned."""
    filter: BasicCarpetDesignFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [BasicCarpetDesignSort!]! = []
  ): BasicCarpetDesignConnection!
  basicCarpetMaterial(
    """The id of the record to find."""
    id: ID!
  ): BasicCarpetMaterial!
  basicCarpetMaterials(
    """Specify to filter the records returned."""
    filter: BasicCarpetMaterialFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [BasicCarpetMaterialSort!]! = []
  ): BasicCarpetMaterialConnection!
  basicCarpetSize(
    """The id of the record to find."""
    id: ID!
  ): BasicCarpetSize!
  basicCarpetSizeDetail(
    """The id of the record to find."""
    id: ID!
  ): BasicCarpetSizeDetail!
  basicCarpetSizeDetails(
    """Specify to filter the records returned."""
    filter: BasicCarpetSizeDetailFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [BasicCarpetSizeDetailSort!]! = []
  ): BasicCarpetSizeDetailConnection!
  basicCarpetSizes(
    """Specify to filter the records returned."""
    filter: BasicCarpetSizeFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [BasicCarpetSizeSort!]! = []
  ): BasicCarpetSizeConnection!
  basicCarpetType(
    """The id of the record to find."""
    id: ID!
  ): BasicCarpetType!
  basicCarpetTypes(
    """Specify to filter the records returned."""
    filter: BasicCarpetTypeFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [BasicCarpetTypeSort!]! = []
  ): BasicCarpetTypeConnection!
  border(
    """The id of the record to find."""
    id: ID!
  ): Border!
  borders(
    """Specify to filter the records returned."""
    filter: BorderFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [BorderSort!]! = []
  ): BorderConnection!
  campaignFreeOffer(
    """The id of the record to find."""
    id: ID!
  ): CampaignFreeOffer!
  campaignFreeOfferSize(
    """The id of the record to find."""
    id: ID!
  ): CampaignFreeOfferSize!
  campaignFreeOfferSizes(
    """Specify to filter the records returned."""
    filter: CampaignFreeOfferSizeFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [CampaignFreeOfferSizeSort!]! = []
  ): CampaignFreeOfferSizeConnection!
  campaignFreeOffers(
    """Specify to filter the records returned."""
    filter: CampaignFreeOfferFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [CampaignFreeOfferSort!]! = []
  ): CampaignFreeOfferConnection!
  campaignGoldCoinSub(
    """The id of the record to find."""
    id: ID!
  ): CampaignGoldCoinSub!
  campaignGoldCoinSubs(
    """Specify to filter the records returned."""
    filter: CampaignGoldCoinSubFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [CampaignGoldCoinSubSort!]! = []
  ): CampaignGoldCoinSubConnection!
  campaignInstagramFollow(
    """The id of the record to find."""
    id: ID!
  ): CampaignInstagramFollow!
  campaignInstagramFollows(
    """Specify to filter the records returned."""
    filter: CampaignInstagramFollowFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [CampaignInstagramFollowSort!]! = []
  ): CampaignInstagramFollowConnection!
  campaignPetForm(
    """The id of the record to find."""
    id: ID!
  ): CampaignPetForm!
  campaignPetForms(
    """Specify to filter the records returned."""
    filter: CampaignPetFormFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [CampaignPetFormSort!]! = []
  ): CampaignPetFormConnection!
  campaignRoomvoImage(
    """The id of the record to find."""
    id: ID!
  ): CampaignRoomvoImage!
  campaignRoomvoImages(
    """Specify to filter the records returned."""
    filter: CampaignRoomvoImageFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [CampaignRoomvoImageSort!]! = []
  ): CampaignRoomvoImageConnection!
  campaignRoomvoVote(
    """The id of the record to find."""
    id: ID!
  ): CampaignRoomvoVote!
  campaignRoomvoVotes(
    """Specify to filter the records returned."""
    filter: CampaignRoomvoVoteFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [CampaignRoomvoVoteSort!]! = []
  ): CampaignRoomvoVoteConnection!
  campaignSubscription(
    """The id of the record to find."""
    id: ID!
  ): CampaignSubscription!
  campaignSubscriptions(
    """Specify to filter the records returned."""
    filter: CampaignSubscriptionFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [CampaignSubscriptionSort!]! = []
  ): CampaignSubscriptionConnection!
  campaignUefaEuroSubscriber(
    """The id of the record to find."""
    id: ID!
  ): CampaignUefaEuroSubscriber!
  campaignUefaEuroSubscriberHistories(
    """Specify to filter the records returned."""
    filter: CampaignUefaEuroSubscriberHistoryFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [CampaignUefaEuroSubscriberHistorySort!]! = []
  ): CampaignUefaEuroSubscriberHistoryConnection!
  campaignUefaEuroSubscriberHistory(
    """The id of the record to find."""
    id: ID!
  ): CampaignUefaEuroSubscriberHistory!
  campaignUefaEuroSubscribers(
    """Specify to filter the records returned."""
    filter: CampaignUefaEuroSubscriberFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [CampaignUefaEuroSubscriberSort!]! = []
  ): CampaignUefaEuroSubscriberConnection!
  campaignVotingImage(
    """The id of the record to find."""
    id: ID!
  ): CampaignVotingImage!
  campaignVotingImageUser(
    """The id of the record to find."""
    id: ID!
  ): CampaignVotingImageUser!
  campaignVotingImageUsers(
    """Specify to filter the records returned."""
    filter: CampaignVotingImageUserFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [CampaignVotingImageUserSort!]! = []
  ): CampaignVotingImageUserConnection!
  campaignVotingImages(
    """Specify to filter the records returned."""
    filter: CampaignVotingImageFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [CampaignVotingImageSort!]! = []
  ): CampaignVotingImageConnection!
  carpetFeature(
    """The id of the record to find."""
    id: ID!
  ): CarpetFeature!
  carpetFeatureUser(
    """The id of the record to find."""
    id: ID!
  ): CarpetFeatureUser!
  carpetFeatureUsers(
    """Specify to filter the records returned."""
    filter: CarpetFeatureUserFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [CarpetFeatureUserSort!]! = []
  ): CarpetFeatureUserConnection!
  carpetFeatures(
    """Specify to filter the records returned."""
    filter: CarpetFeatureFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [CarpetFeatureSort!]! = []
  ): CarpetFeatureConnection!
  carpetMaterial(
    """The id of the record to find."""
    id: ID!
  ): CarpetMaterial!
  carpetMaterials(
    """Specify to filter the records returned."""
    filter: CarpetMaterialFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [CarpetMaterialSort!]! = []
  ): CarpetMaterialConnection!
  carpetShape(
    """The id of the record to find."""
    id: ID!
  ): CarpetShape!
  carpetShapes(
    """Specify to filter the records returned."""
    filter: CarpetShapeFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [CarpetShapeSort!]! = []
  ): CarpetShapeConnection!
  carpetSize(
    """The id of the record to find."""
    id: ID!
  ): CarpetSize!
  carpetSizes(
    """Specify to filter the records returned."""
    filter: CarpetSizeFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [CarpetSizeSort!]! = []
  ): CarpetSizeConnection!
  carpetUsagePlace(
    """The id of the record to find."""
    id: ID!
  ): CarpetUsagePlace!
  carpetUsagePlaceInvoiceProduct(
    """The id of the record to find."""
    id: ID!
  ): CarpetUsagePlaceInvoiceProduct!
  carpetUsagePlaceInvoiceProducts(
    """Specify to filter the records returned."""
    filter: CarpetUsagePlaceInvoiceProductFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [CarpetUsagePlaceInvoiceProductSort!]! = []
  ): CarpetUsagePlaceInvoiceProductConnection!
  carpetUsagePlaceUser(
    """The id of the record to find."""
    id: ID!
  ): CarpetUsagePlaceUser!
  carpetUsagePlaceUsers(
    """Specify to filter the records returned."""
    filter: CarpetUsagePlaceUserFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [CarpetUsagePlaceUserSort!]! = []
  ): CarpetUsagePlaceUserConnection!
  carpetUsagePlaces(
    """Specify to filter the records returned."""
    filter: CarpetUsagePlaceFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [CarpetUsagePlaceSort!]! = []
  ): CarpetUsagePlaceConnection!
  chaparSettlementStatus(
    """The id of the record to find."""
    id: ID!
  ): ChaparSettlementStatus!
  chaparSettlementStatuses(
    """Specify to filter the records returned."""
    filter: ChaparSettlementStatusFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ChaparSettlementStatusSort!]! = []
  ): ChaparSettlementStatusConnection!
  chaparTrackingHistories(
    """Specify to filter the records returned."""
    filter: ChaparTrackingHistoryFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ChaparTrackingHistorySort!]! = []
  ): ChaparTrackingHistoryConnection!
  chaparTrackingHistory(
    """The id of the record to find."""
    id: ID!
  ): ChaparTrackingHistory!
  cities(
    """Specify to filter the records returned."""
    filter: CityFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [CitySort!]! = []
  ): CityConnection!
  citiesSepidar(
    """The id of the record to find."""
    id: ID!
  ): CitiesSepidar!
  citiesSepidars(
    """Specify to filter the records returned."""
    filter: CitiesSepidarFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [CitiesSepidarSort!]! = []
  ): CitiesSepidarConnection!
  city(
    """The id of the record to find."""
    id: ID!
  ): City!
  city2(
    """The id of the record to find."""
    id: ID!
  ): City2!
  city2s(
    """Specify to filter the records returned."""
    filter: City2Filter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [City2Sort!]! = []
  ): City2Connection!
  color(
    """The id of the record to find."""
    id: ID!
  ): Color!
  colorCategories(
    """Specify to filter the records returned."""
    filter: ColorCategoryFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ColorCategorySort!]! = []
  ): ColorCategoryConnection!
  colorCategory(
    """The id of the record to find."""
    id: ID!
  ): ColorCategory!
  colorCategoryDetail(
    """The id of the record to find."""
    id: ID!
  ): ColorCategoryDetail!
  colorCategoryDetails(
    """Specify to filter the records returned."""
    filter: ColorCategoryDetailFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ColorCategoryDetailSort!]! = []
  ): ColorCategoryDetailConnection!
  colorCategorySubproduct(
    """The id of the record to find."""
    id: ID!
  ): ColorCategorySubproduct!
  colorCategorySubproducts(
    """Specify to filter the records returned."""
    filter: ColorCategorySubproductFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ColorCategorySubproductSort!]! = []
  ): ColorCategorySubproductConnection!
  colors(
    """Specify to filter the records returned."""
    filter: ColorFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ColorSort!]! = []
  ): ColorConnection!
  config(
    """The id of the record to find."""
    id: ID!
  ): Config!
  configs(
    """Specify to filter the records returned."""
    filter: ConfigFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ConfigSort!]! = []
  ): ConfigConnection!
  contactForm(
    """The id of the record to find."""
    id: ID!
  ): ContactForm!
  contactFormHistories(
    """Specify to filter the records returned."""
    filter: ContactFormHistoryFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ContactFormHistorySort!]! = []
  ): ContactFormHistoryConnection!
  contactFormHistory(
    """The id of the record to find."""
    id: ID!
  ): ContactFormHistory!
  contactFormStatus(
    """The id of the record to find."""
    id: ID!
  ): ContactFormStatus!
  contactFormStatuses(
    """Specify to filter the records returned."""
    filter: ContactFormStatusFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ContactFormStatusSort!]! = []
  ): ContactFormStatusConnection!
  contactForms(
    """Specify to filter the records returned."""
    filter: ContactFormFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ContactFormSort!]! = []
  ): ContactFormConnection!
  countries(
    """Specify to filter the records returned."""
    filter: CountryFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [CountrySort!]! = []
  ): CountryConnection!
  country(
    """The id of the record to find."""
    id: ID!
  ): Country!
  coupon(
    """The id of the record to find."""
    id: ID!
  ): Coupon!
  couponSubject(
    """The id of the record to find."""
    id: ID!
  ): CouponSubject!
  couponSubjects(
    """Specify to filter the records returned."""
    filter: CouponSubjectFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [CouponSubjectSort!]! = []
  ): CouponSubjectConnection!
  coupons(
    """Specify to filter the records returned."""
    filter: CouponFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [CouponSort!]! = []
  ): CouponConnection!
  crmPresentation(
    """The id of the record to find."""
    id: ID!
  ): CrmPresentation!
  crmPresentations(
    """Specify to filter the records returned."""
    filter: CrmPresentationFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [CrmPresentationSort!]! = []
  ): CrmPresentationConnection!
  customerImageProduct(
    """The id of the record to find."""
    id: ID!
  ): CustomerImageProduct!
  customerImageProducts(
    """Specify to filter the records returned."""
    filter: CustomerImageProductFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [CustomerImageProductSort!]! = []
  ): CustomerImageProductConnection!
  customerRequest(
    """The id of the record to find."""
    id: ID!
  ): CustomerRequest!
  customerRequestFile(
    """The id of the record to find."""
    id: ID!
  ): CustomerRequestFile!
  customerRequestFiles(
    """Specify to filter the records returned."""
    filter: CustomerRequestFileFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [CustomerRequestFileSort!]! = []
  ): CustomerRequestFileConnection!
  customerRequests(
    """Specify to filter the records returned."""
    filter: CustomerRequestFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [CustomerRequestSort!]! = []
  ): CustomerRequestConnection!
  customerVideoProduct(
    """The id of the record to find."""
    id: ID!
  ): CustomerVideoProduct!
  customerVideoProducts(
    """Specify to filter the records returned."""
    filter: CustomerVideoProductFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [CustomerVideoProductSort!]! = []
  ): CustomerVideoProductConnection!
  damageReason(
    """The id of the record to find."""
    id: ID!
  ): DamageReason!
  damageReasons(
    """Specify to filter the records returned."""
    filter: DamageReasonFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [DamageReasonSort!]! = []
  ): DamageReasonConnection!
  department(
    """The id of the record to find."""
    id: ID!
  ): Department!
  departments(
    """Specify to filter the records returned."""
    filter: DepartmentFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [DepartmentSort!]! = []
  ): DepartmentConnection!
  design(
    """The id of the record to find."""
    id: ID!
  ): Design!
  designersProductPriceRange(
    """The id of the record to find."""
    id: ID!
  ): DesignersProductPriceRange!
  designersProductPriceRanges(
    """Specify to filter the records returned."""
    filter: DesignersProductPriceRangeFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [DesignersProductPriceRangeSort!]! = []
  ): DesignersProductPriceRangeConnection!
  designs(
    """Specify to filter the records returned."""
    filter: DesignFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [DesignSort!]! = []
  ): DesignConnection!
  discount(
    """The id of the record to find."""
    id: ID!
  ): Discount!
  discountNotification(
    """The id of the record to find."""
    id: ID!
  ): DiscountNotification!
  discountNotifications(
    """Specify to filter the records returned."""
    filter: DiscountNotificationFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [DiscountNotificationSort!]! = []
  ): DiscountNotificationConnection!
  discountSubject(
    """The id of the record to find."""
    id: ID!
  ): DiscountSubject!
  discountSubjects(
    """Specify to filter the records returned."""
    filter: DiscountSubjectFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [DiscountSubjectSort!]! = []
  ): DiscountSubjectConnection!
  discounts(
    """Specify to filter the records returned."""
    filter: DiscountFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [DiscountSort!]! = []
  ): DiscountConnection!
  exitControl(
    """The id of the record to find."""
    id: ID!
  ): ExitControl!
  exitControlItem(
    """The id of the record to find."""
    id: ID!
  ): ExitControlItem!
  exitControlItems(
    """Specify to filter the records returned."""
    filter: ExitControlItemFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ExitControlItemSort!]! = []
  ): ExitControlItemConnection!
  exitControls(
    """Specify to filter the records returned."""
    filter: ExitControlFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ExitControlSort!]! = []
  ): ExitControlConnection!
  exportProduct(
    """The id of the record to find."""
    id: ID!
  ): ExportProduct!
  exportProducts(
    """Specify to filter the records returned."""
    filter: ExportProductFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ExportProductSort!]! = []
  ): ExportProductConnection!
  failedJob(
    """The id of the record to find."""
    id: ID!
  ): FailedJob!
  failedJobs(
    """Specify to filter the records returned."""
    filter: FailedJobFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [FailedJobSort!]! = []
  ): FailedJobConnection!
  favoriteProduct(
    """The id of the record to find."""
    id: ID!
  ): FavoriteProduct!
  favoriteProducts(
    """Specify to filter the records returned."""
    filter: FavoriteProductFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [FavoriteProductSort!]! = []
  ): FavoriteProductConnection!
  fedexAddressValidationAttribute(
    """The id of the record to find."""
    id: ID!
  ): FedexAddressValidationAttribute!
  fedexAddressValidationAttributes(
    """Specify to filter the records returned."""
    filter: FedexAddressValidationAttributeFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [FedexAddressValidationAttributeSort!]! = []
  ): FedexAddressValidationAttributeConnection!
  fetchSiteUrl(
    """The id of the record to find."""
    id: ID!
  ): FetchSiteUrl!
  fetchSiteUrls(
    """Specify to filter the records returned."""
    filter: FetchSiteUrlFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [FetchSiteUrlSort!]! = []
  ): FetchSiteUrlConnection!
  file(
    """The id of the record to find."""
    id: ID!
  ): File!
  fileNegotiation(
    """The id of the record to find."""
    id: ID!
  ): FileNegotiation!
  fileNegotiations(
    """Specify to filter the records returned."""
    filter: FileNegotiationFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [FileNegotiationSort!]! = []
  ): FileNegotiationConnection!
  files(
    """Specify to filter the records returned."""
    filter: FileFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [FileSort!]! = []
  ): FileConnection!
  getActivityWithUserResolver(activityId: Float!): Activity!
  getUserWithActivitiesResolver(userId: Float!): User!
  ghazal(
    """The id of the record to find."""
    id: ID!
  ): Ghazal!
  ghazals(
    """Specify to filter the records returned."""
    filter: GhazalFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [GhazalSort!]! = []
  ): GhazalConnection!
  googleFormUtm(
    """The id of the record to find."""
    id: ID!
  ): GoogleFormUtm!
  googleFormUtms(
    """Specify to filter the records returned."""
    filter: GoogleFormUtmFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [GoogleFormUtmSort!]! = []
  ): GoogleFormUtmConnection!
  heardAboutUsOption(
    """The id of the record to find."""
    id: ID!
  ): HeardAboutUsOption!
  heardAboutUsOptions(
    """Specify to filter the records returned."""
    filter: HeardAboutUsOptionFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [HeardAboutUsOptionSort!]! = []
  ): HeardAboutUsOptionConnection!
  helpDesk(
    """The id of the record to find."""
    id: ID!
  ): HelpDesk!
  helpDesks(
    """Specify to filter the records returned."""
    filter: HelpDeskFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [HelpDeskSort!]! = []
  ): HelpDeskConnection!
  holiday(
    """The id of the record to find."""
    id: ID!
  ): Holiday!
  holidays(
    """Specify to filter the records returned."""
    filter: HolidayFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [HolidaySort!]! = []
  ): HolidayConnection!
  homePageCustomerImage(
    """The id of the record to find."""
    id: ID!
  ): HomePageCustomerImage!
  homePageCustomerImages(
    """Specify to filter the records returned."""
    filter: HomePageCustomerImageFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [HomePageCustomerImageSort!]! = []
  ): HomePageCustomerImageConnection!
  hyper(
    """The id of the record to find."""
    id: ID!
  ): Hyper!
  hypers(
    """Specify to filter the records returned."""
    filter: HyperFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [HyperSort!]! = []
  ): HyperConnection!
  hyperstarCode(
    """The id of the record to find."""
    id: ID!
  ): HyperstarCode!
  hyperstarCodes(
    """Specify to filter the records returned."""
    filter: HyperstarCodeFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [HyperstarCodeSort!]! = []
  ): HyperstarCodeConnection!
  image(
    """The id of the record to find."""
    id: ID!
  ): Image!
  imageLayer(
    """The id of the record to find."""
    id: ID!
  ): ImageLayer!
  imageLayers(
    """Specify to filter the records returned."""
    filter: ImageLayerFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ImageLayerSort!]! = []
  ): ImageLayerConnection!
  imageProduct(
    """The id of the record to find."""
    id: ID!
  ): ImageProduct!
  imageProducts(
    """Specify to filter the records returned."""
    filter: ImageProductFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ImageProductSort!]! = []
  ): ImageProductConnection!
  imageSize(
    """The id of the record to find."""
    id: ID!
  ): ImageSize!
  imageSizes(
    """Specify to filter the records returned."""
    filter: ImageSizeFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ImageSizeSort!]! = []
  ): ImageSizeConnection!
  imageSubproduct(
    """The id of the record to find."""
    id: ID!
  ): ImageSubproduct!
  imageSubproducts(
    """Specify to filter the records returned."""
    filter: ImageSubproductFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ImageSubproductSort!]! = []
  ): ImageSubproductConnection!
  images(
    """Specify to filter the records returned."""
    filter: ImageFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ImageSort!]! = []
  ): ImageConnection!
  imagesSizeGuidesDetail(
    """The id of the record to find."""
    id: ID!
  ): ImagesSizeGuidesDetail!
  imagesSizeGuidesDetails(
    """Specify to filter the records returned."""
    filter: ImagesSizeGuidesDetailFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ImagesSizeGuidesDetailSort!]! = []
  ): ImagesSizeGuidesDetailConnection!
  impersonateHistories(
    """Specify to filter the records returned."""
    filter: ImpersonateHistoryFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ImpersonateHistorySort!]! = []
  ): ImpersonateHistoryConnection!
  impersonateHistory(
    """The id of the record to find."""
    id: ID!
  ): ImpersonateHistory!
  incredibleOffer(
    """The id of the record to find."""
    id: ID!
  ): IncredibleOffer!
  incredibleOfferSentNotification(
    """The id of the record to find."""
    id: ID!
  ): IncredibleOfferSentNotification!
  incredibleOfferSentNotifications(
    """Specify to filter the records returned."""
    filter: IncredibleOfferSentNotificationFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [IncredibleOfferSentNotificationSort!]! = []
  ): IncredibleOfferSentNotificationConnection!
  incredibleOffers(
    """Specify to filter the records returned."""
    filter: IncredibleOfferFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [IncredibleOfferSort!]! = []
  ): IncredibleOfferConnection!
  instagramFeed(
    """The id of the record to find."""
    id: ID!
  ): InstagramFeed!
  instagramFeeds(
    """Specify to filter the records returned."""
    filter: InstagramFeedFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [InstagramFeedSort!]! = []
  ): InstagramFeedConnection!
  invitationCode(
    """The id of the record to find."""
    id: ID!
  ): InvitationCode!
  invitationCodes(
    """Specify to filter the records returned."""
    filter: InvitationCodeFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [InvitationCodeSort!]! = []
  ): InvitationCodeConnection!
  invoice(
    """The id of the record to find."""
    id: ID!
  ): Invoice!
  invoiceAddress(
    """The id of the record to find."""
    id: ID!
  ): InvoiceAddress!
  invoiceAddressValidationResult(
    """The id of the record to find."""
    id: ID!
  ): InvoiceAddressValidationResult!
  invoiceAddressValidationResults(
    """Specify to filter the records returned."""
    filter: InvoiceAddressValidationResultFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [InvoiceAddressValidationResultSort!]! = []
  ): InvoiceAddressValidationResultConnection!
  invoiceAddresses(
    """Specify to filter the records returned."""
    filter: InvoiceAddressFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [InvoiceAddressSort!]! = []
  ): InvoiceAddressConnection!
  invoiceBankGatewayHistories(
    """Specify to filter the records returned."""
    filter: InvoiceBankGatewayHistoryFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [InvoiceBankGatewayHistorySort!]! = []
  ): InvoiceBankGatewayHistoryConnection!
  invoiceBankGatewayHistory(
    """The id of the record to find."""
    id: ID!
  ): InvoiceBankGatewayHistory!
  invoiceHistories(
    """Specify to filter the records returned."""
    filter: InvoiceHistoryFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [InvoiceHistorySort!]! = []
  ): InvoiceHistoryConnection!
  invoiceHistory(
    """The id of the record to find."""
    id: ID!
  ): InvoiceHistory!
  invoiceInvoiceStatus(
    """The id of the record to find."""
    id: ID!
  ): InvoiceInvoiceStatus!
  invoiceInvoiceStatuses(
    """Specify to filter the records returned."""
    filter: InvoiceInvoiceStatusFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [InvoiceInvoiceStatusSort!]! = []
  ): InvoiceInvoiceStatusConnection!
  invoiceMode(
    """The id of the record to find."""
    id: ID!
  ): InvoiceMode!
  invoiceModes(
    """Specify to filter the records returned."""
    filter: InvoiceModeFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [InvoiceModeSort!]! = []
  ): InvoiceModeConnection!
  invoiceNegotiation(
    """The id of the record to find."""
    id: ID!
  ): InvoiceNegotiation!
  invoiceNegotiations(
    """Specify to filter the records returned."""
    filter: InvoiceNegotiationFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [InvoiceNegotiationSort!]! = []
  ): InvoiceNegotiationConnection!
  invoicePayment(
    """The id of the record to find."""
    id: ID!
  ): InvoicePayment!
  invoicePaymentHistories(
    """Specify to filter the records returned."""
    filter: InvoicePaymentHistoryFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [InvoicePaymentHistorySort!]! = []
  ): InvoicePaymentHistoryConnection!
  invoicePaymentHistory(
    """The id of the record to find."""
    id: ID!
  ): InvoicePaymentHistory!
  invoicePaymentStatus(
    """The id of the record to find."""
    id: ID!
  ): InvoicePaymentStatus!
  invoicePaymentStatuses(
    """Specify to filter the records returned."""
    filter: InvoicePaymentStatusFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [InvoicePaymentStatusSort!]! = []
  ): InvoicePaymentStatusConnection!
  invoicePaymentType(
    """The id of the record to find."""
    id: ID!
  ): InvoicePaymentType!
  invoicePaymentTypes(
    """Specify to filter the records returned."""
    filter: InvoicePaymentTypeFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [InvoicePaymentTypeSort!]! = []
  ): InvoicePaymentTypeConnection!
  invoicePayments(
    """Specify to filter the records returned."""
    filter: InvoicePaymentFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [InvoicePaymentSort!]! = []
  ): InvoicePaymentConnection!
  invoiceProduct(
    """The id of the record to find."""
    id: ID!
  ): InvoiceProduct!
  invoiceProductHistories(
    """Specify to filter the records returned."""
    filter: InvoiceProductHistoryFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [InvoiceProductHistorySort!]! = []
  ): InvoiceProductHistoryConnection!
  invoiceProductHistory(
    """The id of the record to find."""
    id: ID!
  ): InvoiceProductHistory!
  invoiceProductItem(
    """The id of the record to find."""
    id: ID!
  ): InvoiceProductItem!
  invoiceProductItemInvoiceProductStatus(
    """The id of the record to find."""
    id: ID!
  ): InvoiceProductItemInvoiceProductStatus!
  invoiceProductItemInvoiceProductStatuses(
    """Specify to filter the records returned."""
    filter: InvoiceProductItemInvoiceProductStatusFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [InvoiceProductItemInvoiceProductStatusSort!]! = []
  ): InvoiceProductItemInvoiceProductStatusConnection!
  invoiceProductItems(
    """Specify to filter the records returned."""
    filter: InvoiceProductItemFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [InvoiceProductItemSort!]! = []
  ): InvoiceProductItemConnection!
  invoiceProductStatus(
    """The id of the record to find."""
    id: ID!
  ): InvoiceProductStatus!
  invoiceProductStatuses(
    """Specify to filter the records returned."""
    filter: InvoiceProductStatusFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [InvoiceProductStatusSort!]! = []
  ): InvoiceProductStatusConnection!
  invoiceProducts(
    """Specify to filter the records returned."""
    filter: InvoiceProductFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [InvoiceProductSort!]! = []
  ): InvoiceProductConnection!
  invoiceRatesResult(
    """The id of the record to find."""
    id: ID!
  ): InvoiceRatesResult!
  invoiceRatesResults(
    """Specify to filter the records returned."""
    filter: InvoiceRatesResultFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [InvoiceRatesResultSort!]! = []
  ): InvoiceRatesResultConnection!
  invoiceReversal(
    """The id of the record to find."""
    id: ID!
  ): InvoiceReversal!
  invoiceReversalItem(
    """The id of the record to find."""
    id: ID!
  ): InvoiceReversalItem!
  invoiceReversalItems(
    """Specify to filter the records returned."""
    filter: InvoiceReversalItemFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [InvoiceReversalItemSort!]! = []
  ): InvoiceReversalItemConnection!
  invoiceReversals(
    """Specify to filter the records returned."""
    filter: InvoiceReversalFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [InvoiceReversalSort!]! = []
  ): InvoiceReversalConnection!
  invoiceShippingRate(
    """The id of the record to find."""
    id: ID!
  ): InvoiceShippingRate!
  invoiceShippingRates(
    """Specify to filter the records returned."""
    filter: InvoiceShippingRateFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [InvoiceShippingRateSort!]! = []
  ): InvoiceShippingRateConnection!
  invoiceStatus(
    """The id of the record to find."""
    id: ID!
  ): InvoiceStatus!
  invoiceStatuses(
    """Specify to filter the records returned."""
    filter: InvoiceStatusFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [InvoiceStatusSort!]! = []
  ): InvoiceStatusConnection!
  invoiceType(
    """The id of the record to find."""
    id: ID!
  ): InvoiceType!
  invoiceTypes(
    """Specify to filter the records returned."""
    filter: InvoiceTypeFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [InvoiceTypeSort!]! = []
  ): InvoiceTypeConnection!
  invoices(
    """Specify to filter the records returned."""
    filter: InvoiceFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [InvoiceSort!]! = []
  ): InvoiceConnection!
  label(
    """The id of the record to find."""
    id: ID!
  ): Label!
  labelProduct(
    """The id of the record to find."""
    id: ID!
  ): LabelProduct!
  labelProducts(
    """Specify to filter the records returned."""
    filter: LabelProductFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [LabelProductSort!]! = []
  ): LabelProductConnection!
  labels(
    """Specify to filter the records returned."""
    filter: LabelFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [LabelSort!]! = []
  ): LabelConnection!
  mellatPaymentError(
    """The id of the record to find."""
    id: ID!
  ): MellatPaymentError!
  mellatPaymentErrors(
    """Specify to filter the records returned."""
    filter: MellatPaymentErrorFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [MellatPaymentErrorSort!]! = []
  ): MellatPaymentErrorConnection!
  migration(
    """The id of the record to find."""
    id: ID!
  ): Migration!
  migrations(
    """Specify to filter the records returned."""
    filter: MigrationFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [MigrationSort!]! = []
  ): MigrationConnection!
  modelHasPermission(
    """The id of the record to find."""
    id: ID!
  ): ModelHasPermission!
  modelHasPermissions(
    """Specify to filter the records returned."""
    filter: ModelHasPermissionFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ModelHasPermissionSort!]! = []
  ): ModelHasPermissionConnection!
  modelHasRole(
    """The id of the record to find."""
    id: ID!
  ): ModelHasRole!
  modelHasRoles(
    """Specify to filter the records returned."""
    filter: ModelHasRoleFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ModelHasRoleSort!]! = []
  ): ModelHasRoleConnection!
  modelVisit(
    """The id of the record to find."""
    id: ID!
  ): ModelVisit!
  modelVisits(
    """Specify to filter the records returned."""
    filter: ModelVisitFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ModelVisitSort!]! = []
  ): ModelVisitConnection!
  modemaAccelerator(
    """The id of the record to find."""
    id: ID!
  ): ModemaAccelerator!
  modemaAcceleratorImage(
    """The id of the record to find."""
    id: ID!
  ): ModemaAcceleratorImage!
  modemaAcceleratorImages(
    """Specify to filter the records returned."""
    filter: ModemaAcceleratorImageFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ModemaAcceleratorImageSort!]! = []
  ): ModemaAcceleratorImageConnection!
  modemaAcceleratorVideo(
    """The id of the record to find."""
    id: ID!
  ): ModemaAcceleratorVideo!
  modemaAcceleratorVideos(
    """Specify to filter the records returned."""
    filter: ModemaAcceleratorVideoFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ModemaAcceleratorVideoSort!]! = []
  ): ModemaAcceleratorVideoConnection!
  modemaAccelerators(
    """Specify to filter the records returned."""
    filter: ModemaAcceleratorFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ModemaAcceleratorSort!]! = []
  ): ModemaAcceleratorConnection!
  needsPhotographySubproduct(
    """The id of the record to find."""
    id: ID!
  ): NeedsPhotographySubproduct!
  needsPhotographySubproducts(
    """Specify to filter the records returned."""
    filter: NeedsPhotographySubproductFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [NeedsPhotographySubproductSort!]! = []
  ): NeedsPhotographySubproductConnection!
  negotiation(
    """The id of the record to find."""
    id: ID!
  ): Negotiation!
  negotiationHistories(
    """Specify to filter the records returned."""
    filter: NegotiationHistoryFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [NegotiationHistorySort!]! = []
  ): NegotiationHistoryConnection!
  negotiationHistory(
    """The id of the record to find."""
    id: ID!
  ): NegotiationHistory!
  negotiationStatus(
    """The id of the record to find."""
    id: ID!
  ): NegotiationStatus!
  negotiationStatuses(
    """Specify to filter the records returned."""
    filter: NegotiationStatusFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [NegotiationStatusSort!]! = []
  ): NegotiationStatusConnection!
  negotiationStep(
    """The id of the record to find."""
    id: ID!
  ): NegotiationStep!
  negotiationSteps(
    """Specify to filter the records returned."""
    filter: NegotiationStepFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [NegotiationStepSort!]! = []
  ): NegotiationStepConnection!
  negotiationType(
    """The id of the record to find."""
    id: ID!
  ): NegotiationType!
  negotiationTypes(
    """Specify to filter the records returned."""
    filter: NegotiationTypeFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [NegotiationTypeSort!]! = []
  ): NegotiationTypeConnection!
  negotiations(
    """Specify to filter the records returned."""
    filter: NegotiationFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [NegotiationSort!]! = []
  ): NegotiationConnection!
  newBorder(
    """The id of the record to find."""
    id: ID!
  ): NewBorder!
  newBorders(
    """Specify to filter the records returned."""
    filter: NewBorderFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [NewBorderSort!]! = []
  ): NewBorderConnection!
  oauthAccessToken(
    """The id of the record to find."""
    id: ID!
  ): OauthAccessToken!
  oauthAccessTokens(
    """Specify to filter the records returned."""
    filter: OauthAccessTokenFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [OauthAccessTokenSort!]! = []
  ): OauthAccessTokenConnection!
  oauthAuthCode(
    """The id of the record to find."""
    id: ID!
  ): OauthAuthCode!
  oauthAuthCodes(
    """Specify to filter the records returned."""
    filter: OauthAuthCodeFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [OauthAuthCodeSort!]! = []
  ): OauthAuthCodeConnection!
  oauthClient(
    """The id of the record to find."""
    id: ID!
  ): OauthClient!
  oauthClients(
    """Specify to filter the records returned."""
    filter: OauthClientFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [OauthClientSort!]! = []
  ): OauthClientConnection!
  oauthPersonalAccessClient(
    """The id of the record to find."""
    id: ID!
  ): OauthPersonalAccessClient!
  oauthPersonalAccessClients(
    """Specify to filter the records returned."""
    filter: OauthPersonalAccessClientFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [OauthPersonalAccessClientSort!]! = []
  ): OauthPersonalAccessClientConnection!
  oauthRefreshToken(
    """The id of the record to find."""
    id: ID!
  ): OauthRefreshToken!
  oauthRefreshTokens(
    """Specify to filter the records returned."""
    filter: OauthRefreshTokenFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [OauthRefreshTokenSort!]! = []
  ): OauthRefreshTokenConnection!
  outOfStockButListedProduct(
    """The id of the record to find."""
    id: ID!
  ): OutOfStockButListedProduct!
  outOfStockButListedProducts(
    """Specify to filter the records returned."""
    filter: OutOfStockButListedProductFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [OutOfStockButListedProductSort!]! = []
  ): OutOfStockButListedProductConnection!
  passwordReset(
    """The id of the record to find."""
    id: ID!
  ): PasswordReset!
  passwordResets(
    """Specify to filter the records returned."""
    filter: PasswordResetFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [PasswordResetSort!]! = []
  ): PasswordResetConnection!
  pattern(
    """The id of the record to find."""
    id: ID!
  ): Pattern!
  patternCategories(
    """Specify to filter the records returned."""
    filter: PatternCategoryFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [PatternCategorySort!]! = []
  ): PatternCategoryConnection!
  patternCategory(
    """The id of the record to find."""
    id: ID!
  ): PatternCategory!
  patternLayer(
    """The id of the record to find."""
    id: ID!
  ): PatternLayer!
  patternLayers(
    """Specify to filter the records returned."""
    filter: PatternLayerFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [PatternLayerSort!]! = []
  ): PatternLayerConnection!
  patterns(
    """Specify to filter the records returned."""
    filter: PatternFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [PatternSort!]! = []
  ): PatternConnection!
  paymentMethod(
    """The id of the record to find."""
    id: ID!
  ): PaymentMethod!
  paymentMethodField(
    """The id of the record to find."""
    id: ID!
  ): PaymentMethodField!
  paymentMethodFields(
    """Specify to filter the records returned."""
    filter: PaymentMethodFieldFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [PaymentMethodFieldSort!]! = []
  ): PaymentMethodFieldConnection!
  paymentMethods(
    """Specify to filter the records returned."""
    filter: PaymentMethodFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [PaymentMethodSort!]! = []
  ): PaymentMethodConnection!
  paymentRequest(
    """The id of the record to find."""
    id: ID!
  ): PaymentRequest!
  paymentRequestStatus(
    """The id of the record to find."""
    id: ID!
  ): PaymentRequestStatus!
  paymentRequestStatuses(
    """Specify to filter the records returned."""
    filter: PaymentRequestStatusFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [PaymentRequestStatusSort!]! = []
  ): PaymentRequestStatusConnection!
  paymentRequests(
    """Specify to filter the records returned."""
    filter: PaymentRequestFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [PaymentRequestSort!]! = []
  ): PaymentRequestConnection!
  permission(
    """The id of the record to find."""
    id: ID!
  ): Permission!
  permissionGroup(
    """The id of the record to find."""
    id: ID!
  ): PermissionGroup!
  permissionGroups(
    """Specify to filter the records returned."""
    filter: PermissionGroupFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [PermissionGroupSort!]! = []
  ): PermissionGroupConnection!
  permissions(
    """Specify to filter the records returned."""
    filter: PermissionFilter! = {}

    """Specify to sort results."""
    sorting: [PermissionSort!]! = []
  ): [Permission!]!
  preorder(
    """The id of the record to find."""
    id: ID!
  ): Preorder!
  preorderPreorderStatus(
    """The id of the record to find."""
    id: ID!
  ): PreorderPreorderStatus!
  preorderPreorderStatuses(
    """Specify to filter the records returned."""
    filter: PreorderPreorderStatusFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [PreorderPreorderStatusSort!]! = []
  ): PreorderPreorderStatusConnection!
  preorderRegister(
    """The id of the record to find."""
    id: ID!
  ): PreorderRegister!
  preorderRegisters(
    """Specify to filter the records returned."""
    filter: PreorderRegisterFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [PreorderRegisterSort!]! = []
  ): PreorderRegisterConnection!
  preorderStatus(
    """The id of the record to find."""
    id: ID!
  ): PreorderStatus!
  preorderStatuses(
    """Specify to filter the records returned."""
    filter: PreorderStatusFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [PreorderStatusSort!]! = []
  ): PreorderStatusConnection!
  preorders(
    """Specify to filter the records returned."""
    filter: PreorderFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [PreorderSort!]! = []
  ): PreorderConnection!
  priceGroup(
    """The id of the record to find."""
    id: ID!
  ): PriceGroup!
  priceGroupSize(
    """The id of the record to find."""
    id: ID!
  ): PriceGroupSize!
  priceGroupSizes(
    """Specify to filter the records returned."""
    filter: PriceGroupSizeFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [PriceGroupSizeSort!]! = []
  ): PriceGroupSizeConnection!
  priceGroups(
    """Specify to filter the records returned."""
    filter: PriceGroupFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [PriceGroupSort!]! = []
  ): PriceGroupConnection!
  printProfile(
    """The id of the record to find."""
    id: ID!
  ): PrintProfile!
  printProfiles(
    """Specify to filter the records returned."""
    filter: PrintProfileFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [PrintProfileSort!]! = []
  ): PrintProfileConnection!
  printRip(
    """The id of the record to find."""
    id: ID!
  ): PrintRip!
  printRips(
    """Specify to filter the records returned."""
    filter: PrintRipFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [PrintRipSort!]! = []
  ): PrintRipConnection!
  product(
    """The id of the record to find."""
    id: ID!
  ): Product!
  productCategories(
    """Specify to filter the records returned."""
    filter: ProductCategoryFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ProductCategorySort!]! = []
  ): ProductCategoryConnection!
  productCategory(
    """The id of the record to find."""
    id: ID!
  ): ProductCategory!
  productCategoryDetail(
    """The id of the record to find."""
    id: ID!
  ): ProductCategoryDetail!
  productCategoryDetails(
    """Specify to filter the records returned."""
    filter: ProductCategoryDetailFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ProductCategoryDetailSort!]! = []
  ): ProductCategoryDetailConnection!
  productCategoryRate(
    """The id of the record to find."""
    id: ID!
  ): ProductCategoryRate!
  productCategoryRates(
    """Specify to filter the records returned."""
    filter: ProductCategoryRateFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ProductCategoryRateSort!]! = []
  ): ProductCategoryRateConnection!
  productColorImage(
    """The id of the record to find."""
    id: ID!
  ): ProductColorImage!
  productColorImages(
    """Specify to filter the records returned."""
    filter: ProductColorImageFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ProductColorImageSort!]! = []
  ): ProductColorImageConnection!
  productColorSale(
    """The id of the record to find."""
    id: ID!
  ): ProductColorSale!
  productColorSales(
    """Specify to filter the records returned."""
    filter: ProductColorSaleFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ProductColorSaleSort!]! = []
  ): ProductColorSaleConnection!
  productComment(
    """The id of the record to find."""
    id: ID!
  ): ProductComment!
  productCommentLike(
    """The id of the record to find."""
    id: ID!
  ): ProductCommentLike!
  productCommentLikes(
    """Specify to filter the records returned."""
    filter: ProductCommentLikeFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ProductCommentLikeSort!]! = []
  ): ProductCommentLikeConnection!
  productComments(
    """Specify to filter the records returned."""
    filter: ProductCommentFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ProductCommentSort!]! = []
  ): ProductCommentConnection!
  productLike(
    """The id of the record to find."""
    id: ID!
  ): ProductLike!
  productLikes(
    """Specify to filter the records returned."""
    filter: ProductLikeFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ProductLikeSort!]! = []
  ): ProductLikeConnection!
  productProductCategories(
    """Specify to filter the records returned."""
    filter: ProductProductCategoryFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ProductProductCategorySort!]! = []
  ): ProductProductCategoryConnection!
  productProductCategory(
    """The id of the record to find."""
    id: ID!
  ): ProductProductCategory!
  productRate(
    """The id of the record to find."""
    id: ID!
  ): ProductRate!
  productRateAverage(
    """The id of the record to find."""
    id: ID!
  ): ProductRateAverage!
  productRateAverages(
    """Specify to filter the records returned."""
    filter: ProductRateAverageFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ProductRateAverageSort!]! = []
  ): ProductRateAverageConnection!
  productRates(
    """Specify to filter the records returned."""
    filter: ProductRateFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ProductRateSort!]! = []
  ): ProductRateConnection!
  productTag(
    """The id of the record to find."""
    id: ID!
  ): ProductTag!
  productTags(
    """Specify to filter the records returned."""
    filter: ProductTagFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ProductTagSort!]! = []
  ): ProductTagConnection!
  productVideo(
    """The id of the record to find."""
    id: ID!
  ): ProductVideo!
  productVideos(
    """Specify to filter the records returned."""
    filter: ProductVideoFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ProductVideoSort!]! = []
  ): ProductVideoConnection!
  productionPad(
    """The id of the record to find."""
    id: ID!
  ): ProductionPad!
  productionPadProductionPadStatus(
    """The id of the record to find."""
    id: ID!
  ): ProductionPadProductionPadStatus!
  productionPadProductionPadStatuses(
    """Specify to filter the records returned."""
    filter: ProductionPadProductionPadStatusFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ProductionPadProductionPadStatusSort!]! = []
  ): ProductionPadProductionPadStatusConnection!
  productionPadStatus(
    """The id of the record to find."""
    id: ID!
  ): ProductionPadStatus!
  productionPadStatuses(
    """Specify to filter the records returned."""
    filter: ProductionPadStatusFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ProductionPadStatusSort!]! = []
  ): ProductionPadStatusConnection!
  productionPads(
    """Specify to filter the records returned."""
    filter: ProductionPadFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ProductionPadSort!]! = []
  ): ProductionPadConnection!
  productionReceiptType(
    """The id of the record to find."""
    id: ID!
  ): ProductionReceiptType!
  productionReceiptTypes(
    """Specify to filter the records returned."""
    filter: ProductionReceiptTypeFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ProductionReceiptTypeSort!]! = []
  ): ProductionReceiptTypeConnection!
  productionRoll(
    """The id of the record to find."""
    id: ID!
  ): ProductionRoll!
  productionRolls(
    """Specify to filter the records returned."""
    filter: ProductionRollFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ProductionRollSort!]! = []
  ): ProductionRollConnection!
  products(
    """Specify to filter the records returned."""
    filter: ProductFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ProductSort!]! = []
  ): ProductConnection!
  rate(
    """The id of the record to find."""
    id: ID!
  ): Rate!
  rates(
    """Specify to filter the records returned."""
    filter: RateFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [RateSort!]! = []
  ): RateConnection!
  readyToSendProduct(
    """The id of the record to find."""
    id: ID!
  ): ReadyToSendProduct!
  readyToSendProducts(
    """Specify to filter the records returned."""
    filter: ReadyToSendProductFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ReadyToSendProductSort!]! = []
  ): ReadyToSendProductConnection!
  recommendedProduct(
    """The id of the record to find."""
    id: ID!
  ): RecommendedProduct!
  recommendedProducts(
    """Specify to filter the records returned."""
    filter: RecommendedProductFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [RecommendedProductSort!]! = []
  ): RecommendedProductConnection!
  recommendedSubproduct(
    """The id of the record to find."""
    id: ID!
  ): RecommendedSubproduct!
  recommendedSubproducts(
    """Specify to filter the records returned."""
    filter: RecommendedSubproductFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [RecommendedSubproductSort!]! = []
  ): RecommendedSubproductConnection!
  redisSavedKey(
    """The id of the record to find."""
    id: ID!
  ): RedisSavedKey!
  redisSavedKeys(
    """Specify to filter the records returned."""
    filter: RedisSavedKeyFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [RedisSavedKeySort!]! = []
  ): RedisSavedKeyConnection!
  relatedProduct(
    """The id of the record to find."""
    id: ID!
  ): RelatedProduct!
  relatedProducts(
    """Specify to filter the records returned."""
    filter: RelatedProductFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [RelatedProductSort!]! = []
  ): RelatedProductConnection!
  retargetingWalletCharge(
    """The id of the record to find."""
    id: ID!
  ): RetargetingWalletCharge!
  retargetingWalletCharges(
    """Specify to filter the records returned."""
    filter: RetargetingWalletChargeFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [RetargetingWalletChargeSort!]! = []
  ): RetargetingWalletChargeConnection!
  returnItemStatus(
    """The id of the record to find."""
    id: ID!
  ): ReturnItemStatus!
  returnItemStatusReturnRequestItem(
    """The id of the record to find."""
    id: ID!
  ): ReturnItemStatusReturnRequestItem!
  returnItemStatusReturnRequestItems(
    """Specify to filter the records returned."""
    filter: ReturnItemStatusReturnRequestItemFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ReturnItemStatusReturnRequestItemSort!]! = []
  ): ReturnItemStatusReturnRequestItemConnection!
  returnItemStatuses(
    """Specify to filter the records returned."""
    filter: ReturnItemStatusFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ReturnItemStatusSort!]! = []
  ): ReturnItemStatusConnection!
  returnReason(
    """The id of the record to find."""
    id: ID!
  ): ReturnReason!
  returnReasons(
    """Specify to filter the records returned."""
    filter: ReturnReasonFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ReturnReasonSort!]! = []
  ): ReturnReasonConnection!
  returnRequest(
    """The id of the record to find."""
    id: ID!
  ): ReturnRequest!
  returnRequestAddress(
    """The id of the record to find."""
    id: ID!
  ): ReturnRequestAddress!
  returnRequestAddresses(
    """Specify to filter the records returned."""
    filter: ReturnRequestAddressFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ReturnRequestAddressSort!]! = []
  ): ReturnRequestAddressConnection!
  returnRequestHistories(
    """Specify to filter the records returned."""
    filter: ReturnRequestHistoryFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ReturnRequestHistorySort!]! = []
  ): ReturnRequestHistoryConnection!
  returnRequestHistory(
    """The id of the record to find."""
    id: ID!
  ): ReturnRequestHistory!
  returnRequestItem(
    """The id of the record to find."""
    id: ID!
  ): ReturnRequestItem!
  returnRequestItemHistories(
    """Specify to filter the records returned."""
    filter: ReturnRequestItemHistoryFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ReturnRequestItemHistorySort!]! = []
  ): ReturnRequestItemHistoryConnection!
  returnRequestItemHistory(
    """The id of the record to find."""
    id: ID!
  ): ReturnRequestItemHistory!
  returnRequestItemImage(
    """The id of the record to find."""
    id: ID!
  ): ReturnRequestItemImage!
  returnRequestItemImages(
    """Specify to filter the records returned."""
    filter: ReturnRequestItemImageFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ReturnRequestItemImageSort!]! = []
  ): ReturnRequestItemImageConnection!
  returnRequestItemReturnItemStatus(
    """The id of the record to find."""
    id: ID!
  ): ReturnRequestItemReturnItemStatus!
  returnRequestItemReturnItemStatuses(
    """Specify to filter the records returned."""
    filter: ReturnRequestItemReturnItemStatusFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ReturnRequestItemReturnItemStatusSort!]! = []
  ): ReturnRequestItemReturnItemStatusConnection!
  returnRequestItemVideo(
    """The id of the record to find."""
    id: ID!
  ): ReturnRequestItemVideo!
  returnRequestItemVideos(
    """Specify to filter the records returned."""
    filter: ReturnRequestItemVideoFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ReturnRequestItemVideoSort!]! = []
  ): ReturnRequestItemVideoConnection!
  returnRequestItems(
    """Specify to filter the records returned."""
    filter: ReturnRequestItemFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ReturnRequestItemSort!]! = []
  ): ReturnRequestItemConnection!
  returnRequestReturnStatus(
    """The id of the record to find."""
    id: ID!
  ): ReturnRequestReturnStatus!
  returnRequestReturnStatuses(
    """Specify to filter the records returned."""
    filter: ReturnRequestReturnStatusFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ReturnRequestReturnStatusSort!]! = []
  ): ReturnRequestReturnStatusConnection!
  returnRequests(
    """Specify to filter the records returned."""
    filter: ReturnRequestFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ReturnRequestSort!]! = []
  ): ReturnRequestConnection!
  returnStatus(
    """The id of the record to find."""
    id: ID!
  ): ReturnStatus!
  returnStatuses(
    """Specify to filter the records returned."""
    filter: ReturnStatusFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ReturnStatusSort!]! = []
  ): ReturnStatusConnection!
  returnType(
    """The id of the record to find."""
    id: ID!
  ): ReturnType!
  returnTypes(
    """Specify to filter the records returned."""
    filter: ReturnTypeFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ReturnTypeSort!]! = []
  ): ReturnTypeConnection!
  returnedInvoice(
    """The id of the record to find."""
    id: ID!
  ): ReturnedInvoice!
  returnedInvoiceProduct(
    """The id of the record to find."""
    id: ID!
  ): ReturnedInvoiceProduct!
  returnedInvoiceProducts(
    """Specify to filter the records returned."""
    filter: ReturnedInvoiceProductFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ReturnedInvoiceProductSort!]! = []
  ): ReturnedInvoiceProductConnection!
  returnedInvoices(
    """Specify to filter the records returned."""
    filter: ReturnedInvoiceFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ReturnedInvoiceSort!]! = []
  ): ReturnedInvoiceConnection!
  rfmReport(
    """The id of the record to find."""
    id: ID!
  ): RfmReport!
  rfmReports(
    """Specify to filter the records returned."""
    filter: RfmReportFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [RfmReportSort!]! = []
  ): RfmReportConnection!
  ripTemplate(
    """The id of the record to find."""
    id: ID!
  ): RipTemplate!
  ripTemplateItem(
    """The id of the record to find."""
    id: ID!
  ): RipTemplateItem!
  ripTemplateItems(
    """Specify to filter the records returned."""
    filter: RipTemplateItemFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [RipTemplateItemSort!]! = []
  ): RipTemplateItemConnection!
  ripTemplates(
    """Specify to filter the records returned."""
    filter: RipTemplateFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [RipTemplateSort!]! = []
  ): RipTemplateConnection!
  roleDomain(
    """The id of the record to find."""
    id: ID!
  ): RoleDomain!
  roleDomains(
    """Specify to filter the records returned."""
    filter: RoleDomainFilter! = {}

    """Specify to sort results."""
    sorting: [RoleDomainSort!]! = []
  ): [RoleDomain!]!
  roleHasPermission(
    """The id of the record to find."""
    id: ID!
  ): RoleHasPermission!
  roleHasPermissions(
    """Specify to filter the records returned."""
    filter: RoleHasPermissionFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [RoleHasPermissionSort!]! = []
  ): RoleHasPermissionConnection!
  russian(
    """The id of the record to find."""
    id: ID!
  ): Russian!
  russians(
    """Specify to filter the records returned."""
    filter: RussianFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [RussianSort!]! = []
  ): RussianConnection!
  senderInformation(
    """The id of the record to find."""
    id: ID!
  ): SenderInformation!
  senderInformations(
    """Specify to filter the records returned."""
    filter: SenderInformationFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [SenderInformationSort!]! = []
  ): SenderInformationConnection!
  shippingService(
    """The id of the record to find."""
    id: ID!
  ): ShippingService!
  shippingServices(
    """Specify to filter the records returned."""
    filter: ShippingServiceFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [ShippingServiceSort!]! = []
  ): ShippingServiceConnection!
  sitemapStaticPage(
    """The id of the record to find."""
    id: ID!
  ): SitemapStaticPage!
  sitemapStaticPages(
    """Specify to filter the records returned."""
    filter: SitemapStaticPageFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [SitemapStaticPageSort!]! = []
  ): SitemapStaticPageConnection!
  sizeGuide(
    """The id of the record to find."""
    id: ID!
  ): SizeGuide!
  sizeGuides(
    """Specify to filter the records returned."""
    filter: SizeGuideFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [SizeGuideSort!]! = []
  ): SizeGuideConnection!
  sizeGuidesDetail(
    """The id of the record to find."""
    id: ID!
  ): SizeGuidesDetail!
  sizeGuidesDetails(
    """Specify to filter the records returned."""
    filter: SizeGuidesDetailFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [SizeGuidesDetailSort!]! = []
  ): SizeGuidesDetailConnection!
  socialFacebookAccount(
    """The id of the record to find."""
    id: ID!
  ): SocialFacebookAccount!
  socialFacebookAccounts(
    """Specify to filter the records returned."""
    filter: SocialFacebookAccountFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [SocialFacebookAccountSort!]! = []
  ): SocialFacebookAccountConnection!
  socialGoogleAccount(
    """The id of the record to find."""
    id: ID!
  ): SocialGoogleAccount!
  socialGoogleAccounts(
    """Specify to filter the records returned."""
    filter: SocialGoogleAccountFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [SocialGoogleAccountSort!]! = []
  ): SocialGoogleAccountConnection!
  specialOffer(
    """The id of the record to find."""
    id: ID!
  ): SpecialOffer!
  specialOffers(
    """Specify to filter the records returned."""
    filter: SpecialOfferFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [SpecialOfferSort!]! = []
  ): SpecialOfferConnection!
  state(
    """The id of the record to find."""
    id: ID!
  ): State!
  states(
    """Specify to filter the records returned."""
    filter: StateFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [StateSort!]! = []
  ): StateConnection!
  subcolor(
    """The id of the record to find."""
    id: ID!
  ): Subcolor!
  subcolors(
    """Specify to filter the records returned."""
    filter: SubcolorFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [SubcolorSort!]! = []
  ): SubcolorConnection!
  subproduct(
    """The id of the record to find."""
    id: ID!
  ): Subproduct!
  subproductSpecialImage(
    """The id of the record to find."""
    id: ID!
  ): SubproductSpecialImage!
  subproductSpecialImages(
    """Specify to filter the records returned."""
    filter: SubproductSpecialImageFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [SubproductSpecialImageSort!]! = []
  ): SubproductSpecialImageConnection!
  subproductStockHistories(
    """Specify to filter the records returned."""
    filter: SubproductStockHistoryFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [SubproductStockHistorySort!]! = []
  ): SubproductStockHistoryConnection!
  subproductStockHistory(
    """The id of the record to find."""
    id: ID!
  ): SubproductStockHistory!
  subproductVideo(
    """The id of the record to find."""
    id: ID!
  ): SubproductVideo!
  subproductVideos(
    """Specify to filter the records returned."""
    filter: SubproductVideoFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [SubproductVideoSort!]! = []
  ): SubproductVideoConnection!
  subproducts(
    """Specify to filter the records returned."""
    filter: SubproductFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [SubproductSort!]! = []
  ): SubproductConnection!
  subscriber(
    """The id of the record to find."""
    id: ID!
  ): Subscriber!
  subscribers(
    """Specify to filter the records returned."""
    filter: SubscriberFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [SubscriberSort!]! = []
  ): SubscriberConnection!
  tag(
    """The id of the record to find."""
    id: ID!
  ): Tag!
  tags(
    """Specify to filter the records returned."""
    filter: TagFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [TagSort!]! = []
  ): TagConnection!
  tempSubproductDiscount(
    """The id of the record to find."""
    id: ID!
  ): TempSubproductDiscount!
  tempSubproductDiscounts(
    """Specify to filter the records returned."""
    filter: TempSubproductDiscountFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [TempSubproductDiscountSort!]! = []
  ): TempSubproductDiscountConnection!
  testimonial(
    """The id of the record to find."""
    id: ID!
  ): Testimonial!
  testimonials(
    """Specify to filter the records returned."""
    filter: TestimonialFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [TestimonialSort!]! = []
  ): TestimonialConnection!
  textLayer(
    """The id of the record to find."""
    id: ID!
  ): TextLayer!
  textLayers(
    """Specify to filter the records returned."""
    filter: TextLayerFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [TextLayerSort!]! = []
  ): TextLayerConnection!
  tmpRfmReport(
    """The id of the record to find."""
    id: ID!
  ): TmpRfmReport!
  tmpRfmReports(
    """Specify to filter the records returned."""
    filter: TmpRfmReportFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [TmpRfmReportSort!]! = []
  ): TmpRfmReportConnection!
  tmpRussiaProduct(
    """The id of the record to find."""
    id: ID!
  ): TmpRussiaProduct!
  tmpRussiaProducts(
    """Specify to filter the records returned."""
    filter: TmpRussiaProductFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [TmpRussiaProductSort!]! = []
  ): TmpRussiaProductConnection!
  tmpSpainOrder(
    """The id of the record to find."""
    id: ID!
  ): TmpSpainOrder!
  tmpSpainOrders(
    """Specify to filter the records returned."""
    filter: TmpSpainOrderFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [TmpSpainOrderSort!]! = []
  ): TmpSpainOrderConnection!
  tmpSpanishName(
    """The id of the record to find."""
    id: ID!
  ): TmpSpanishName!
  tmpSpanishNames(
    """Specify to filter the records returned."""
    filter: TmpSpanishNameFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [TmpSpanishNameSort!]! = []
  ): TmpSpanishNameConnection!
  tmpTagChangesPrint(
    """The id of the record to find."""
    id: ID!
  ): TmpTagChangesPrint!
  tmpTagChangesPrints(
    """Specify to filter the records returned."""
    filter: TmpTagChangesPrintFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [TmpTagChangesPrintSort!]! = []
  ): TmpTagChangesPrintConnection!
  torobProduct(
    """The id of the record to find."""
    id: ID!
  ): TorobProduct!
  torobProducts(
    """Specify to filter the records returned."""
    filter: TorobProductFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [TorobProductSort!]! = []
  ): TorobProductConnection!
  transaction(
    """The id of the record to find."""
    id: ID!
  ): Transaction!
  transactions(
    """Specify to filter the records returned."""
    filter: TransactionFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [TransactionSort!]! = []
  ): TransactionConnection!
  user(
    """The id of the record to find."""
    id: ID!
  ): User!
  userCart(
    """The id of the record to find."""
    id: ID!
  ): UserCart!
  userCarts(
    """Specify to filter the records returned."""
    filter: UserCartFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [UserCartSort!]! = []
  ): UserCartConnection!
  userHasPermission(
    """The id of the record to find."""
    id: ID!
  ): UserHasPermission!
  userHasPermissions(
    """Specify to filter the records returned."""
    filter: UserHasPermissionFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [UserHasPermissionSort!]! = []
  ): UserHasPermissionConnection!
  userHasRole(
    """The id of the record to find."""
    id: ID!
  ): UserHasRole!
  userHasRoles(
    """Specify to filter the records returned."""
    filter: UserHasRoleFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [UserHasRoleSort!]! = []
  ): UserHasRoleConnection!
  userUtm(
    """The id of the record to find."""
    id: ID!
  ): UserUtm!
  userUtms(
    """Specify to filter the records returned."""
    filter: UserUtmFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [UserUtmSort!]! = []
  ): UserUtmConnection!
  users(
    """Specify to filter the records returned."""
    filter: UserFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [UserSort!]! = []
  ): UserConnection!
  utm(
    """The id of the record to find."""
    id: ID!
  ): Utm!
  utmGoogleFormCoupon(
    """The id of the record to find."""
    id: ID!
  ): UtmGoogleFormCoupon!
  utmGoogleFormCoupons(
    """Specify to filter the records returned."""
    filter: UtmGoogleFormCouponFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [UtmGoogleFormCouponSort!]! = []
  ): UtmGoogleFormCouponConnection!
  utms(
    """Specify to filter the records returned."""
    filter: UtmFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [UtmSort!]! = []
  ): UtmConnection!
  verifyUser(
    """The id of the record to find."""
    id: ID!
  ): VerifyUser!
  verifyUsers(
    """Specify to filter the records returned."""
    filter: VerifyUserFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [VerifyUserSort!]! = []
  ): VerifyUserConnection!
  video(
    """The id of the record to find."""
    id: ID!
  ): Video!
  videos(
    """Specify to filter the records returned."""
    filter: VideoFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [VideoSort!]! = []
  ): VideoConnection!
  visitor(
    """The id of the record to find."""
    id: ID!
  ): Visitor!
  visitorCoupon(
    """The id of the record to find."""
    id: ID!
  ): VisitorCoupon!
  visitorCoupons(
    """Specify to filter the records returned."""
    filter: VisitorCouponFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [VisitorCouponSort!]! = []
  ): VisitorCouponConnection!
  visitorGroup(
    """The id of the record to find."""
    id: ID!
  ): VisitorGroup!
  visitorGroupRate(
    """The id of the record to find."""
    id: ID!
  ): VisitorGroupRate!
  visitorGroupRates(
    """Specify to filter the records returned."""
    filter: VisitorGroupRateFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [VisitorGroupRateSort!]! = []
  ): VisitorGroupRateConnection!
  visitorGroups(
    """Specify to filter the records returned."""
    filter: VisitorGroupFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [VisitorGroupSort!]! = []
  ): VisitorGroupConnection!
  visitorSale(
    """The id of the record to find."""
    id: ID!
  ): VisitorSale!
  visitorSales(
    """Specify to filter the records returned."""
    filter: VisitorSaleFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [VisitorSaleSort!]! = []
  ): VisitorSaleConnection!
  visitors(
    """Specify to filter the records returned."""
    filter: VisitorFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [VisitorSort!]! = []
  ): VisitorConnection!
  wallet(
    """The id of the record to find."""
    id: ID!
  ): Wallet!
  walletGiftCharge(
    """The id of the record to find."""
    id: ID!
  ): WalletGiftCharge!
  walletGiftCharges(
    """Specify to filter the records returned."""
    filter: WalletGiftChargeFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [WalletGiftChargeSort!]! = []
  ): WalletGiftChargeConnection!
  walletHistories(
    """Specify to filter the records returned."""
    filter: WalletHistoryFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [WalletHistorySort!]! = []
  ): WalletHistoryConnection!
  walletHistory(
    """The id of the record to find."""
    id: ID!
  ): WalletHistory!
  wallets(
    """Specify to filter the records returned."""
    filter: WalletFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [WalletSort!]! = []
  ): WalletConnection!
  websitePage(
    """The id of the record to find."""
    id: ID!
  ): WebsitePage!
  websitePages(
    """Specify to filter the records returned."""
    filter: WebsitePageFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [WebsitePageSort!]! = []
  ): WebsitePageConnection!
  websiteVisit(
    """The id of the record to find."""
    id: ID!
  ): WebsiteVisit!
  websiteVisits(
    """Specify to filter the records returned."""
    filter: WebsiteVisitFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [WebsiteVisitSort!]! = []
  ): WebsiteVisitConnection!
  withdrawalRequest(
    """The id of the record to find."""
    id: ID!
  ): WithdrawalRequest!
  withdrawalRequestStatus(
    """The id of the record to find."""
    id: ID!
  ): WithdrawalRequestStatus!
  withdrawalRequestStatuses(
    """Specify to filter the records returned."""
    filter: WithdrawalRequestStatusFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [WithdrawalRequestStatusSort!]! = []
  ): WithdrawalRequestStatusConnection!
  withdrawalRequests(
    """Specify to filter the records returned."""
    filter: WithdrawalRequestFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [WithdrawalRequestSort!]! = []
  ): WithdrawalRequestConnection!
  wonderfulOffer(
    """The id of the record to find."""
    id: ID!
  ): WonderfulOffer!
  wonderfulOffers(
    """Specify to filter the records returned."""
    filter: WonderfulOfferFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [WonderfulOfferSort!]! = []
  ): WonderfulOfferConnection!
}

type Rate {
  createdAt: DateTime
  description: String!
  id: ID!
  isActive: Float
  name: String!
  productCategoryRates: [ProductCategoryRate!]!
  productRateAverages: [ProductRateAverage!]!
  productRates: [ProductRate!]!
  sortOrder: Float
  updatedAt: DateTime
}

type RateConnection {
  """Array of edges."""
  edges: [RateEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input RateDeleteFilter {
  and: [RateDeleteFilter!]
  id: IDFilterComparison
  or: [RateDeleteFilter!]
}

type RateDeleteResponse {
  createdAt: DateTime
  description: String
  id: ID
  isActive: Float
  name: String
  productCategoryRates: [ProductCategoryRate!]
  productRateAverages: [ProductRateAverage!]
  productRates: [ProductRate!]
  sortOrder: Float
  updatedAt: DateTime
}

input RateDomain {
  createdAt: DateTime
  description: String!
  id: ID!
  isActive: Float
  name: String!
  productCategoryRates: [ProductCategoryRateDomain!]!
  productRateAverages: [ProductRateAverageDomain!]!
  productRates: [ProductRateDomain!]!
  sortOrder: Float
  updatedAt: DateTime
}

type RateEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Rate"""
  node: Rate!
}

input RateFilter {
  and: [RateFilter!]
  id: IDFilterComparison
  or: [RateFilter!]
}

input RateSort {
  direction: SortDirection!
  field: RateSortFields!
  nulls: SortNulls
}

enum RateSortFields {
  id
}

input RateUpdateFilter {
  and: [RateUpdateFilter!]
  id: IDFilterComparison
  or: [RateUpdateFilter!]
}

type ReadyToSendProduct {
  createdAt: DateTime
  id: ID!
  product: Product!
  productId: Float!
  updatedAt: DateTime
}

type ReadyToSendProductConnection {
  """Array of edges."""
  edges: [ReadyToSendProductEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ReadyToSendProductDeleteFilter {
  and: [ReadyToSendProductDeleteFilter!]
  id: IDFilterComparison
  or: [ReadyToSendProductDeleteFilter!]
}

type ReadyToSendProductDeleteResponse {
  createdAt: DateTime
  id: ID
  product: Product
  productId: Float
  updatedAt: DateTime
}

input ReadyToSendProductDomain {
  createdAt: DateTime
  id: ID!
  product: ProductDomain!
  productId: Float!
  updatedAt: DateTime
}

type ReadyToSendProductEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ReadyToSendProduct"""
  node: ReadyToSendProduct!
}

input ReadyToSendProductFilter {
  and: [ReadyToSendProductFilter!]
  id: IDFilterComparison
  or: [ReadyToSendProductFilter!]
}

input ReadyToSendProductSort {
  direction: SortDirection!
  field: ReadyToSendProductSortFields!
  nulls: SortNulls
}

enum ReadyToSendProductSortFields {
  id
}

input ReadyToSendProductUpdateFilter {
  and: [ReadyToSendProductUpdateFilter!]
  id: IDFilterComparison
  or: [ReadyToSendProductUpdateFilter!]
}

type RecommendedProduct {
  createdAt: DateTime
  id: ID!
  product: Product!
  productId: Float!
  updatedAt: DateTime
}

type RecommendedProductConnection {
  """Array of edges."""
  edges: [RecommendedProductEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input RecommendedProductDeleteFilter {
  and: [RecommendedProductDeleteFilter!]
  id: IDFilterComparison
  or: [RecommendedProductDeleteFilter!]
}

type RecommendedProductDeleteResponse {
  createdAt: DateTime
  id: ID
  product: Product
  productId: Float
  updatedAt: DateTime
}

input RecommendedProductDomain {
  createdAt: DateTime
  id: ID!
  product: ProductDomain!
  productId: Float!
  updatedAt: DateTime
}

type RecommendedProductEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the RecommendedProduct"""
  node: RecommendedProduct!
}

input RecommendedProductFilter {
  and: [RecommendedProductFilter!]
  id: IDFilterComparison
  or: [RecommendedProductFilter!]
}

input RecommendedProductSort {
  direction: SortDirection!
  field: RecommendedProductSortFields!
  nulls: SortNulls
}

enum RecommendedProductSortFields {
  id
}

input RecommendedProductUpdateFilter {
  and: [RecommendedProductUpdateFilter!]
  id: IDFilterComparison
  or: [RecommendedProductUpdateFilter!]
}

type RecommendedSubproduct {
  createdAt: DateTime
  id: ID!
  subproduct: Subproduct!
  subproductId: Float!
  updatedAt: DateTime
}

type RecommendedSubproductConnection {
  """Array of edges."""
  edges: [RecommendedSubproductEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input RecommendedSubproductDeleteFilter {
  and: [RecommendedSubproductDeleteFilter!]
  id: IDFilterComparison
  or: [RecommendedSubproductDeleteFilter!]
}

type RecommendedSubproductDeleteResponse {
  createdAt: DateTime
  id: ID
  subproduct: Subproduct
  subproductId: Float
  updatedAt: DateTime
}

input RecommendedSubproductDomain {
  createdAt: DateTime
  id: ID!
  subproduct: SubproductDomain!
  subproductId: Float!
  updatedAt: DateTime
}

type RecommendedSubproductEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the RecommendedSubproduct"""
  node: RecommendedSubproduct!
}

input RecommendedSubproductFilter {
  and: [RecommendedSubproductFilter!]
  id: IDFilterComparison
  or: [RecommendedSubproductFilter!]
}

input RecommendedSubproductSort {
  direction: SortDirection!
  field: RecommendedSubproductSortFields!
  nulls: SortNulls
}

enum RecommendedSubproductSortFields {
  id
}

input RecommendedSubproductUpdateFilter {
  and: [RecommendedSubproductUpdateFilter!]
  id: IDFilterComparison
  or: [RecommendedSubproductUpdateFilter!]
}

type RedisSavedKey {
  createdAt: DateTime
  id: ID!
  keyLength: Float!
  redisKey: String!
  sortOrder: Float!
  updatedAt: DateTime
}

type RedisSavedKeyConnection {
  """Array of edges."""
  edges: [RedisSavedKeyEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input RedisSavedKeyDeleteFilter {
  and: [RedisSavedKeyDeleteFilter!]
  id: IDFilterComparison
  or: [RedisSavedKeyDeleteFilter!]
}

type RedisSavedKeyDeleteResponse {
  createdAt: DateTime
  id: ID
  keyLength: Float
  redisKey: String
  sortOrder: Float
  updatedAt: DateTime
}

input RedisSavedKeyDomain {
  createdAt: DateTime
  id: ID!
  keyLength: Float!
  redisKey: String!
  sortOrder: Float!
  updatedAt: DateTime
}

type RedisSavedKeyEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the RedisSavedKey"""
  node: RedisSavedKey!
}

input RedisSavedKeyFilter {
  and: [RedisSavedKeyFilter!]
  id: IDFilterComparison
  or: [RedisSavedKeyFilter!]
}

input RedisSavedKeySort {
  direction: SortDirection!
  field: RedisSavedKeySortFields!
  nulls: SortNulls
}

enum RedisSavedKeySortFields {
  id
}

input RedisSavedKeyUpdateFilter {
  and: [RedisSavedKeyUpdateFilter!]
  id: IDFilterComparison
  or: [RedisSavedKeyUpdateFilter!]
}

type RelatedProduct {
  createdAt: DateTime
  id: ID!
  product: Product!
  productId: Float!
  relatedProduct: Product!
  relatedProductId: Float!
  updatedAt: DateTime
}

type RelatedProductConnection {
  """Array of edges."""
  edges: [RelatedProductEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input RelatedProductDeleteFilter {
  and: [RelatedProductDeleteFilter!]
  id: IDFilterComparison
  or: [RelatedProductDeleteFilter!]
}

type RelatedProductDeleteResponse {
  createdAt: DateTime
  id: ID
  product: Product
  productId: Float
  relatedProduct: Product
  relatedProductId: Float
  updatedAt: DateTime
}

input RelatedProductDomain {
  createdAt: DateTime
  id: ID!
  product: ProductDomain!
  productId: Float!
  relatedProduct: ProductDomain!
  relatedProductId: Float!
  updatedAt: DateTime
}

type RelatedProductEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the RelatedProduct"""
  node: RelatedProduct!
}

input RelatedProductFilter {
  and: [RelatedProductFilter!]
  id: IDFilterComparison
  or: [RelatedProductFilter!]
}

input RelatedProductSort {
  direction: SortDirection!
  field: RelatedProductSortFields!
  nulls: SortNulls
}

enum RelatedProductSortFields {
  id
}

input RelatedProductUpdateFilter {
  and: [RelatedProductUpdateFilter!]
  id: IDFilterComparison
  or: [RelatedProductUpdateFilter!]
}

type RetargetingWalletCharge {
  amount: String!
  chargedInvoices: String
  createdAt: DateTime
  id: ID!
  lastChargedAt: DateTime
  updatedAt: DateTime
  user: User!
  userId: Float!
  wallet: Wallet
  walletId: Float
}

type RetargetingWalletChargeConnection {
  """Array of edges."""
  edges: [RetargetingWalletChargeEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input RetargetingWalletChargeDeleteFilter {
  and: [RetargetingWalletChargeDeleteFilter!]
  id: IDFilterComparison
  or: [RetargetingWalletChargeDeleteFilter!]
}

type RetargetingWalletChargeDeleteResponse {
  amount: String
  chargedInvoices: String
  createdAt: DateTime
  id: ID
  lastChargedAt: DateTime
  updatedAt: DateTime
  user: User
  userId: Float
  wallet: Wallet
  walletId: Float
}

input RetargetingWalletChargeDomain {
  amount: String!
  chargedInvoices: String
  createdAt: DateTime
  id: ID!
  lastChargedAt: DateTime
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
  wallet: WalletDomain
  walletId: Float
}

type RetargetingWalletChargeEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the RetargetingWalletCharge"""
  node: RetargetingWalletCharge!
}

input RetargetingWalletChargeFilter {
  and: [RetargetingWalletChargeFilter!]
  id: IDFilterComparison
  or: [RetargetingWalletChargeFilter!]
}

input RetargetingWalletChargeSort {
  direction: SortDirection!
  field: RetargetingWalletChargeSortFields!
  nulls: SortNulls
}

enum RetargetingWalletChargeSortFields {
  id
}

input RetargetingWalletChargeUpdateFilter {
  and: [RetargetingWalletChargeUpdateFilter!]
  id: IDFilterComparison
  or: [RetargetingWalletChargeUpdateFilter!]
}

type ReturnItemStatus {
  createdAt: DateTime
  id: ID!
  isActive: Boolean!
  name: String!
  returnItemStatusReturnRequestItems: [ReturnItemStatusReturnRequestItem!]!
  returnRequestItemHistories: [ReturnRequestItemHistory!]!
  returnRequestItemReturnItemStatuses: [ReturnRequestItemReturnItemStatus!]!
  returnRequestItems: [ReturnRequestItem!]!
  sortOrder: Float!
  stepGuarantee: Float
  stepTest: Float
  updatedAt: DateTime
}

type ReturnItemStatusConnection {
  """Array of edges."""
  edges: [ReturnItemStatusEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ReturnItemStatusDeleteFilter {
  and: [ReturnItemStatusDeleteFilter!]
  id: IDFilterComparison
  or: [ReturnItemStatusDeleteFilter!]
}

type ReturnItemStatusDeleteResponse {
  createdAt: DateTime
  id: ID
  isActive: Boolean
  name: String
  returnItemStatusReturnRequestItems: [ReturnItemStatusReturnRequestItem!]
  returnRequestItemHistories: [ReturnRequestItemHistory!]
  returnRequestItemReturnItemStatuses: [ReturnRequestItemReturnItemStatus!]
  returnRequestItems: [ReturnRequestItem!]
  sortOrder: Float
  stepGuarantee: Float
  stepTest: Float
  updatedAt: DateTime
}

input ReturnItemStatusDomain {
  createdAt: DateTime
  id: ID!
  isActive: Boolean!
  name: String!
  returnItemStatusReturnRequestItems: [ReturnItemStatusReturnRequestItemDomain!]!
  returnRequestItemHistories: [ReturnRequestItemHistoryDomain!]!
  returnRequestItemReturnItemStatuses: [ReturnRequestItemReturnItemStatusDomain!]!
  returnRequestItems: [ReturnRequestItemDomain!]!
  sortOrder: Float!
  stepGuarantee: Float
  stepTest: Float
  updatedAt: DateTime
}

type ReturnItemStatusEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ReturnItemStatus"""
  node: ReturnItemStatus!
}

input ReturnItemStatusFilter {
  and: [ReturnItemStatusFilter!]
  id: IDFilterComparison
  or: [ReturnItemStatusFilter!]
}

type ReturnItemStatusReturnRequestItem {
  createdAt: DateTime
  description: String
  id: ID!
  returnItemStatus: ReturnItemStatus!
  returnItemStatusId: Float!
  returnRequestItem: ReturnRequestItem!
  returnRequestItemId: Float!
  updatedAt: DateTime
  user: User!
  userId: Float!
}

type ReturnItemStatusReturnRequestItemConnection {
  """Array of edges."""
  edges: [ReturnItemStatusReturnRequestItemEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ReturnItemStatusReturnRequestItemDeleteFilter {
  and: [ReturnItemStatusReturnRequestItemDeleteFilter!]
  id: IDFilterComparison
  or: [ReturnItemStatusReturnRequestItemDeleteFilter!]
}

type ReturnItemStatusReturnRequestItemDeleteResponse {
  createdAt: DateTime
  description: String
  id: ID
  returnItemStatus: ReturnItemStatus
  returnItemStatusId: Float
  returnRequestItem: ReturnRequestItem
  returnRequestItemId: Float
  updatedAt: DateTime
  user: User
  userId: Float
}

input ReturnItemStatusReturnRequestItemDomain {
  createdAt: DateTime
  description: String
  id: ID!
  returnItemStatus: ReturnItemStatusDomain!
  returnItemStatusId: Float!
  returnRequestItem: ReturnRequestItemDomain!
  returnRequestItemId: Float!
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
}

type ReturnItemStatusReturnRequestItemEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ReturnItemStatusReturnRequestItem"""
  node: ReturnItemStatusReturnRequestItem!
}

input ReturnItemStatusReturnRequestItemFilter {
  and: [ReturnItemStatusReturnRequestItemFilter!]
  id: IDFilterComparison
  or: [ReturnItemStatusReturnRequestItemFilter!]
}

input ReturnItemStatusReturnRequestItemSort {
  direction: SortDirection!
  field: ReturnItemStatusReturnRequestItemSortFields!
  nulls: SortNulls
}

enum ReturnItemStatusReturnRequestItemSortFields {
  id
}

input ReturnItemStatusReturnRequestItemUpdateFilter {
  and: [ReturnItemStatusReturnRequestItemUpdateFilter!]
  id: IDFilterComparison
  or: [ReturnItemStatusReturnRequestItemUpdateFilter!]
}

input ReturnItemStatusSort {
  direction: SortDirection!
  field: ReturnItemStatusSortFields!
  nulls: SortNulls
}

enum ReturnItemStatusSortFields {
  id
}

input ReturnItemStatusUpdateFilter {
  and: [ReturnItemStatusUpdateFilter!]
  id: IDFilterComparison
  or: [ReturnItemStatusUpdateFilter!]
}

type ReturnReason {
  createdAt: DateTime
  id: ID!
  isActive: Boolean!
  reason: String!
  returnRequestItemHistories: [ReturnRequestItemHistory!]!
  returnRequestItems: [ReturnRequestItem!]!
  returnedInvoices: [ReturnedInvoice!]!
  sortOrder: Float!
  updatedAt: DateTime
}

type ReturnReasonConnection {
  """Array of edges."""
  edges: [ReturnReasonEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ReturnReasonDeleteFilter {
  and: [ReturnReasonDeleteFilter!]
  id: IDFilterComparison
  or: [ReturnReasonDeleteFilter!]
}

type ReturnReasonDeleteResponse {
  createdAt: DateTime
  id: ID
  isActive: Boolean
  reason: String
  returnRequestItemHistories: [ReturnRequestItemHistory!]
  returnRequestItems: [ReturnRequestItem!]
  returnedInvoices: [ReturnedInvoice!]
  sortOrder: Float
  updatedAt: DateTime
}

input ReturnReasonDomain {
  createdAt: DateTime
  id: ID!
  isActive: Boolean!
  reason: String!
  returnRequestItemHistories: [ReturnRequestItemHistoryDomain!]!
  returnRequestItems: [ReturnRequestItemDomain!]!
  returnedInvoices: [ReturnedInvoiceDomain!]!
  sortOrder: Float!
  updatedAt: DateTime
}

type ReturnReasonEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ReturnReason"""
  node: ReturnReason!
}

input ReturnReasonFilter {
  and: [ReturnReasonFilter!]
  id: IDFilterComparison
  or: [ReturnReasonFilter!]
}

input ReturnReasonSort {
  direction: SortDirection!
  field: ReturnReasonSortFields!
  nulls: SortNulls
}

enum ReturnReasonSortFields {
  id
}

input ReturnReasonUpdateFilter {
  and: [ReturnReasonUpdateFilter!]
  id: IDFilterComparison
  or: [ReturnReasonUpdateFilter!]
}

type ReturnRequest {
  coupon: Coupon
  couponAmount: String
  couponId: Float
  createdAt: DateTime
  description: String
  id: ID!
  invoice: Invoice
  invoiceId: Float
  modemaBlocked: String!
  parent: ReturnRequest
  parentId: Float
  requestDate: String!
  requestNumber: String!
  returnRequestAddresses: [ReturnRequestAddress!]!
  returnRequestHistories: ReturnRequestHistory!
  returnRequestItemHistories: [ReturnRequestItemHistory!]!
  returnRequestItems: [ReturnRequestItem!]!
  returnRequestReturnStatuses: [ReturnRequestReturnStatus!]!
  returnRequests: ReturnRequest
  returnStatus: ReturnStatus!
  returnStatusId: Float!
  returnType: ReturnType!
  returnTypeId: Float!
  shippingServiceCustomer: String
  shippingServiceModema: String
  submittedByFactory: Boolean!
  trackingCodeCustomer: String
  trackingCodeModema: String
  updatedAt: DateTime
  user: User!
  userBlocked: String!
  userId: Float!
  withdrawable: String!
}

type ReturnRequestAddress {
  address: String!
  address2: String
  addressId: Float!
  address_2: Address!
  city: City!
  cityId: Float!
  country: Country!
  countryId: Float!
  createdAt: DateTime
  email: String
  fullAddress: String
  fullname: String
  id: ID!
  latitude: String
  longitude: String
  phone: String
  phone2: String
  returnRequest: ReturnRequest!
  returnRequestId: Float!
  state: State!
  stateId: Float!
  updatedAt: DateTime
  user: User!
  userId: Float!
  zipCode: String
}

type ReturnRequestAddressConnection {
  """Array of edges."""
  edges: [ReturnRequestAddressEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ReturnRequestAddressDeleteFilter {
  and: [ReturnRequestAddressDeleteFilter!]
  id: IDFilterComparison
  or: [ReturnRequestAddressDeleteFilter!]
}

type ReturnRequestAddressDeleteResponse {
  address: String
  address2: String
  addressId: Float
  address_2: Address
  city: City
  cityId: Float
  country: Country
  countryId: Float
  createdAt: DateTime
  email: String
  fullAddress: String
  fullname: String
  id: ID
  latitude: String
  longitude: String
  phone: String
  phone2: String
  returnRequest: ReturnRequest
  returnRequestId: Float
  state: State
  stateId: Float
  updatedAt: DateTime
  user: User
  userId: Float
  zipCode: String
}

input ReturnRequestAddressDomain {
  address: String!
  address2: String
  addressId: Float!
  address_2: AddressDomain!
  city: CityDomain!
  cityId: Float!
  country: CountryDomain!
  countryId: Float!
  createdAt: DateTime
  email: String
  fullAddress: String
  fullname: String
  id: ID!
  latitude: String
  longitude: String
  phone: String
  phone2: String
  returnRequest: ReturnRequestDomain!
  returnRequestId: Float!
  state: StateDomain!
  stateId: Float!
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
  zipCode: String
}

type ReturnRequestAddressEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ReturnRequestAddress"""
  node: ReturnRequestAddress!
}

input ReturnRequestAddressFilter {
  and: [ReturnRequestAddressFilter!]
  id: IDFilterComparison
  or: [ReturnRequestAddressFilter!]
}

input ReturnRequestAddressSort {
  direction: SortDirection!
  field: ReturnRequestAddressSortFields!
  nulls: SortNulls
}

enum ReturnRequestAddressSortFields {
  id
}

input ReturnRequestAddressUpdateFilter {
  and: [ReturnRequestAddressUpdateFilter!]
  id: IDFilterComparison
  or: [ReturnRequestAddressUpdateFilter!]
}

type ReturnRequestConnection {
  """Array of edges."""
  edges: [ReturnRequestEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ReturnRequestDeleteFilter {
  and: [ReturnRequestDeleteFilter!]
  id: IDFilterComparison
  or: [ReturnRequestDeleteFilter!]
}

type ReturnRequestDeleteResponse {
  coupon: Coupon
  couponAmount: String
  couponId: Float
  createdAt: DateTime
  description: String
  id: ID
  invoice: Invoice
  invoiceId: Float
  modemaBlocked: String
  parent: ReturnRequest
  parentId: Float
  requestDate: String
  requestNumber: String
  returnRequestAddresses: [ReturnRequestAddress!]
  returnRequestHistories: ReturnRequestHistory
  returnRequestItemHistories: [ReturnRequestItemHistory!]
  returnRequestItems: [ReturnRequestItem!]
  returnRequestReturnStatuses: [ReturnRequestReturnStatus!]
  returnRequests: ReturnRequest
  returnStatus: ReturnStatus
  returnStatusId: Float
  returnType: ReturnType
  returnTypeId: Float
  shippingServiceCustomer: String
  shippingServiceModema: String
  submittedByFactory: Boolean
  trackingCodeCustomer: String
  trackingCodeModema: String
  updatedAt: DateTime
  user: User
  userBlocked: String
  userId: Float
  withdrawable: String
}

input ReturnRequestDomain {
  coupon: CouponDomain
  couponAmount: String
  couponId: Float
  createdAt: DateTime
  description: String
  id: ID!
  invoice: InvoiceDomain
  invoiceId: Float
  modemaBlocked: String!
  parent: ReturnRequestDomain
  parentId: Float
  requestDate: String!
  requestNumber: String!
  returnRequestAddresses: [ReturnRequestAddressDomain!]!
  returnRequestHistories: ReturnRequestHistoryDomain!
  returnRequestItemHistories: [ReturnRequestItemHistoryDomain!]!
  returnRequestItems: [ReturnRequestItemDomain!]!
  returnRequestReturnStatuses: [ReturnRequestReturnStatusDomain!]!
  returnRequests: ReturnRequestDomain
  returnStatus: ReturnStatusDomain!
  returnStatusId: Float!
  returnType: ReturnTypeDomain!
  returnTypeId: Float!
  shippingServiceCustomer: String
  shippingServiceModema: String
  submittedByFactory: Boolean!
  trackingCodeCustomer: String
  trackingCodeModema: String
  updatedAt: DateTime
  user: UserDomain!
  userBlocked: String!
  userId: Float!
  withdrawable: String!
}

type ReturnRequestEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ReturnRequest"""
  node: ReturnRequest!
}

input ReturnRequestFilter {
  and: [ReturnRequestFilter!]
  id: IDFilterComparison
  or: [ReturnRequestFilter!]
}

type ReturnRequestHistory {
  createdAt: DateTime
  description: String
  editorUser: User!
  editorUserId: Float!
  id: ID!
  invoice: Invoice
  invoiceId: Float
  modemaBlocked: String
  parent: ReturnRequest
  parentId: Float
  requestDate: String!
  requestNumber: String!
  returnRequestId: Float!
  returnRequestItemHistories: [ReturnRequestItemHistory!]!
  returnStatus: ReturnStatus!
  returnStatusId: Float!
  returnType: ReturnType!
  returnTypeId: Float!
  shippingServiceCustomer: String
  shippingServiceModema: String
  trackingCodeCustomer: String
  trackingCodeModema: String
  updatedAt: DateTime
  user: User!
  userBlocked: String
  userId: Float!
  withdrawable: String
}

type ReturnRequestHistoryConnection {
  """Array of edges."""
  edges: [ReturnRequestHistoryEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ReturnRequestHistoryDeleteFilter {
  and: [ReturnRequestHistoryDeleteFilter!]
  id: IDFilterComparison
  or: [ReturnRequestHistoryDeleteFilter!]
}

type ReturnRequestHistoryDeleteResponse {
  createdAt: DateTime
  description: String
  editorUser: User
  editorUserId: Float
  id: ID
  invoice: Invoice
  invoiceId: Float
  modemaBlocked: String
  parent: ReturnRequest
  parentId: Float
  requestDate: String
  requestNumber: String
  returnRequestId: Float
  returnRequestItemHistories: [ReturnRequestItemHistory!]
  returnStatus: ReturnStatus
  returnStatusId: Float
  returnType: ReturnType
  returnTypeId: Float
  shippingServiceCustomer: String
  shippingServiceModema: String
  trackingCodeCustomer: String
  trackingCodeModema: String
  updatedAt: DateTime
  user: User
  userBlocked: String
  userId: Float
  withdrawable: String
}

input ReturnRequestHistoryDomain {
  createdAt: DateTime
  description: String
  editorUser: UserDomain!
  editorUserId: Float!
  id: ID!
  invoice: InvoiceDomain
  invoiceId: Float
  modemaBlocked: String
  parent: ReturnRequestDomain
  parentId: Float
  requestDate: String!
  requestNumber: String!
  returnRequestId: Float!
  returnRequestItemHistories: [ReturnRequestItemHistoryDomain!]!
  returnStatus: ReturnStatusDomain!
  returnStatusId: Float!
  returnType: ReturnTypeDomain!
  returnTypeId: Float!
  shippingServiceCustomer: String
  shippingServiceModema: String
  trackingCodeCustomer: String
  trackingCodeModema: String
  updatedAt: DateTime
  user: UserDomain!
  userBlocked: String
  userId: Float!
  withdrawable: String
}

type ReturnRequestHistoryEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ReturnRequestHistory"""
  node: ReturnRequestHistory!
}

input ReturnRequestHistoryFilter {
  and: [ReturnRequestHistoryFilter!]
  id: IDFilterComparison
  or: [ReturnRequestHistoryFilter!]
}

input ReturnRequestHistorySort {
  direction: SortDirection!
  field: ReturnRequestHistorySortFields!
  nulls: SortNulls
}

enum ReturnRequestHistorySortFields {
  id
}

input ReturnRequestHistoryUpdateFilter {
  and: [ReturnRequestHistoryUpdateFilter!]
  id: IDFilterComparison
  or: [ReturnRequestHistoryUpdateFilter!]
}

type ReturnRequestItem {
  code: String
  count: Float!
  createdAt: DateTime
  description: String
  descriptionAccounting: String
  descriptionFactory: String
  descriptionSales: String
  id: ID!
  invoiceProduct: InvoiceProduct
  invoiceProductId: Float
  product: Product!
  productId: Float!
  returnItemStatus: ReturnItemStatus
  returnItemStatusId: Float
  returnItemStatusReturnRequestItems: [ReturnItemStatusReturnRequestItem!]!
  returnReason: ReturnReason
  returnReasonId: Float
  returnRequest: ReturnRequest!
  returnRequestId: Float!
  returnRequestItemHistories: [ReturnRequestItemHistory!]!
  returnRequestItemImages: [ReturnRequestItemImage!]!
  returnRequestItemReturnItemStatuses: [ReturnRequestItemReturnItemStatus!]!
  returnRequestItemVideos: [ReturnRequestItemVideo!]!
  rowNo: Float
  subproduct: Subproduct!
  subproductId: Float!
  updatedAt: DateTime
}

type ReturnRequestItemConnection {
  """Array of edges."""
  edges: [ReturnRequestItemEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ReturnRequestItemDeleteFilter {
  and: [ReturnRequestItemDeleteFilter!]
  id: IDFilterComparison
  or: [ReturnRequestItemDeleteFilter!]
}

type ReturnRequestItemDeleteResponse {
  code: String
  count: Float
  createdAt: DateTime
  description: String
  descriptionAccounting: String
  descriptionFactory: String
  descriptionSales: String
  id: ID
  invoiceProduct: InvoiceProduct
  invoiceProductId: Float
  product: Product
  productId: Float
  returnItemStatus: ReturnItemStatus
  returnItemStatusId: Float
  returnItemStatusReturnRequestItems: [ReturnItemStatusReturnRequestItem!]
  returnReason: ReturnReason
  returnReasonId: Float
  returnRequest: ReturnRequest
  returnRequestId: Float
  returnRequestItemHistories: [ReturnRequestItemHistory!]
  returnRequestItemImages: [ReturnRequestItemImage!]
  returnRequestItemReturnItemStatuses: [ReturnRequestItemReturnItemStatus!]
  returnRequestItemVideos: [ReturnRequestItemVideo!]
  rowNo: Float
  subproduct: Subproduct
  subproductId: Float
  updatedAt: DateTime
}

input ReturnRequestItemDomain {
  code: String
  count: Float!
  createdAt: DateTime
  description: String
  descriptionAccounting: String
  descriptionFactory: String
  descriptionSales: String
  id: ID!
  invoiceProduct: InvoiceProductDomain
  invoiceProductId: Float
  product: ProductDomain!
  productId: Float!
  returnItemStatus: ReturnItemStatusDomain
  returnItemStatusId: Float
  returnItemStatusReturnRequestItems: [ReturnItemStatusReturnRequestItemDomain!]!
  returnReason: ReturnReasonDomain
  returnReasonId: Float
  returnRequest: ReturnRequestDomain!
  returnRequestId: Float!
  returnRequestItemHistories: [ReturnRequestItemHistoryDomain!]!
  returnRequestItemImages: [ReturnRequestItemImageDomain!]!
  returnRequestItemReturnItemStatuses: [ReturnRequestItemReturnItemStatusDomain!]!
  returnRequestItemVideos: [ReturnRequestItemVideoDomain!]!
  rowNo: Float
  subproduct: SubproductDomain!
  subproductId: Float!
  updatedAt: DateTime
}

type ReturnRequestItemEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ReturnRequestItem"""
  node: ReturnRequestItem!
}

input ReturnRequestItemFilter {
  and: [ReturnRequestItemFilter!]
  id: IDFilterComparison
  or: [ReturnRequestItemFilter!]
}

type ReturnRequestItemHistory {
  code: String
  count: Float!
  createdAt: DateTime
  description: String
  descriptionAccounting: String
  descriptionFactory: String
  descriptionSales: String
  id: ID!
  invoiceProduct: InvoiceProduct
  invoiceProductId: Float
  product: Product!
  productId: Float!
  returnItemStatus: ReturnItemStatus
  returnItemStatusId: Float
  returnReason: ReturnReason
  returnReasonId: Float
  returnRequest: ReturnRequest!
  returnRequestHistory: ReturnRequestHistory!
  returnRequestHistoryId: Float
  returnRequestId: Float!
  returnRequestItem: ReturnRequestItem!
  returnRequestItemId: Float!
  rowNo: Float
  subproduct: Subproduct!
  subproductId: Float!
  updatedAt: DateTime
}

type ReturnRequestItemHistoryConnection {
  """Array of edges."""
  edges: [ReturnRequestItemHistoryEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ReturnRequestItemHistoryDeleteFilter {
  and: [ReturnRequestItemHistoryDeleteFilter!]
  id: IDFilterComparison
  or: [ReturnRequestItemHistoryDeleteFilter!]
}

type ReturnRequestItemHistoryDeleteResponse {
  code: String
  count: Float
  createdAt: DateTime
  description: String
  descriptionAccounting: String
  descriptionFactory: String
  descriptionSales: String
  id: ID
  invoiceProduct: InvoiceProduct
  invoiceProductId: Float
  product: Product
  productId: Float
  returnItemStatus: ReturnItemStatus
  returnItemStatusId: Float
  returnReason: ReturnReason
  returnReasonId: Float
  returnRequest: ReturnRequest
  returnRequestHistory: ReturnRequestHistory
  returnRequestHistoryId: Float
  returnRequestId: Float
  returnRequestItem: ReturnRequestItem
  returnRequestItemId: Float
  rowNo: Float
  subproduct: Subproduct
  subproductId: Float
  updatedAt: DateTime
}

input ReturnRequestItemHistoryDomain {
  code: String
  count: Float!
  createdAt: DateTime
  description: String
  descriptionAccounting: String
  descriptionFactory: String
  descriptionSales: String
  id: ID!
  invoiceProduct: InvoiceProductDomain
  invoiceProductId: Float
  product: ProductDomain!
  productId: Float!
  returnItemStatus: ReturnItemStatusDomain
  returnItemStatusId: Float
  returnReason: ReturnReasonDomain
  returnReasonId: Float
  returnRequest: ReturnRequestDomain!
  returnRequestHistory: ReturnRequestHistoryDomain!
  returnRequestHistoryId: Float
  returnRequestId: Float!
  returnRequestItem: ReturnRequestItemDomain!
  returnRequestItemId: Float!
  rowNo: Float
  subproduct: SubproductDomain!
  subproductId: Float!
  updatedAt: DateTime
}

type ReturnRequestItemHistoryEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ReturnRequestItemHistory"""
  node: ReturnRequestItemHistory!
}

input ReturnRequestItemHistoryFilter {
  and: [ReturnRequestItemHistoryFilter!]
  id: IDFilterComparison
  or: [ReturnRequestItemHistoryFilter!]
}

input ReturnRequestItemHistorySort {
  direction: SortDirection!
  field: ReturnRequestItemHistorySortFields!
  nulls: SortNulls
}

enum ReturnRequestItemHistorySortFields {
  id
}

input ReturnRequestItemHistoryUpdateFilter {
  and: [ReturnRequestItemHistoryUpdateFilter!]
  id: IDFilterComparison
  or: [ReturnRequestItemHistoryUpdateFilter!]
}

type ReturnRequestItemImage {
  createdAt: DateTime
  id: ID!
  image: Image!
  imageId: Float!
  returnRequestItem: ReturnRequestItem!
  returnRequestItemId: Float!
  updatedAt: DateTime
}

type ReturnRequestItemImageConnection {
  """Array of edges."""
  edges: [ReturnRequestItemImageEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ReturnRequestItemImageDeleteFilter {
  and: [ReturnRequestItemImageDeleteFilter!]
  id: IDFilterComparison
  or: [ReturnRequestItemImageDeleteFilter!]
}

type ReturnRequestItemImageDeleteResponse {
  createdAt: DateTime
  id: ID
  image: Image
  imageId: Float
  returnRequestItem: ReturnRequestItem
  returnRequestItemId: Float
  updatedAt: DateTime
}

input ReturnRequestItemImageDomain {
  createdAt: DateTime
  id: ID!
  image: ImageDomain!
  imageId: Float!
  returnRequestItem: ReturnRequestItemDomain!
  returnRequestItemId: Float!
  updatedAt: DateTime
}

type ReturnRequestItemImageEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ReturnRequestItemImage"""
  node: ReturnRequestItemImage!
}

input ReturnRequestItemImageFilter {
  and: [ReturnRequestItemImageFilter!]
  id: IDFilterComparison
  or: [ReturnRequestItemImageFilter!]
}

input ReturnRequestItemImageSort {
  direction: SortDirection!
  field: ReturnRequestItemImageSortFields!
  nulls: SortNulls
}

enum ReturnRequestItemImageSortFields {
  id
}

input ReturnRequestItemImageUpdateFilter {
  and: [ReturnRequestItemImageUpdateFilter!]
  id: IDFilterComparison
  or: [ReturnRequestItemImageUpdateFilter!]
}

type ReturnRequestItemReturnItemStatus {
  createdAt: DateTime
  description: String
  id: ID!
  returnItemStatus: ReturnItemStatus!
  returnItemStatusId: Float!
  returnRequestItem: ReturnRequestItem!
  returnRequestItemId: Float!
  updatedAt: DateTime
  user: User!
  userId: Float!
}

type ReturnRequestItemReturnItemStatusConnection {
  """Array of edges."""
  edges: [ReturnRequestItemReturnItemStatusEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ReturnRequestItemReturnItemStatusDeleteFilter {
  and: [ReturnRequestItemReturnItemStatusDeleteFilter!]
  id: IDFilterComparison
  or: [ReturnRequestItemReturnItemStatusDeleteFilter!]
}

type ReturnRequestItemReturnItemStatusDeleteResponse {
  createdAt: DateTime
  description: String
  id: ID
  returnItemStatus: ReturnItemStatus
  returnItemStatusId: Float
  returnRequestItem: ReturnRequestItem
  returnRequestItemId: Float
  updatedAt: DateTime
  user: User
  userId: Float
}

input ReturnRequestItemReturnItemStatusDomain {
  createdAt: DateTime
  description: String
  id: ID!
  returnItemStatus: ReturnItemStatusDomain!
  returnItemStatusId: Float!
  returnRequestItem: ReturnRequestItemDomain!
  returnRequestItemId: Float!
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
}

type ReturnRequestItemReturnItemStatusEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ReturnRequestItemReturnItemStatus"""
  node: ReturnRequestItemReturnItemStatus!
}

input ReturnRequestItemReturnItemStatusFilter {
  and: [ReturnRequestItemReturnItemStatusFilter!]
  id: IDFilterComparison
  or: [ReturnRequestItemReturnItemStatusFilter!]
}

input ReturnRequestItemReturnItemStatusSort {
  direction: SortDirection!
  field: ReturnRequestItemReturnItemStatusSortFields!
  nulls: SortNulls
}

enum ReturnRequestItemReturnItemStatusSortFields {
  id
}

input ReturnRequestItemReturnItemStatusUpdateFilter {
  and: [ReturnRequestItemReturnItemStatusUpdateFilter!]
  id: IDFilterComparison
  or: [ReturnRequestItemReturnItemStatusUpdateFilter!]
}

input ReturnRequestItemSort {
  direction: SortDirection!
  field: ReturnRequestItemSortFields!
  nulls: SortNulls
}

enum ReturnRequestItemSortFields {
  id
}

input ReturnRequestItemUpdateFilter {
  and: [ReturnRequestItemUpdateFilter!]
  id: IDFilterComparison
  or: [ReturnRequestItemUpdateFilter!]
}

type ReturnRequestItemVideo {
  createdAt: DateTime
  id: ID!
  returnRequestItem: ReturnRequestItem!
  returnRequestItemId: Float!
  updatedAt: DateTime
  video: Video!
  videoId: Float!
}

type ReturnRequestItemVideoConnection {
  """Array of edges."""
  edges: [ReturnRequestItemVideoEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ReturnRequestItemVideoDeleteFilter {
  and: [ReturnRequestItemVideoDeleteFilter!]
  id: IDFilterComparison
  or: [ReturnRequestItemVideoDeleteFilter!]
}

type ReturnRequestItemVideoDeleteResponse {
  createdAt: DateTime
  id: ID
  returnRequestItem: ReturnRequestItem
  returnRequestItemId: Float
  updatedAt: DateTime
  video: Video
  videoId: Float
}

input ReturnRequestItemVideoDomain {
  createdAt: DateTime
  id: ID!
  returnRequestItem: ReturnRequestItemDomain!
  returnRequestItemId: Float!
  updatedAt: DateTime
  video: VideoDomain!
  videoId: Float!
}

type ReturnRequestItemVideoEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ReturnRequestItemVideo"""
  node: ReturnRequestItemVideo!
}

input ReturnRequestItemVideoFilter {
  and: [ReturnRequestItemVideoFilter!]
  id: IDFilterComparison
  or: [ReturnRequestItemVideoFilter!]
}

input ReturnRequestItemVideoSort {
  direction: SortDirection!
  field: ReturnRequestItemVideoSortFields!
  nulls: SortNulls
}

enum ReturnRequestItemVideoSortFields {
  id
}

input ReturnRequestItemVideoUpdateFilter {
  and: [ReturnRequestItemVideoUpdateFilter!]
  id: IDFilterComparison
  or: [ReturnRequestItemVideoUpdateFilter!]
}

type ReturnRequestReturnStatus {
  createdAt: DateTime
  description: String
  id: ID!
  returnRequest: ReturnRequest!
  returnRequestId: Float!
  returnStatus: ReturnStatus!
  returnStatusId: Float!
  updatedAt: DateTime
  user: User!
  userId: Float!
}

type ReturnRequestReturnStatusConnection {
  """Array of edges."""
  edges: [ReturnRequestReturnStatusEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ReturnRequestReturnStatusDeleteFilter {
  and: [ReturnRequestReturnStatusDeleteFilter!]
  id: IDFilterComparison
  or: [ReturnRequestReturnStatusDeleteFilter!]
}

type ReturnRequestReturnStatusDeleteResponse {
  createdAt: DateTime
  description: String
  id: ID
  returnRequest: ReturnRequest
  returnRequestId: Float
  returnStatus: ReturnStatus
  returnStatusId: Float
  updatedAt: DateTime
  user: User
  userId: Float
}

input ReturnRequestReturnStatusDomain {
  createdAt: DateTime
  description: String
  id: ID!
  returnRequest: ReturnRequestDomain!
  returnRequestId: Float!
  returnStatus: ReturnStatusDomain!
  returnStatusId: Float!
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
}

type ReturnRequestReturnStatusEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ReturnRequestReturnStatus"""
  node: ReturnRequestReturnStatus!
}

input ReturnRequestReturnStatusFilter {
  and: [ReturnRequestReturnStatusFilter!]
  id: IDFilterComparison
  or: [ReturnRequestReturnStatusFilter!]
}

input ReturnRequestReturnStatusSort {
  direction: SortDirection!
  field: ReturnRequestReturnStatusSortFields!
  nulls: SortNulls
}

enum ReturnRequestReturnStatusSortFields {
  id
}

input ReturnRequestReturnStatusUpdateFilter {
  and: [ReturnRequestReturnStatusUpdateFilter!]
  id: IDFilterComparison
  or: [ReturnRequestReturnStatusUpdateFilter!]
}

input ReturnRequestSort {
  direction: SortDirection!
  field: ReturnRequestSortFields!
  nulls: SortNulls
}

enum ReturnRequestSortFields {
  id
}

input ReturnRequestUpdateFilter {
  and: [ReturnRequestUpdateFilter!]
  id: IDFilterComparison
  or: [ReturnRequestUpdateFilter!]
}

type ReturnStatus {
  createdAt: DateTime
  id: ID!
  isActive: Boolean!
  name: String!
  returnRequestHistories: [ReturnRequestHistory!]!
  returnRequestReturnStatuses: [ReturnRequestReturnStatus!]!
  returnRequests: [ReturnRequest!]!
  sortOrder: Float!
  stepGuarantee: Float
  stepTest: Float
  updatedAt: DateTime
}

type ReturnStatusConnection {
  """Array of edges."""
  edges: [ReturnStatusEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ReturnStatusDeleteFilter {
  and: [ReturnStatusDeleteFilter!]
  id: IDFilterComparison
  or: [ReturnStatusDeleteFilter!]
}

type ReturnStatusDeleteResponse {
  createdAt: DateTime
  id: ID
  isActive: Boolean
  name: String
  returnRequestHistories: [ReturnRequestHistory!]
  returnRequestReturnStatuses: [ReturnRequestReturnStatus!]
  returnRequests: [ReturnRequest!]
  sortOrder: Float
  stepGuarantee: Float
  stepTest: Float
  updatedAt: DateTime
}

input ReturnStatusDomain {
  createdAt: DateTime
  id: ID!
  isActive: Boolean!
  name: String!
  returnRequestHistories: [ReturnRequestHistoryDomain!]!
  returnRequestReturnStatuses: [ReturnRequestReturnStatusDomain!]!
  returnRequests: [ReturnRequestDomain!]!
  sortOrder: Float!
  stepGuarantee: Float
  stepTest: Float
  updatedAt: DateTime
}

type ReturnStatusEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ReturnStatus"""
  node: ReturnStatus!
}

input ReturnStatusFilter {
  and: [ReturnStatusFilter!]
  id: IDFilterComparison
  or: [ReturnStatusFilter!]
}

input ReturnStatusSort {
  direction: SortDirection!
  field: ReturnStatusSortFields!
  nulls: SortNulls
}

enum ReturnStatusSortFields {
  id
}

input ReturnStatusUpdateFilter {
  and: [ReturnStatusUpdateFilter!]
  id: IDFilterComparison
  or: [ReturnStatusUpdateFilter!]
}

type ReturnType {
  createdAt: DateTime
  id: ID!
  isActive: Boolean!
  name: String!
  returnRequestHistories: [ReturnRequestHistory!]!
  returnRequests: [ReturnRequest!]!
  updatedAt: DateTime
}

type ReturnTypeConnection {
  """Array of edges."""
  edges: [ReturnTypeEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ReturnTypeDeleteFilter {
  and: [ReturnTypeDeleteFilter!]
  id: IDFilterComparison
  or: [ReturnTypeDeleteFilter!]
}

type ReturnTypeDeleteResponse {
  createdAt: DateTime
  id: ID
  isActive: Boolean
  name: String
  returnRequestHistories: [ReturnRequestHistory!]
  returnRequests: [ReturnRequest!]
  updatedAt: DateTime
}

input ReturnTypeDomain {
  createdAt: DateTime
  id: ID!
  isActive: Boolean!
  name: String!
  returnRequestHistories: [ReturnRequestHistoryDomain!]!
  returnRequests: [ReturnRequestDomain!]!
  updatedAt: DateTime
}

type ReturnTypeEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ReturnType"""
  node: ReturnType!
}

input ReturnTypeFilter {
  and: [ReturnTypeFilter!]
  id: IDFilterComparison
  or: [ReturnTypeFilter!]
}

input ReturnTypeSort {
  direction: SortDirection!
  field: ReturnTypeSortFields!
  nulls: SortNulls
}

enum ReturnTypeSortFields {
  id
}

input ReturnTypeUpdateFilter {
  and: [ReturnTypeUpdateFilter!]
  id: IDFilterComparison
  or: [ReturnTypeUpdateFilter!]
}

type ReturnedInvoice {
  createdAt: DateTime
  description: String
  id: ID!
  invoice: Invoice!
  invoiceId: Float!
  replacementInvoice: Invoice
  replacementInvoiceId: Float
  returnDate: DateTime
  returnReason: ReturnReason
  returnReasonId: Float
  returnedInvoiceProducts: [ReturnedInvoiceProduct!]!
  snappInformed: Boolean!
  updatedAt: DateTime
  user: User!
  userId: Float!
}

type ReturnedInvoiceConnection {
  """Array of edges."""
  edges: [ReturnedInvoiceEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ReturnedInvoiceDeleteFilter {
  and: [ReturnedInvoiceDeleteFilter!]
  id: IDFilterComparison
  or: [ReturnedInvoiceDeleteFilter!]
}

type ReturnedInvoiceDeleteResponse {
  createdAt: DateTime
  description: String
  id: ID
  invoice: Invoice
  invoiceId: Float
  replacementInvoice: Invoice
  replacementInvoiceId: Float
  returnDate: DateTime
  returnReason: ReturnReason
  returnReasonId: Float
  returnedInvoiceProducts: [ReturnedInvoiceProduct!]
  snappInformed: Boolean
  updatedAt: DateTime
  user: User
  userId: Float
}

input ReturnedInvoiceDomain {
  createdAt: DateTime
  description: String
  id: ID!
  invoice: InvoiceDomain!
  invoiceId: Float!
  replacementInvoice: InvoiceDomain
  replacementInvoiceId: Float
  returnDate: DateTime
  returnReason: ReturnReasonDomain
  returnReasonId: Float
  returnedInvoiceProducts: [ReturnedInvoiceProductDomain!]!
  snappInformed: Boolean!
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
}

type ReturnedInvoiceEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ReturnedInvoice"""
  node: ReturnedInvoice!
}

input ReturnedInvoiceFilter {
  and: [ReturnedInvoiceFilter!]
  id: IDFilterComparison
  or: [ReturnedInvoiceFilter!]
}

type ReturnedInvoiceProduct {
  count: Float!
  createdAt: DateTime
  description: String
  id: ID!
  invoiceProduct: InvoiceProduct!
  invoiceProductId: Float!
  product: Product!
  productId: Float!
  returnedInvoice: ReturnedInvoice!
  returnedInvoiceId: Float!
  subproduct: Subproduct!
  subproductId: Float!
  updatedAt: DateTime
}

type ReturnedInvoiceProductConnection {
  """Array of edges."""
  edges: [ReturnedInvoiceProductEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ReturnedInvoiceProductDeleteFilter {
  and: [ReturnedInvoiceProductDeleteFilter!]
  id: IDFilterComparison
  or: [ReturnedInvoiceProductDeleteFilter!]
}

type ReturnedInvoiceProductDeleteResponse {
  count: Float
  createdAt: DateTime
  description: String
  id: ID
  invoiceProduct: InvoiceProduct
  invoiceProductId: Float
  product: Product
  productId: Float
  returnedInvoice: ReturnedInvoice
  returnedInvoiceId: Float
  subproduct: Subproduct
  subproductId: Float
  updatedAt: DateTime
}

input ReturnedInvoiceProductDomain {
  count: Float!
  createdAt: DateTime
  description: String
  id: ID!
  invoiceProduct: InvoiceProductDomain!
  invoiceProductId: Float!
  product: ProductDomain!
  productId: Float!
  returnedInvoice: ReturnedInvoiceDomain!
  returnedInvoiceId: Float!
  subproduct: SubproductDomain!
  subproductId: Float!
  updatedAt: DateTime
}

type ReturnedInvoiceProductEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ReturnedInvoiceProduct"""
  node: ReturnedInvoiceProduct!
}

input ReturnedInvoiceProductFilter {
  and: [ReturnedInvoiceProductFilter!]
  id: IDFilterComparison
  or: [ReturnedInvoiceProductFilter!]
}

input ReturnedInvoiceProductSort {
  direction: SortDirection!
  field: ReturnedInvoiceProductSortFields!
  nulls: SortNulls
}

enum ReturnedInvoiceProductSortFields {
  id
}

input ReturnedInvoiceProductUpdateFilter {
  and: [ReturnedInvoiceProductUpdateFilter!]
  id: IDFilterComparison
  or: [ReturnedInvoiceProductUpdateFilter!]
}

input ReturnedInvoiceSort {
  direction: SortDirection!
  field: ReturnedInvoiceSortFields!
  nulls: SortNulls
}

enum ReturnedInvoiceSortFields {
  id
}

input ReturnedInvoiceUpdateFilter {
  and: [ReturnedInvoiceUpdateFilter!]
  id: IDFilterComparison
  or: [ReturnedInvoiceUpdateFilter!]
}

type RfmReport {
  id: ID!
  kharid1: String!
  kharid2: String!
  kharid3: String!
  kharid4: String!
  kharid5: String!
  kharid6: String!
  kharid7: String!
  kharid8: String!
  kharid9: String!
  kharid10: String!
  kharid11: String!
  kharid12: String!
  kharid13: String!
  kharid14: String!
  kharid15: String!
  kharid16: String!
  kharid17: String!
  kharid18: String!
  kharid19: String!
  kharid20: String!
  name: String!
  phone: String
}

type RfmReportConnection {
  """Array of edges."""
  edges: [RfmReportEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input RfmReportDeleteFilter {
  and: [RfmReportDeleteFilter!]
  id: IDFilterComparison
  or: [RfmReportDeleteFilter!]
}

type RfmReportDeleteResponse {
  id: ID
  kharid1: String
  kharid2: String
  kharid3: String
  kharid4: String
  kharid5: String
  kharid6: String
  kharid7: String
  kharid8: String
  kharid9: String
  kharid10: String
  kharid11: String
  kharid12: String
  kharid13: String
  kharid14: String
  kharid15: String
  kharid16: String
  kharid17: String
  kharid18: String
  kharid19: String
  kharid20: String
  name: String
  phone: String
}

input RfmReportDomain {
  id: ID!
  kharid1: String!
  kharid2: String!
  kharid3: String!
  kharid4: String!
  kharid5: String!
  kharid6: String!
  kharid7: String!
  kharid8: String!
  kharid9: String!
  kharid10: String!
  kharid11: String!
  kharid12: String!
  kharid13: String!
  kharid14: String!
  kharid15: String!
  kharid16: String!
  kharid17: String!
  kharid18: String!
  kharid19: String!
  kharid20: String!
  name: String!
  phone: String
}

type RfmReportEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the RfmReport"""
  node: RfmReport!
}

input RfmReportFilter {
  and: [RfmReportFilter!]
  id: IDFilterComparison
  or: [RfmReportFilter!]
}

input RfmReportSort {
  direction: SortDirection!
  field: RfmReportSortFields!
  nulls: SortNulls
}

enum RfmReportSortFields {
  id
}

input RfmReportUpdateFilter {
  and: [RfmReportUpdateFilter!]
  id: IDFilterComparison
  or: [RfmReportUpdateFilter!]
}

type RipTemplate {
  createdAt: DateTime
  id: ID!
  name: String!
  printRips: [PrintRip!]!
  ripTemplateItems: [RipTemplateItem!]!
  updatedAt: DateTime
  user: User
  userId: Float
}

type RipTemplateConnection {
  """Array of edges."""
  edges: [RipTemplateEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input RipTemplateDeleteFilter {
  and: [RipTemplateDeleteFilter!]
  id: IDFilterComparison
  or: [RipTemplateDeleteFilter!]
}

type RipTemplateDeleteResponse {
  createdAt: DateTime
  id: ID
  name: String
  printRips: [PrintRip!]
  ripTemplateItems: [RipTemplateItem!]
  updatedAt: DateTime
  user: User
  userId: Float
}

input RipTemplateDomain {
  createdAt: DateTime
  id: ID!
  name: String!
  printRips: [PrintRipDomain!]!
  ripTemplateItems: [RipTemplateItemDomain!]!
  updatedAt: DateTime
  user: UserDomain
  userId: Float
}

type RipTemplateEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the RipTemplate"""
  node: RipTemplate!
}

input RipTemplateFilter {
  and: [RipTemplateFilter!]
  id: IDFilterComparison
  or: [RipTemplateFilter!]
}

type RipTemplateItem {
  basicCarpetSize: BasicCarpetSize!
  basicCarpetSizeId: Float!
  createdAt: DateTime
  id: ID!
  length: Float!
  ripTemplate: RipTemplate!
  ripTemplateId: Float!
  updatedAt: DateTime
  width: Float!
}

type RipTemplateItemConnection {
  """Array of edges."""
  edges: [RipTemplateItemEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input RipTemplateItemDeleteFilter {
  and: [RipTemplateItemDeleteFilter!]
  id: IDFilterComparison
  or: [RipTemplateItemDeleteFilter!]
}

type RipTemplateItemDeleteResponse {
  basicCarpetSize: BasicCarpetSize
  basicCarpetSizeId: Float
  createdAt: DateTime
  id: ID
  length: Float
  ripTemplate: RipTemplate
  ripTemplateId: Float
  updatedAt: DateTime
  width: Float
}

input RipTemplateItemDomain {
  basicCarpetSize: BasicCarpetSizeDomain!
  basicCarpetSizeId: Float!
  createdAt: DateTime
  id: ID!
  length: Float!
  ripTemplate: RipTemplateDomain!
  ripTemplateId: Float!
  updatedAt: DateTime
  width: Float!
}

type RipTemplateItemEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the RipTemplateItem"""
  node: RipTemplateItem!
}

input RipTemplateItemFilter {
  and: [RipTemplateItemFilter!]
  id: IDFilterComparison
  or: [RipTemplateItemFilter!]
}

input RipTemplateItemSort {
  direction: SortDirection!
  field: RipTemplateItemSortFields!
  nulls: SortNulls
}

enum RipTemplateItemSortFields {
  id
}

input RipTemplateItemUpdateFilter {
  and: [RipTemplateItemUpdateFilter!]
  id: IDFilterComparison
  or: [RipTemplateItemUpdateFilter!]
}

input RipTemplateSort {
  direction: SortDirection!
  field: RipTemplateSortFields!
  nulls: SortNulls
}

enum RipTemplateSortFields {
  id
}

input RipTemplateUpdateFilter {
  and: [RipTemplateUpdateFilter!]
  id: IDFilterComparison
  or: [RipTemplateUpdateFilter!]
}

type RoleDomain {
  createdAt: DateTime
  guardName: String!
  id: Float!
  modelHasRoles(
    """Specify to filter the records returned."""
    filter: ModelHasRoleFilter! = {}

    """Specify to sort results."""
    sorting: [ModelHasRoleSort!]! = []
  ): [ModelHasRole!]!
  name: String!
  permissions(
    """Specify to filter the records returned."""
    filter: PermissionFilter! = {}

    """Specify to sort results."""
    sorting: [PermissionSort!]! = []
  ): [Permission!]!
  updatedAt: DateTime
}

input RoleDomainDeleteFilter {
  and: [RoleDomainDeleteFilter!]
  guardName: StringFieldComparison
  id: NumberFieldComparison
  name: StringFieldComparison
  or: [RoleDomainDeleteFilter!]
}

type RoleDomainDeleteResponse {
  createdAt: DateTime
  guardName: String
  id: Float
  name: String
  updatedAt: DateTime
}

input RoleDomainFilter {
  and: [RoleDomainFilter!]
  guardName: StringFieldComparison
  id: NumberFieldComparison
  name: StringFieldComparison
  or: [RoleDomainFilter!]
}

input RoleDomainInput {
  createdAt: DateTime
  guardName: String!
  id: Float!
  name: String!
  updatedAt: DateTime
}

input RoleDomainSort {
  direction: SortDirection!
  field: RoleDomainSortFields!
  nulls: SortNulls
}

enum RoleDomainSortFields {
  guardName
  id
  name
}

input RoleDomainUpdateFilter {
  and: [RoleDomainUpdateFilter!]
  guardName: StringFieldComparison
  id: NumberFieldComparison
  name: StringFieldComparison
  or: [RoleDomainUpdateFilter!]
}

type RoleHasPermission {
  permission(
    """Specify to filter the records returned."""
    filter: PermissionFilter! = {}

    """Specify to sort results."""
    sorting: [PermissionSort!]! = []
  ): [Permission!]!
  permissionId: ID!
  role(
    """Specify to filter the records returned."""
    filter: RoleDomainFilter! = {}

    """Specify to sort results."""
    sorting: [RoleDomainSort!]! = []
  ): [RoleDomain!]!
  roleId: String!
}

type RoleHasPermissionConnection {
  """Array of edges."""
  edges: [RoleHasPermissionEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input RoleHasPermissionDeleteFilter {
  and: [RoleHasPermissionDeleteFilter!]
  or: [RoleHasPermissionDeleteFilter!]
  permissionId: IDFilterComparison
  roleId: StringFieldComparison
}

type RoleHasPermissionDeleteResponse {
  permission: Permission
  permissionId: ID
  role: RoleDomain
  roleId: String
}

input RoleHasPermissionDomain {
  permission: PermissionDomain!
  permissionId: ID!
  role: RoleDomainInput!
  roleId: String!
}

type RoleHasPermissionEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the RoleHasPermission"""
  node: RoleHasPermission!
}

input RoleHasPermissionFilter {
  and: [RoleHasPermissionFilter!]
  or: [RoleHasPermissionFilter!]
  permissionId: IDFilterComparison
  roleId: StringFieldComparison
}

input RoleHasPermissionSort {
  direction: SortDirection!
  field: RoleHasPermissionSortFields!
  nulls: SortNulls
}

enum RoleHasPermissionSortFields {
  permissionId
  roleId
}

input RoleHasPermissionUpdateFilter {
  and: [RoleHasPermissionUpdateFilter!]
  or: [RoleHasPermissionUpdateFilter!]
  permissionId: IDFilterComparison
  roleId: StringFieldComparison
}

type Russian {
  id: ID!
  name: String
  russianName: String
}

type RussianConnection {
  """Array of edges."""
  edges: [RussianEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input RussianDeleteFilter {
  and: [RussianDeleteFilter!]
  id: IDFilterComparison
  or: [RussianDeleteFilter!]
}

type RussianDeleteResponse {
  id: ID
  name: String
  russianName: String
}

input RussianDomain {
  id: ID!
  name: String
  russianName: String
}

type RussianEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Russian"""
  node: Russian!
}

input RussianFilter {
  and: [RussianFilter!]
  id: IDFilterComparison
  or: [RussianFilter!]
}

input RussianSort {
  direction: SortDirection!
  field: RussianSortFields!
  nulls: SortNulls
}

enum RussianSortFields {
  id
}

input RussianUpdateFilter {
  and: [RussianUpdateFilter!]
  id: IDFilterComparison
  or: [RussianUpdateFilter!]
}

type SenderInformation {
  buildingPart: String!
  buildingPartDescription: String!
  city: City
  cityId: Float
  commodityDescription: String!
  companyName: String!
  contactId: Float!
  country: Country
  countryId: Float
  createdAt: DateTime
  emailAddress: String!
  faxNumber: String!
  id: ID!
  isActive: Boolean!
  latitude: String
  location: String!
  longitude: String
  packageLocation: String!
  pagerNumber: String!
  personName: String!
  phoneExtension: String!
  phoneNumber: String!
  postalCode: String!
  remarks: String!
  state: State
  stateId: Float
  streetLines: String!
  title: String!
  updatedAt: DateTime
}

type SenderInformationConnection {
  """Array of edges."""
  edges: [SenderInformationEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input SenderInformationDeleteFilter {
  and: [SenderInformationDeleteFilter!]
  id: IDFilterComparison
  or: [SenderInformationDeleteFilter!]
}

type SenderInformationDeleteResponse {
  buildingPart: String
  buildingPartDescription: String
  city: City
  cityId: Float
  commodityDescription: String
  companyName: String
  contactId: Float
  country: Country
  countryId: Float
  createdAt: DateTime
  emailAddress: String
  faxNumber: String
  id: ID
  isActive: Boolean
  latitude: String
  location: String
  longitude: String
  packageLocation: String
  pagerNumber: String
  personName: String
  phoneExtension: String
  phoneNumber: String
  postalCode: String
  remarks: String
  state: State
  stateId: Float
  streetLines: String
  title: String
  updatedAt: DateTime
}

input SenderInformationDomain {
  buildingPart: String!
  buildingPartDescription: String!
  city: CityDomain
  cityId: Float
  commodityDescription: String!
  companyName: String!
  contactId: Float!
  country: CountryDomain
  countryId: Float
  createdAt: DateTime
  emailAddress: String!
  faxNumber: String!
  id: ID!
  isActive: Boolean!
  latitude: String
  location: String!
  longitude: String
  packageLocation: String!
  pagerNumber: String!
  personName: String!
  phoneExtension: String!
  phoneNumber: String!
  postalCode: String!
  remarks: String!
  state: StateDomain
  stateId: Float
  streetLines: String!
  title: String!
  updatedAt: DateTime
}

type SenderInformationEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the SenderInformation"""
  node: SenderInformation!
}

input SenderInformationFilter {
  and: [SenderInformationFilter!]
  id: IDFilterComparison
  or: [SenderInformationFilter!]
}

input SenderInformationSort {
  direction: SortDirection!
  field: SenderInformationSortFields!
  nulls: SortNulls
}

enum SenderInformationSortFields {
  id
}

input SenderInformationUpdateFilter {
  and: [SenderInformationUpdateFilter!]
  id: IDFilterComparison
  or: [SenderInformationUpdateFilter!]
}

type ShippingService {
  code: String!
  description: String
  fullDescription: String
  id: ID!
  invoiceRatesResults: [InvoiceRatesResult!]!
  invoiceShippingRates: [InvoiceShippingRate!]!
  isActive: Boolean!
  name: String
}

type ShippingServiceConnection {
  """Array of edges."""
  edges: [ShippingServiceEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input ShippingServiceDeleteFilter {
  and: [ShippingServiceDeleteFilter!]
  id: IDFilterComparison
  or: [ShippingServiceDeleteFilter!]
}

type ShippingServiceDeleteResponse {
  code: String
  description: String
  fullDescription: String
  id: ID
  invoiceRatesResults: [InvoiceRatesResult!]
  invoiceShippingRates: [InvoiceShippingRate!]
  isActive: Boolean
  name: String
}

input ShippingServiceDomain {
  code: String!
  description: String
  fullDescription: String
  id: ID!
  invoiceRatesResults: [InvoiceRatesResultDomain!]!
  invoiceShippingRates: [InvoiceShippingRateDomain!]!
  isActive: Boolean!
  name: String
}

type ShippingServiceEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ShippingService"""
  node: ShippingService!
}

input ShippingServiceFilter {
  and: [ShippingServiceFilter!]
  id: IDFilterComparison
  or: [ShippingServiceFilter!]
}

input ShippingServiceSort {
  direction: SortDirection!
  field: ShippingServiceSortFields!
  nulls: SortNulls
}

enum ShippingServiceSortFields {
  id
}

input ShippingServiceUpdateFilter {
  and: [ShippingServiceUpdateFilter!]
  id: IDFilterComparison
  or: [ShippingServiceUpdateFilter!]
}

type SitemapStaticPage {
  changefreq: String!
  createdAt: DateTime
  id: ID!
  loc: String!
  priority: Float!
  updatedAt: DateTime
}

type SitemapStaticPageConnection {
  """Array of edges."""
  edges: [SitemapStaticPageEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input SitemapStaticPageDeleteFilter {
  and: [SitemapStaticPageDeleteFilter!]
  id: IDFilterComparison
  or: [SitemapStaticPageDeleteFilter!]
}

type SitemapStaticPageDeleteResponse {
  changefreq: String
  createdAt: DateTime
  id: ID
  loc: String
  priority: Float
  updatedAt: DateTime
}

input SitemapStaticPageDomain {
  changefreq: String!
  createdAt: DateTime
  id: ID!
  loc: String!
  priority: Float!
  updatedAt: DateTime
}

type SitemapStaticPageEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the SitemapStaticPage"""
  node: SitemapStaticPage!
}

input SitemapStaticPageFilter {
  and: [SitemapStaticPageFilter!]
  id: IDFilterComparison
  or: [SitemapStaticPageFilter!]
}

input SitemapStaticPageSort {
  direction: SortDirection!
  field: SitemapStaticPageSortFields!
  nulls: SortNulls
}

enum SitemapStaticPageSortFields {
  id
}

input SitemapStaticPageUpdateFilter {
  and: [SitemapStaticPageUpdateFilter!]
  id: IDFilterComparison
  or: [SitemapStaticPageUpdateFilter!]
}

type SizeGuide {
  createdAt: DateTime
  id: ID!
  image: Image
  imageId: Float
  sizeGuidesDetails: [SizeGuidesDetail!]!
  text: String!
  title: String!
  updatedAt: DateTime
}

type SizeGuideConnection {
  """Array of edges."""
  edges: [SizeGuideEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input SizeGuideDeleteFilter {
  and: [SizeGuideDeleteFilter!]
  id: IDFilterComparison
  or: [SizeGuideDeleteFilter!]
}

type SizeGuideDeleteResponse {
  createdAt: DateTime
  id: ID
  image: Image
  imageId: Float
  sizeGuidesDetails: [SizeGuidesDetail!]
  text: String
  title: String
  updatedAt: DateTime
}

input SizeGuideDomain {
  createdAt: DateTime
  id: ID!
  image: ImageDomain
  imageId: Float
  sizeGuidesDetails: [SizeGuidesDetailDomain!]!
  text: String!
  title: String!
  updatedAt: DateTime
}

type SizeGuideEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the SizeGuide"""
  node: SizeGuide!
}

input SizeGuideFilter {
  and: [SizeGuideFilter!]
  id: IDFilterComparison
  or: [SizeGuideFilter!]
}

input SizeGuideSort {
  direction: SortDirection!
  field: SizeGuideSortFields!
  nulls: SortNulls
}

enum SizeGuideSortFields {
  id
}

input SizeGuideUpdateFilter {
  and: [SizeGuideUpdateFilter!]
  id: IDFilterComparison
  or: [SizeGuideUpdateFilter!]
}

type SizeGuidesDetail {
  createdAt: DateTime
  detailsText: String!
  detailsTitle: String!
  iconText: String!
  iconTitle: String!
  id: ID!
  image: Image
  imageId: Float
  imagesSizeGuidesDetails: [ImagesSizeGuidesDetail!]!
  sizeGuide: SizeGuide!
  sizeGuideId: Float!
  text: String!
  title: String!
  updatedAt: DateTime
}

type SizeGuidesDetailConnection {
  """Array of edges."""
  edges: [SizeGuidesDetailEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input SizeGuidesDetailDeleteFilter {
  and: [SizeGuidesDetailDeleteFilter!]
  id: IDFilterComparison
  or: [SizeGuidesDetailDeleteFilter!]
}

type SizeGuidesDetailDeleteResponse {
  createdAt: DateTime
  detailsText: String
  detailsTitle: String
  iconText: String
  iconTitle: String
  id: ID
  image: Image
  imageId: Float
  imagesSizeGuidesDetails: [ImagesSizeGuidesDetail!]
  sizeGuide: SizeGuide
  sizeGuideId: Float
  text: String
  title: String
  updatedAt: DateTime
}

input SizeGuidesDetailDomain {
  createdAt: DateTime
  detailsText: String!
  detailsTitle: String!
  iconText: String!
  iconTitle: String!
  id: ID!
  image: ImageDomain
  imageId: Float
  imagesSizeGuidesDetails: [ImagesSizeGuidesDetailDomain!]!
  sizeGuide: SizeGuideDomain!
  sizeGuideId: Float!
  text: String!
  title: String!
  updatedAt: DateTime
}

type SizeGuidesDetailEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the SizeGuidesDetail"""
  node: SizeGuidesDetail!
}

input SizeGuidesDetailFilter {
  and: [SizeGuidesDetailFilter!]
  id: IDFilterComparison
  or: [SizeGuidesDetailFilter!]
}

input SizeGuidesDetailSort {
  direction: SortDirection!
  field: SizeGuidesDetailSortFields!
  nulls: SortNulls
}

enum SizeGuidesDetailSortFields {
  id
}

input SizeGuidesDetailUpdateFilter {
  and: [SizeGuidesDetailUpdateFilter!]
  id: IDFilterComparison
  or: [SizeGuidesDetailUpdateFilter!]
}

type SocialFacebookAccount {
  createdAt: DateTime
  id: ID!
  provider: String!
  providerUserId: String!
  updatedAt: DateTime
  user: User!
  userId: Float!
}

type SocialFacebookAccountConnection {
  """Array of edges."""
  edges: [SocialFacebookAccountEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input SocialFacebookAccountDeleteFilter {
  and: [SocialFacebookAccountDeleteFilter!]
  id: IDFilterComparison
  or: [SocialFacebookAccountDeleteFilter!]
}

type SocialFacebookAccountDeleteResponse {
  createdAt: DateTime
  id: ID
  provider: String
  providerUserId: String
  updatedAt: DateTime
  user: User
  userId: Float
}

input SocialFacebookAccountDomain {
  createdAt: DateTime
  id: ID!
  provider: String!
  providerUserId: String!
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
}

type SocialFacebookAccountEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the SocialFacebookAccount"""
  node: SocialFacebookAccount!
}

input SocialFacebookAccountFilter {
  and: [SocialFacebookAccountFilter!]
  id: IDFilterComparison
  or: [SocialFacebookAccountFilter!]
}

input SocialFacebookAccountSort {
  direction: SortDirection!
  field: SocialFacebookAccountSortFields!
  nulls: SortNulls
}

enum SocialFacebookAccountSortFields {
  id
}

input SocialFacebookAccountUpdateFilter {
  and: [SocialFacebookAccountUpdateFilter!]
  id: IDFilterComparison
  or: [SocialFacebookAccountUpdateFilter!]
}

type SocialGoogleAccount {
  createdAt: DateTime
  id: ID!
  provider: String!
  providerUserId: String!
  updatedAt: DateTime
  user: User!
  userId: Float!
}

type SocialGoogleAccountConnection {
  """Array of edges."""
  edges: [SocialGoogleAccountEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input SocialGoogleAccountDeleteFilter {
  and: [SocialGoogleAccountDeleteFilter!]
  id: IDFilterComparison
  or: [SocialGoogleAccountDeleteFilter!]
}

type SocialGoogleAccountDeleteResponse {
  createdAt: DateTime
  id: ID
  provider: String
  providerUserId: String
  updatedAt: DateTime
  user: User
  userId: Float
}

input SocialGoogleAccountDomain {
  createdAt: DateTime
  id: ID!
  provider: String!
  providerUserId: String!
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
}

type SocialGoogleAccountEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the SocialGoogleAccount"""
  node: SocialGoogleAccount!
}

input SocialGoogleAccountFilter {
  and: [SocialGoogleAccountFilter!]
  id: IDFilterComparison
  or: [SocialGoogleAccountFilter!]
}

input SocialGoogleAccountSort {
  direction: SortDirection!
  field: SocialGoogleAccountSortFields!
  nulls: SortNulls
}

enum SocialGoogleAccountSortFields {
  id
}

input SocialGoogleAccountUpdateFilter {
  and: [SocialGoogleAccountUpdateFilter!]
  id: IDFilterComparison
  or: [SocialGoogleAccountUpdateFilter!]
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

type SpecialOffer {
  createdAt: DateTime
  id: ID!
  specialOfferImageUrl: String
  specialOfferProduct: Product
  specialOfferProductId: Float
  specialOfferSubtitle: String
  specialOfferTitle: String
  updatedAt: DateTime
  wonderfulOfferProduct: Product
  wonderfulOfferProductId: Float
}

type SpecialOfferConnection {
  """Array of edges."""
  edges: [SpecialOfferEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input SpecialOfferDeleteFilter {
  and: [SpecialOfferDeleteFilter!]
  id: IDFilterComparison
  or: [SpecialOfferDeleteFilter!]
}

type SpecialOfferDeleteResponse {
  createdAt: DateTime
  id: ID
  specialOfferImageUrl: String
  specialOfferProduct: Product
  specialOfferProductId: Float
  specialOfferSubtitle: String
  specialOfferTitle: String
  updatedAt: DateTime
  wonderfulOfferProduct: Product
  wonderfulOfferProductId: Float
}

input SpecialOfferDomain {
  createdAt: DateTime
  id: ID!
  specialOfferImageUrl: String
  specialOfferProduct: ProductDomain
  specialOfferProductId: Float
  specialOfferSubtitle: String
  specialOfferTitle: String
  updatedAt: DateTime
  wonderfulOfferProduct: ProductDomain
  wonderfulOfferProductId: Float
}

type SpecialOfferEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the SpecialOffer"""
  node: SpecialOffer!
}

input SpecialOfferFilter {
  and: [SpecialOfferFilter!]
  id: IDFilterComparison
  or: [SpecialOfferFilter!]
}

input SpecialOfferSort {
  direction: SortDirection!
  field: SpecialOfferSortFields!
  nulls: SortNulls
}

enum SpecialOfferSortFields {
  id
}

input SpecialOfferUpdateFilter {
  and: [SpecialOfferUpdateFilter!]
  id: IDFilterComparison
  or: [SpecialOfferUpdateFilter!]
}

type State {
  addresses: [Address!]!
  basicCarpetDesigners: [BasicCarpetDesigner!]!
  chaparId: Float
  cities: [City!]!
  code: String
  country: Country!
  countryId: Float!
  createdAt: DateTime
  id: ID!
  invoiceAddresses: [InvoiceAddress!]!
  name: String!
  returnRequestAddresses: [ReturnRequestAddress!]!
  senderInformations: [SenderInformation!]!
  sepidarId: Float
  tipaxId: Float
  updatedAt: DateTime
}

type StateConnection {
  """Array of edges."""
  edges: [StateEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input StateDeleteFilter {
  and: [StateDeleteFilter!]
  id: IDFilterComparison
  or: [StateDeleteFilter!]
}

type StateDeleteResponse {
  addresses: [Address!]
  basicCarpetDesigners: [BasicCarpetDesigner!]
  chaparId: Float
  cities: [City!]
  code: String
  country: Country
  countryId: Float
  createdAt: DateTime
  id: ID
  invoiceAddresses: [InvoiceAddress!]
  name: String
  returnRequestAddresses: [ReturnRequestAddress!]
  senderInformations: [SenderInformation!]
  sepidarId: Float
  tipaxId: Float
  updatedAt: DateTime
}

input StateDomain {
  addresses: [AddressDomain!]!
  basicCarpetDesigners: [BasicCarpetDesignerDomain!]!
  chaparId: Float
  cities: [CityDomain!]!
  code: String
  country: CountryDomain!
  countryId: Float!
  createdAt: DateTime
  id: ID!
  invoiceAddresses: [InvoiceAddressDomain!]!
  name: String!
  returnRequestAddresses: [ReturnRequestAddressDomain!]!
  senderInformations: [SenderInformationDomain!]!
  sepidarId: Float
  tipaxId: Float
  updatedAt: DateTime
}

type StateEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the State"""
  node: State!
}

input StateFilter {
  and: [StateFilter!]
  id: IDFilterComparison
  or: [StateFilter!]
}

input StateSort {
  direction: SortDirection!
  field: StateSortFields!
  nulls: SortNulls
}

enum StateSortFields {
  id
}

input StateUpdateFilter {
  and: [StateUpdateFilter!]
  id: IDFilterComparison
  or: [StateUpdateFilter!]
}

input StringFieldComparison {
  eq: String
  gt: String
  gte: String
  iLike: String
  in: [String!]
  is: Boolean
  isNot: Boolean
  like: String
  lt: String
  lte: String
  neq: String
  notILike: String
  notIn: [String!]
  notLike: String
}

type Subcolor {
  color: Color
  colorCode: String
  colorCodeOriginal: String
  colorId: Float
  colorName: String
  hexCode: String
  id: ID!
  order: Float
}

type SubcolorConnection {
  """Array of edges."""
  edges: [SubcolorEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input SubcolorDeleteFilter {
  and: [SubcolorDeleteFilter!]
  id: IDFilterComparison
  or: [SubcolorDeleteFilter!]
}

type SubcolorDeleteResponse {
  color: Color
  colorCode: String
  colorCodeOriginal: String
  colorId: Float
  colorName: String
  hexCode: String
  id: ID
  order: Float
}

input SubcolorDomain {
  color: ColorDomain
  colorCode: String
  colorCodeOriginal: String
  colorId: Float
  colorName: String
  hexCode: String
  id: ID!
  order: Float
}

type SubcolorEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Subcolor"""
  node: Subcolor!
}

input SubcolorFilter {
  and: [SubcolorFilter!]
  id: IDFilterComparison
  or: [SubcolorFilter!]
}

input SubcolorSort {
  direction: SortDirection!
  field: SubcolorSortFields!
  nulls: SortNulls
}

enum SubcolorSortFields {
  id
}

input SubcolorUpdateFilter {
  and: [SubcolorUpdateFilter!]
  id: IDFilterComparison
  or: [SubcolorUpdateFilter!]
}

type Subproduct {
  attributeSubproducts: [AttributeSubproduct!]!
  basicCarpetBorder: BasicCarpetBorder!
  basicCarpetBorderId: Float
  basicCarpetBrand: BasicCarpetBrand!
  basicCarpetBrandId: Float
  basicCarpetColor: BasicCarpetColor!
  basicCarpetColorId: Float
  basicCarpetDesign: BasicCarpetDesign!
  basicCarpetDesignId: Float
  basicCarpetDesigner: BasicCarpetDesigner!
  basicCarpetDesignerId: Float
  basicCarpetMaterial: BasicCarpetMaterial!
  basicCarpetMaterialId: Float
  basicCarpetSize: BasicCarpetSize!
  basicCarpetSizeId: Float
  basicCarpetType: BasicCarpetType!
  basicCarpetTypeId: Float
  borderColor: String
  bundlePadPrice: String
  bundlePrice: String
  code: String
  colorCategoriesChanged: Float
  colorCategorySubproducts: [ColorCategorySubproduct!]!
  colorName: String
  colorNameEs: String
  colors: String
  couponSubjects: [CouponSubject!]!
  createdAt: DateTime
  description: String
  discountSubjects: [DiscountSubject!]!
  favoriteProducts: [FavoriteProduct!]!
  getStockCountFromSepidar: Boolean!
  id: ID!
  image: Image!
  imageId: Float
  imageSubproducts: [ImageSubproduct!]!
  invoiceProductHistories: [InvoiceProductHistory!]!
  invoiceProducts: [InvoiceProduct!]!
  isActive: Boolean!
  isOutOfStock: Boolean!
  length: Float
  mainImageChanged: Boolean
  name: String!
  nameEn: String
  needsPhotographySubproducts: [NeedsPhotographySubproduct!]!
  otherImagesChanged: Boolean!
  padPrice: String!
  preorders: [Preorder!]!
  price: String
  product: Product!
  productComments: [ProductComment!]!
  productId: Float!
  productLikes: [ProductLike!]!
  productRateAverages: [ProductRateAverage!]!
  productRates: [ProductRate!]!
  productTags: [ProductTag!]!
  rate: Float!
  rateCount: Float
  recommendedSubproducts: [RecommendedSubproduct!]!
  returnRequestItemHistories: [ReturnRequestItemHistory!]!
  returnRequestItems: [ReturnRequestItem!]!
  returnedInvoiceProducts: [ReturnedInvoiceProduct!]!
  saleCount: Float!
  searchName: String
  searchNameEn: String
  sepidarId: Float
  shortCode: String
  size: Float!
  sizeIsCustomizable: Float!
  sortOrder: Float
  stockCount: Float
  subproductSpecialImages: [SubproductSpecialImage!]!
  subproductStockHistories: [SubproductStockHistory!]!
  subproductVideos: [SubproductVideo!]!
  torobProducts: [TorobProduct!]!
  totalDislike: Float!
  totalLike: Float!
  updatedAt: DateTime
  userCarts: [UserCart!]!
  userCarts2: [UserCart!]!
  video: Video!
  videoId: Float
  width: Float
}

type SubproductConnection {
  """Array of edges."""
  edges: [SubproductEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input SubproductDeleteFilter {
  and: [SubproductDeleteFilter!]
  id: IDFilterComparison
  or: [SubproductDeleteFilter!]
}

type SubproductDeleteResponse {
  attributeSubproducts: [AttributeSubproduct!]
  basicCarpetBorder: BasicCarpetBorder
  basicCarpetBorderId: Float
  basicCarpetBrand: BasicCarpetBrand
  basicCarpetBrandId: Float
  basicCarpetColor: BasicCarpetColor
  basicCarpetColorId: Float
  basicCarpetDesign: BasicCarpetDesign
  basicCarpetDesignId: Float
  basicCarpetDesigner: BasicCarpetDesigner
  basicCarpetDesignerId: Float
  basicCarpetMaterial: BasicCarpetMaterial
  basicCarpetMaterialId: Float
  basicCarpetSize: BasicCarpetSize
  basicCarpetSizeId: Float
  basicCarpetType: BasicCarpetType
  basicCarpetTypeId: Float
  borderColor: String
  bundlePadPrice: String
  bundlePrice: String
  code: String
  colorCategoriesChanged: Float
  colorCategorySubproducts: [ColorCategorySubproduct!]
  colorName: String
  colorNameEs: String
  colors: String
  couponSubjects: [CouponSubject!]
  createdAt: DateTime
  description: String
  discountSubjects: [DiscountSubject!]
  favoriteProducts: [FavoriteProduct!]
  getStockCountFromSepidar: Boolean
  id: ID
  image: Image
  imageId: Float
  imageSubproducts: [ImageSubproduct!]
  invoiceProductHistories: [InvoiceProductHistory!]
  invoiceProducts: [InvoiceProduct!]
  isActive: Boolean
  isOutOfStock: Boolean
  length: Float
  mainImageChanged: Boolean
  name: String
  nameEn: String
  needsPhotographySubproducts: [NeedsPhotographySubproduct!]
  otherImagesChanged: Boolean
  padPrice: String
  preorders: [Preorder!]
  price: String
  product: Product
  productComments: [ProductComment!]
  productId: Float
  productLikes: [ProductLike!]
  productRateAverages: [ProductRateAverage!]
  productRates: [ProductRate!]
  productTags: [ProductTag!]
  rate: Float
  rateCount: Float
  recommendedSubproducts: [RecommendedSubproduct!]
  returnRequestItemHistories: [ReturnRequestItemHistory!]
  returnRequestItems: [ReturnRequestItem!]
  returnedInvoiceProducts: [ReturnedInvoiceProduct!]
  saleCount: Float
  searchName: String
  searchNameEn: String
  sepidarId: Float
  shortCode: String
  size: Float
  sizeIsCustomizable: Float
  sortOrder: Float
  stockCount: Float
  subproductSpecialImages: [SubproductSpecialImage!]
  subproductStockHistories: [SubproductStockHistory!]
  subproductVideos: [SubproductVideo!]
  torobProducts: [TorobProduct!]
  totalDislike: Float
  totalLike: Float
  updatedAt: DateTime
  userCarts: [UserCart!]
  userCarts2: [UserCart!]
  video: Video
  videoId: Float
  width: Float
}

input SubproductDomain {
  attributeSubproducts: [AttributeSubproductDomain!]!
  basicCarpetBorder: BasicCarpetBorderDomain!
  basicCarpetBorderId: Float
  basicCarpetBrand: BasicCarpetBrandDomain!
  basicCarpetBrandId: Float
  basicCarpetColor: BasicCarpetColorDomain!
  basicCarpetColorId: Float
  basicCarpetDesign: BasicCarpetDesignDomain!
  basicCarpetDesignId: Float
  basicCarpetDesigner: BasicCarpetDesignerDomain!
  basicCarpetDesignerId: Float
  basicCarpetMaterial: BasicCarpetMaterialDomain!
  basicCarpetMaterialId: Float
  basicCarpetSize: BasicCarpetSizeDomain!
  basicCarpetSizeId: Float
  basicCarpetType: BasicCarpetTypeDomain!
  basicCarpetTypeId: Float
  borderColor: String
  bundlePadPrice: String
  bundlePrice: String
  code: String
  colorCategoriesChanged: Float
  colorCategorySubproducts: [ColorCategorySubproductDomain!]!
  colorName: String
  colorNameEs: String
  colors: String
  couponSubjects: [CouponSubjectDomain!]!
  createdAt: DateTime
  description: String
  discountSubjects: [DiscountSubjectDomain!]!
  favoriteProducts: [FavoriteProductDomain!]!
  getStockCountFromSepidar: Boolean!
  id: ID!
  image: ImageDomain!
  imageId: Float
  imageSubproducts: [ImageSubproductDomain!]!
  invoiceProductHistories: [InvoiceProductHistoryDomain!]!
  invoiceProducts: [InvoiceProductDomain!]!
  isActive: Boolean!
  isOutOfStock: Boolean!
  length: Float
  mainImageChanged: Boolean
  name: String!
  nameEn: String
  needsPhotographySubproducts: [NeedsPhotographySubproductDomain!]!
  otherImagesChanged: Boolean!
  padPrice: String!
  preorders: [PreorderDomain!]!
  price: String
  product: ProductDomain!
  productComments: [ProductCommentDomain!]!
  productId: Float!
  productLikes: [ProductLikeDomain!]!
  productRateAverages: [ProductRateAverageDomain!]!
  productRates: [ProductRateDomain!]!
  productTags: [ProductTagDomain!]!
  rate: Float!
  rateCount: Float
  recommendedSubproducts: [RecommendedSubproductDomain!]!
  returnRequestItemHistories: [ReturnRequestItemHistoryDomain!]!
  returnRequestItems: [ReturnRequestItemDomain!]!
  returnedInvoiceProducts: [ReturnedInvoiceProductDomain!]!
  saleCount: Float!
  searchName: String
  searchNameEn: String
  sepidarId: Float
  shortCode: String
  size: Float!
  sizeIsCustomizable: Float!
  sortOrder: Float
  stockCount: Float
  subproductSpecialImages: [SubproductSpecialImageDomain!]!
  subproductStockHistories: [SubproductStockHistoryDomain!]!
  subproductVideos: [SubproductVideoDomain!]!
  torobProducts: [TorobProductDomain!]!
  totalDislike: Float!
  totalLike: Float!
  updatedAt: DateTime
  userCarts: [UserCartDomain!]!
  userCarts2: [UserCartDomain!]!
  video: VideoDomain!
  videoId: Float
  width: Float
}

type SubproductEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Subproduct"""
  node: Subproduct!
}

input SubproductFilter {
  and: [SubproductFilter!]
  id: IDFilterComparison
  or: [SubproductFilter!]
}

input SubproductSort {
  direction: SortDirection!
  field: SubproductSortFields!
  nulls: SortNulls
}

enum SubproductSortFields {
  id
}

type SubproductSpecialImage {
  createdAt: DateTime
  id: ID!
  image: Image!
  imageId: Float!
  sortOrder: Float
  subproduct: Subproduct!
  subproductId: Float!
  updatedAt: DateTime
}

type SubproductSpecialImageConnection {
  """Array of edges."""
  edges: [SubproductSpecialImageEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input SubproductSpecialImageDeleteFilter {
  and: [SubproductSpecialImageDeleteFilter!]
  id: IDFilterComparison
  or: [SubproductSpecialImageDeleteFilter!]
}

type SubproductSpecialImageDeleteResponse {
  createdAt: DateTime
  id: ID
  image: Image
  imageId: Float
  sortOrder: Float
  subproduct: Subproduct
  subproductId: Float
  updatedAt: DateTime
}

input SubproductSpecialImageDomain {
  createdAt: DateTime
  id: ID!
  image: ImageDomain!
  imageId: Float!
  sortOrder: Float
  subproduct: SubproductDomain!
  subproductId: Float!
  updatedAt: DateTime
}

type SubproductSpecialImageEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the SubproductSpecialImage"""
  node: SubproductSpecialImage!
}

input SubproductSpecialImageFilter {
  and: [SubproductSpecialImageFilter!]
  id: IDFilterComparison
  or: [SubproductSpecialImageFilter!]
}

input SubproductSpecialImageSort {
  direction: SortDirection!
  field: SubproductSpecialImageSortFields!
  nulls: SortNulls
}

enum SubproductSpecialImageSortFields {
  id
}

input SubproductSpecialImageUpdateFilter {
  and: [SubproductSpecialImageUpdateFilter!]
  id: IDFilterComparison
  or: [SubproductSpecialImageUpdateFilter!]
}

type SubproductStockHistory {
  createdAt: DateTime
  id: ID!
  invoiceProduct: InvoiceProduct
  invoiceProductId: Float
  newValue: Float!
  oldValue: Float!
  subproduct: Subproduct!
  subproductId: Float!
  updatedAt: DateTime
  user: User
  userId: Float
}

type SubproductStockHistoryConnection {
  """Array of edges."""
  edges: [SubproductStockHistoryEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input SubproductStockHistoryDeleteFilter {
  and: [SubproductStockHistoryDeleteFilter!]
  id: IDFilterComparison
  or: [SubproductStockHistoryDeleteFilter!]
}

type SubproductStockHistoryDeleteResponse {
  createdAt: DateTime
  id: ID
  invoiceProduct: InvoiceProduct
  invoiceProductId: Float
  newValue: Float
  oldValue: Float
  subproduct: Subproduct
  subproductId: Float
  updatedAt: DateTime
  user: User
  userId: Float
}

input SubproductStockHistoryDomain {
  createdAt: DateTime
  id: ID!
  invoiceProduct: InvoiceProductDomain
  invoiceProductId: Float
  newValue: Float!
  oldValue: Float!
  subproduct: SubproductDomain!
  subproductId: Float!
  updatedAt: DateTime
  user: UserDomain
  userId: Float
}

type SubproductStockHistoryEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the SubproductStockHistory"""
  node: SubproductStockHistory!
}

input SubproductStockHistoryFilter {
  and: [SubproductStockHistoryFilter!]
  id: IDFilterComparison
  or: [SubproductStockHistoryFilter!]
}

input SubproductStockHistorySort {
  direction: SortDirection!
  field: SubproductStockHistorySortFields!
  nulls: SortNulls
}

enum SubproductStockHistorySortFields {
  id
}

input SubproductStockHistoryUpdateFilter {
  and: [SubproductStockHistoryUpdateFilter!]
  id: IDFilterComparison
  or: [SubproductStockHistoryUpdateFilter!]
}

input SubproductUpdateFilter {
  and: [SubproductUpdateFilter!]
  id: IDFilterComparison
  or: [SubproductUpdateFilter!]
}

type SubproductVideo {
  createdAt: DateTime
  id: ID!
  sortOrder: Float
  subproduct: Subproduct!
  subproductId: Float!
  updatedAt: DateTime
  video: Video!
  videoId: Float!
}

type SubproductVideoConnection {
  """Array of edges."""
  edges: [SubproductVideoEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input SubproductVideoDeleteFilter {
  and: [SubproductVideoDeleteFilter!]
  id: IDFilterComparison
  or: [SubproductVideoDeleteFilter!]
}

type SubproductVideoDeleteResponse {
  createdAt: DateTime
  id: ID
  sortOrder: Float
  subproduct: Subproduct
  subproductId: Float
  updatedAt: DateTime
  video: Video
  videoId: Float
}

input SubproductVideoDomain {
  createdAt: DateTime
  id: ID!
  sortOrder: Float
  subproduct: SubproductDomain!
  subproductId: Float!
  updatedAt: DateTime
  video: VideoDomain!
  videoId: Float!
}

type SubproductVideoEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the SubproductVideo"""
  node: SubproductVideo!
}

input SubproductVideoFilter {
  and: [SubproductVideoFilter!]
  id: IDFilterComparison
  or: [SubproductVideoFilter!]
}

input SubproductVideoSort {
  direction: SortDirection!
  field: SubproductVideoSortFields!
  nulls: SortNulls
}

enum SubproductVideoSortFields {
  id
}

input SubproductVideoUpdateFilter {
  and: [SubproductVideoUpdateFilter!]
  id: IDFilterComparison
  or: [SubproductVideoUpdateFilter!]
}

type Subscriber {
  createdAt: DateTime
  email: String
  id: ID!
  mobile: String
  updatedAt: DateTime
}

type SubscriberConnection {
  """Array of edges."""
  edges: [SubscriberEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input SubscriberDeleteFilter {
  and: [SubscriberDeleteFilter!]
  id: IDFilterComparison
  or: [SubscriberDeleteFilter!]
}

type SubscriberDeleteResponse {
  createdAt: DateTime
  email: String
  id: ID
  mobile: String
  updatedAt: DateTime
}

input SubscriberDomain {
  createdAt: DateTime
  email: String
  id: ID!
  mobile: String
  updatedAt: DateTime
}

type SubscriberEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Subscriber"""
  node: Subscriber!
}

input SubscriberFilter {
  and: [SubscriberFilter!]
  id: IDFilterComparison
  or: [SubscriberFilter!]
}

input SubscriberSort {
  direction: SortDirection!
  field: SubscriberSortFields!
  nulls: SortNulls
}

enum SubscriberSortFields {
  id
}

input SubscriberUpdateFilter {
  and: [SubscriberUpdateFilter!]
  id: IDFilterComparison
  or: [SubscriberUpdateFilter!]
}

type Tag {
  columnOrder: Float!
  columnWidth: Float!
  createdAt: DateTime
  description: String
  descriptionEn: String
  discount: Float
  id: ID!
  image: Image
  imageId: Float
  isActive: Float
  metaTags: String
  metaTagsEn: String
  pageTitle: String
  pageTitleEn: String
  productTags: [ProductTag!]!
  searchTitle: String
  searchTitleEn: String
  sliderImage: Image
  sliderImageId: Float
  sortOrder: Float
  specialOffer: Boolean!
  title: String!
  titleEn: String
  updatedAt: DateTime
  urlSlug: String
  urlSlugEn: String
  viewCounter: Float
}

type TagConnection {
  """Array of edges."""
  edges: [TagEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input TagDeleteFilter {
  and: [TagDeleteFilter!]
  id: IDFilterComparison
  or: [TagDeleteFilter!]
}

type TagDeleteResponse {
  columnOrder: Float
  columnWidth: Float
  createdAt: DateTime
  description: String
  descriptionEn: String
  discount: Float
  id: ID
  image: Image
  imageId: Float
  isActive: Float
  metaTags: String
  metaTagsEn: String
  pageTitle: String
  pageTitleEn: String
  productTags: [ProductTag!]
  searchTitle: String
  searchTitleEn: String
  sliderImage: Image
  sliderImageId: Float
  sortOrder: Float
  specialOffer: Boolean
  title: String
  titleEn: String
  updatedAt: DateTime
  urlSlug: String
  urlSlugEn: String
  viewCounter: Float
}

input TagDomain {
  columnOrder: Float!
  columnWidth: Float!
  createdAt: DateTime
  description: String
  descriptionEn: String
  discount: Float
  id: ID!
  image: ImageDomain
  imageId: Float
  isActive: Float
  metaTags: String
  metaTagsEn: String
  pageTitle: String
  pageTitleEn: String
  productTags: [ProductTagDomain!]!
  searchTitle: String
  searchTitleEn: String
  sliderImage: ImageDomain
  sliderImageId: Float
  sortOrder: Float
  specialOffer: Boolean!
  title: String!
  titleEn: String
  updatedAt: DateTime
  urlSlug: String
  urlSlugEn: String
  viewCounter: Float
}

type TagEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Tag"""
  node: Tag!
}

input TagFilter {
  and: [TagFilter!]
  id: IDFilterComparison
  or: [TagFilter!]
}

input TagSort {
  direction: SortDirection!
  field: TagSortFields!
  nulls: SortNulls
}

enum TagSortFields {
  id
}

input TagUpdateFilter {
  and: [TagUpdateFilter!]
  id: IDFilterComparison
  or: [TagUpdateFilter!]
}

type TempSubproductDiscount {
  allDiscountId: Float
  allWithStockDiscountId: Float
  categoryDiscountId: Float
  createdAt: DateTime
  discountPercent: Float
  padDiscountPercent: Float
  padPriceMinusDiscount: String
  priceGroupDiscountId: Float
  priceMinusDiscount: String
  productDiscountId: Float
  sizeDiscountId: Float
  subproductDiscountId: Float
  totalDiscountPercent: Float
  updatedAt: DateTime
  viewProductId: Float!
  viewSubproductId: ID!
}

type TempSubproductDiscountConnection {
  """Array of edges."""
  edges: [TempSubproductDiscountEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input TempSubproductDiscountDeleteFilter {
  and: [TempSubproductDiscountDeleteFilter!]
  or: [TempSubproductDiscountDeleteFilter!]
  viewSubproductId: IDFilterComparison
}

type TempSubproductDiscountDeleteResponse {
  allDiscountId: Float
  allWithStockDiscountId: Float
  categoryDiscountId: Float
  createdAt: DateTime
  discountPercent: Float
  padDiscountPercent: Float
  padPriceMinusDiscount: String
  priceGroupDiscountId: Float
  priceMinusDiscount: String
  productDiscountId: Float
  sizeDiscountId: Float
  subproductDiscountId: Float
  totalDiscountPercent: Float
  updatedAt: DateTime
  viewProductId: Float
  viewSubproductId: ID
}

input TempSubproductDiscountDomain {
  allDiscountId: Float
  allWithStockDiscountId: Float
  categoryDiscountId: Float
  createdAt: DateTime
  discountPercent: Float
  padDiscountPercent: Float
  padPriceMinusDiscount: String
  priceGroupDiscountId: Float
  priceMinusDiscount: String
  productDiscountId: Float
  sizeDiscountId: Float
  subproductDiscountId: Float
  totalDiscountPercent: Float
  updatedAt: DateTime
  viewProductId: Float!
  viewSubproductId: ID!
}

type TempSubproductDiscountEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the TempSubproductDiscount"""
  node: TempSubproductDiscount!
}

input TempSubproductDiscountFilter {
  and: [TempSubproductDiscountFilter!]
  or: [TempSubproductDiscountFilter!]
  viewSubproductId: IDFilterComparison
}

input TempSubproductDiscountSort {
  direction: SortDirection!
  field: TempSubproductDiscountSortFields!
  nulls: SortNulls
}

enum TempSubproductDiscountSortFields {
  viewSubproductId
}

input TempSubproductDiscountUpdateFilter {
  and: [TempSubproductDiscountUpdateFilter!]
  or: [TempSubproductDiscountUpdateFilter!]
  viewSubproductId: IDFilterComparison
}

type Testimonial {
  createdAt: DateTime
  description: String
  id: ID!
  isActive: Boolean!
  link: String
  logoImage: String
  sortOrder: Float
  title: String!
  updatedAt: DateTime
}

type TestimonialConnection {
  """Array of edges."""
  edges: [TestimonialEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input TestimonialDeleteFilter {
  and: [TestimonialDeleteFilter!]
  id: IDFilterComparison
  or: [TestimonialDeleteFilter!]
}

type TestimonialDeleteResponse {
  createdAt: DateTime
  description: String
  id: ID
  isActive: Boolean
  link: String
  logoImage: String
  sortOrder: Float
  title: String
  updatedAt: DateTime
}

input TestimonialDomain {
  createdAt: DateTime
  description: String
  id: ID!
  isActive: Boolean!
  link: String
  logoImage: String
  sortOrder: Float
  title: String!
  updatedAt: DateTime
}

type TestimonialEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Testimonial"""
  node: Testimonial!
}

input TestimonialFilter {
  and: [TestimonialFilter!]
  id: IDFilterComparison
  or: [TestimonialFilter!]
}

input TestimonialSort {
  direction: SortDirection!
  field: TestimonialSortFields!
  nulls: SortNulls
}

enum TestimonialSortFields {
  id
}

input TestimonialUpdateFilter {
  and: [TestimonialUpdateFilter!]
  id: IDFilterComparison
  or: [TestimonialUpdateFilter!]
}

type TextLayer {
  alignment: String
  centerX: Float!
  centerY: Float!
  color: String
  createdAt: DateTime
  design: Design!
  designId: Float!
  fontName: String
  id: ID!
  letterSpacing: Float
  lineSpacing: Float
  rotation: Float!
  scaleX: Float!
  scaleY: Float!
  sortOrder: Float!
  text: String
  updatedAt: DateTime
}

type TextLayerConnection {
  """Array of edges."""
  edges: [TextLayerEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input TextLayerDeleteFilter {
  and: [TextLayerDeleteFilter!]
  id: IDFilterComparison
  or: [TextLayerDeleteFilter!]
}

type TextLayerDeleteResponse {
  alignment: String
  centerX: Float
  centerY: Float
  color: String
  createdAt: DateTime
  design: Design
  designId: Float
  fontName: String
  id: ID
  letterSpacing: Float
  lineSpacing: Float
  rotation: Float
  scaleX: Float
  scaleY: Float
  sortOrder: Float
  text: String
  updatedAt: DateTime
}

input TextLayerDomain {
  alignment: String
  centerX: Float!
  centerY: Float!
  color: String
  createdAt: DateTime
  design: DesignDomain!
  designId: Float!
  fontName: String
  id: ID!
  letterSpacing: Float
  lineSpacing: Float
  rotation: Float!
  scaleX: Float!
  scaleY: Float!
  sortOrder: Float!
  text: String
  updatedAt: DateTime
}

type TextLayerEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the TextLayer"""
  node: TextLayer!
}

input TextLayerFilter {
  and: [TextLayerFilter!]
  id: IDFilterComparison
  or: [TextLayerFilter!]
}

input TextLayerSort {
  direction: SortDirection!
  field: TextLayerSortFields!
  nulls: SortNulls
}

enum TextLayerSortFields {
  id
}

input TextLayerUpdateFilter {
  and: [TextLayerUpdateFilter!]
  id: IDFilterComparison
  or: [TextLayerUpdateFilter!]
}

type TmpRfmReport {
  id: ID!
  kharid1: String!
  kharid2: String!
  kharid3: String!
  kharid4: String!
  kharid5: String!
  name: String!
  phone: String
}

type TmpRfmReportConnection {
  """Array of edges."""
  edges: [TmpRfmReportEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input TmpRfmReportDeleteFilter {
  and: [TmpRfmReportDeleteFilter!]
  id: IDFilterComparison
  or: [TmpRfmReportDeleteFilter!]
}

type TmpRfmReportDeleteResponse {
  id: ID
  kharid1: String
  kharid2: String
  kharid3: String
  kharid4: String
  kharid5: String
  name: String
  phone: String
}

input TmpRfmReportDomain {
  id: ID!
  kharid1: String!
  kharid2: String!
  kharid3: String!
  kharid4: String!
  kharid5: String!
  name: String!
  phone: String
}

type TmpRfmReportEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the TmpRfmReport"""
  node: TmpRfmReport!
}

input TmpRfmReportFilter {
  and: [TmpRfmReportFilter!]
  id: IDFilterComparison
  or: [TmpRfmReportFilter!]
}

input TmpRfmReportSort {
  direction: SortDirection!
  field: TmpRfmReportSortFields!
  nulls: SortNulls
}

enum TmpRfmReportSortFields {
  id
}

input TmpRfmReportUpdateFilter {
  and: [TmpRfmReportUpdateFilter!]
  id: IDFilterComparison
  or: [TmpRfmReportUpdateFilter!]
}

type TmpRussiaProduct {
  borderCode: String
  code: String
  colorCode: String
  count: Float
  id: ID!
  productCode: String
  sizeCode: String
}

type TmpRussiaProductConnection {
  """Array of edges."""
  edges: [TmpRussiaProductEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input TmpRussiaProductDeleteFilter {
  and: [TmpRussiaProductDeleteFilter!]
  id: IDFilterComparison
  or: [TmpRussiaProductDeleteFilter!]
}

type TmpRussiaProductDeleteResponse {
  borderCode: String
  code: String
  colorCode: String
  count: Float
  id: ID
  productCode: String
  sizeCode: String
}

input TmpRussiaProductDomain {
  borderCode: String
  code: String
  colorCode: String
  count: Float
  id: ID!
  productCode: String
  sizeCode: String
}

type TmpRussiaProductEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the TmpRussiaProduct"""
  node: TmpRussiaProduct!
}

input TmpRussiaProductFilter {
  and: [TmpRussiaProductFilter!]
  id: IDFilterComparison
  or: [TmpRussiaProductFilter!]
}

input TmpRussiaProductSort {
  direction: SortDirection!
  field: TmpRussiaProductSortFields!
  nulls: SortNulls
}

enum TmpRussiaProductSortFields {
  id
}

input TmpRussiaProductUpdateFilter {
  and: [TmpRussiaProductUpdateFilter!]
  id: IDFilterComparison
  or: [TmpRussiaProductUpdateFilter!]
}

type TmpSpainOrder {
  cnt_02: Float
  cnt_03: Float
  cnt_06: Float
  cnt_25: Float
  cnt_28: Float
  cnt_60: Float
  cnt_75: Float
  cnt_80: Float
  color: String
  colorCode: String
  design: String
  id: Float
  row: ID!
}

type TmpSpainOrderConnection {
  """Array of edges."""
  edges: [TmpSpainOrderEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input TmpSpainOrderDeleteFilter {
  and: [TmpSpainOrderDeleteFilter!]
  or: [TmpSpainOrderDeleteFilter!]
  row: IDFilterComparison
}

type TmpSpainOrderDeleteResponse {
  cnt_02: Float
  cnt_03: Float
  cnt_06: Float
  cnt_25: Float
  cnt_28: Float
  cnt_60: Float
  cnt_75: Float
  cnt_80: Float
  color: String
  colorCode: String
  design: String
  id: Float
  row: ID
}

input TmpSpainOrderDomain {
  cnt_02: Float
  cnt_03: Float
  cnt_06: Float
  cnt_25: Float
  cnt_28: Float
  cnt_60: Float
  cnt_75: Float
  cnt_80: Float
  color: String
  colorCode: String
  design: String
  id: Float
  row: ID!
}

type TmpSpainOrderEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the TmpSpainOrder"""
  node: TmpSpainOrder!
}

input TmpSpainOrderFilter {
  and: [TmpSpainOrderFilter!]
  or: [TmpSpainOrderFilter!]
  row: IDFilterComparison
}

input TmpSpainOrderSort {
  direction: SortDirection!
  field: TmpSpainOrderSortFields!
  nulls: SortNulls
}

enum TmpSpainOrderSortFields {
  row
}

input TmpSpainOrderUpdateFilter {
  and: [TmpSpainOrderUpdateFilter!]
  or: [TmpSpainOrderUpdateFilter!]
  row: IDFilterComparison
}

type TmpSpanishName {
  colorId: Float
  name: ID!
  nameEs: String
  productId: Float
  spanishTitle: String
  title: String
}

type TmpSpanishNameConnection {
  """Array of edges."""
  edges: [TmpSpanishNameEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input TmpSpanishNameDeleteFilter {
  and: [TmpSpanishNameDeleteFilter!]
  name: IDFilterComparison
  or: [TmpSpanishNameDeleteFilter!]
}

type TmpSpanishNameDeleteResponse {
  colorId: Float
  name: ID
  nameEs: String
  productId: Float
  spanishTitle: String
  title: String
}

input TmpSpanishNameDomain {
  colorId: Float
  name: ID!
  nameEs: String
  productId: Float
  spanishTitle: String
  title: String
}

type TmpSpanishNameEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the TmpSpanishName"""
  node: TmpSpanishName!
}

input TmpSpanishNameFilter {
  and: [TmpSpanishNameFilter!]
  name: IDFilterComparison
  or: [TmpSpanishNameFilter!]
}

input TmpSpanishNameSort {
  direction: SortDirection!
  field: TmpSpanishNameSortFields!
  nulls: SortNulls
}

enum TmpSpanishNameSortFields {
  name
}

input TmpSpanishNameUpdateFilter {
  and: [TmpSpanishNameUpdateFilter!]
  name: IDFilterComparison
  or: [TmpSpanishNameUpdateFilter!]
}

type TmpTagChangesPrint {
  code: String
  count: Float
  id: ID!
  oldCode: String
  size: String
}

type TmpTagChangesPrintConnection {
  """Array of edges."""
  edges: [TmpTagChangesPrintEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input TmpTagChangesPrintDeleteFilter {
  and: [TmpTagChangesPrintDeleteFilter!]
  id: IDFilterComparison
  or: [TmpTagChangesPrintDeleteFilter!]
}

type TmpTagChangesPrintDeleteResponse {
  code: String
  count: Float
  id: ID
  oldCode: String
  size: String
}

input TmpTagChangesPrintDomain {
  code: String
  count: Float
  id: ID!
  oldCode: String
  size: String
}

type TmpTagChangesPrintEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the TmpTagChangesPrint"""
  node: TmpTagChangesPrint!
}

input TmpTagChangesPrintFilter {
  and: [TmpTagChangesPrintFilter!]
  id: IDFilterComparison
  or: [TmpTagChangesPrintFilter!]
}

input TmpTagChangesPrintSort {
  direction: SortDirection!
  field: TmpTagChangesPrintSortFields!
  nulls: SortNulls
}

enum TmpTagChangesPrintSortFields {
  id
}

input TmpTagChangesPrintUpdateFilter {
  and: [TmpTagChangesPrintUpdateFilter!]
  id: IDFilterComparison
  or: [TmpTagChangesPrintUpdateFilter!]
}

type TorobProduct {
  basicCarpetColor: BasicCarpetColor
  basicCarpetColorId: Float
  basicCarpetSize: BasicCarpetSize
  basicCarpetSizeId: Float
  colorTitle: String
  createdAt: DateTime
  deletedAt: DateTime
  id: ID!
  name: String
  product: Product
  productCategoryId: Float
  productId: Float!
  sizeTitle: String
  subproduct: Subproduct
  subproductId: Float!
  torobCategory: String
  updatedAt: DateTime
}

type TorobProductConnection {
  """Array of edges."""
  edges: [TorobProductEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input TorobProductDeleteFilter {
  and: [TorobProductDeleteFilter!]
  id: IDFilterComparison
  or: [TorobProductDeleteFilter!]
}

type TorobProductDeleteResponse {
  basicCarpetColor: BasicCarpetColor
  basicCarpetColorId: Float
  basicCarpetSize: BasicCarpetSize
  basicCarpetSizeId: Float
  colorTitle: String
  createdAt: DateTime
  deletedAt: DateTime
  id: ID
  name: String
  product: Product
  productCategoryId: Float
  productId: Float
  sizeTitle: String
  subproduct: Subproduct
  subproductId: Float
  torobCategory: String
  updatedAt: DateTime
}

input TorobProductDomain {
  basicCarpetColor: BasicCarpetColorDomain
  basicCarpetColorId: Float
  basicCarpetSize: BasicCarpetSizeDomain
  basicCarpetSizeId: Float
  colorTitle: String
  createdAt: DateTime
  deletedAt: DateTime
  id: ID!
  name: String
  product: ProductDomain
  productCategoryId: Float
  productId: Float!
  sizeTitle: String
  subproduct: SubproductDomain
  subproductId: Float!
  torobCategory: String
  updatedAt: DateTime
}

type TorobProductEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the TorobProduct"""
  node: TorobProduct!
}

input TorobProductFilter {
  and: [TorobProductFilter!]
  id: IDFilterComparison
  or: [TorobProductFilter!]
}

input TorobProductSort {
  direction: SortDirection!
  field: TorobProductSortFields!
  nulls: SortNulls
}

enum TorobProductSortFields {
  id
}

input TorobProductUpdateFilter {
  and: [TorobProductUpdateFilter!]
  id: IDFilterComparison
  or: [TorobProductUpdateFilter!]
}

type Transaction {
  amount: Float!
  approved: Boolean!
  approvedBy: Float
  approvedBy2: User
  createdAt: DateTime
  description: String
  id: ID!
  modelId: Float!
  modelType: String!
  modemaBlocked: Float!
  tempInvoiceNumber: String
  updatedAt: DateTime
  user: User!
  userBlocked: Float!
  userId: Float!
  walletHistories: [WalletHistory!]!
  withdrawable: Float!
}

type TransactionConnection {
  """Array of edges."""
  edges: [TransactionEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input TransactionDeleteFilter {
  and: [TransactionDeleteFilter!]
  id: IDFilterComparison
  or: [TransactionDeleteFilter!]
}

type TransactionDeleteResponse {
  amount: Float
  approved: Boolean
  approvedBy: Float
  approvedBy2: User
  createdAt: DateTime
  description: String
  id: ID
  modelId: Float
  modelType: String
  modemaBlocked: Float
  tempInvoiceNumber: String
  updatedAt: DateTime
  user: User
  userBlocked: Float
  userId: Float
  walletHistories: [WalletHistory!]
  withdrawable: Float
}

input TransactionDomain {
  amount: Float!
  approved: Boolean!
  approvedBy: Float
  approvedBy2: UserDomain
  createdAt: DateTime
  description: String
  id: ID!
  modelId: Float!
  modelType: String!
  modemaBlocked: Float!
  tempInvoiceNumber: String
  updatedAt: DateTime
  user: UserDomain!
  userBlocked: Float!
  userId: Float!
  walletHistories: [WalletHistoryDomain!]!
  withdrawable: Float!
}

type TransactionEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Transaction"""
  node: Transaction!
}

input TransactionFilter {
  and: [TransactionFilter!]
  id: IDFilterComparison
  or: [TransactionFilter!]
}

input TransactionSort {
  direction: SortDirection!
  field: TransactionSortFields!
  nulls: SortNulls
}

enum TransactionSortFields {
  id
}

input TransactionUpdateFilter {
  and: [TransactionUpdateFilter!]
  id: IDFilterComparison
  or: [TransactionUpdateFilter!]
}

input UpdateActivity {
  action: String
  contentId: Float
  contentType: String
  createdAt: DateTime
  deletedUserId: Float
  description: String
  details: String
  id: ID
  updatedAt: DateTime
  userId: Float
  userName: String
}

input UpdateAddress {
  address: String
  address2: String
  city: CityDomain
  cityId: Float
  country: CountryDomain
  countryId: Float
  createdAt: DateTime
  crmCompanyId: String
  crmCompanyPersonId: String
  deletedAt: DateTime
  email: String
  fullAddress: String
  fullname: String
  fullnameDescription: String
  fullnameTrimmed: String
  id: ID
  invoiceAddressValidationResults: [InvoiceAddressValidationResultDomain!]
  invoiceAddresses: [InvoiceAddressDomain!]
  invoiceRatesResults: [InvoiceRatesResultDomain!]
  invoices: [InvoiceDomain!]
  latitude: String
  longitude: String
  nationalId: String
  oldAddress: String
  phone: String
  phone2: String
  returnRequestAddresses: [ReturnRequestAddressDomain!]
  sepidarId: Float
  state: StateDomain
  stateId: Float
  updatedAt: DateTime
  user: UserDomain
  userId: Float
  zipCode: String
}

input UpdateAttribute {
  createdAt: DateTime
  id: ID
  isActive: Float
  name: String
  sortOrder: Float
  type: Float
  updatedAt: DateTime
}

input UpdateAttributeAttributeGroup {
  attribute: AttributeDomain
  attributeGroup: AttributeGroupDomain
  attributeGroupId: Float
  attributeId: Float
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
}

input UpdateAttributeGroup {
  attributeAttributeGroups: [AttributeAttributeGroupDomain!]
  attributeItems: [AttributeItemDomain!]
  createdAt: DateTime
  generalName: String
  id: ID
  isActive: Float
  name: String
  productCategory: ProductCategoryDomain
  productCategoryId: Float
  sortOrder: Float
  updatedAt: DateTime
}

input UpdateAttributeItem {
  attribute: AttributeDomain
  attributeGroup: AttributeGroupDomain
  attributeGroupId: Float
  attributeId: Float
  attributeProducts: [AttributeProductDomain!]
  attributeSubproducts: [AttributeSubproductDomain!]
  createdAt: DateTime
  id: ID
  name: String
  updatedAt: DateTime
}

input UpdateAttributeProduct {
  attribute: AttributeDomain
  attributeId: Float
  attributeItem: AttributeItemDomain
  attributeItemId: Float
  createdAt: DateTime
  id: ID
  isChecked: Boolean
  product: ProductDomain
  productId: Float
  sortOrder: Float
  updatedAt: DateTime
  value: String
}

input UpdateAttributeSubproduct {
  attribute: AttributeDomain
  attributeId: Float
  attributeItem: AttributeItemDomain
  attributeItemId: Float
  createdAt: DateTime
  id: ID
  isChecked: Boolean
  subproduct: SubproductDomain
  subproductId: Float
  updatedAt: DateTime
  value: String
}

input UpdateAutomationEvent {
  createdAt: DateTime
  deletedAt: DateTime
  event: String
  eventDate: String
  eventDatetime: DateTime
  eventTimestamp: String
  id: ID
  lastEec: String
  messages: String
  onlineSheetSaved: Boolean = false
  rfmCat: String
  rfmScore: String
  smsSent: Boolean = false
  status: String
  triggerDatetime: DateTime
  type: String
  typeId: Float
  updatedAt: DateTime
  user: UserDomain
  userContact: String
  userId: Float
  userName: String
  userUid: Float
}

input UpdateAutomationRfmScore {
  id: ID
  rfmScore: String
  rfmScoreCode: String
  rfmScoreTitle: String
}

input UpdateBasicCarpetBorder {
  code: String
  createdAt: DateTime
  id: ID
  isActive: Boolean = true
  sortOrder: Float
  subproducts: [SubproductDomain!]
  title: String
  updatedAt: DateTime
}

input UpdateBasicCarpetBrand {
  code: String
  createdAt: DateTime
  id: ID
  isActive: Boolean
  sortOrder: Float
  title: String
  updatedAt: DateTime
}

input UpdateBasicCarpetColor {
  code: String
  colorCode: String
  createdAt: DateTime = "2025-04-19T11:22:46.028Z"
  englishTitle: String
  id: ID
  incredibleOffers: [IncredibleOfferDomain!]
  isActive: Boolean = true
  persianTitle: String
  productColorImages: [ProductColorImageDomain!]
  productColorSales: [ProductColorSaleDomain!]
  productVideos: [ProductVideoDomain!]
  products: [ProductDomain!]
  russianTitle: String
  shortCode: String
  sortOrder: Float
  spanishTitle: String
  subproducts: [SubproductDomain!]
  title: String
  torobProducts: [TorobProductDomain!]
  updatedAt: DateTime
}

input UpdateBasicCarpetDesign {
  code: String
  createdAt: DateTime = "2025-04-19T11:22:46.044Z"
  id: ID
  isActive: Boolean = true
  sortOrder: Float
  subproducts: [SubproductDomain!]
  title: String
  updatedAt: DateTime
}

input UpdateBasicCarpetDesigner {
  city: CityDomain
  cityId: Float
  code: String
  country: CountryDomain
  countryId: Float
  createdAt: DateTime = "2025-04-19T11:22:46.108Z"
  description: String
  facebookId: String
  headerImage: String
  id: ID
  instagramId: String
  isActive: Boolean = true
  linkedinId: String
  pricePercentage: Float = 0
  profilePicture: String
  selfEmployed: Boolean = false
  sortOrder: Float
  state: StateDomain
  stateId: Float
  subproducts: [SubproductDomain!]
  title: String
  twitterId: String
  updatedAt: DateTime
  user: UserDomain
  userId: Float
}

input UpdateBasicCarpetMaterial {
  code: String
  createdAt: DateTime = "2025-04-19T11:22:46.045Z"
  id: ID
  isActive: Boolean = true
  sortOrder: Float
  subproducts: [SubproductDomain!]
  title: String
  updatedAt: DateTime
}

input UpdateBasicCarpetSize {
  altText: String
  altTextEn: String
  basicCarpetSizeDetails: [BasicCarpetSizeDetailDomain!]
  campaignFreeOfferSizes: [CampaignFreeOfferSizeDomain!]
  carpetVolume: Float = 0
  code: String
  couponSubjects: [CouponSubjectDomain!]
  createdAt: DateTime = "2025-04-19T11:22:46.070Z"
  description: String
  descriptionEn: String
  designersProductPriceRanges: [DesignersProductPriceRangeDomain!]
  discountSubjects: [DiscountSubjectDomain!]
  homepageImageId: Float
  id: ID
  image: ImageDomain
  imageId: Float
  isActive: Boolean = true
  length: Float
  lengthText: String
  metaTags: String
  metaTagsEn: String
  mobileImage: ImageDomain
  mobileImageId: Float
  padVolume: Float = 0
  pageTitle: String
  pageTitleEn: String
  priceGroupSizes: [PriceGroupSizeDomain!]
  productionPads: [ProductionPadDomain!]
  products: [ProductDomain!]
  ripTemplateItems: [RipTemplateItemDomain!]
  sizeText: String
  sizeTextEn: String
  sortOrder: Float
  subproducts: [SubproductDomain!]
  title: String
  titleEn: String
  torobProducts: [TorobProductDomain!]
  unitRatio: Float
  updatedAt: DateTime
  urlSlug: String
  urlSlugEn: String
  viewCounter: Float = 0
  width: Float
  widthText: String
}

input UpdateBasicCarpetSizeDetail {
  basicCarpetSize: BasicCarpetSizeDomain
  basicCarpetSizeId: Float
  createdAt: DateTime
  detailText: String
  detailTextEn: String
  id: ID
  isActive: Boolean = true
  sortOrder: Float
  title: String
  titleEn: String
  updatedAt: DateTime
}

input UpdateBasicCarpetType {
  code: String
  createdAt: DateTime = "2025-04-19T11:22:46.047Z"
  id: ID
  isActive: Boolean = true
  sortOrder: Float
  subproducts: [SubproductDomain!]
  title: String
  updatedAt: DateTime
}

input UpdateBorder {
  code: String
  count: Float
  id: ID
}

input UpdateCampaignFreeOffer {
  campaignFreeOfferSizes: [CampaignFreeOfferSizeDomain!]
  createdAt: DateTime
  id: ID
  isActive: Boolean = true
  minPrice: String
  updatedAt: DateTime
}

input UpdateCampaignFreeOfferSize {
  basicCarpetSize: BasicCarpetSizeDomain
  basicCarpetSizeId: Float
  campaignFreeOffer: CampaignFreeOfferDomain
  campaignFreeOfferId: Float
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
}

input UpdateCampaignGoldCoinSub {
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
  user: UserDomain
  userId: Float
}

input UpdateCampaignInstagramFollow {
  answerNo: Int
  birthYear: Int
  createdAt: DateTime
  id: ID
  image1: String
  image2: String
  name: String
  phone: String
  phoneVerified: Boolean
  sex: Int
  updatedAt: DateTime
  user: UserDomain
  userId: Int
  verificationCode: String
}

input UpdateCampaignPetForm {
  coupon: CouponDomain
  couponId: Float
  createdAt: DateTime
  discountAmount: Float = 0
  donationAmount: Float = 0
  filename: String
  id: ID
  mime: String
  originalFilename: String
  path: String = "/"
  petName: String
  updatedAt: DateTime
  user: UserDomain
  userId: Float
}

input UpdateCampaignRoomvoImage {
  campaignRoomvoVotes: [CampaignRoomvoVoteDomain!]
  createdAt: DateTime
  filename: String
  id: ID
  mime: String
  originalFilename: String
  path: String
  updatedAt: DateTime
  user: UserDomain
  userId: Float
  votesCount: Float = 0
}

input UpdateCampaignRoomvoVote {
  campaignRoomvoImage: CampaignRoomvoImageDomain
  campaignRoomvoImageId: Float
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
  user: UserDomain
  userId: Float
}

input UpdateCampaignSubscription {
  campaignName: String
  code: Int
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
  user: UserDomain
  userId: Int
}

input UpdateCampaignUefaEuroSubscriber {
  campaignUefaEuroSubscriberHistories: [CampaignUefaEuroSubscriberHistoryDomain!]
  contactFormStatus: ContactFormStatusDomain
  contactFormStatusId: Float = 1
  createdAt: DateTime
  id: ID
  mobile: String
  status: Float = 1
  updatedAt: DateTime
  user: UserDomain
  userId: Float
}

input UpdateCampaignUefaEuroSubscriberHistory {
  campaignUefaEuroSubscriber: CampaignUefaEuroSubscriberDomain
  campaignUefaEuroSubscriberId: Float
  comment: String
  contactFormStatus: ContactFormStatusDomain
  contactFormStatusId: Float
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
  user: UserDomain
  userId: Float
}

input UpdateCampaignVotingImage {
  campaignNo: Float
  createdAt: DateTime
  id: ID
  image: ImageDomain
  imageId: Float
  isActive: Boolean = true
  sortOrder: Float = 1
  title: String
  updatedAt: DateTime
}

input UpdateCampaignVotingImageUser {
  chargedAmount: String = "0.00"
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
  user: UserDomain
  userId: Float
  votedCampaignImageIds: String
  walletCharged: Boolean = false
}

input UpdateCarpetFeature {
  carpetFeatureUsers: [CarpetFeatureUserDomain!]
  createdAt: DateTime
  id: ID
  isActive: Boolean = true
  sortOrder: Float
  title: String
  updatedAt: DateTime
}

input UpdateCarpetFeatureUser {
  carpetFeature: CarpetFeatureDomain
  carpetFeatureId: Float
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
  user: UserDomain
  userId: Float
}

input UpdateCarpetMaterial {
  createdAt: DateTime
  designs: [DesignDomain!]
  id: ID
  isActive: Boolean = true
  name: String
  pricePerInch: Float
  sortOrder: Float
  updatedAt: DateTime
}

input UpdateCarpetShape {
  createdAt: DateTime
  designs: [DesignDomain!]
  hasLength: Boolean = true
  id: ID
  isActive: Boolean = true
  maxLength: Float
  maxWidth: Float
  minLength: Float
  minWidth: Float
  name: String
  sortOrder: Float
  updatedAt: DateTime
}

input UpdateCarpetSize {
  createdAt: DateTime
  id: ID
  isActive: Boolean = true
  length: Float
  sortOrder: Float
  updatedAt: DateTime
  width: Float
}

input UpdateCarpetUsagePlace {
  carpetUsagePlaceInvoiceProducts: [CarpetUsagePlaceInvoiceProductDomain!]
  carpetUsagePlaceUsers: [CarpetUsagePlaceUserDomain!]
  createdAt: DateTime
  id: ID
  isActive: Boolean = true
  sortOrder: Float
  title: String
  updatedAt: DateTime
}

input UpdateCarpetUsagePlaceInvoiceProduct {
  carpetUsagePlace: CarpetUsagePlaceDomain
  carpetUsagePlaceId: Float
  createdAt: DateTime
  id: ID
  invoiceProduct: InvoiceProductDomain
  invoiceProductId: Float
  row: Float
  updatedAt: DateTime
}

input UpdateCarpetUsagePlaceUser {
  carpetUsagePlace: CarpetUsagePlaceDomain
  carpetUsagePlaceId: Float
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
  user: UserDomain
  userId: Float
}

input UpdateChaparSettlementStatus {
  createdAt: DateTime
  id: ID
  invoices: [InvoiceDomain!]
  status: String
  updatedAt: DateTime
}

input UpdateChaparTrackingHistory {
  createdAt: DateTime
  date: String
  id: ID
  invoice: InvoiceDomain
  invoiceId: Float
  reference: String
  status: String
  statusNote: String
  time: String
  tracking: String
  updatedAt: DateTime
}

input UpdateCitiesSepidar {
  cityId: Float
  id: ID
  name: String
  sepidarStateId: Float
  stateId: Float
  stateName: String
}

input UpdateCity {
  addresses: [AddressDomain!]
  basicCarpetDesigners: [BasicCarpetDesignerDomain!]
  chaparId: Float
  code: String
  createdAt: DateTime
  id: ID
  invoiceAddresses: [InvoiceAddressDomain!]
  mahexCode: String
  name: String
  returnRequestAddresses: [ReturnRequestAddressDomain!]
  senderInformations: [SenderInformationDomain!]
  sepidarId: Float
  state: StateDomain
  stateId: Float
  tipaxId: Float
  updatedAt: DateTime
}

input UpdateCity2 {
  id: ID
  sepidarId: Float
}

input UpdateColor {
  colorCode: String
  colorCodeOriginal: String
  colorName: String
  hexCode: String
  id: ID
  subcolors: [SubcolorDomain!]
}

input UpdateColorCategory {
  altText: String
  altTextEn: String
  color: String
  colorCategoryDetails: [ColorCategoryDetailDomain!]
  colorCategorySubproducts: [ColorCategorySubproductDomain!]
  createdAt: DateTime
  description: String
  descriptionEn: String
  homepageImage: ImageDomain
  homepageImageId: Float
  id: ID
  image: ImageDomain
  imageId: Float
  isActive: Boolean
  metaTags: String
  metaTagsEn: String
  mobileImage: ImageDomain
  mobileImageId: Float
  name: String
  nameEn: String
  pageTitle: String
  pageTitleEn: String
  sortOrder: Float
  updatedAt: DateTime
  urlSlug: String
  urlSlugEn: String
  viewCounter: Float
}

input UpdateColorCategoryDetail {
  colorCategory: ColorCategoryDomain
  colorCategoryId: Float
  createdAt: DateTime
  detailText: String
  detailTextEn: String
  id: ID
  isActive: Boolean
  sortOrder: Float
  title: String
  titleEn: String
  updatedAt: DateTime
}

input UpdateColorCategorySubproduct {
  colorCategory: ColorCategoryDomain
  colorCategoryId: Float
  createdAt: DateTime
  id: ID
  subproduct: SubproductDomain
  subproductId: Float
  updatedAt: DateTime
}

input UpdateConfig {
  createdAt: DateTime
  id: ID
  key: String
  updatedAt: DateTime
  value: String
}

input UpdateContactForm {
  answer1: String
  answer2: String
  answer3: String
  city: String
  contactFormHistories: [ContactFormHistoryDomain!]
  contactFormStatus: ContactFormStatusDomain
  contactFormStatusId: Float
  country: CountryDomain
  countryId: Float
  createdAt: DateTime
  department: DepartmentDomain
  departmentId: Float
  email: String
  id: ID
  name: String
  phone: String
  text: String
  updatedAt: DateTime
  user: UserDomain
  userId: Float
}

input UpdateContactFormHistory {
  comment: String
  contactForm: ContactFormDomain
  contactFormId: Float
  contactFormStatus: ContactFormStatusDomain
  contactFormStatusId: Float
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
  user: UserDomain
  userId: Float
}

input UpdateContactFormStatus {
  campaignUefaEuroSubscriberHistories: [CampaignUefaEuroSubscriberHistoryDomain!]
  campaignUefaEuroSubscribers: [CampaignUefaEuroSubscriberDomain!]
  contactFormHistories: [ContactFormHistoryDomain!]
  contactForms: [ContactFormDomain!]
  createdAt: DateTime
  id: ID
  status: String
  updatedAt: DateTime
}

input UpdateCountry {
  addresses: [AddressDomain!]
  basicCarpetDesigners: [BasicCarpetDesignerDomain!]
  chaparId: Float
  contactForms: [ContactFormDomain!]
  createdAt: DateTime
  id: ID
  invoiceAddresses: [InvoiceAddressDomain!]
  name: String
  phoneCode: Float
  returnRequestAddresses: [ReturnRequestAddressDomain!]
  senderInformations: [SenderInformationDomain!]
  sortName: String
  states: [StateDomain!]
  tipaxId: Float
  updatedAt: DateTime
}

input UpdateCoupon {
  campaignPetForms: [CampaignPetFormDomain!]
  code: String
  couponSubjects: [CouponSubjectDomain!]
  createdAt: DateTime
  createdBy: Float
  createdBy2: UserDomain
  discount: String
  endDate: DateTime
  forNewCustomersOnly: Boolean
  forOldCustomersOnly: Boolean
  forReadyProductsOnly: Boolean
  id: ID
  invoices: [InvoiceDomain!]
  isActive: Float
  isApplicableToDiscountedProducts: Float
  maxDiscountPrice: String
  maxPercent: Float
  maxUsage: Float
  minInvoicePrice: String
  name: String
  offType: Float
  onlyForOneItem: Boolean
  onlyForOutOfStocks: Float
  retargetingInvoice: InvoiceDomain
  retargetingInvoiceId: Float
  retargetingUser: UserDomain
  retargetingUserId: Float
  returnRequests: [ReturnRequestDomain!]
  sortOrder: Float
  startDate: DateTime
  updatedAt: DateTime
  updatedBy: Float
  updatedBy2: UserDomain
  user: UserDomain
  userId: Float
  utmGoogleFormCoupons: [UtmGoogleFormCouponDomain!]
}

input UpdateCouponSubject {
  basicCarpetSize: BasicCarpetSizeDomain
  basicCarpetSizeId: Float
  coupon: CouponDomain
  couponId: Float
  createdAt: DateTime
  id: ID
  product: ProductDomain
  productCategory: ProductCategoryDomain
  productCategoryId: Float
  productId: Float
  subproduct: SubproductDomain
  subproductId: Float
  updatedAt: DateTime
}

input UpdateCrmPresentation {
  mobile: ID
  optionId: Float
}

input UpdateCustomerImageProduct {
  createdAt: DateTime
  id: ID
  image: ImageDomain
  imageId: Float
  product: ProductDomain
  productId: Float
  sortOrder: Float
  updatedAt: DateTime
}

input UpdateCustomerRequest {
  createdAt: DateTime
  customerRequestFiles: [CustomerRequestFileDomain!]
  id: ID
  name: String
  phone: String
  updatedAt: DateTime
  user: UserDomain
  userId: Float
  uuid: String
}

input UpdateCustomerRequestFile {
  createdAt: DateTime
  customerRequest: CustomerRequestDomain
  customerRequestId: Float
  filename: String
  id: ID
  mime: String
  originalFilename: String
  path: String = "/"
  updatedAt: DateTime
}

input UpdateCustomerVideoProduct {
  createdAt: DateTime
  id: ID
  product: ProductDomain
  productId: Float
  sortOrder: Float = 0
  updatedAt: DateTime
  video: VideoDomain
  videoId: Float
}

input UpdateDamageReason {
  cause: String
  createdAt: DateTime
  department: String
  id: ID
  invoiceProductItems: [InvoiceProductItemDomain!]
  name: String
  updatedAt: DateTime
}

input UpdateDepartment {
  contactForms: [ContactFormDomain!]
  createdAt: DateTime
  id: ID
  name: String
  nameEn: String
  updatedAt: DateTime
}

input UpdateDesign {
  backgroundColor: String = "#FFFFFF"
  borderColor: String = "#FFFFFF"
  carpetMaterial: CarpetMaterialDomain
  carpetMaterialId: Float
  carpetShape: CarpetShapeDomain
  carpetShapeId: Float = 1
  createdAt: DateTime
  deletedAt: DateTime
  filename: String
  fringeColor: String = "#FFFFFF"
  id: ID
  imageLayers: [ImageLayerDomain!]
  invoiceProductHistories: [InvoiceProductHistoryDomain!]
  invoiceProducts: [InvoiceProductDomain!]
  length: Float = 0
  name: String
  path: String = "/"
  patternLayers: [PatternLayerDomain!]
  textLayers: [TextLayerDomain!]
  updatedAt: DateTime
  user: UserDomain
  userCarts: [UserCartDomain!]
  userId: Float
  width: Float = 0
}

input UpdateDesignersProductPriceRange {
  basicCarpetSize: BasicCarpetSizeDomain
  basicCarpetSizeId: Float
  createdAt: DateTime
  id: ID
  maxPrice: Float
  minPrice: Float
  updatedAt: DateTime
}

input UpdateDiscount {
  createdAt: DateTime
  createdBy: Float
  createdBy2: UserDomain
  discount: String
  discountSubjects: [DiscountSubjectDomain!]
  endDate: DateTime
  hasStockCountOnly: Boolean = false
  id: ID
  incredibleOffers: [IncredibleOfferDomain!]
  invoiceProductHistories: [InvoiceProductHistoryDomain!]
  invoiceProducts: [InvoiceProductDomain!]
  isActive: Float = 1
  maxDiscountPrice: String
  minProductPrice: String
  name: String
  redisForShowoffIsDeleted: Boolean = false
  redisIsDeleted: Boolean = false
  showoffEndDate: DateTime
  showoffStartDate: DateTime
  sortOrder: Float
  startDate: DateTime
  type: Float
  updatedAt: DateTime
  updatedBy: Float
  updatedBy2: UserDomain
  withPad: Boolean = false
}

input UpdateDiscountNotification {
  createdAt: DateTime
  deletedAt: DateTime
  id: ID
  product: ProductDomain
  productId: Float
  updatedAt: DateTime
  user: UserDomain
  userId: Float
}

input UpdateDiscountSubject {
  basicCarpetSize: BasicCarpetSizeDomain
  basicCarpetSizeId: Float
  createdAt: DateTime
  discount: DiscountDomain
  discountId: Float
  id: ID
  priceGroup: PriceGroupDomain
  priceGroupId: Float
  product: ProductDomain
  productCategory: ProductCategoryDomain
  productCategoryId: Float
  productId: Float
  subproduct: SubproductDomain
  subproductId: Float
  updatedAt: DateTime
}

input UpdateExitControl {
  createdAt: DateTime
  driverName: String
  driverPhone: String
  exitControlItems: [ExitControlItemDomain!]
  exitDate: String
  id: ID
  isClosed: Boolean = false
  plateNo: String
  updatedAt: DateTime
  user: UserDomain
  userId: Float
}

input UpdateExitControlItem {
  boxNo: Float
  carpetPadScanned: Boolean = false
  carpetScanned: Boolean = false
  createdAt: DateTime
  exitControl: ExitControlDomain
  exitControlId: Float
  id: ID
  invoiceProductItem: InvoiceProductItemDomain
  invoiceProductItemId: Float
  updatedAt: DateTime
}

input UpdateExportProduct {
  code: String
  id: ID
  price: Float
}

input UpdateFailedJob {
  connection: String
  exception: String
  failedAt: DateTime
  id: ID
  payload: String
  queue: String
}

input UpdateFavoriteProduct {
  createdAt: DateTime
  id: ID
  product: ProductDomain
  productId: Float
  subproduct: SubproductDomain
  subproductId: Float
  updatedAt: DateTime
  user: UserDomain
  userId: Float
}

input UpdateFedexAddressValidationAttribute {
  code: String
  correctValue: Boolean
  createdAt: DateTime
  description: String
  id: ID
  updatedAt: DateTime
}

input UpdateFetchSiteUrl {
  createdAt: DateTime
  date: DateTime
  id: ID
  isFetch: Boolean
  updatedAt: DateTime
  url: String
}

input UpdateFile {
  createdAt: DateTime
  fileNegotiations: [FileNegotiationDomain!]
  filename: String
  id: ID
  mime: String
  originalFilename: String
  path: String = "/"
  updatedAt: DateTime
  uploadSource: String
}

input UpdateFileNegotiation {
  createdAt: DateTime
  file: FileDomain
  fileId: Float
  id: ID
  negotiation: NegotiationDomain
  negotiationId: Float
  updatedAt: DateTime
}

input UpdateGhazal {
  createdAt: DateTime
  explanation: String
  id: ID
  poem: String
  updatedAt: DateTime
}

input UpdateGoogleFormUtm {
  createdAt: DateTime
  formId: String
  id: ID
  status: Boolean = false
  updatedAt: DateTime
  url: String
  user: UserDomain
  userId: Float
  utm: String
}

input UpdateHeardAboutUsOption {
  createdAt: DateTime
  id: ID
  isActive: Boolean = true
  name: String
  sortOrder: Float = 1
  updatedAt: DateTime
  users: [UserDomain!]
}

input UpdateHelpDesk {
  createdAt: DateTime
  id: ID
  image: ImageDomain
  imageId: Float
  isActive: Float
  isOnline: Float
  phone: String
  title: String
  updatedAt: DateTime
  user: UserDomain
  userId: Float
}

input UpdateHoliday {
  createdAt: DateTime
  deletedAt: DateTime
  holidayDate: String
  id: ID
  updatedAt: DateTime
  user: UserDomain
  userId: Float
  weekday: Float
}

input UpdateHomePageCustomerImage {
  createdAt: DateTime
  desktopImage: ImageDomain
  desktopImageAlt: String
  desktopImageId: Float
  id: ID
  mobileImage: ImageDomain
  mobileImageAlt: String
  mobileImageId: Float
  product: ProductDomain
  productId: Float
  sortOrder: Float
  updatedAt: DateTime
}

input UpdateHyper {
  code: ID
  depot: Float
  produce: Float
}

input UpdateHyperstarCode {
  code: ID
  subproductCode: String
}

input UpdateImage {
  altText: String
  altTextEn: String
  basicCarpetSizes: [BasicCarpetSizeDomain!]
  basicCarpetSizes2: [BasicCarpetSizeDomain!]
  campaignVotingImages: [CampaignVotingImageDomain!]
  colorCategories: [ColorCategoryDomain!]
  colorCategories2: [ColorCategoryDomain!]
  colorCategories3: [ColorCategoryDomain!]
  createdAt: DateTime
  customerImageProducts: [CustomerImageProductDomain!]
  filename: String
  helpDesks: [HelpDeskDomain!]
  homePageCustomerImages: [HomePageCustomerImageDomain!]
  homePageCustomerImages2: [HomePageCustomerImageDomain!]
  id: ID
  imageProducts: [ImageProductDomain!]
  imageRecreated: Boolean
  imageSubproducts: [ImageSubproductDomain!]
  imagesSizeGuidesDetails: [ImagesSizeGuidesDetailDomain!]
  mime: String
  originalFilename: String
  path: String
  patternCategories: [PatternCategoryDomain!]
  productCategories: [ProductCategoryDomain!]
  productCategories2: [ProductCategoryDomain!]
  productCategories3: [ProductCategoryDomain!]
  productColorImages: [ProductColorImageDomain!]
  products: [ProductDomain!]
  returnRequestItemImages: [ReturnRequestItemImageDomain!]
  sizeGuides: [SizeGuideDomain!]
  sizeGuidesDetails: [SizeGuidesDetailDomain!]
  subproductSpecialImages: [SubproductSpecialImageDomain!]
  subproducts: [SubproductDomain!]
  tags: [TagDomain!]
  tags2: [TagDomain!]
  updatedAt: DateTime
  uploadSource: String
}

input UpdateImageLayer {
  centerX: Float
  centerY: Float
  createdAt: DateTime
  deletedAt: DateTime
  design: DesignDomain
  designId: Float
  filename: String
  id: ID
  path: String
  rotation: Float
  scaleX: Float
  scaleY: Float
  sortOrder: Float
  updatedAt: DateTime
}

input UpdateImageProduct {
  createdAt: DateTime
  id: ID
  image: ImageDomain
  imageId: Float
  product: ProductDomain
  productId: Float
  sortOrder: Float
  updatedAt: DateTime
}

input UpdateImageSize {
  createdAt: DateTime
  height: Float
  id: ID
  name: String
  productCategories: [ProductCategoryDomain!]
  shortName: String
  updatedAt: DateTime
  width: Float
}

input UpdateImageSubproduct {
  createdAt: DateTime
  id: ID
  image: ImageDomain
  imageId: Float
  sortOrder: Float
  subproduct: SubproductDomain
  subproductId: Float
  updatedAt: DateTime
}

input UpdateImagesSizeGuidesDetail {
  createdAt: DateTime
  id: ID
  image: ImageDomain
  imageId: Float
  sizeGuidesDetails: SizeGuidesDetailDomain
  sizeGuidesDetailsId: Float
  sortOrder: Float
  updatedAt: DateTime
}

input UpdateImpersonateHistory {
  createdAt: DateTime
  id: ID
  impersonateUser: UserDomain
  impersonateUserId: Float
  updatedAt: DateTime
  user: UserDomain
  userId: Float
}

input UpdateIncredibleOffer {
  basicCarpetColor: BasicCarpetColorDomain
  basicCarpetColorId: Float
  count: Float
  createdAt: DateTime
  discount: DiscountDomain
  discountId: Float
  discountPercent: Float
  id: ID
  isFake: Boolean
  offerDate: String
  place: Float
  product: ProductDomain
  productId: Float
  soldCount: Float
  sortOrder: Float
  updatedAt: DateTime
}

input UpdateIncredibleOfferSentNotification {
  createdAt: DateTime
  id: ID
  message: String
  updatedAt: DateTime
  user: UserDomain
  userId: Float
}

input UpdateInstagramFeed {
  altText: String
  caption: String
  carouselMedia: String
  comments: String
  commentsCount: Float
  commentsDisabled: Boolean
  commentsNextPage: String
  createdAt: DateTime
  createdTime: String
  data: String
  downloadedImageHighResolutionUrl: String
  downloadedImageLowResolutionUrl: String
  downloadedImageStandardResolutionUrl: String
  downloadedImageThumbnailUrl: String
  hasMoreComments: Boolean
  id: ID
  imageHighResolutionUrl: String
  imageLowResolutionUrl: String
  imageStandardResolutionUrl: String
  imageThumbnailUrl: String
  instagramId: String
  isAd: Boolean
  isAutoConstruct: Boolean
  isCaptionEdited: Boolean
  isFake: Boolean
  isLoadEmpty: Boolean
  isLoaded: Boolean
  isNew: Boolean
  likesCount: Float
  link: String
  locationAddressJson: String
  locationId: String
  locationName: String
  locationSlug: String
  modified: String
  owner: String
  ownerId: String
  shortCode: String
  sidecarMedias: String
  squareImages: String
  type: String
  updatedAt: DateTime
  videoDuration: String
  videoLowBandwidthUrl: String
  videoLowResolutionUrl: String
  videoStandardResolutionUrl: String
  videoViews: Float
}

input UpdateInvitationCode {
  code: String
  createdAt: DateTime
  email: String
  id: ID
  isActive: Boolean
  maxUsage: Float
  updatedAt: DateTime
  users: [UserDomain!]
}

input UpdateInvoice {
  accountingDescription: String
  additions: String
  address: AddressDomain
  addressId: Float
  canReturn: Boolean
  cashOnDelivery: Boolean
  chaparSettlementStatus: ChaparSettlementStatusDomain
  chaparSettlementStatusId: Float
  chaparStatus: String
  chaparTrackingHistories: [ChaparTrackingHistoryDomain!]
  containsPadsOnly: Boolean
  coupon: CouponDomain
  couponId: Float
  coupons: [CouponDomain!]
  createdAt: DateTime
  crmCompanyId: String
  crmCompanyPersonId: String
  crmPreOrderId: String
  currentInvoiceStatus: InvoiceStatusDomain
  currentInvoiceStatusId: Float
  deadlineDate: String
  deadlineDateOld: String
  deliveredDate: DateTime
  description: String
  digikalaShare: Float
  digikalaSharePercent: Float
  forDigikala: Boolean
  freeDelivery: Boolean
  hasPriority: Boolean
  id: ID
  invoiceAddressValidationResults: [InvoiceAddressValidationResultDomain!]
  invoiceAddresses: [InvoiceAddressDomain!]
  invoiceBankGatewayHistories: [InvoiceBankGatewayHistoryDomain!]
  invoiceHistories: [InvoiceHistoryDomain!]
  invoiceInvoiceStatuses: [InvoiceInvoiceStatusDomain!]
  invoiceMode: InvoiceModeDomain
  invoiceModeId: Float
  invoiceNegotiations: [InvoiceNegotiationDomain!]
  invoiceNumber: String
  invoicePaymentHistories: [InvoicePaymentHistoryDomain!]
  invoicePaymentStatus: InvoicePaymentStatusDomain
  invoicePaymentStatusId: Float
  invoicePayments: [InvoicePaymentDomain!]
  invoiceProductHistories: [InvoiceProductHistoryDomain!]
  invoiceProducts: [InvoiceProductDomain!]
  invoiceRatesResults: [InvoiceRatesResultDomain!]
  invoiceReversals: [InvoiceReversalDomain!]
  invoiceShippingRates: [InvoiceShippingRateDomain!]
  invoiceType: InvoiceTypeDomain
  invoiceTypeId: Float
  invoices: [InvoiceDomain!]
  isChaparDelivery: Boolean
  isDepot: Boolean
  isForAdvertisement: Boolean
  isReversible: Boolean
  issueDate: DateTime
  lastName: String
  lockState: Float
  lockState2: InvoiceStatusDomain
  lockStateDescription: String
  mah: Float
  moneyTransferConfirmed: Boolean
  moneyTransferConfirmedBy: Float
  moneyTransferConfirmedBy2: UserDomain
  moneyTransferRefCode: String
  name: String
  needsReview: Boolean
  orderId: String
  packageCount: Float
  paidCodShippingRate: Float
  parentInvoice: InvoiceDomain
  parentInvoiceId: Float
  partnerCode: String
  paymentCreditable: Boolean
  paymentErrorMessage: String
  paymentMethodFields: [PaymentMethodFieldDomain!]
  refId: String
  replacementAdditionalPrice: String
  replacementPaymentStatus: InvoicePaymentStatusDomain
  replacementPaymentStatusId: Float
  replacementPriceMoneyTransferCode: String
  returnRequestHistories: [ReturnRequestHistoryDomain!]
  returnRequests: [ReturnRequestDomain!]
  returnedInvoices: [ReturnedInvoiceDomain!]
  returnedInvoices2: [ReturnedInvoiceDomain!]
  roz: Float
  sal: Float
  saleRefId: String
  seenAt: DateTime
  selectedShippingServiceId: Float
  sepidarCode: Float
  sepidarId: Float
  shipmentUuid: String
  shippingRate: String
  shippingRateCod: String
  subtotalPrice: String
  taxRate: Float
  totalCouponDiscount: String
  totalDiscount: String
  totalPrice: String
  totalPriceOld: Float
  totalTax: String
  totalVisitorShare: Float
  totalWalletCharged: String
  trackingCode: String
  updatedAt: DateTime
  useWallet: Boolean
  user: UserDomain
  userId: Float
  visitor: VisitorDomain
  visitorCoupon: VisitorCouponDomain
  visitorCouponId: Float
  visitorCouponRate: Float
  visitorGroup: VisitorGroupDomain
  visitorGroupId: Float
  visitorId: Float
  visitorRate: Float
  visitorShareCalculated: Boolean
  wholesaleRemainingMoneyTransferRefCode: String
}

input UpdateInvoiceAddress {
  address: String
  address2: String
  addressId: Float
  address_2: AddressDomain
  city: CityDomain
  cityId: Float
  country: CountryDomain
  countryId: Float
  createdAt: DateTime
  crmCompanyId: String
  crmCompanyPersonId: String
  email: String
  fullAddress: String
  fullname: String
  id: ID
  invoice: InvoiceDomain
  invoiceHistories: [InvoiceHistoryDomain!]
  invoiceId: Float
  latitude: String
  longitude: String
  nationalId: String
  phone: String
  phone2: String
  state: StateDomain
  stateId: Float
  updatedAt: DateTime
  user: UserDomain
  userId: Float
  zipCode: String
}

input UpdateInvoiceAddressValidationResult {
  address: AddressDomain
  addressId: Float
  addressValidationResult: String
  createdAt: DateTime
  id: ID
  invoice: InvoiceDomain
  invoiceId: Float
  updatedAt: DateTime
}

input UpdateInvoiceBankGatewayHistory {
  amount: String
  createdAt: DateTime
  id: ID
  invoice: InvoiceDomain
  invoiceId: Float
  orderId: String
  preorderRegister: PreorderRegisterDomain
  preorderRegisterId: Float
  refId: String
  saleRefId: String
  updatedAt: DateTime
}

input UpdateInvoiceHistory {
  accountingDescription: String
  additions: String
  address: String
  address2: String
  addressId: Float
  cashOnDelivery: Float
  chaparSettlementStatusId: Float
  chaparStatus: String
  cityId: Float
  countryId: Float
  couponId: Float
  createdAt: DateTime
  crmCompanyId: String
  crmCompanyPersonId: String
  crmPreOrderId: String
  currentInvoiceStatusId: Float
  deliveredDate: DateTime
  description: String
  digikalaShare: Float
  digikalaSharePercent: Float
  editorUser: UserDomain
  editorUserId: Float
  email: String
  forDigikala: Boolean
  freeDelivery: Float
  fullAddress: String
  fullname: String
  hasPriority: Boolean
  id: ID
  invoice: InvoiceDomain
  invoiceAddress: InvoiceAddressDomain
  invoiceAddressId: Float
  invoiceId: Float
  invoiceModeId: Float
  invoiceNumber: String
  invoicePaymentHistories: [InvoicePaymentHistoryDomain!]
  invoicePaymentStatusId: Float
  invoiceProductHistories: [InvoiceProductHistoryDomain!]
  invoiceTypeId: Float
  isChaparDelivery: Float
  isDepot: Boolean
  isForAdvertisement: Boolean
  isReversible: Boolean
  issueDate: DateTime
  lastName: String
  latitude: String
  lockState: Float
  longitude: String
  moneyTransferConfirmed: Boolean
  moneyTransferConfirmedBy: Float
  moneyTransferRefCode: String
  name: String
  needsReview: Boolean
  orderId: String
  packageCount: Float
  parentInvoiceId: Float
  partnerCode: String
  paymentCreditable: Boolean
  paymentErrorMessage: String
  phone: String
  phone2: String
  refId: String
  replacementAdditionalPrice: String
  replacementPaymentStatusId: Float
  replacementPriceMoneyTransferCode: String
  saleRefId: String
  selectedShippingServiceId: Float
  shippingRate: String
  shippingRateCod: String
  stateId: Float
  subtotalPrice: String
  taxRate: Float
  totalCouponDiscount: String
  totalDiscount: String
  totalPrice: String
  totalPriceOld: Float
  totalTax: String
  totalVisitorShare: Float
  totalWalletCharged: String
  trackingCode: String
  updatedAt: DateTime
  useWallet: Boolean
  userId: Float
  visitorCouponId: Float
  visitorCouponRate: Float
  visitorGroupId: Float
  visitorId: Float
  visitorRate: Float
  visitorShareCalculated: Float
  wholesaleRemainingMoneyTransferRefCode: String
  zipCode: String
}

input UpdateInvoiceInvoiceStatus {
  comment: String
  createdAt: DateTime
  id: ID
  invoice: InvoiceDomain
  invoiceId: Float
  invoiceStatus: InvoiceStatusDomain
  invoiceStatusId: Float
  updatedAt: DateTime
  user: UserDomain
  userId: Float
}

input UpdateInvoiceMode {
  createdAt: DateTime
  id: ID
  invoices: [InvoiceDomain!]
  name: String
  updatedAt: DateTime
}

input UpdateInvoiceNegotiation {
  createdAt: DateTime
  id: ID
  invoice: InvoiceDomain
  invoiceId: Float
  negotiation: NegotiationDomain
  negotiationId: Float
  updatedAt: DateTime
}

input UpdateInvoicePayment {
  amount: String
  chequeBank: String
  chequeDate: String
  chequeNumber: String
  chequePayee: String
  confirmedBy: Float
  confirmedBy2: UserDomain
  createdAt: DateTime
  description: String
  forShipping: Boolean
  id: ID
  invoice: InvoiceDomain
  invoiceId: Float
  invoicePaymentHistories: [InvoicePaymentHistoryDomain!]
  invoicePaymentType: InvoicePaymentTypeDomain
  invoicePaymentTypeId: Float
  isConfirmed: Boolean
  paymentDate: String
  refCode: String
  refCodeSales: String
  updatedAt: DateTime
  user: UserDomain
  userId: Float
}

input UpdateInvoicePaymentHistory {
  amount: String
  chequeBank: String
  chequeDate: String
  chequeNumber: String
  chequePayee: String
  confirmedBy: Float
  confirmedBy2: UserDomain
  createdAt: DateTime
  description: String
  forShipping: Boolean
  id: ID
  invoice: InvoiceDomain
  invoiceHistory: InvoiceHistoryDomain
  invoiceHistoryId: Float
  invoiceId: Float
  invoicePayment: InvoicePaymentDomain
  invoicePaymentId: Float
  invoicePaymentType: InvoicePaymentTypeDomain
  invoicePaymentTypeId: Float
  isConfirmed: Boolean
  paymentDate: String
  refCode: String
  refCodeSales: String
  updatedAt: DateTime
  user: UserDomain
  userId: Float
}

input UpdateInvoicePaymentStatus {
  createdAt: DateTime
  id: ID
  invoices: [InvoiceDomain!]
  invoices2: [InvoiceDomain!]
  name: String
  updatedAt: DateTime
}

input UpdateInvoicePaymentType {
  createdAt: DateTime
  id: ID
  invoicePaymentHistories: [InvoicePaymentHistoryDomain!]
  invoicePayments: [InvoicePaymentDomain!]
  name: String
  preorderRegisters: [PreorderRegisterDomain!]
  updatedAt: DateTime
}

input UpdateInvoiceProduct {
  bundleCount: Float
  bundlePrice: String
  carpetUsagePlaceInvoiceProducts: [CarpetUsagePlaceInvoiceProductDomain!]
  count: Float
  createdAt: DateTime
  description: String
  design: DesignDomain
  designId: Float
  designerPricePercentage: Float
  designerPriceShare: Float
  discount: String
  discountId: Float
  discount_2: DiscountDomain
  gift: Float
  id: ID
  invoice: InvoiceDomain
  invoiceId: Float
  invoiceProductHistories: [InvoiceProductHistoryDomain!]
  invoiceProductItems: [InvoiceProductItemDomain!]
  invoiceProductItemsCreated: Boolean
  invoiceReversalItems: [InvoiceReversalItemDomain!]
  isCouponApplicable: Boolean
  itemsFromDepot: Float
  itemsToProduce: Float
  length: Float
  manuallyAdded: Boolean
  pad: SubproductDomain
  padId: Float
  price: String
  pricePerInch: Float
  product: ProductDomain
  productId: Float
  relatedProduct: ProductDomain
  relatedProductId: Float
  relatedSubproduct: SubproductDomain
  relatedSubproductId: Float
  returnRequestItemHistories: [ReturnRequestItemHistoryDomain!]
  returnRequestItems: [ReturnRequestItemDomain!]
  returnedInvoiceProducts: [ReturnedInvoiceProductDomain!]
  sepidarId: Float
  stockCount: Float
  subproduct: SubproductDomain
  subproductId: Float
  subproductStockHistories: [SubproductStockHistoryDomain!]
  tempDepotItemsCreated: Boolean
  totalCouponDiscount: String
  totalDiscount: String
  totalPrice: Float
  updatedAt: DateTime
  width: Float
  withPad: Boolean
}

input UpdateInvoiceProductHistory {
  bundleCount: Float
  bundlePrice: String
  count: Float
  createdAt: DateTime
  description: String
  design: DesignDomain
  designId: Float
  designerPricePercentage: Float
  designerPriceShare: Float
  discount: String
  discountId: Float
  discount_2: DiscountDomain
  id: ID
  invoice: InvoiceDomain
  invoiceHistory: InvoiceHistoryDomain
  invoiceHistoryId: Float
  invoiceId: Float
  invoiceProduct: InvoiceProductDomain
  invoiceProductId: Float
  invoiceProductItemsCreated: Boolean
  isCouponApplicable: Boolean
  itemsFromDepot: Float
  itemsToProduce: Float
  length: Float
  manuallyAdded: Boolean
  padId: Float
  price: String
  pricePerInch: Float
  product: ProductDomain
  productId: Float
  relatedProduct: ProductDomain
  relatedProductId: Float
  relatedSubproduct: SubproductDomain
  relatedSubproductId: Float
  stockCount: Float
  subproduct: SubproductDomain
  subproductId: Float
  totalCouponDiscount: String
  totalDiscount: String
  totalPrice: Float
  updatedAt: DateTime
  width: Float
  withPad: Boolean
}

input UpdateInvoiceProductItem {
  code: String
  createdAt: DateTime
  currentStatus: InvoiceProductStatusDomain
  currentStatusId: Float
  damageCause: String
  damageReason: DamageReasonDomain
  damageReasonId: Float
  damageType: Float
  exitControlItems: [ExitControlItemDomain!]
  fromDepot: Boolean
  id: ID
  invoiceProduct: InvoiceProductDomain
  invoiceProductId: Float
  invoiceProductItemInvoiceProductStatuses: [InvoiceProductItemInvoiceProductStatusDomain!]
  isInsertedIntoSepidar: Boolean
  isPrintedAndHeated: Boolean
  isReversed: Boolean
  isTagPrinted: Boolean
  padCode: String
  predictedDateForReceivedByRepository: String
  printProfile: PrintProfileDomain
  printProfileId: Float
  printRip: PrintRipDomain
  printRipId: Float
  productionRoll: ProductionRollDomain
  productionRollId: Float
  rollReferenceCode: String
  row: Float
  sortOrder: Float
  tagSortOrder: Float
  tempStatusId: Float
  updatedAt: DateTime
}

input UpdateInvoiceProductItemInvoiceProductStatus {
  comment: String
  createdAt: DateTime
  id: ID
  invoiceProductItem: InvoiceProductItemDomain
  invoiceProductItemId: Float
  invoiceProductStatus: InvoiceProductStatusDomain
  invoiceProductStatusId: Float
  updatedAt: DateTime
  user: UserDomain
  userId: Float
}

input UpdateInvoiceProductStatus {
  color: String
  createdAt: DateTime
  id: ID
  invoiceProductItemInvoiceProductStatuses: [InvoiceProductItemInvoiceProductStatusDomain!]
  invoiceProductItems: [InvoiceProductItemDomain!]
  status: String
  step: Float
  stepShaggy: Float
  updatedAt: DateTime
}

input UpdateInvoiceRatesResult {
  address: AddressDomain
  addressId: Float
  createdAt: DateTime
  id: ID
  invoice: InvoiceDomain
  invoiceId: Float
  ratesReplyCodResult: String
  ratesReplyResult: String
  shippingService: ShippingServiceDomain
  shippingServiceId: Float
  updatedAt: DateTime
}

input UpdateInvoiceReversal {
  createdAt: DateTime
  id: ID
  invoice: InvoiceDomain
  invoiceId: Float
  invoiceReversalItems: [InvoiceReversalItemDomain!]
  invoiceStatus: InvoiceStatusDomain
  invoiceStatusId: Float
  isReviewed: Boolean
  reviewedBy: Float
  reviewedBy2: UserDomain
  reviewedDate: DateTime
  updatedAt: DateTime
  wholeInvoice: Boolean
}

input UpdateInvoiceReversalItem {
  count: Float
  createdAt: DateTime
  id: ID
  invoiceProduct: InvoiceProductDomain
  invoiceProductId: Float
  invoiceReversal: InvoiceReversalDomain
  invoiceReversalId: Float
  updatedAt: DateTime
  withPad: Boolean
}

input UpdateInvoiceShippingRate {
  createdAt: DateTime
  id: ID
  invoice: InvoiceDomain
  invoiceId: Float
  shippingRate: String
  shippingRateCod: String
  shippingService: ShippingServiceDomain
  shippingServiceId: Float
  updatedAt: DateTime
}

input UpdateInvoiceStatus {
  color: String
  createdAt: DateTime
  id: ID
  invoiceInvoiceStatuses: [InvoiceInvoiceStatusDomain!]
  invoiceReversals: [InvoiceReversalDomain!]
  invoices: [InvoiceDomain!]
  invoices2: [InvoiceDomain!]
  notificationEmails: String
  notificationNumbers: String
  smsToCustomer: Boolean
  status: String
  updatedAt: DateTime
}

input UpdateInvoiceType {
  createdAt: DateTime
  id: ID
  invoices: [InvoiceDomain!]
  name: String
  updatedAt: DateTime
}

input UpdateLabel {
  color: String
  createdAt: DateTime
  id: ID
  labelProducts: [LabelProductDomain!]
  name: String
  textColor: String
  updatedAt: DateTime
}

input UpdateLabelProduct {
  createdAt: DateTime
  id: ID
  label: LabelDomain
  labelId: Float
  product: ProductDomain
  productId: Float
  updatedAt: DateTime
}

input UpdateManyActivitiesInput {
  """Filter used to find fields to update"""
  filter: ActivityUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateActivity!
}

input UpdateManyAddressesInput {
  """Filter used to find fields to update"""
  filter: AddressUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateAddress!
}

input UpdateManyAttributeAttributeGroupsInput {
  """Filter used to find fields to update"""
  filter: AttributeAttributeGroupUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateAttributeAttributeGroup!
}

input UpdateManyAttributeGroupsInput {
  """Filter used to find fields to update"""
  filter: AttributeGroupUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateAttributeGroup!
}

input UpdateManyAttributeItemsInput {
  """Filter used to find fields to update"""
  filter: AttributeItemUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateAttributeItem!
}

input UpdateManyAttributeProductsInput {
  """Filter used to find fields to update"""
  filter: AttributeProductUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateAttributeProduct!
}

input UpdateManyAttributeSubproductsInput {
  """Filter used to find fields to update"""
  filter: AttributeSubproductUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateAttributeSubproduct!
}

input UpdateManyAttributesInput {
  """Filter used to find fields to update"""
  filter: AttributeUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateAttribute!
}

input UpdateManyAutomationEventsInput {
  """Filter used to find fields to update"""
  filter: AutomationEventUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateAutomationEvent!
}

input UpdateManyAutomationRfmScoresInput {
  """Filter used to find fields to update"""
  filter: AutomationRfmScoreUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateAutomationRfmScore!
}

input UpdateManyBasicCarpetBordersInput {
  """Filter used to find fields to update"""
  filter: BasicCarpetBorderUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateBasicCarpetBorder!
}

input UpdateManyBasicCarpetBrandsInput {
  """Filter used to find fields to update"""
  filter: BasicCarpetBrandUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateBasicCarpetBrand!
}

input UpdateManyBasicCarpetColorsInput {
  """Filter used to find fields to update"""
  filter: BasicCarpetColorUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateBasicCarpetColor!
}

input UpdateManyBasicCarpetDesignersInput {
  """Filter used to find fields to update"""
  filter: BasicCarpetDesignerUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateBasicCarpetDesigner!
}

input UpdateManyBasicCarpetDesignsInput {
  """Filter used to find fields to update"""
  filter: BasicCarpetDesignUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateBasicCarpetDesign!
}

input UpdateManyBasicCarpetMaterialsInput {
  """Filter used to find fields to update"""
  filter: BasicCarpetMaterialUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateBasicCarpetMaterial!
}

input UpdateManyBasicCarpetSizeDetailsInput {
  """Filter used to find fields to update"""
  filter: BasicCarpetSizeDetailUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateBasicCarpetSizeDetail!
}

input UpdateManyBasicCarpetSizesInput {
  """Filter used to find fields to update"""
  filter: BasicCarpetSizeUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateBasicCarpetSize!
}

input UpdateManyBasicCarpetTypesInput {
  """Filter used to find fields to update"""
  filter: BasicCarpetTypeUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateBasicCarpetType!
}

input UpdateManyBordersInput {
  """Filter used to find fields to update"""
  filter: BorderUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateBorder!
}

input UpdateManyCampaignFreeOfferSizesInput {
  """Filter used to find fields to update"""
  filter: CampaignFreeOfferSizeUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCampaignFreeOfferSize!
}

input UpdateManyCampaignFreeOffersInput {
  """Filter used to find fields to update"""
  filter: CampaignFreeOfferUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCampaignFreeOffer!
}

input UpdateManyCampaignGoldCoinSubsInput {
  """Filter used to find fields to update"""
  filter: CampaignGoldCoinSubUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCampaignGoldCoinSub!
}

input UpdateManyCampaignInstagramFollowsInput {
  """Filter used to find fields to update"""
  filter: CampaignInstagramFollowUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCampaignInstagramFollow!
}

input UpdateManyCampaignPetFormsInput {
  """Filter used to find fields to update"""
  filter: CampaignPetFormUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCampaignPetForm!
}

input UpdateManyCampaignRoomvoImagesInput {
  """Filter used to find fields to update"""
  filter: CampaignRoomvoImageUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCampaignRoomvoImage!
}

input UpdateManyCampaignRoomvoVotesInput {
  """Filter used to find fields to update"""
  filter: CampaignRoomvoVoteUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCampaignRoomvoVote!
}

input UpdateManyCampaignSubscriptionsInput {
  """Filter used to find fields to update"""
  filter: CampaignSubscriptionUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCampaignSubscription!
}

input UpdateManyCampaignUefaEuroSubscriberHistoriesInput {
  """Filter used to find fields to update"""
  filter: CampaignUefaEuroSubscriberHistoryUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCampaignUefaEuroSubscriberHistory!
}

input UpdateManyCampaignUefaEuroSubscribersInput {
  """Filter used to find fields to update"""
  filter: CampaignUefaEuroSubscriberUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCampaignUefaEuroSubscriber!
}

input UpdateManyCampaignVotingImageUsersInput {
  """Filter used to find fields to update"""
  filter: CampaignVotingImageUserUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCampaignVotingImageUser!
}

input UpdateManyCampaignVotingImagesInput {
  """Filter used to find fields to update"""
  filter: CampaignVotingImageUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCampaignVotingImage!
}

input UpdateManyCarpetFeatureUsersInput {
  """Filter used to find fields to update"""
  filter: CarpetFeatureUserUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCarpetFeatureUser!
}

input UpdateManyCarpetFeaturesInput {
  """Filter used to find fields to update"""
  filter: CarpetFeatureUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCarpetFeature!
}

input UpdateManyCarpetMaterialsInput {
  """Filter used to find fields to update"""
  filter: CarpetMaterialUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCarpetMaterial!
}

input UpdateManyCarpetShapesInput {
  """Filter used to find fields to update"""
  filter: CarpetShapeUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCarpetShape!
}

input UpdateManyCarpetSizesInput {
  """Filter used to find fields to update"""
  filter: CarpetSizeUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCarpetSize!
}

input UpdateManyCarpetUsagePlaceInvoiceProductsInput {
  """Filter used to find fields to update"""
  filter: CarpetUsagePlaceInvoiceProductUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCarpetUsagePlaceInvoiceProduct!
}

input UpdateManyCarpetUsagePlaceUsersInput {
  """Filter used to find fields to update"""
  filter: CarpetUsagePlaceUserUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCarpetUsagePlaceUser!
}

input UpdateManyCarpetUsagePlacesInput {
  """Filter used to find fields to update"""
  filter: CarpetUsagePlaceUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCarpetUsagePlace!
}

input UpdateManyChaparSettlementStatusesInput {
  """Filter used to find fields to update"""
  filter: ChaparSettlementStatusUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateChaparSettlementStatus!
}

input UpdateManyChaparTrackingHistoriesInput {
  """Filter used to find fields to update"""
  filter: ChaparTrackingHistoryUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateChaparTrackingHistory!
}

input UpdateManyCitiesInput {
  """Filter used to find fields to update"""
  filter: CityUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCity!
}

input UpdateManyCitiesSepidarsInput {
  """Filter used to find fields to update"""
  filter: CitiesSepidarUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCitiesSepidar!
}

input UpdateManyCity2sInput {
  """Filter used to find fields to update"""
  filter: City2UpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCity2!
}

input UpdateManyColorCategoriesInput {
  """Filter used to find fields to update"""
  filter: ColorCategoryUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateColorCategory!
}

input UpdateManyColorCategoryDetailsInput {
  """Filter used to find fields to update"""
  filter: ColorCategoryDetailUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateColorCategoryDetail!
}

input UpdateManyColorCategorySubproductsInput {
  """Filter used to find fields to update"""
  filter: ColorCategorySubproductUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateColorCategorySubproduct!
}

input UpdateManyColorsInput {
  """Filter used to find fields to update"""
  filter: ColorUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateColor!
}

input UpdateManyConfigsInput {
  """Filter used to find fields to update"""
  filter: ConfigUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateConfig!
}

input UpdateManyContactFormHistoriesInput {
  """Filter used to find fields to update"""
  filter: ContactFormHistoryUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateContactFormHistory!
}

input UpdateManyContactFormStatusesInput {
  """Filter used to find fields to update"""
  filter: ContactFormStatusUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateContactFormStatus!
}

input UpdateManyContactFormsInput {
  """Filter used to find fields to update"""
  filter: ContactFormUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateContactForm!
}

input UpdateManyCountriesInput {
  """Filter used to find fields to update"""
  filter: CountryUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCountry!
}

input UpdateManyCouponSubjectsInput {
  """Filter used to find fields to update"""
  filter: CouponSubjectUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCouponSubject!
}

input UpdateManyCouponsInput {
  """Filter used to find fields to update"""
  filter: CouponUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCoupon!
}

input UpdateManyCrmPresentationsInput {
  """Filter used to find fields to update"""
  filter: CrmPresentationUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCrmPresentation!
}

input UpdateManyCustomerImageProductsInput {
  """Filter used to find fields to update"""
  filter: CustomerImageProductUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCustomerImageProduct!
}

input UpdateManyCustomerRequestFilesInput {
  """Filter used to find fields to update"""
  filter: CustomerRequestFileUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCustomerRequestFile!
}

input UpdateManyCustomerRequestsInput {
  """Filter used to find fields to update"""
  filter: CustomerRequestUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCustomerRequest!
}

input UpdateManyCustomerVideoProductsInput {
  """Filter used to find fields to update"""
  filter: CustomerVideoProductUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCustomerVideoProduct!
}

input UpdateManyDamageReasonsInput {
  """Filter used to find fields to update"""
  filter: DamageReasonUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateDamageReason!
}

input UpdateManyDepartmentsInput {
  """Filter used to find fields to update"""
  filter: DepartmentUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateDepartment!
}

input UpdateManyDesignersProductPriceRangesInput {
  """Filter used to find fields to update"""
  filter: DesignersProductPriceRangeUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateDesignersProductPriceRange!
}

input UpdateManyDesignsInput {
  """Filter used to find fields to update"""
  filter: DesignUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateDesign!
}

input UpdateManyDiscountNotificationsInput {
  """Filter used to find fields to update"""
  filter: DiscountNotificationUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateDiscountNotification!
}

input UpdateManyDiscountSubjectsInput {
  """Filter used to find fields to update"""
  filter: DiscountSubjectUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateDiscountSubject!
}

input UpdateManyDiscountsInput {
  """Filter used to find fields to update"""
  filter: DiscountUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateDiscount!
}

input UpdateManyExitControlItemsInput {
  """Filter used to find fields to update"""
  filter: ExitControlItemUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateExitControlItem!
}

input UpdateManyExitControlsInput {
  """Filter used to find fields to update"""
  filter: ExitControlUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateExitControl!
}

input UpdateManyExportProductsInput {
  """Filter used to find fields to update"""
  filter: ExportProductUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateExportProduct!
}

input UpdateManyFailedJobsInput {
  """Filter used to find fields to update"""
  filter: FailedJobUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateFailedJob!
}

input UpdateManyFavoriteProductsInput {
  """Filter used to find fields to update"""
  filter: FavoriteProductUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateFavoriteProduct!
}

input UpdateManyFedexAddressValidationAttributesInput {
  """Filter used to find fields to update"""
  filter: FedexAddressValidationAttributeUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateFedexAddressValidationAttribute!
}

input UpdateManyFetchSiteUrlsInput {
  """Filter used to find fields to update"""
  filter: FetchSiteUrlUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateFetchSiteUrl!
}

input UpdateManyFileNegotiationsInput {
  """Filter used to find fields to update"""
  filter: FileNegotiationUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateFileNegotiation!
}

input UpdateManyFilesInput {
  """Filter used to find fields to update"""
  filter: FileUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateFile!
}

input UpdateManyGhazalsInput {
  """Filter used to find fields to update"""
  filter: GhazalUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateGhazal!
}

input UpdateManyGoogleFormUtmsInput {
  """Filter used to find fields to update"""
  filter: GoogleFormUtmUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateGoogleFormUtm!
}

input UpdateManyHeardAboutUsOptionsInput {
  """Filter used to find fields to update"""
  filter: HeardAboutUsOptionUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateHeardAboutUsOption!
}

input UpdateManyHelpDesksInput {
  """Filter used to find fields to update"""
  filter: HelpDeskUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateHelpDesk!
}

input UpdateManyHolidaysInput {
  """Filter used to find fields to update"""
  filter: HolidayUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateHoliday!
}

input UpdateManyHomePageCustomerImagesInput {
  """Filter used to find fields to update"""
  filter: HomePageCustomerImageUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateHomePageCustomerImage!
}

input UpdateManyHypersInput {
  """Filter used to find fields to update"""
  filter: HyperUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateHyper!
}

input UpdateManyHyperstarCodesInput {
  """Filter used to find fields to update"""
  filter: HyperstarCodeUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateHyperstarCode!
}

input UpdateManyImageLayersInput {
  """Filter used to find fields to update"""
  filter: ImageLayerUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateImageLayer!
}

input UpdateManyImageProductsInput {
  """Filter used to find fields to update"""
  filter: ImageProductUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateImageProduct!
}

input UpdateManyImageSizesInput {
  """Filter used to find fields to update"""
  filter: ImageSizeUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateImageSize!
}

input UpdateManyImageSubproductsInput {
  """Filter used to find fields to update"""
  filter: ImageSubproductUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateImageSubproduct!
}

input UpdateManyImagesInput {
  """Filter used to find fields to update"""
  filter: ImageUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateImage!
}

input UpdateManyImagesSizeGuidesDetailsInput {
  """Filter used to find fields to update"""
  filter: ImagesSizeGuidesDetailUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateImagesSizeGuidesDetail!
}

input UpdateManyImpersonateHistoriesInput {
  """Filter used to find fields to update"""
  filter: ImpersonateHistoryUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateImpersonateHistory!
}

input UpdateManyIncredibleOfferSentNotificationsInput {
  """Filter used to find fields to update"""
  filter: IncredibleOfferSentNotificationUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateIncredibleOfferSentNotification!
}

input UpdateManyIncredibleOffersInput {
  """Filter used to find fields to update"""
  filter: IncredibleOfferUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateIncredibleOffer!
}

input UpdateManyInstagramFeedsInput {
  """Filter used to find fields to update"""
  filter: InstagramFeedUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateInstagramFeed!
}

input UpdateManyInvitationCodesInput {
  """Filter used to find fields to update"""
  filter: InvitationCodeUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateInvitationCode!
}

input UpdateManyInvoiceAddressValidationResultsInput {
  """Filter used to find fields to update"""
  filter: InvoiceAddressValidationResultUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateInvoiceAddressValidationResult!
}

input UpdateManyInvoiceAddressesInput {
  """Filter used to find fields to update"""
  filter: InvoiceAddressUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateInvoiceAddress!
}

input UpdateManyInvoiceBankGatewayHistoriesInput {
  """Filter used to find fields to update"""
  filter: InvoiceBankGatewayHistoryUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateInvoiceBankGatewayHistory!
}

input UpdateManyInvoiceHistoriesInput {
  """Filter used to find fields to update"""
  filter: InvoiceHistoryUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateInvoiceHistory!
}

input UpdateManyInvoiceInvoiceStatusesInput {
  """Filter used to find fields to update"""
  filter: InvoiceInvoiceStatusUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateInvoiceInvoiceStatus!
}

input UpdateManyInvoiceModesInput {
  """Filter used to find fields to update"""
  filter: InvoiceModeUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateInvoiceMode!
}

input UpdateManyInvoiceNegotiationsInput {
  """Filter used to find fields to update"""
  filter: InvoiceNegotiationUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateInvoiceNegotiation!
}

input UpdateManyInvoicePaymentHistoriesInput {
  """Filter used to find fields to update"""
  filter: InvoicePaymentHistoryUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateInvoicePaymentHistory!
}

input UpdateManyInvoicePaymentStatusesInput {
  """Filter used to find fields to update"""
  filter: InvoicePaymentStatusUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateInvoicePaymentStatus!
}

input UpdateManyInvoicePaymentTypesInput {
  """Filter used to find fields to update"""
  filter: InvoicePaymentTypeUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateInvoicePaymentType!
}

input UpdateManyInvoicePaymentsInput {
  """Filter used to find fields to update"""
  filter: InvoicePaymentUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateInvoicePayment!
}

input UpdateManyInvoiceProductHistoriesInput {
  """Filter used to find fields to update"""
  filter: InvoiceProductHistoryUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateInvoiceProductHistory!
}

input UpdateManyInvoiceProductItemInvoiceProductStatusesInput {
  """Filter used to find fields to update"""
  filter: InvoiceProductItemInvoiceProductStatusUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateInvoiceProductItemInvoiceProductStatus!
}

input UpdateManyInvoiceProductItemsInput {
  """Filter used to find fields to update"""
  filter: InvoiceProductItemUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateInvoiceProductItem!
}

input UpdateManyInvoiceProductStatusesInput {
  """Filter used to find fields to update"""
  filter: InvoiceProductStatusUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateInvoiceProductStatus!
}

input UpdateManyInvoiceProductsInput {
  """Filter used to find fields to update"""
  filter: InvoiceProductUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateInvoiceProduct!
}

input UpdateManyInvoiceRatesResultsInput {
  """Filter used to find fields to update"""
  filter: InvoiceRatesResultUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateInvoiceRatesResult!
}

input UpdateManyInvoiceReversalItemsInput {
  """Filter used to find fields to update"""
  filter: InvoiceReversalItemUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateInvoiceReversalItem!
}

input UpdateManyInvoiceReversalsInput {
  """Filter used to find fields to update"""
  filter: InvoiceReversalUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateInvoiceReversal!
}

input UpdateManyInvoiceShippingRatesInput {
  """Filter used to find fields to update"""
  filter: InvoiceShippingRateUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateInvoiceShippingRate!
}

input UpdateManyInvoiceStatusesInput {
  """Filter used to find fields to update"""
  filter: InvoiceStatusUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateInvoiceStatus!
}

input UpdateManyInvoiceTypesInput {
  """Filter used to find fields to update"""
  filter: InvoiceTypeUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateInvoiceType!
}

input UpdateManyInvoicesInput {
  """Filter used to find fields to update"""
  filter: InvoiceUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateInvoice!
}

input UpdateManyLabelProductsInput {
  """Filter used to find fields to update"""
  filter: LabelProductUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateLabelProduct!
}

input UpdateManyLabelsInput {
  """Filter used to find fields to update"""
  filter: LabelUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateLabel!
}

input UpdateManyMellatPaymentErrorsInput {
  """Filter used to find fields to update"""
  filter: MellatPaymentErrorUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateMellatPaymentError!
}

input UpdateManyMigrationsInput {
  """Filter used to find fields to update"""
  filter: MigrationUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateMigration!
}

input UpdateManyModelHasPermissionsInput {
  """Filter used to find fields to update"""
  filter: ModelHasPermissionUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateModelHasPermission!
}

input UpdateManyModelHasRolesInput {
  """Filter used to find fields to update"""
  filter: ModelHasRoleUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateModelHasRole!
}

input UpdateManyModelVisitsInput {
  """Filter used to find fields to update"""
  filter: ModelVisitUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateModelVisit!
}

input UpdateManyModemaAcceleratorImagesInput {
  """Filter used to find fields to update"""
  filter: ModemaAcceleratorImageUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateModemaAcceleratorImage!
}

input UpdateManyModemaAcceleratorVideosInput {
  """Filter used to find fields to update"""
  filter: ModemaAcceleratorVideoUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateModemaAcceleratorVideo!
}

input UpdateManyModemaAcceleratorsInput {
  """Filter used to find fields to update"""
  filter: ModemaAcceleratorUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateModemaAccelerator!
}

input UpdateManyNeedsPhotographySubproductsInput {
  """Filter used to find fields to update"""
  filter: NeedsPhotographySubproductUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateNeedsPhotographySubproduct!
}

input UpdateManyNegotiationHistoriesInput {
  """Filter used to find fields to update"""
  filter: NegotiationHistoryUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateNegotiationHistory!
}

input UpdateManyNegotiationStatusesInput {
  """Filter used to find fields to update"""
  filter: NegotiationStatusUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateNegotiationStatus!
}

input UpdateManyNegotiationStepsInput {
  """Filter used to find fields to update"""
  filter: NegotiationStepUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateNegotiationStep!
}

input UpdateManyNegotiationTypesInput {
  """Filter used to find fields to update"""
  filter: NegotiationTypeUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateNegotiationType!
}

input UpdateManyNegotiationsInput {
  """Filter used to find fields to update"""
  filter: NegotiationUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateNegotiation!
}

input UpdateManyNewBordersInput {
  """Filter used to find fields to update"""
  filter: NewBorderUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateNewBorder!
}

input UpdateManyOauthAccessTokensInput {
  """Filter used to find fields to update"""
  filter: OauthAccessTokenUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateOauthAccessToken!
}

input UpdateManyOauthAuthCodesInput {
  """Filter used to find fields to update"""
  filter: OauthAuthCodeUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateOauthAuthCode!
}

input UpdateManyOauthClientsInput {
  """Filter used to find fields to update"""
  filter: OauthClientUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateOauthClient!
}

input UpdateManyOauthPersonalAccessClientsInput {
  """Filter used to find fields to update"""
  filter: OauthPersonalAccessClientUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateOauthPersonalAccessClient!
}

input UpdateManyOauthRefreshTokensInput {
  """Filter used to find fields to update"""
  filter: OauthRefreshTokenUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateOauthRefreshToken!
}

input UpdateManyOutOfStockButListedProductsInput {
  """Filter used to find fields to update"""
  filter: OutOfStockButListedProductUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateOutOfStockButListedProduct!
}

input UpdateManyPasswordResetsInput {
  """Filter used to find fields to update"""
  filter: PasswordResetUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdatePasswordReset!
}

input UpdateManyPatternCategoriesInput {
  """Filter used to find fields to update"""
  filter: PatternCategoryUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdatePatternCategory!
}

input UpdateManyPatternLayersInput {
  """Filter used to find fields to update"""
  filter: PatternLayerUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdatePatternLayer!
}

input UpdateManyPatternsInput {
  """Filter used to find fields to update"""
  filter: PatternUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdatePattern!
}

input UpdateManyPaymentMethodFieldsInput {
  """Filter used to find fields to update"""
  filter: PaymentMethodFieldUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdatePaymentMethodField!
}

input UpdateManyPaymentMethodsInput {
  """Filter used to find fields to update"""
  filter: PaymentMethodUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdatePaymentMethod!
}

input UpdateManyPaymentRequestStatusesInput {
  """Filter used to find fields to update"""
  filter: PaymentRequestStatusUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdatePaymentRequestStatus!
}

input UpdateManyPaymentRequestsInput {
  """Filter used to find fields to update"""
  filter: PaymentRequestUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdatePaymentRequest!
}

input UpdateManyPermissionGroupsInput {
  """Filter used to find fields to update"""
  filter: PermissionGroupUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdatePermissionGroup!
}

input UpdateManyPermissionsInput {
  """Filter used to find fields to update"""
  filter: PermissionUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdatePermission!
}

input UpdateManyPreorderPreorderStatusesInput {
  """Filter used to find fields to update"""
  filter: PreorderPreorderStatusUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdatePreorderPreorderStatus!
}

input UpdateManyPreorderRegistersInput {
  """Filter used to find fields to update"""
  filter: PreorderRegisterUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdatePreorderRegister!
}

input UpdateManyPreorderStatusesInput {
  """Filter used to find fields to update"""
  filter: PreorderStatusUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdatePreorderStatus!
}

input UpdateManyPreordersInput {
  """Filter used to find fields to update"""
  filter: PreorderUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdatePreorder!
}

input UpdateManyPriceGroupSizesInput {
  """Filter used to find fields to update"""
  filter: PriceGroupSizeUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdatePriceGroupSize!
}

input UpdateManyPriceGroupsInput {
  """Filter used to find fields to update"""
  filter: PriceGroupUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdatePriceGroup!
}

input UpdateManyPrintProfilesInput {
  """Filter used to find fields to update"""
  filter: PrintProfileUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdatePrintProfile!
}

input UpdateManyPrintRipsInput {
  """Filter used to find fields to update"""
  filter: PrintRipUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdatePrintRip!
}

input UpdateManyProductCategoriesInput {
  """Filter used to find fields to update"""
  filter: ProductCategoryUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateProductCategory!
}

input UpdateManyProductCategoryDetailsInput {
  """Filter used to find fields to update"""
  filter: ProductCategoryDetailUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateProductCategoryDetail!
}

input UpdateManyProductCategoryRatesInput {
  """Filter used to find fields to update"""
  filter: ProductCategoryRateUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateProductCategoryRate!
}

input UpdateManyProductColorImagesInput {
  """Filter used to find fields to update"""
  filter: ProductColorImageUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateProductColorImage!
}

input UpdateManyProductColorSalesInput {
  """Filter used to find fields to update"""
  filter: ProductColorSaleUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateProductColorSale!
}

input UpdateManyProductCommentLikesInput {
  """Filter used to find fields to update"""
  filter: ProductCommentLikeUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateProductCommentLike!
}

input UpdateManyProductCommentsInput {
  """Filter used to find fields to update"""
  filter: ProductCommentUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateProductComment!
}

input UpdateManyProductLikesInput {
  """Filter used to find fields to update"""
  filter: ProductLikeUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateProductLike!
}

input UpdateManyProductProductCategoriesInput {
  """Filter used to find fields to update"""
  filter: ProductProductCategoryUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateProductProductCategory!
}

input UpdateManyProductRateAveragesInput {
  """Filter used to find fields to update"""
  filter: ProductRateAverageUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateProductRateAverage!
}

input UpdateManyProductRatesInput {
  """Filter used to find fields to update"""
  filter: ProductRateUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateProductRate!
}

input UpdateManyProductTagsInput {
  """Filter used to find fields to update"""
  filter: ProductTagUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateProductTag!
}

input UpdateManyProductVideosInput {
  """Filter used to find fields to update"""
  filter: ProductVideoUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateProductVideo!
}

input UpdateManyProductionPadProductionPadStatusesInput {
  """Filter used to find fields to update"""
  filter: ProductionPadProductionPadStatusUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateProductionPadProductionPadStatus!
}

input UpdateManyProductionPadStatusesInput {
  """Filter used to find fields to update"""
  filter: ProductionPadStatusUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateProductionPadStatus!
}

input UpdateManyProductionPadsInput {
  """Filter used to find fields to update"""
  filter: ProductionPadUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateProductionPad!
}

input UpdateManyProductionReceiptTypesInput {
  """Filter used to find fields to update"""
  filter: ProductionReceiptTypeUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateProductionReceiptType!
}

input UpdateManyProductionRollsInput {
  """Filter used to find fields to update"""
  filter: ProductionRollUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateProductionRoll!
}

input UpdateManyProductsInput {
  """Filter used to find fields to update"""
  filter: ProductUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateProduct!
}

input UpdateManyRatesInput {
  """Filter used to find fields to update"""
  filter: RateUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateRate!
}

input UpdateManyReadyToSendProductsInput {
  """Filter used to find fields to update"""
  filter: ReadyToSendProductUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateReadyToSendProduct!
}

input UpdateManyRecommendedProductsInput {
  """Filter used to find fields to update"""
  filter: RecommendedProductUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateRecommendedProduct!
}

input UpdateManyRecommendedSubproductsInput {
  """Filter used to find fields to update"""
  filter: RecommendedSubproductUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateRecommendedSubproduct!
}

input UpdateManyRedisSavedKeysInput {
  """Filter used to find fields to update"""
  filter: RedisSavedKeyUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateRedisSavedKey!
}

input UpdateManyRelatedProductsInput {
  """Filter used to find fields to update"""
  filter: RelatedProductUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateRelatedProduct!
}

type UpdateManyResponse {
  """The number of records updated."""
  updatedCount: Int!
}

input UpdateManyRetargetingWalletChargesInput {
  """Filter used to find fields to update"""
  filter: RetargetingWalletChargeUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateRetargetingWalletCharge!
}

input UpdateManyReturnItemStatusReturnRequestItemsInput {
  """Filter used to find fields to update"""
  filter: ReturnItemStatusReturnRequestItemUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateReturnItemStatusReturnRequestItem!
}

input UpdateManyReturnItemStatusesInput {
  """Filter used to find fields to update"""
  filter: ReturnItemStatusUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateReturnItemStatus!
}

input UpdateManyReturnReasonsInput {
  """Filter used to find fields to update"""
  filter: ReturnReasonUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateReturnReason!
}

input UpdateManyReturnRequestAddressesInput {
  """Filter used to find fields to update"""
  filter: ReturnRequestAddressUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateReturnRequestAddress!
}

input UpdateManyReturnRequestHistoriesInput {
  """Filter used to find fields to update"""
  filter: ReturnRequestHistoryUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateReturnRequestHistory!
}

input UpdateManyReturnRequestItemHistoriesInput {
  """Filter used to find fields to update"""
  filter: ReturnRequestItemHistoryUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateReturnRequestItemHistory!
}

input UpdateManyReturnRequestItemImagesInput {
  """Filter used to find fields to update"""
  filter: ReturnRequestItemImageUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateReturnRequestItemImage!
}

input UpdateManyReturnRequestItemReturnItemStatusesInput {
  """Filter used to find fields to update"""
  filter: ReturnRequestItemReturnItemStatusUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateReturnRequestItemReturnItemStatus!
}

input UpdateManyReturnRequestItemVideosInput {
  """Filter used to find fields to update"""
  filter: ReturnRequestItemVideoUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateReturnRequestItemVideo!
}

input UpdateManyReturnRequestItemsInput {
  """Filter used to find fields to update"""
  filter: ReturnRequestItemUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateReturnRequestItem!
}

input UpdateManyReturnRequestReturnStatusesInput {
  """Filter used to find fields to update"""
  filter: ReturnRequestReturnStatusUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateReturnRequestReturnStatus!
}

input UpdateManyReturnRequestsInput {
  """Filter used to find fields to update"""
  filter: ReturnRequestUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateReturnRequest!
}

input UpdateManyReturnStatusesInput {
  """Filter used to find fields to update"""
  filter: ReturnStatusUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateReturnStatus!
}

input UpdateManyReturnTypesInput {
  """Filter used to find fields to update"""
  filter: ReturnTypeUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateReturnType!
}

input UpdateManyReturnedInvoiceProductsInput {
  """Filter used to find fields to update"""
  filter: ReturnedInvoiceProductUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateReturnedInvoiceProduct!
}

input UpdateManyReturnedInvoicesInput {
  """Filter used to find fields to update"""
  filter: ReturnedInvoiceUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateReturnedInvoice!
}

input UpdateManyRfmReportsInput {
  """Filter used to find fields to update"""
  filter: RfmReportUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateRfmReport!
}

input UpdateManyRipTemplateItemsInput {
  """Filter used to find fields to update"""
  filter: RipTemplateItemUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateRipTemplateItem!
}

input UpdateManyRipTemplatesInput {
  """Filter used to find fields to update"""
  filter: RipTemplateUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateRipTemplate!
}

input UpdateManyRoleDomainsInput {
  """Filter used to find fields to update"""
  filter: RoleDomainUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateRoleDomain!
}

input UpdateManyRoleHasPermissionsInput {
  """Filter used to find fields to update"""
  filter: RoleHasPermissionUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateRoleHasPermission!
}

input UpdateManyRussiansInput {
  """Filter used to find fields to update"""
  filter: RussianUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateRussian!
}

input UpdateManySenderInformationsInput {
  """Filter used to find fields to update"""
  filter: SenderInformationUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateSenderInformation!
}

input UpdateManyShippingServicesInput {
  """Filter used to find fields to update"""
  filter: ShippingServiceUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateShippingService!
}

input UpdateManySitemapStaticPagesInput {
  """Filter used to find fields to update"""
  filter: SitemapStaticPageUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateSitemapStaticPage!
}

input UpdateManySizeGuidesDetailsInput {
  """Filter used to find fields to update"""
  filter: SizeGuidesDetailUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateSizeGuidesDetail!
}

input UpdateManySizeGuidesInput {
  """Filter used to find fields to update"""
  filter: SizeGuideUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateSizeGuide!
}

input UpdateManySocialFacebookAccountsInput {
  """Filter used to find fields to update"""
  filter: SocialFacebookAccountUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateSocialFacebookAccount!
}

input UpdateManySocialGoogleAccountsInput {
  """Filter used to find fields to update"""
  filter: SocialGoogleAccountUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateSocialGoogleAccount!
}

input UpdateManySpecialOffersInput {
  """Filter used to find fields to update"""
  filter: SpecialOfferUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateSpecialOffer!
}

input UpdateManyStatesInput {
  """Filter used to find fields to update"""
  filter: StateUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateState!
}

input UpdateManySubcolorsInput {
  """Filter used to find fields to update"""
  filter: SubcolorUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateSubcolor!
}

input UpdateManySubproductSpecialImagesInput {
  """Filter used to find fields to update"""
  filter: SubproductSpecialImageUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateSubproductSpecialImage!
}

input UpdateManySubproductStockHistoriesInput {
  """Filter used to find fields to update"""
  filter: SubproductStockHistoryUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateSubproductStockHistory!
}

input UpdateManySubproductVideosInput {
  """Filter used to find fields to update"""
  filter: SubproductVideoUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateSubproductVideo!
}

input UpdateManySubproductsInput {
  """Filter used to find fields to update"""
  filter: SubproductUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateSubproduct!
}

input UpdateManySubscribersInput {
  """Filter used to find fields to update"""
  filter: SubscriberUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateSubscriber!
}

input UpdateManyTagsInput {
  """Filter used to find fields to update"""
  filter: TagUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateTag!
}

input UpdateManyTempSubproductDiscountsInput {
  """Filter used to find fields to update"""
  filter: TempSubproductDiscountUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateTempSubproductDiscount!
}

input UpdateManyTestimonialsInput {
  """Filter used to find fields to update"""
  filter: TestimonialUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateTestimonial!
}

input UpdateManyTextLayersInput {
  """Filter used to find fields to update"""
  filter: TextLayerUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateTextLayer!
}

input UpdateManyTmpRfmReportsInput {
  """Filter used to find fields to update"""
  filter: TmpRfmReportUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateTmpRfmReport!
}

input UpdateManyTmpRussiaProductsInput {
  """Filter used to find fields to update"""
  filter: TmpRussiaProductUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateTmpRussiaProduct!
}

input UpdateManyTmpSpainOrdersInput {
  """Filter used to find fields to update"""
  filter: TmpSpainOrderUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateTmpSpainOrder!
}

input UpdateManyTmpSpanishNamesInput {
  """Filter used to find fields to update"""
  filter: TmpSpanishNameUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateTmpSpanishName!
}

input UpdateManyTmpTagChangesPrintsInput {
  """Filter used to find fields to update"""
  filter: TmpTagChangesPrintUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateTmpTagChangesPrint!
}

input UpdateManyTorobProductsInput {
  """Filter used to find fields to update"""
  filter: TorobProductUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateTorobProduct!
}

input UpdateManyTransactionsInput {
  """Filter used to find fields to update"""
  filter: TransactionUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateTransaction!
}

input UpdateManyUserCartsInput {
  """Filter used to find fields to update"""
  filter: UserCartUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateUserCart!
}

input UpdateManyUserHasPermissionsInput {
  """Filter used to find fields to update"""
  filter: UserHasPermissionUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateUserHasPermission!
}

input UpdateManyUserHasRolesInput {
  """Filter used to find fields to update"""
  filter: UserHasRoleUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateUserHasRole!
}

input UpdateManyUserUtmsInput {
  """Filter used to find fields to update"""
  filter: UserUtmUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateUserUtm!
}

input UpdateManyUsersInput {
  """Filter used to find fields to update"""
  filter: UserUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateUser!
}

input UpdateManyUtmGoogleFormCouponsInput {
  """Filter used to find fields to update"""
  filter: UtmGoogleFormCouponUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateUtmGoogleFormCoupon!
}

input UpdateManyUtmsInput {
  """Filter used to find fields to update"""
  filter: UtmUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateUtm!
}

input UpdateManyVerifyUsersInput {
  """Filter used to find fields to update"""
  filter: VerifyUserUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateVerifyUser!
}

input UpdateManyVideosInput {
  """Filter used to find fields to update"""
  filter: VideoUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateVideo!
}

input UpdateManyVisitorCouponsInput {
  """Filter used to find fields to update"""
  filter: VisitorCouponUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateVisitorCoupon!
}

input UpdateManyVisitorGroupRatesInput {
  """Filter used to find fields to update"""
  filter: VisitorGroupRateUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateVisitorGroupRate!
}

input UpdateManyVisitorGroupsInput {
  """Filter used to find fields to update"""
  filter: VisitorGroupUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateVisitorGroup!
}

input UpdateManyVisitorSalesInput {
  """Filter used to find fields to update"""
  filter: VisitorSaleUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateVisitorSale!
}

input UpdateManyVisitorsInput {
  """Filter used to find fields to update"""
  filter: VisitorUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateVisitor!
}

input UpdateManyWalletGiftChargesInput {
  """Filter used to find fields to update"""
  filter: WalletGiftChargeUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateWalletGiftCharge!
}

input UpdateManyWalletHistoriesInput {
  """Filter used to find fields to update"""
  filter: WalletHistoryUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateWalletHistory!
}

input UpdateManyWalletsInput {
  """Filter used to find fields to update"""
  filter: WalletUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateWallet!
}

input UpdateManyWebsitePagesInput {
  """Filter used to find fields to update"""
  filter: WebsitePageUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateWebsitePage!
}

input UpdateManyWebsiteVisitsInput {
  """Filter used to find fields to update"""
  filter: WebsiteVisitUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateWebsiteVisit!
}

input UpdateManyWithdrawalRequestStatusesInput {
  """Filter used to find fields to update"""
  filter: WithdrawalRequestStatusUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateWithdrawalRequestStatus!
}

input UpdateManyWithdrawalRequestsInput {
  """Filter used to find fields to update"""
  filter: WithdrawalRequestUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateWithdrawalRequest!
}

input UpdateManyWonderfulOffersInput {
  """Filter used to find fields to update"""
  filter: WonderfulOfferUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateWonderfulOffer!
}

input UpdateMellatPaymentError {
  code: String
  createdAt: DateTime
  id: ID
  message: String
  updatedAt: DateTime
}

input UpdateMigration {
  batch: Float
  id: ID
  migration: String
}

input UpdateModelHasPermission {
  modelId: String
  modelType: String
  permission: PermissionDomain
  permissionId: ID
}

input UpdateModelHasRole {
  modelId: String
  modelType: String
  role: RoleDomainInput
  roleId: ID
}

input UpdateModelVisit {
  createdAt: DateTime
  id: ID
  modelId: Float
  modelName: String
  updatedAt: DateTime
  user: UserDomain
  userId: Float
}

input UpdateModemaAccelerator {
  city: String
  createdAt: DateTime
  details: String
  hasOffice: String
  id: ID
  instagram: String
  jobCategory: String
  modemaAcceleratorImages: [ModemaAcceleratorImageDomain!]
  modemaAcceleratorVideos: [ModemaAcceleratorVideoDomain!]
  name: String
  phone: String
  pro: String
  updatedAt: DateTime
}

input UpdateModemaAcceleratorImage {
  createdAt: DateTime
  filename: String
  id: ID
  mime: String
  modemaAccelerator: ModemaAcceleratorDomain
  modemaAcceleratorId: Float
  originalFilename: String
  path: String
  type: String
  updatedAt: DateTime
  uploadSource: String
}

input UpdateModemaAcceleratorVideo {
  altText: String
  createdAt: DateTime
  filename: String
  id: ID
  mime: String
  modemaAccelerator: ModemaAcceleratorDomain
  modemaAcceleratorId: Float
  originalFilename: String
  path: String
  type: String
  updatedAt: DateTime
  uploadSource: String
}

input UpdateNeedsPhotographySubproduct {
  announcedDate: DateTime
  announcedUser: UserDomain
  announcedUserId: Float
  createdAt: DateTime
  deletedAt: DateTime
  id: ID
  photographyDate: DateTime
  photographyUser: UserDomain
  photographyUserId: Float
  subproduct: SubproductDomain
  subproductId: Float
  updatedAt: DateTime
}

input UpdateNegotiation {
  createdAt: DateTime
  customerId: Float
  dateTime: DateTime
  fileNegotiations: [FileNegotiationDomain!]
  id: ID
  invoiceNegotiations: [InvoiceNegotiationDomain!]
  isRead: Boolean
  name: String
  negotiationHistories: [NegotiationHistoryDomain!]
  negotiationStatus: NegotiationStatusDomain
  negotiationStatusId: Float
  negotiationSteps: [NegotiationStepDomain!]
  negotiator: UserDomain
  negotiatorId: Float
  priority: Float
  submittedBy: Float
  submittedBy2: UserDomain
  tel: String
  updatedAt: DateTime
}

input UpdateNegotiationHistory {
  createdAt: DateTime
  id: ID
  negotiation: NegotiationDomain
  negotiationId: Float
  negotiationStatus: NegotiationStatusDomain
  negotiationStatusId: Float
  newNegotiator: UserDomain
  newNegotiatorId: Float
  oldNegotiator: UserDomain
  oldNegotiatorId: Float
  submittedBy: Float
  submittedBy2: UserDomain
  updatedAt: DateTime
}

input UpdateNegotiationStatus {
  createdAt: DateTime
  id: ID
  name: String
  negotiationHistories: [NegotiationHistoryDomain!]
  negotiations: [NegotiationDomain!]
  updatedAt: DateTime
}

input UpdateNegotiationStep {
  content: String
  createdAt: DateTime
  id: ID
  negotiation: NegotiationDomain
  negotiationId: Float
  negotiationType: NegotiationTypeDomain
  negotiationTypeId: Float
  submittedAt: DateTime
  submittedBy: Float
  submittedBy2: UserDomain
  updatedAt: DateTime
}

input UpdateNegotiationStepInput {
  content: String
  createdAt: DateTime
  id: Int!
  negotiation: NegotiationDomain
  negotiationId: Float
  negotiationType: NegotiationTypeDomain
  negotiationTypeId: Float
  submittedAt: DateTime
  submittedBy: Float
  submittedBy2: UserDomain
  updatedAt: DateTime
}

input UpdateNegotiationType {
  createdAt: DateTime
  id: ID
  name: String
  negotiationSteps: [NegotiationStepDomain!]
  updatedAt: DateTime
}

input UpdateNewBorder {
  brand: String
  color: String
  design: String
  designer: String
  id: ID
  material: String
  name: String
  newBorder: String
  oldBorder: String
  sizes: String
  type: String
}

input UpdateOauthAccessToken {
  clientId: Float
  createdAt: DateTime
  expiresAt: DateTime
  id: ID
  name: String
  revoked: Boolean
  scopes: String
  updatedAt: DateTime
  userId: Float
}

input UpdateOauthAuthCode {
  clientId: Float
  expiresAt: DateTime
  id: ID
  revoked: Boolean
  scopes: String
  userId: Float
}

input UpdateOauthClient {
  createdAt: DateTime
  id: ID
  name: String
  passwordClient: Boolean
  personalAccessClient: Boolean
  provider: String
  redirect: String
  revoked: Boolean
  secret: String
  updatedAt: DateTime
  userId: Float
}

input UpdateOauthPersonalAccessClient {
  clientId: Float
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
}

input UpdateOauthRefreshToken {
  accessTokenId: String
  expiresAt: DateTime
  id: ID
  revoked: Boolean
}

input UpdateOneActivityInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateActivity!
}

input UpdateOneAddressInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateAddress!
}

input UpdateOneAttributeAttributeGroupInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateAttributeAttributeGroup!
}

input UpdateOneAttributeGroupInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateAttributeGroup!
}

input UpdateOneAttributeInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateAttribute!
}

input UpdateOneAttributeItemInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateAttributeItem!
}

input UpdateOneAttributeProductInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateAttributeProduct!
}

input UpdateOneAttributeSubproductInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateAttributeSubproduct!
}

input UpdateOneAutomationEventInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateAutomationEvent!
}

input UpdateOneAutomationRfmScoreInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateAutomationRfmScore!
}

input UpdateOneBasicCarpetBorderInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateBasicCarpetBorder!
}

input UpdateOneBasicCarpetBrandInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateBasicCarpetBrand!
}

input UpdateOneBasicCarpetColorInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateBasicCarpetColor!
}

input UpdateOneBasicCarpetDesignInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateBasicCarpetDesign!
}

input UpdateOneBasicCarpetDesignerInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateBasicCarpetDesigner!
}

input UpdateOneBasicCarpetMaterialInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateBasicCarpetMaterial!
}

input UpdateOneBasicCarpetSizeDetailInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateBasicCarpetSizeDetail!
}

input UpdateOneBasicCarpetSizeInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateBasicCarpetSize!
}

input UpdateOneBasicCarpetTypeInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateBasicCarpetType!
}

input UpdateOneBorderInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateBorder!
}

input UpdateOneCampaignFreeOfferInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCampaignFreeOffer!
}

input UpdateOneCampaignFreeOfferSizeInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCampaignFreeOfferSize!
}

input UpdateOneCampaignGoldCoinSubInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCampaignGoldCoinSub!
}

input UpdateOneCampaignInstagramFollowInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCampaignInstagramFollow!
}

input UpdateOneCampaignPetFormInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCampaignPetForm!
}

input UpdateOneCampaignRoomvoImageInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCampaignRoomvoImage!
}

input UpdateOneCampaignRoomvoVoteInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCampaignRoomvoVote!
}

input UpdateOneCampaignSubscriptionInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCampaignSubscription!
}

input UpdateOneCampaignUefaEuroSubscriberHistoryInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCampaignUefaEuroSubscriberHistory!
}

input UpdateOneCampaignUefaEuroSubscriberInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCampaignUefaEuroSubscriber!
}

input UpdateOneCampaignVotingImageInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCampaignVotingImage!
}

input UpdateOneCampaignVotingImageUserInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCampaignVotingImageUser!
}

input UpdateOneCarpetFeatureInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCarpetFeature!
}

input UpdateOneCarpetFeatureUserInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCarpetFeatureUser!
}

input UpdateOneCarpetMaterialInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCarpetMaterial!
}

input UpdateOneCarpetShapeInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCarpetShape!
}

input UpdateOneCarpetSizeInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCarpetSize!
}

input UpdateOneCarpetUsagePlaceInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCarpetUsagePlace!
}

input UpdateOneCarpetUsagePlaceInvoiceProductInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCarpetUsagePlaceInvoiceProduct!
}

input UpdateOneCarpetUsagePlaceUserInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCarpetUsagePlaceUser!
}

input UpdateOneChaparSettlementStatusInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateChaparSettlementStatus!
}

input UpdateOneChaparTrackingHistoryInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateChaparTrackingHistory!
}

input UpdateOneCitiesSepidarInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCitiesSepidar!
}

input UpdateOneCity2Input {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCity2!
}

input UpdateOneCityInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCity!
}

input UpdateOneColorCategoryDetailInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateColorCategoryDetail!
}

input UpdateOneColorCategoryInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateColorCategory!
}

input UpdateOneColorCategorySubproductInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateColorCategorySubproduct!
}

input UpdateOneColorInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateColor!
}

input UpdateOneConfigInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateConfig!
}

input UpdateOneContactFormHistoryInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateContactFormHistory!
}

input UpdateOneContactFormInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateContactForm!
}

input UpdateOneContactFormStatusInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateContactFormStatus!
}

input UpdateOneCountryInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCountry!
}

input UpdateOneCouponInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCoupon!
}

input UpdateOneCouponSubjectInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCouponSubject!
}

input UpdateOneCrmPresentationInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCrmPresentation!
}

input UpdateOneCustomerImageProductInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCustomerImageProduct!
}

input UpdateOneCustomerRequestFileInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCustomerRequestFile!
}

input UpdateOneCustomerRequestInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCustomerRequest!
}

input UpdateOneCustomerVideoProductInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCustomerVideoProduct!
}

input UpdateOneDamageReasonInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateDamageReason!
}

input UpdateOneDepartmentInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateDepartment!
}

input UpdateOneDesignInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateDesign!
}

input UpdateOneDesignersProductPriceRangeInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateDesignersProductPriceRange!
}

input UpdateOneDiscountInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateDiscount!
}

input UpdateOneDiscountNotificationInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateDiscountNotification!
}

input UpdateOneDiscountSubjectInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateDiscountSubject!
}

input UpdateOneExitControlInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateExitControl!
}

input UpdateOneExitControlItemInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateExitControlItem!
}

input UpdateOneExportProductInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateExportProduct!
}

input UpdateOneFailedJobInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateFailedJob!
}

input UpdateOneFavoriteProductInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateFavoriteProduct!
}

input UpdateOneFedexAddressValidationAttributeInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateFedexAddressValidationAttribute!
}

input UpdateOneFetchSiteUrlInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateFetchSiteUrl!
}

input UpdateOneFileInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateFile!
}

input UpdateOneFileNegotiationInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateFileNegotiation!
}

input UpdateOneGhazalInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateGhazal!
}

input UpdateOneGoogleFormUtmInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateGoogleFormUtm!
}

input UpdateOneHeardAboutUsOptionInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateHeardAboutUsOption!
}

input UpdateOneHelpDeskInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateHelpDesk!
}

input UpdateOneHolidayInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateHoliday!
}

input UpdateOneHomePageCustomerImageInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateHomePageCustomerImage!
}

input UpdateOneHyperInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateHyper!
}

input UpdateOneHyperstarCodeInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateHyperstarCode!
}

input UpdateOneImageInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateImage!
}

input UpdateOneImageLayerInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateImageLayer!
}

input UpdateOneImageProductInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateImageProduct!
}

input UpdateOneImageSizeInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateImageSize!
}

input UpdateOneImageSubproductInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateImageSubproduct!
}

input UpdateOneImagesSizeGuidesDetailInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateImagesSizeGuidesDetail!
}

input UpdateOneImpersonateHistoryInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateImpersonateHistory!
}

input UpdateOneIncredibleOfferInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateIncredibleOffer!
}

input UpdateOneIncredibleOfferSentNotificationInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateIncredibleOfferSentNotification!
}

input UpdateOneInstagramFeedInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateInstagramFeed!
}

input UpdateOneInvitationCodeInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateInvitationCode!
}

input UpdateOneInvoiceAddressInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateInvoiceAddress!
}

input UpdateOneInvoiceAddressValidationResultInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateInvoiceAddressValidationResult!
}

input UpdateOneInvoiceBankGatewayHistoryInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateInvoiceBankGatewayHistory!
}

input UpdateOneInvoiceHistoryInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateInvoiceHistory!
}

input UpdateOneInvoiceInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateInvoice!
}

input UpdateOneInvoiceInvoiceStatusInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateInvoiceInvoiceStatus!
}

input UpdateOneInvoiceModeInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateInvoiceMode!
}

input UpdateOneInvoiceNegotiationInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateInvoiceNegotiation!
}

input UpdateOneInvoicePaymentHistoryInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateInvoicePaymentHistory!
}

input UpdateOneInvoicePaymentInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateInvoicePayment!
}

input UpdateOneInvoicePaymentStatusInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateInvoicePaymentStatus!
}

input UpdateOneInvoicePaymentTypeInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateInvoicePaymentType!
}

input UpdateOneInvoiceProductHistoryInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateInvoiceProductHistory!
}

input UpdateOneInvoiceProductInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateInvoiceProduct!
}

input UpdateOneInvoiceProductItemInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateInvoiceProductItem!
}

input UpdateOneInvoiceProductItemInvoiceProductStatusInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateInvoiceProductItemInvoiceProductStatus!
}

input UpdateOneInvoiceProductStatusInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateInvoiceProductStatus!
}

input UpdateOneInvoiceRatesResultInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateInvoiceRatesResult!
}

input UpdateOneInvoiceReversalInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateInvoiceReversal!
}

input UpdateOneInvoiceReversalItemInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateInvoiceReversalItem!
}

input UpdateOneInvoiceShippingRateInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateInvoiceShippingRate!
}

input UpdateOneInvoiceStatusInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateInvoiceStatus!
}

input UpdateOneInvoiceTypeInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateInvoiceType!
}

input UpdateOneLabelInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateLabel!
}

input UpdateOneLabelProductInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateLabelProduct!
}

input UpdateOneMellatPaymentErrorInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateMellatPaymentError!
}

input UpdateOneMigrationInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateMigration!
}

input UpdateOneModelHasPermissionInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateModelHasPermission!
}

input UpdateOneModelHasRoleInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateModelHasRole!
}

input UpdateOneModelVisitInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateModelVisit!
}

input UpdateOneModemaAcceleratorImageInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateModemaAcceleratorImage!
}

input UpdateOneModemaAcceleratorInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateModemaAccelerator!
}

input UpdateOneModemaAcceleratorVideoInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateModemaAcceleratorVideo!
}

input UpdateOneNeedsPhotographySubproductInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateNeedsPhotographySubproduct!
}

input UpdateOneNegotiationHistoryInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateNegotiationHistory!
}

input UpdateOneNegotiationInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateNegotiation!
}

input UpdateOneNegotiationStatusInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateNegotiationStatus!
}

input UpdateOneNegotiationStepInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateNegotiationStep!
}

input UpdateOneNegotiationTypeInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateNegotiationType!
}

input UpdateOneNewBorderInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateNewBorder!
}

input UpdateOneOauthAccessTokenInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateOauthAccessToken!
}

input UpdateOneOauthAuthCodeInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateOauthAuthCode!
}

input UpdateOneOauthClientInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateOauthClient!
}

input UpdateOneOauthPersonalAccessClientInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateOauthPersonalAccessClient!
}

input UpdateOneOauthRefreshTokenInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateOauthRefreshToken!
}

input UpdateOneOutOfStockButListedProductInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateOutOfStockButListedProduct!
}

input UpdateOnePasswordResetInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdatePasswordReset!
}

input UpdateOnePatternCategoryInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdatePatternCategory!
}

input UpdateOnePatternInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdatePattern!
}

input UpdateOnePatternLayerInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdatePatternLayer!
}

input UpdateOnePaymentMethodFieldInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdatePaymentMethodField!
}

input UpdateOnePaymentMethodInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdatePaymentMethod!
}

input UpdateOnePaymentRequestInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdatePaymentRequest!
}

input UpdateOnePaymentRequestStatusInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdatePaymentRequestStatus!
}

input UpdateOnePermissionGroupInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdatePermissionGroup!
}

input UpdateOnePermissionInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdatePermission!
}

input UpdateOnePreorderInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdatePreorder!
}

input UpdateOnePreorderPreorderStatusInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdatePreorderPreorderStatus!
}

input UpdateOnePreorderRegisterInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdatePreorderRegister!
}

input UpdateOnePreorderStatusInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdatePreorderStatus!
}

input UpdateOnePriceGroupInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdatePriceGroup!
}

input UpdateOnePriceGroupSizeInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdatePriceGroupSize!
}

input UpdateOnePrintProfileInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdatePrintProfile!
}

input UpdateOnePrintRipInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdatePrintRip!
}

input UpdateOneProductCategoryDetailInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateProductCategoryDetail!
}

input UpdateOneProductCategoryInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateProductCategory!
}

input UpdateOneProductCategoryRateInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateProductCategoryRate!
}

input UpdateOneProductColorImageInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateProductColorImage!
}

input UpdateOneProductColorSaleInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateProductColorSale!
}

input UpdateOneProductCommentInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateProductComment!
}

input UpdateOneProductCommentLikeInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateProductCommentLike!
}

input UpdateOneProductInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateProduct!
}

input UpdateOneProductLikeInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateProductLike!
}

input UpdateOneProductProductCategoryInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateProductProductCategory!
}

input UpdateOneProductRateAverageInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateProductRateAverage!
}

input UpdateOneProductRateInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateProductRate!
}

input UpdateOneProductTagInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateProductTag!
}

input UpdateOneProductVideoInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateProductVideo!
}

input UpdateOneProductionPadInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateProductionPad!
}

input UpdateOneProductionPadProductionPadStatusInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateProductionPadProductionPadStatus!
}

input UpdateOneProductionPadStatusInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateProductionPadStatus!
}

input UpdateOneProductionReceiptTypeInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateProductionReceiptType!
}

input UpdateOneProductionRollInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateProductionRoll!
}

input UpdateOneRateInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateRate!
}

input UpdateOneReadyToSendProductInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateReadyToSendProduct!
}

input UpdateOneRecommendedProductInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateRecommendedProduct!
}

input UpdateOneRecommendedSubproductInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateRecommendedSubproduct!
}

input UpdateOneRedisSavedKeyInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateRedisSavedKey!
}

input UpdateOneRelatedProductInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateRelatedProduct!
}

input UpdateOneRetargetingWalletChargeInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateRetargetingWalletCharge!
}

input UpdateOneReturnItemStatusInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateReturnItemStatus!
}

input UpdateOneReturnItemStatusReturnRequestItemInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateReturnItemStatusReturnRequestItem!
}

input UpdateOneReturnReasonInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateReturnReason!
}

input UpdateOneReturnRequestAddressInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateReturnRequestAddress!
}

input UpdateOneReturnRequestHistoryInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateReturnRequestHistory!
}

input UpdateOneReturnRequestInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateReturnRequest!
}

input UpdateOneReturnRequestItemHistoryInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateReturnRequestItemHistory!
}

input UpdateOneReturnRequestItemImageInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateReturnRequestItemImage!
}

input UpdateOneReturnRequestItemInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateReturnRequestItem!
}

input UpdateOneReturnRequestItemReturnItemStatusInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateReturnRequestItemReturnItemStatus!
}

input UpdateOneReturnRequestItemVideoInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateReturnRequestItemVideo!
}

input UpdateOneReturnRequestReturnStatusInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateReturnRequestReturnStatus!
}

input UpdateOneReturnStatusInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateReturnStatus!
}

input UpdateOneReturnTypeInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateReturnType!
}

input UpdateOneReturnedInvoiceInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateReturnedInvoice!
}

input UpdateOneReturnedInvoiceProductInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateReturnedInvoiceProduct!
}

input UpdateOneRfmReportInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateRfmReport!
}

input UpdateOneRipTemplateInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateRipTemplate!
}

input UpdateOneRipTemplateItemInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateRipTemplateItem!
}

input UpdateOneRoleDomainInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateRoleDomain!
}

input UpdateOneRoleHasPermissionInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateRoleHasPermission!
}

input UpdateOneRussianInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateRussian!
}

input UpdateOneSenderInformationInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateSenderInformation!
}

input UpdateOneShippingServiceInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateShippingService!
}

input UpdateOneSitemapStaticPageInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateSitemapStaticPage!
}

input UpdateOneSizeGuideInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateSizeGuide!
}

input UpdateOneSizeGuidesDetailInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateSizeGuidesDetail!
}

input UpdateOneSocialFacebookAccountInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateSocialFacebookAccount!
}

input UpdateOneSocialGoogleAccountInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateSocialGoogleAccount!
}

input UpdateOneSpecialOfferInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateSpecialOffer!
}

input UpdateOneStateInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateState!
}

input UpdateOneSubcolorInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateSubcolor!
}

input UpdateOneSubproductInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateSubproduct!
}

input UpdateOneSubproductSpecialImageInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateSubproductSpecialImage!
}

input UpdateOneSubproductStockHistoryInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateSubproductStockHistory!
}

input UpdateOneSubproductVideoInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateSubproductVideo!
}

input UpdateOneSubscriberInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateSubscriber!
}

input UpdateOneTagInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateTag!
}

input UpdateOneTempSubproductDiscountInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateTempSubproductDiscount!
}

input UpdateOneTestimonialInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateTestimonial!
}

input UpdateOneTextLayerInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateTextLayer!
}

input UpdateOneTmpRfmReportInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateTmpRfmReport!
}

input UpdateOneTmpRussiaProductInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateTmpRussiaProduct!
}

input UpdateOneTmpSpainOrderInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateTmpSpainOrder!
}

input UpdateOneTmpSpanishNameInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateTmpSpanishName!
}

input UpdateOneTmpTagChangesPrintInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateTmpTagChangesPrint!
}

input UpdateOneTorobProductInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateTorobProduct!
}

input UpdateOneTransactionInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateTransaction!
}

input UpdateOneUserCartInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateUserCart!
}

input UpdateOneUserHasPermissionInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateUserHasPermission!
}

input UpdateOneUserHasRoleInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateUserHasRole!
}

input UpdateOneUserInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateUser!
}

input UpdateOneUserUtmInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateUserUtm!
}

input UpdateOneUtmGoogleFormCouponInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateUtmGoogleFormCoupon!
}

input UpdateOneUtmInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateUtm!
}

input UpdateOneVerifyUserInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateVerifyUser!
}

input UpdateOneVideoInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateVideo!
}

input UpdateOneVisitorCouponInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateVisitorCoupon!
}

input UpdateOneVisitorGroupInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateVisitorGroup!
}

input UpdateOneVisitorGroupRateInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateVisitorGroupRate!
}

input UpdateOneVisitorInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateVisitor!
}

input UpdateOneVisitorSaleInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateVisitorSale!
}

input UpdateOneWalletGiftChargeInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateWalletGiftCharge!
}

input UpdateOneWalletHistoryInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateWalletHistory!
}

input UpdateOneWalletInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateWallet!
}

input UpdateOneWebsitePageInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateWebsitePage!
}

input UpdateOneWebsiteVisitInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateWebsiteVisit!
}

input UpdateOneWithdrawalRequestInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateWithdrawalRequest!
}

input UpdateOneWithdrawalRequestStatusInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateWithdrawalRequestStatus!
}

input UpdateOneWonderfulOfferInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateWonderfulOffer!
}

input UpdateOutOfStockButListedProduct {
  createdAt: DateTime
  id: ID
  product: ProductDomain
  productId: Float
  updatedAt: DateTime
}

input UpdatePasswordReset {
  createdAt: DateTime
  email: ID
  token: String
}

input UpdatePattern {
  createdAt: DateTime
  filename: String
  id: ID
  isActive: Float
  keywords: String
  mime: String
  name: String
  originalFilename: String
  path: String
  patternCategory: PatternCategoryDomain
  patternCategoryId: Float
  patternLayers: [PatternLayerDomain!]
  sortOrder: Float
  thumbnailFilename: String
  updatedAt: DateTime
  viewCounter: Float
}

input UpdatePatternCategory {
  createdAt: DateTime
  id: ID
  image: ImageDomain
  imageId: Float
  isActive: Float
  name: String
  patterns: [PatternDomain!]
  sortOrder: Float
  updatedAt: DateTime
  viewCounter: Float
}

input UpdatePatternLayer {
  centerX: Float
  centerY: Float
  createdAt: DateTime
  design: DesignDomain
  designId: Float
  filename: String
  id: ID
  path: String
  pattern: PatternDomain
  patternId: Float
  repeat: Float
  rotation: Float
  scaleX: Float
  scaleY: Float
  sortOrder: Float
  updatedAt: DateTime
}

input UpdatePaymentMethod {
  id: ID
  name: String
  paymentMethodFields: [PaymentMethodFieldDomain!]
}

input UpdatePaymentMethodField {
  createdAt: DateTime
  id: ID
  invoice: InvoiceDomain
  invoiceId: Float
  name: String
  paymentIdentifier: String
  paymentMethod: PaymentMethodDomain
  paymentMethodId: Float
  updatedAt: DateTime
  value: String
}

input UpdatePaymentRequest {
  adminUser: UserDomain
  adminUserId: Float
  amount: String
  bankAccountNumber: String
  createdAt: DateTime
  id: ID
  message: String
  paymentRequestStatus: PaymentRequestStatusDomain
  paymentRequestStatusId: Float
  updatedAt: DateTime
  visitor: VisitorDomain
  visitorId: Float
}

input UpdatePaymentRequestStatus {
  createdAt: DateTime
  id: ID
  name: String
  paymentRequests: [PaymentRequestDomain!]
  updatedAt: DateTime
}

input UpdatePermission {
  createdAt: DateTime
  guardName: String
  id: ID
  modelHasPermissions: [ModelHasPermissionDomain!]
  name: String
  parent: PermissionDomain
  parentId: Float
  permissionGroup: PermissionGroupDomain
  permissionGroupId: Float
  permissions: [PermissionDomain!]
  roles: [RoleDomainInput!]
  updatedAt: DateTime
}

input UpdatePermissionGroup {
  createdAt: DateTime
  id: ID
  name: String
  permissions: [PermissionDomain!]
  updatedAt: DateTime
}

input UpdatePreorder {
  activationCode: String
  activationSendDate: DateTime
  activationSendDateP: String
  activationSendTurn: Float
  assignedUser: UserDomain
  assignedUserId: Float
  companyDescription: String
  createdAt: DateTime
  createdAtP: String
  customerDescription: String
  dateOfTurn: String
  dateOfTurnP: String
  deletedAt: DateTime
  expirationDate: DateTime
  expirationDateP: String
  id: ID
  isActivated: Boolean
  lastCallDate: DateTime
  lastCallDateP: String
  name: String
  phone: String
  phone2: String
  preorderPreorderStatuses: [PreorderPreorderStatusDomain!]
  preorderStatus: PreorderStatusDomain
  preorderStatusId: Float
  product: ProductDomain
  productId: Float
  salesPerson: UserDomain
  salesPersonId: Float
  subproduct: SubproductDomain
  subproductId: Float
  trackingCode: String
  updatedAt: DateTime
  user: UserDomain
  userId: Float
}

input UpdatePreorderPreorderStatus {
  companyDescription: String
  createdAt: DateTime
  id: ID
  preorder: PreorderDomain
  preorderId: Float
  preorderStatus: PreorderStatusDomain
  preorderStatusId: Float
  updatedAt: DateTime
  user: UserDomain
  userId: Float
}

input UpdatePreorderRegister {
  createdAt: DateTime
  id: ID
  invoiceBankGatewayHistories: [InvoiceBankGatewayHistoryDomain!]
  isConfirmed: Boolean
  isPaid: Boolean
  moneyTransferConfirmedBy: Float
  moneyTransferConfirmedBy2: UserDomain
  moneyTransferRefCode: String
  orderId: String
  paymentAmount: String
  paymentType: InvoicePaymentTypeDomain
  paymentTypeId: Float
  preorderDate: DateTime
  preorderNumber: String
  refCodeSales: String
  refId: String
  saleRefId: String
  updatedAt: DateTime
  user: UserDomain
  userId: Float
  withdrawnAmount: String
}

input UpdatePreorderStatus {
  createdAt: DateTime
  id: ID
  preorderPreorderStatuses: [PreorderPreorderStatusDomain!]
  preorders: [PreorderDomain!]
  status: String
  updatedAt: DateTime
}

input UpdatePriceGroup {
  createdAt: DateTime
  discountSubjects: [DiscountSubjectDomain!]
  id: ID
  name: String
  priceGroupSizes: [PriceGroupSizeDomain!]
  products: [ProductDomain!]
  updatedAt: DateTime
}

input UpdatePriceGroupSize {
  basicCarpetSize: BasicCarpetSizeDomain
  basicCarpetSizeId: Float
  bundlePadPrice: String
  bundlePrice: String
  createdAt: DateTime
  id: ID
  padPrice: String
  price: String
  priceGroup: PriceGroupDomain
  priceGroupId: Float
  updatedAt: DateTime
}

input UpdatePrintProfile {
  blackCurve: String
  blackGain: String
  createdAt: DateTime
  createdBy: Float
  createdBy2: UserDomain
  cyanCurve: String
  cyanGain: String
  fabricsBackgroundColor: String
  fabricsPerSquareMeterWeight: String
  fabricsTextureGrade: String
  headHeight: String
  heatSpeed: String
  heatTemperature: String
  id: ID
  inkCode: String
  invoiceProductItems: [InvoiceProductItemDomain!]
  isActive: Boolean
  laminateGlueType: String
  magentaCurve: String
  magentaGain: String
  passCount: String
  totalInkLimit: String
  updatedAt: DateTime
  updatedBy: Float
  updatedBy2: UserDomain
  versionChangeDate: DateTime
  versionNo: String
  yellowCurve: String
  yellowGain: String
}

input UpdatePrintRip {
  createdAt: DateTime
  id: ID
  invoiceProductItems: [InvoiceProductItemDomain!]
  ripNumber: String
  ripTemplate: RipTemplateDomain
  ripTemplateId: Float
  updatedAt: DateTime
  user: UserDomain
  userId: Float
}

input UpdateProduct {
  activeUpdatedAt: DateTime
  attributeProducts: [AttributeProductDomain!]
  bestSellerColor: BasicCarpetColorDomain
  bestSellerColorId: Float
  carpetHasRoots: Boolean
  code: String
  collectionName: String
  colors: String
  couponSubjects: [CouponSubjectDomain!]
  createdAt: DateTime
  customerImageProducts: [CustomerImageProductDomain!]
  customerVideoProducts: [CustomerVideoProductDomain!]
  description: String
  descriptionEn: String
  designerIsGeneral: Float
  discountNotifications: [DiscountNotificationDomain!]
  discountSubjects: [DiscountSubjectDomain!]
  emallsActive: Boolean
  emallsTitle: String
  favoriteProducts: [FavoriteProductDomain!]
  homePageCustomerImages: [HomePageCustomerImageDomain!]
  id: ID
  image: ImageDomain
  imageId: Float
  imageProducts: [ImageProductDomain!]
  incredibleOffers: [IncredibleOfferDomain!]
  invoiceProductHistories: [InvoiceProductHistoryDomain!]
  invoiceProductHistories2: [InvoiceProductHistoryDomain!]
  invoiceProducts: [InvoiceProductDomain!]
  invoiceProducts2: [InvoiceProductDomain!]
  isActive: Boolean
  isCarpetPad: Boolean
  isSelfEmployedDesigner: Float
  isShaggy: Boolean
  labelProducts: [LabelProductDomain!]
  length: Float
  metaTags: String
  metaTagsEn: String
  minBasicCarpetSize: BasicCarpetSizeDomain
  minBasicCarpetSizeId: Float
  name: String
  nameEn: String
  nameEs: String
  newSubproductsCreated: Float
  outOfStockButListedProducts: [OutOfStockButListedProductDomain!]
  pageTitle: String
  pageTitleEn: String
  parentProduct: ProductDomain
  parentProductId: Float
  preorders: [PreorderDomain!]
  price: String
  priceGroup: PriceGroupDomain
  priceGroupId: Float
  productColorImages: [ProductColorImageDomain!]
  productColorSales: [ProductColorSaleDomain!]
  productComments: [ProductCommentDomain!]
  productLikes: [ProductLikeDomain!]
  productProductCategories: [ProductProductCategoryDomain!]
  productRateAverages: [ProductRateAverageDomain!]
  productRates: [ProductRateDomain!]
  productTags: [ProductTagDomain!]
  productVideos: [ProductVideoDomain!]
  products: [ProductDomain!]
  rate: Float
  rateCount: Float
  readyToSendProducts: [ReadyToSendProductDomain!]
  recommendedProducts: [RecommendedProductDomain!]
  relatedProducts: [RelatedProductDomain!]
  relatedProducts2: [RelatedProductDomain!]
  returnRequestItemHistories: [ReturnRequestItemHistoryDomain!]
  returnRequestItems: [ReturnRequestItemDomain!]
  returnedInvoiceProducts: [ReturnedInvoiceProductDomain!]
  russianName: String
  saleCount: Float
  saleCountDaily: Float
  searchName: String
  searchNameEn: String
  size: Float
  sizeIsCustomizable: Float
  snapppayActive: Boolean
  snapppaySortOrder: Boolean
  sortOrder: Float
  specialOffers: [SpecialOfferDomain!]
  specialOffers2: [SpecialOfferDomain!]
  subproducts: [SubproductDomain!]
  torobProducts: [TorobProductDomain!]
  totalDislike: Float
  totalLike: Float
  updatedAt: DateTime
  urlSlug: String
  urlSlugEn: String
  userCarts: [UserCartDomain!]
  userCarts2: [UserCartDomain!]
  viewCounter: Float
  width: Float
  wonderfulOffers: [WonderfulOfferDomain!]
}

input UpdateProductCategory {
  attributeGroups: [AttributeGroupDomain!]
  couponSubjects: [CouponSubjectDomain!]
  createdAt: DateTime
  description: String
  descriptionEn: String
  descriptionSingleSize: String
  discountSubjects: [DiscountSubjectDomain!]
  hierarchyCode: String
  homepageImage: ImageDomain
  homepageImageId: Float
  id: ID
  image: ImageDomain
  imageId: Float
  imageSize: ImageSizeDomain
  imageSizeId: Float
  isActive: Boolean
  metaTags: String
  metaTagsEn: String
  metaTagsSingleSize: String
  mobileImage: ImageDomain
  mobileImageId: Float
  name: String
  nameEn: String
  pageTitle: String
  pageTitleEn: String
  pageTitleSingleSize: String
  parent: ProductCategoryDomain
  parentId: Float
  productCategories: [ProductCategoryDomain!]
  productCategoryRates: [ProductCategoryRateDomain!]
  productProductCategories: [ProductProductCategoryDomain!]
  searchName: String
  searchNameEn: String
  showOnHomepage: Boolean
  sortOrder: Float
  updatedAt: DateTime
  urlSlug: String
  urlSlugEn: String
  viewCounter: Float
}

input UpdateProductCategoryDetail {
  createdAt: DateTime
  detailText: String
  detailTextEn: String
  id: ID
  isActive: Boolean
  productCategoryId: Float
  sortOrder: Float
  title: String
  titleEn: String
  updatedAt: DateTime
}

input UpdateProductCategoryRate {
  createdAt: DateTime
  id: ID
  productCategory: ProductCategoryDomain
  productCategoryId: Float
  rate: RateDomain
  rateId: Float
  updatedAt: DateTime
}

input UpdateProductColorImage {
  basicCarpetColor: BasicCarpetColorDomain
  basicCarpetColorId: Float
  createdAt: DateTime
  id: ID
  image: ImageDomain
  imageId: Float
  product: ProductDomain
  productId: Float
  sortOrder: Float
  updatedAt: DateTime
}

input UpdateProductColorSale {
  averageSaleCount: Float
  basicCarpetColor: BasicCarpetColorDomain
  basicCarpetColorId: Float
  createdAt: DateTime
  id: ID
  product: ProductDomain
  productId: Float
  saleCount: Float
  saleCountYear: Float
  updatedAt: DateTime
}

input UpdateProductComment {
  approved: Boolean
  approvedBy: Float
  approvedBy2: UserDomain
  comment: String
  createdAt: DateTime
  id: ID
  isBuyer: Boolean
  parentComment: ProductCommentDomain
  parentCommentId: Float
  product: ProductDomain
  productCommentLikes: [ProductCommentLikeDomain!]
  productComments: [ProductCommentDomain!]
  productId: Float
  productRates: [ProductRateDomain!]
  recommended: Boolean
  starred: Boolean
  subproduct: SubproductDomain
  subproductId: Float
  totalDislikes: Float
  totalLikes: Float
  updatedAt: DateTime
  user: UserDomain
  userId: Float
  walletGiftCharges: WalletGiftChargeDomain
}

input UpdateProductCommentLike {
  createdAt: DateTime
  id: ID
  isDisliked: Boolean
  isLiked: Boolean
  productComment: ProductCommentDomain
  productCommentId: Float
  updatedAt: DateTime
  user: UserDomain
  userId: Float
}

input UpdateProductLike {
  createdAt: DateTime
  id: ID
  isLike: Boolean
  product: ProductDomain
  productId: Float
  subproduct: SubproductDomain
  subproductId: Float
  updatedAt: DateTime
  user: UserDomain
  userId: Float
}

input UpdateProductProductCategory {
  createdAt: DateTime
  id: ID
  product: ProductDomain
  productCategory: ProductCategoryDomain
  productCategoryId: Float
  productId: Float
  updatedAt: DateTime
}

input UpdateProductRate {
  createdAt: DateTime
  id: ID
  oldRate: Float
  product: ProductDomain
  productComment: ProductCommentDomain
  productCommentId: Float
  productId: Float
  rate: RateDomain
  rateId: Float
  rateValue: Float
  subproduct: SubproductDomain
  subproductId: Float
  updatedAt: DateTime
  user: UserDomain
  userId: Float
}

input UpdateProductRateAverage {
  averageRate: Float
  createdAt: DateTime
  id: ID
  product: ProductDomain
  productId: Float
  rate: RateDomain
  rateCount: Float
  rateId: Float
  subproduct: SubproductDomain
  subproductId: Float
  updatedAt: DateTime
}

input UpdateProductTag {
  createdAt: DateTime
  id: ID
  product: ProductDomain
  productId: Float
  subproduct: SubproductDomain
  subproductId: Float
  tag: TagDomain
  tagId: Float
  updatedAt: DateTime
}

input UpdateProductVideo {
  basicCarpetColor: BasicCarpetColorDomain
  basicCarpetColorId: Float
  createdAt: DateTime
  id: ID
  product: ProductDomain
  productId: Float
  sortOrder: Float
  updatedAt: DateTime
  video: VideoDomain
  videoId: Float
}

input UpdateProductionPad {
  basicCarpetSize: BasicCarpetSizeDomain
  basicCarpetSizeId: Float
  code: String
  createdAt: DateTime
  id: ID
  isTagPrinted: Boolean
  isUsed: Boolean
  productionPadProductionPadStatuses: [ProductionPadProductionPadStatusDomain!]
  productionPadStatus: ProductionPadStatusDomain
  productionPadStatusId: Float
  requestDate: DateTime
  rollRefCode: String
  rowNo: Float
  updatedAt: DateTime
}

input UpdateProductionPadProductionPadStatus {
  createdAt: DateTime
  id: ID
  productionPad: ProductionPadDomain
  productionPadId: Float
  productionPadStatus: ProductionPadStatusDomain
  productionPadStatusId: Float
  updatedAt: DateTime
  user: UserDomain
  userId: Float
}

input UpdateProductionPadStatus {
  createdAt: DateTime
  id: ID
  name: String
  productionPadProductionPadStatuses: [ProductionPadProductionPadStatusDomain!]
  productionPads: [ProductionPadDomain!]
  step: Float
  updatedAt: DateTime
}

input UpdateProductionReceiptType {
  createdAt: DateTime
  id: ID
  name: String
  updatedAt: DateTime
}

input UpdateProductionRoll {
  billNumber: String
  closeDate: DateTime
  closedBy: Float
  closedBy2: UserDomain
  createdAt: DateTime
  createdBy: Float
  createdBy2: UserDomain
  id: ID
  invoiceProductItems: [InvoiceProductItemDomain!]
  isClosed: Boolean
  isShaggy: Boolean
  length: Float
  rollNumber: String
  shaggyColor: String
  updatedAt: DateTime
  weight: Float
  width: Float
}

input UpdateRate {
  createdAt: DateTime
  description: String
  id: ID
  isActive: Float
  name: String
  productCategoryRates: [ProductCategoryRateDomain!]
  productRateAverages: [ProductRateAverageDomain!]
  productRates: [ProductRateDomain!]
  sortOrder: Float
  updatedAt: DateTime
}

input UpdateReadyToSendProduct {
  createdAt: DateTime
  id: ID
  product: ProductDomain
  productId: Float
  updatedAt: DateTime
}

input UpdateRecommendedProduct {
  createdAt: DateTime
  id: ID
  product: ProductDomain
  productId: Float
  updatedAt: DateTime
}

input UpdateRecommendedSubproduct {
  createdAt: DateTime
  id: ID
  subproduct: SubproductDomain
  subproductId: Float
  updatedAt: DateTime
}

input UpdateRedisSavedKey {
  createdAt: DateTime
  id: ID
  keyLength: Float
  redisKey: String
  sortOrder: Float
  updatedAt: DateTime
}

input UpdateRelatedProduct {
  createdAt: DateTime
  id: ID
  product: ProductDomain
  productId: Float
  relatedProduct: ProductDomain
  relatedProductId: Float
  updatedAt: DateTime
}

input UpdateRetargetingWalletCharge {
  amount: String
  chargedInvoices: String
  createdAt: DateTime
  id: ID
  lastChargedAt: DateTime
  updatedAt: DateTime
  user: UserDomain
  userId: Float
  wallet: WalletDomain
  walletId: Float
}

input UpdateReturnItemStatus {
  createdAt: DateTime
  id: ID
  isActive: Boolean
  name: String
  returnItemStatusReturnRequestItems: [ReturnItemStatusReturnRequestItemDomain!]
  returnRequestItemHistories: [ReturnRequestItemHistoryDomain!]
  returnRequestItemReturnItemStatuses: [ReturnRequestItemReturnItemStatusDomain!]
  returnRequestItems: [ReturnRequestItemDomain!]
  sortOrder: Float
  stepGuarantee: Float
  stepTest: Float
  updatedAt: DateTime
}

input UpdateReturnItemStatusReturnRequestItem {
  createdAt: DateTime
  description: String
  id: ID
  returnItemStatus: ReturnItemStatusDomain
  returnItemStatusId: Float
  returnRequestItem: ReturnRequestItemDomain
  returnRequestItemId: Float
  updatedAt: DateTime
  user: UserDomain
  userId: Float
}

input UpdateReturnReason {
  createdAt: DateTime
  id: ID
  isActive: Boolean
  reason: String
  returnRequestItemHistories: [ReturnRequestItemHistoryDomain!]
  returnRequestItems: [ReturnRequestItemDomain!]
  returnedInvoices: [ReturnedInvoiceDomain!]
  sortOrder: Float
  updatedAt: DateTime
}

input UpdateReturnRequest {
  coupon: CouponDomain
  couponAmount: String
  couponId: Float
  createdAt: DateTime
  description: String
  id: ID
  invoice: InvoiceDomain
  invoiceId: Float
  modemaBlocked: String
  parent: ReturnRequestDomain
  parentId: Float
  requestDate: String
  requestNumber: String
  returnRequestAddresses: [ReturnRequestAddressDomain!]
  returnRequestHistories: ReturnRequestHistoryDomain
  returnRequestItemHistories: [ReturnRequestItemHistoryDomain!]
  returnRequestItems: [ReturnRequestItemDomain!]
  returnRequestReturnStatuses: [ReturnRequestReturnStatusDomain!]
  returnRequests: ReturnRequestDomain
  returnStatus: ReturnStatusDomain
  returnStatusId: Float
  returnType: ReturnTypeDomain
  returnTypeId: Float
  shippingServiceCustomer: String
  shippingServiceModema: String
  submittedByFactory: Boolean
  trackingCodeCustomer: String
  trackingCodeModema: String
  updatedAt: DateTime
  user: UserDomain
  userBlocked: String
  userId: Float
  withdrawable: String
}

input UpdateReturnRequestAddress {
  address: String
  address2: String
  addressId: Float
  address_2: AddressDomain
  city: CityDomain
  cityId: Float
  country: CountryDomain
  countryId: Float
  createdAt: DateTime
  email: String
  fullAddress: String
  fullname: String
  id: ID
  latitude: String
  longitude: String
  phone: String
  phone2: String
  returnRequest: ReturnRequestDomain
  returnRequestId: Float
  state: StateDomain
  stateId: Float
  updatedAt: DateTime
  user: UserDomain
  userId: Float
  zipCode: String
}

input UpdateReturnRequestHistory {
  createdAt: DateTime
  description: String
  editorUser: UserDomain
  editorUserId: Float
  id: ID
  invoice: InvoiceDomain
  invoiceId: Float
  modemaBlocked: String
  parent: ReturnRequestDomain
  parentId: Float
  requestDate: String
  requestNumber: String
  returnRequestId: Float
  returnRequestItemHistories: [ReturnRequestItemHistoryDomain!]
  returnStatus: ReturnStatusDomain
  returnStatusId: Float
  returnType: ReturnTypeDomain
  returnTypeId: Float
  shippingServiceCustomer: String
  shippingServiceModema: String
  trackingCodeCustomer: String
  trackingCodeModema: String
  updatedAt: DateTime
  user: UserDomain
  userBlocked: String
  userId: Float
  withdrawable: String
}

input UpdateReturnRequestItem {
  code: String
  count: Float
  createdAt: DateTime
  description: String
  descriptionAccounting: String
  descriptionFactory: String
  descriptionSales: String
  id: ID
  invoiceProduct: InvoiceProductDomain
  invoiceProductId: Float
  product: ProductDomain
  productId: Float
  returnItemStatus: ReturnItemStatusDomain
  returnItemStatusId: Float
  returnItemStatusReturnRequestItems: [ReturnItemStatusReturnRequestItemDomain!]
  returnReason: ReturnReasonDomain
  returnReasonId: Float
  returnRequest: ReturnRequestDomain
  returnRequestId: Float
  returnRequestItemHistories: [ReturnRequestItemHistoryDomain!]
  returnRequestItemImages: [ReturnRequestItemImageDomain!]
  returnRequestItemReturnItemStatuses: [ReturnRequestItemReturnItemStatusDomain!]
  returnRequestItemVideos: [ReturnRequestItemVideoDomain!]
  rowNo: Float
  subproduct: SubproductDomain
  subproductId: Float
  updatedAt: DateTime
}

input UpdateReturnRequestItemHistory {
  code: String
  count: Float
  createdAt: DateTime
  description: String
  descriptionAccounting: String
  descriptionFactory: String
  descriptionSales: String
  id: ID
  invoiceProduct: InvoiceProductDomain
  invoiceProductId: Float
  product: ProductDomain
  productId: Float
  returnItemStatus: ReturnItemStatusDomain
  returnItemStatusId: Float
  returnReason: ReturnReasonDomain
  returnReasonId: Float
  returnRequest: ReturnRequestDomain
  returnRequestHistory: ReturnRequestHistoryDomain
  returnRequestHistoryId: Float
  returnRequestId: Float
  returnRequestItem: ReturnRequestItemDomain
  returnRequestItemId: Float
  rowNo: Float
  subproduct: SubproductDomain
  subproductId: Float
  updatedAt: DateTime
}

input UpdateReturnRequestItemImage {
  createdAt: DateTime
  id: ID
  image: ImageDomain
  imageId: Float
  returnRequestItem: ReturnRequestItemDomain
  returnRequestItemId: Float
  updatedAt: DateTime
}

input UpdateReturnRequestItemReturnItemStatus {
  createdAt: DateTime
  description: String
  id: ID
  returnItemStatus: ReturnItemStatusDomain
  returnItemStatusId: Float
  returnRequestItem: ReturnRequestItemDomain
  returnRequestItemId: Float
  updatedAt: DateTime
  user: UserDomain
  userId: Float
}

input UpdateReturnRequestItemVideo {
  createdAt: DateTime
  id: ID
  returnRequestItem: ReturnRequestItemDomain
  returnRequestItemId: Float
  updatedAt: DateTime
  video: VideoDomain
  videoId: Float
}

input UpdateReturnRequestReturnStatus {
  createdAt: DateTime
  description: String
  id: ID
  returnRequest: ReturnRequestDomain
  returnRequestId: Float
  returnStatus: ReturnStatusDomain
  returnStatusId: Float
  updatedAt: DateTime
  user: UserDomain
  userId: Float
}

input UpdateReturnStatus {
  createdAt: DateTime
  id: ID
  isActive: Boolean
  name: String
  returnRequestHistories: [ReturnRequestHistoryDomain!]
  returnRequestReturnStatuses: [ReturnRequestReturnStatusDomain!]
  returnRequests: [ReturnRequestDomain!]
  sortOrder: Float
  stepGuarantee: Float
  stepTest: Float
  updatedAt: DateTime
}

input UpdateReturnType {
  createdAt: DateTime
  id: ID
  isActive: Boolean
  name: String
  returnRequestHistories: [ReturnRequestHistoryDomain!]
  returnRequests: [ReturnRequestDomain!]
  updatedAt: DateTime
}

input UpdateReturnedInvoice {
  createdAt: DateTime
  description: String
  id: ID
  invoice: InvoiceDomain
  invoiceId: Float
  replacementInvoice: InvoiceDomain
  replacementInvoiceId: Float
  returnDate: DateTime
  returnReason: ReturnReasonDomain
  returnReasonId: Float
  returnedInvoiceProducts: [ReturnedInvoiceProductDomain!]
  snappInformed: Boolean
  updatedAt: DateTime
  user: UserDomain
  userId: Float
}

input UpdateReturnedInvoiceProduct {
  count: Float
  createdAt: DateTime
  description: String
  id: ID
  invoiceProduct: InvoiceProductDomain
  invoiceProductId: Float
  product: ProductDomain
  productId: Float
  returnedInvoice: ReturnedInvoiceDomain
  returnedInvoiceId: Float
  subproduct: SubproductDomain
  subproductId: Float
  updatedAt: DateTime
}

input UpdateRfmReport {
  id: ID
  kharid1: String
  kharid2: String
  kharid3: String
  kharid4: String
  kharid5: String
  kharid6: String
  kharid7: String
  kharid8: String
  kharid9: String
  kharid10: String
  kharid11: String
  kharid12: String
  kharid13: String
  kharid14: String
  kharid15: String
  kharid16: String
  kharid17: String
  kharid18: String
  kharid19: String
  kharid20: String
  name: String
  phone: String
}

input UpdateRipTemplate {
  createdAt: DateTime
  id: ID
  name: String
  printRips: [PrintRipDomain!]
  ripTemplateItems: [RipTemplateItemDomain!]
  updatedAt: DateTime
  user: UserDomain
  userId: Float
}

input UpdateRipTemplateItem {
  basicCarpetSize: BasicCarpetSizeDomain
  basicCarpetSizeId: Float
  createdAt: DateTime
  id: ID
  length: Float
  ripTemplate: RipTemplateDomain
  ripTemplateId: Float
  updatedAt: DateTime
  width: Float
}

input UpdateRoleDomain {
  createdAt: DateTime
  guardName: String
  id: Float
  name: String
  updatedAt: DateTime
}

input UpdateRoleHasPermission {
  permission: PermissionDomain
  permissionId: ID
  role: RoleDomainInput
  roleId: String
}

input UpdateRussian {
  id: ID
  name: String
  russianName: String
}

input UpdateSenderInformation {
  buildingPart: String
  buildingPartDescription: String
  city: CityDomain
  cityId: Float
  commodityDescription: String
  companyName: String
  contactId: Float
  country: CountryDomain
  countryId: Float
  createdAt: DateTime
  emailAddress: String
  faxNumber: String
  id: ID
  isActive: Boolean
  latitude: String
  location: String
  longitude: String
  packageLocation: String
  pagerNumber: String
  personName: String
  phoneExtension: String
  phoneNumber: String
  postalCode: String
  remarks: String
  state: StateDomain
  stateId: Float
  streetLines: String
  title: String
  updatedAt: DateTime
}

input UpdateShippingService {
  code: String
  description: String
  fullDescription: String
  id: ID
  invoiceRatesResults: [InvoiceRatesResultDomain!]
  invoiceShippingRates: [InvoiceShippingRateDomain!]
  isActive: Boolean
  name: String
}

input UpdateSitemapStaticPage {
  changefreq: String
  createdAt: DateTime
  id: ID
  loc: String
  priority: Float
  updatedAt: DateTime
}

input UpdateSizeGuide {
  createdAt: DateTime
  id: ID
  image: ImageDomain
  imageId: Float
  sizeGuidesDetails: [SizeGuidesDetailDomain!]
  text: String
  title: String
  updatedAt: DateTime
}

input UpdateSizeGuidesDetail {
  createdAt: DateTime
  detailsText: String
  detailsTitle: String
  iconText: String
  iconTitle: String
  id: ID
  image: ImageDomain
  imageId: Float
  imagesSizeGuidesDetails: [ImagesSizeGuidesDetailDomain!]
  sizeGuide: SizeGuideDomain
  sizeGuideId: Float
  text: String
  title: String
  updatedAt: DateTime
}

input UpdateSocialFacebookAccount {
  createdAt: DateTime
  id: ID
  provider: String
  providerUserId: String
  updatedAt: DateTime
  user: UserDomain
  userId: Float
}

input UpdateSocialGoogleAccount {
  createdAt: DateTime
  id: ID
  provider: String
  providerUserId: String
  updatedAt: DateTime
  user: UserDomain
  userId: Float
}

input UpdateSpecialOffer {
  createdAt: DateTime
  id: ID
  specialOfferImageUrl: String
  specialOfferProduct: ProductDomain
  specialOfferProductId: Float
  specialOfferSubtitle: String
  specialOfferTitle: String
  updatedAt: DateTime
  wonderfulOfferProduct: ProductDomain
  wonderfulOfferProductId: Float
}

input UpdateState {
  addresses: [AddressDomain!]
  basicCarpetDesigners: [BasicCarpetDesignerDomain!]
  chaparId: Float
  cities: [CityDomain!]
  code: String
  country: CountryDomain
  countryId: Float
  createdAt: DateTime
  id: ID
  invoiceAddresses: [InvoiceAddressDomain!]
  name: String
  returnRequestAddresses: [ReturnRequestAddressDomain!]
  senderInformations: [SenderInformationDomain!]
  sepidarId: Float
  tipaxId: Float
  updatedAt: DateTime
}

input UpdateSubcolor {
  color: ColorDomain
  colorCode: String
  colorCodeOriginal: String
  colorId: Float
  colorName: String
  hexCode: String
  id: ID
  order: Float
}

input UpdateSubproduct {
  attributeSubproducts: [AttributeSubproductDomain!]
  basicCarpetBorder: BasicCarpetBorderDomain
  basicCarpetBorderId: Float
  basicCarpetBrand: BasicCarpetBrandDomain
  basicCarpetBrandId: Float
  basicCarpetColor: BasicCarpetColorDomain
  basicCarpetColorId: Float
  basicCarpetDesign: BasicCarpetDesignDomain
  basicCarpetDesignId: Float
  basicCarpetDesigner: BasicCarpetDesignerDomain
  basicCarpetDesignerId: Float
  basicCarpetMaterial: BasicCarpetMaterialDomain
  basicCarpetMaterialId: Float
  basicCarpetSize: BasicCarpetSizeDomain
  basicCarpetSizeId: Float
  basicCarpetType: BasicCarpetTypeDomain
  basicCarpetTypeId: Float
  borderColor: String
  bundlePadPrice: String
  bundlePrice: String
  code: String
  colorCategoriesChanged: Float
  colorCategorySubproducts: [ColorCategorySubproductDomain!]
  colorName: String
  colorNameEs: String
  colors: String
  couponSubjects: [CouponSubjectDomain!]
  createdAt: DateTime
  description: String
  discountSubjects: [DiscountSubjectDomain!]
  favoriteProducts: [FavoriteProductDomain!]
  getStockCountFromSepidar: Boolean
  id: ID
  image: ImageDomain
  imageId: Float
  imageSubproducts: [ImageSubproductDomain!]
  invoiceProductHistories: [InvoiceProductHistoryDomain!]
  invoiceProducts: [InvoiceProductDomain!]
  isActive: Boolean
  isOutOfStock: Boolean
  length: Float
  mainImageChanged: Boolean
  name: String
  nameEn: String
  needsPhotographySubproducts: [NeedsPhotographySubproductDomain!]
  otherImagesChanged: Boolean
  padPrice: String
  preorders: [PreorderDomain!]
  price: String
  product: ProductDomain
  productComments: [ProductCommentDomain!]
  productId: Float
  productLikes: [ProductLikeDomain!]
  productRateAverages: [ProductRateAverageDomain!]
  productRates: [ProductRateDomain!]
  productTags: [ProductTagDomain!]
  rate: Float
  rateCount: Float
  recommendedSubproducts: [RecommendedSubproductDomain!]
  returnRequestItemHistories: [ReturnRequestItemHistoryDomain!]
  returnRequestItems: [ReturnRequestItemDomain!]
  returnedInvoiceProducts: [ReturnedInvoiceProductDomain!]
  saleCount: Float
  searchName: String
  searchNameEn: String
  sepidarId: Float
  shortCode: String
  size: Float
  sizeIsCustomizable: Float
  sortOrder: Float
  stockCount: Float
  subproductSpecialImages: [SubproductSpecialImageDomain!]
  subproductStockHistories: [SubproductStockHistoryDomain!]
  subproductVideos: [SubproductVideoDomain!]
  torobProducts: [TorobProductDomain!]
  totalDislike: Float
  totalLike: Float
  updatedAt: DateTime
  userCarts: [UserCartDomain!]
  userCarts2: [UserCartDomain!]
  video: VideoDomain
  videoId: Float
  width: Float
}

input UpdateSubproductSpecialImage {
  createdAt: DateTime
  id: ID
  image: ImageDomain
  imageId: Float
  sortOrder: Float
  subproduct: SubproductDomain
  subproductId: Float
  updatedAt: DateTime
}

input UpdateSubproductStockHistory {
  createdAt: DateTime
  id: ID
  invoiceProduct: InvoiceProductDomain
  invoiceProductId: Float
  newValue: Float
  oldValue: Float
  subproduct: SubproductDomain
  subproductId: Float
  updatedAt: DateTime
  user: UserDomain
  userId: Float
}

input UpdateSubproductVideo {
  createdAt: DateTime
  id: ID
  sortOrder: Float
  subproduct: SubproductDomain
  subproductId: Float
  updatedAt: DateTime
  video: VideoDomain
  videoId: Float
}

input UpdateSubscriber {
  createdAt: DateTime
  email: String
  id: ID
  mobile: String
  updatedAt: DateTime
}

input UpdateTag {
  columnOrder: Float
  columnWidth: Float
  createdAt: DateTime
  description: String
  descriptionEn: String
  discount: Float
  id: ID
  image: ImageDomain
  imageId: Float
  isActive: Float
  metaTags: String
  metaTagsEn: String
  pageTitle: String
  pageTitleEn: String
  productTags: [ProductTagDomain!]
  searchTitle: String
  searchTitleEn: String
  sliderImage: ImageDomain
  sliderImageId: Float
  sortOrder: Float
  specialOffer: Boolean
  title: String
  titleEn: String
  updatedAt: DateTime
  urlSlug: String
  urlSlugEn: String
  viewCounter: Float
}

input UpdateTempSubproductDiscount {
  allDiscountId: Float
  allWithStockDiscountId: Float
  categoryDiscountId: Float
  createdAt: DateTime
  discountPercent: Float
  padDiscountPercent: Float
  padPriceMinusDiscount: String
  priceGroupDiscountId: Float
  priceMinusDiscount: String
  productDiscountId: Float
  sizeDiscountId: Float
  subproductDiscountId: Float
  totalDiscountPercent: Float
  updatedAt: DateTime
  viewProductId: Float
  viewSubproductId: ID
}

input UpdateTestimonial {
  createdAt: DateTime
  description: String
  id: ID
  isActive: Boolean
  link: String
  logoImage: String
  sortOrder: Float
  title: String
  updatedAt: DateTime
}

input UpdateTextLayer {
  alignment: String
  centerX: Float
  centerY: Float
  color: String
  createdAt: DateTime
  design: DesignDomain
  designId: Float
  fontName: String
  id: ID
  letterSpacing: Float
  lineSpacing: Float
  rotation: Float
  scaleX: Float
  scaleY: Float
  sortOrder: Float
  text: String
  updatedAt: DateTime
}

input UpdateTmpRfmReport {
  id: ID
  kharid1: String
  kharid2: String
  kharid3: String
  kharid4: String
  kharid5: String
  name: String
  phone: String
}

input UpdateTmpRussiaProduct {
  borderCode: String
  code: String
  colorCode: String
  count: Float
  id: ID
  productCode: String
  sizeCode: String
}

input UpdateTmpSpainOrder {
  cnt_02: Float
  cnt_03: Float
  cnt_06: Float
  cnt_25: Float
  cnt_28: Float
  cnt_60: Float
  cnt_75: Float
  cnt_80: Float
  color: String
  colorCode: String
  design: String
  id: Float
  row: ID
}

input UpdateTmpSpanishName {
  colorId: Float
  name: ID
  nameEs: String
  productId: Float
  spanishTitle: String
  title: String
}

input UpdateTmpTagChangesPrint {
  code: String
  count: Float
  id: ID
  oldCode: String
  size: String
}

input UpdateTorobProduct {
  basicCarpetColor: BasicCarpetColorDomain
  basicCarpetColorId: Float
  basicCarpetSize: BasicCarpetSizeDomain
  basicCarpetSizeId: Float
  colorTitle: String
  createdAt: DateTime
  deletedAt: DateTime
  id: ID
  name: String
  product: ProductDomain
  productCategoryId: Float
  productId: Float
  sizeTitle: String
  subproduct: SubproductDomain
  subproductId: Float
  torobCategory: String
  updatedAt: DateTime
}

input UpdateTransaction {
  amount: Float
  approved: Boolean
  approvedBy: Float
  approvedBy2: UserDomain
  createdAt: DateTime
  description: String
  id: ID
  modelId: Float
  modelType: String
  modemaBlocked: Float
  tempInvoiceNumber: String
  updatedAt: DateTime
  user: UserDomain
  userBlocked: Float
  userId: Float
  walletHistories: [WalletHistoryDomain!]
  withdrawable: Float
}

input UpdateUser {
  activities: [ActivityInput!]
  addresses: [AddressDomain!]
  apiToken: String
  atmCardNo: String
  automationEvents: [AutomationEventDomain!]
  avatar: String
  basicCarpetDesigners: [BasicCarpetDesignerDomain!]
  campaignCartItems: String
  campaignCartItemsStartDate: DateTime
  campaignFindingCouponCode: String
  campaignFindingCouponFoundParts: String
  campaignFindingCouponHidingPlace: String
  campaignFindingCouponUsed: Boolean
  campaignFindingCouponWinnerPlace: Float
  campaignGoldCoinSubs: CampaignGoldCoinSubDomain
  campaignId: Float
  campaignInstagramFollows: [CampaignInstagramFollowDomain!]
  campaignPetForms: [CampaignPetFormDomain!]
  campaignRoomvoImages: [CampaignRoomvoImageDomain!]
  campaignRoomvoVotes: [CampaignRoomvoVoteDomain!]
  campaignSubscriptions: [CampaignSubscriptionDomain!]
  campaignUefaEuroSubscriberHistories: [CampaignUefaEuroSubscriberHistoryDomain!]
  campaignUefaEuroSubscribers: [CampaignUefaEuroSubscriberDomain!]
  campaignVotingImageUsers: [CampaignVotingImageUserDomain!]
  carpetFeatureUsers: [CarpetFeatureUserDomain!]
  carpetUsagePlaceUsers: [CarpetUsagePlaceUserDomain!]
  childrenCouponIsUsed: Boolean
  code: String
  commentsChargedAmount: String
  contactFormHistories: [ContactFormHistoryDomain!]
  contactForms: [ContactFormDomain!]
  coupons: [CouponDomain!]
  coupons2: [CouponDomain!]
  coupons3: [CouponDomain!]
  coupons4: [CouponDomain!]
  createdAt: DateTime
  customerRequests: [CustomerRequestDomain!]
  designs: [DesignDomain!]
  discountNotificationSentDate: DateTime
  discountNotifications: [DiscountNotificationDomain!]
  discounts: [DiscountDomain!]
  discounts2: [DiscountDomain!]
  email: String
  emailVerified: Float
  exitControls: [ExitControlDomain!]
  family: String
  favoriteProducts: [FavoriteProductDomain!]
  googleFormUtms: [GoogleFormUtmDomain!]
  hafezPoemCount: Float
  heardAboutUsOption: HeardAboutUsOptionDomain
  heardAboutUsOptionId: Float
  helpDesks: HelpDeskDomain
  holidays: [HolidayDomain!]
  id: ID
  impersonateHistories: [ImpersonateHistoryDomain!]
  impersonateHistories2: [ImpersonateHistoryDomain!]
  incredibleOfferSentNotifications: [IncredibleOfferSentNotificationDomain!]
  invitationCode: InvitationCodeDomain
  invitationCodeId: Float
  invoiceAddresses: [InvoiceAddressDomain!]
  invoiceHistories: [InvoiceHistoryDomain!]
  invoiceInvoiceStatuses: [InvoiceInvoiceStatusDomain!]
  invoicePaymentHistories: [InvoicePaymentHistoryDomain!]
  invoicePaymentHistories2: [InvoicePaymentHistoryDomain!]
  invoicePayments: [InvoicePaymentDomain!]
  invoicePayments2: [InvoicePaymentDomain!]
  invoiceProductItemInvoiceProductStatuses: [InvoiceProductItemInvoiceProductStatusDomain!]
  invoiceReversals: [InvoiceReversalDomain!]
  invoices: [InvoiceDomain!]
  invoices2: [InvoiceDomain!]
  isActive: Float
  isForeigner: Boolean
  isGuest: Float
  isPasswordChanged: Boolean
  isPreorderApplicant: Boolean
  loginEmail: String
  lotteryCode: String
  mah: Float
  modelVisits: [ModelVisitDomain!]
  monthlyRetargetingStartDate: DateTime
  name: String
  nationalId: String
  needsPhotographySubproducts: [NeedsPhotographySubproductDomain!]
  needsPhotographySubproducts2: [NeedsPhotographySubproductDomain!]
  negotiationHistories: [NegotiationHistoryDomain!]
  negotiationHistories2: [NegotiationHistoryDomain!]
  negotiationHistories3: [NegotiationHistoryDomain!]
  negotiationSteps: [NegotiationStepDomain!]
  negotiations: [NegotiationDomain!]
  negotiations2: [NegotiationDomain!]
  newUsersCampaignCharged: Boolean
  os: String
  osVersion: String
  password: String
  paymentRequests: [PaymentRequestDomain!]
  phone: String
  phoneVerified: Float
  phoneVerifiedBy: Float
  phoneVerifiedBy2: UserDomain
  preorderPaid: Boolean
  preorderPreorderStatuses: [PreorderPreorderStatusDomain!]
  preorderRegisterDate: DateTime
  preorderRegisters: [PreorderRegisterDomain!]
  preorderRegisters2: [PreorderRegisterDomain!]
  preorderTurnEndDate: String
  preorderTurnStartDate: String
  preorders: [PreorderDomain!]
  preorders2: [PreorderDomain!]
  preorders3: [PreorderDomain!]
  printProfiles: [PrintProfileDomain!]
  printProfiles2: [PrintProfileDomain!]
  printRips: [PrintRipDomain!]
  productCommentLikes: [ProductCommentLikeDomain!]
  productComments: [ProductCommentDomain!]
  productComments2: [ProductCommentDomain!]
  productLikes: [ProductLikeDomain!]
  productRates: [ProductRateDomain!]
  productionPadProductionPadStatuses: [ProductionPadProductionPadStatusDomain!]
  productionRolls: [ProductionRollDomain!]
  productionRolls2: [ProductionRollDomain!]
  profilePicture: String
  rememberToken: String
  retargetingIsUsed: Boolean
  retargetingWalletCharges: [RetargetingWalletChargeDomain!]
  returnItemStatusReturnRequestItems: [ReturnItemStatusReturnRequestItemDomain!]
  returnRequestAddresses: [ReturnRequestAddressDomain!]
  returnRequestHistories: [ReturnRequestHistoryDomain!]
  returnRequestHistories2: [ReturnRequestHistoryDomain!]
  returnRequestItemReturnItemStatuses: [ReturnRequestItemReturnItemStatusDomain!]
  returnRequestReturnStatuses: [ReturnRequestReturnStatusDomain!]
  returnRequests: [ReturnRequestDomain!]
  returnedInvoices: [ReturnedInvoiceDomain!]
  ripTemplates: [RipTemplateDomain!]
  roz: Float
  sal: Float
  sepidarCode: Float
  sepidarId: Float
  socialFacebookAccounts: [SocialFacebookAccountDomain!]
  socialGoogleAccounts: [SocialGoogleAccountDomain!]
  spinnerIsUsed: Boolean
  spinnerVerificationCode: String
  spinnerVerified: Boolean
  status: Float
  stripeId: String
  subproductStockHistories: [SubproductStockHistoryDomain!]
  temp: String
  tempName: String
  transactions: [TransactionDomain!]
  transactions2: [TransactionDomain!]
  updatedAt: DateTime
  userCarts: [UserCartDomain!]
  userHasPermission: [UserHasPermissionDomain!]
  userHasRole: [UserHasRoleDomain!]
  userUtms: [UserUtmDomain!]
  username: String
  users: [UserDomain!]
  utmGoogleFormCoupons: [UtmGoogleFormCouponDomain!]
  verificationCode: String
  verifyUsers: [VerifyUserDomain!]
  visitors: [VisitorDomain!]
  walletGiftCharges: [WalletGiftChargeDomain!]
  walletHistories: [WalletHistoryDomain!]
  wallets: WalletDomain
  withdrawalRequests: [WithdrawalRequestDomain!]
  withdrawalRequests2: [WithdrawalRequestDomain!]
}

input UpdateUserCart {
  bundleCount: Float
  count: Float
  createdAt: DateTime
  description: String
  design: DesignDomain
  designId: Float
  id: ID
  length: Float
  product: ProductDomain
  productId: Float
  relatedProduct: ProductDomain
  relatedProductId: Float
  relatedSubproduct: SubproductDomain
  relatedSubproductId: Float
  subproduct: SubproductDomain
  subproductId: Float
  updatedAt: DateTime
  user: UserDomain
  userId: Float
  width: Float
  withPad: Boolean
}

input UpdateUserHasPermission {
  permission: PermissionDomain
  permissionId: Float
  userId: ID
}

input UpdateUserHasRole {
  role: RoleDomainInput
  roleId: Float
  userId: ID
}

input UpdateUserInput {
  email: String
  id: Int!
  isActive: Int
  isGuest: Int
  isPreorderApplicant: Boolean
  name: String
  password: String
  phone: String
  phoneVerified: Int
  sepidarCode: Int
  sepidarId: Int
  username: String
}

type UpdateUserResponseDto {
  id: Float!
  name: String!
}

input UpdateUserUtm {
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
  user: UserDomain
  userId: Float
  utm: UtmDomain
  utmId: Float
}

input UpdateUtm {
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
  userUtms: [UserUtmDomain!]
  utmCampaign: String
  utmContent: String
  utmMedium: String
  utmSource: String
}

input UpdateUtmGoogleFormCoupon {
  coupon: CouponDomain
  couponId: Float
  createdAt: DateTime
  id: ID
  lastPurchaseDate: DateTime
  registerDate: DateTime
  returnDate: DateTime
  row: Float
  shortLink: String
  type: String
  updatedAt: DateTime
  user: UserDomain
  userId: Float
  utmLink: String
}

input UpdateVerifyUser {
  createdAt: DateTime
  id: ID
  token: String
  updatedAt: DateTime
  user: UserDomain
  userId: Float
}

input UpdateVideo {
  altText: String
  createdAt: DateTime
  customerVideoProducts: [CustomerVideoProductDomain!]
  filename: String
  id: ID
  mime: String
  originalFilename: String
  path: String
  productVideos: [ProductVideoDomain!]
  returnRequestItemVideos: [ReturnRequestItemVideoDomain!]
  subproductVideos: [SubproductVideoDomain!]
  subproducts: [SubproductDomain!]
  updatedAt: DateTime
  uploadSource: String
}

input UpdateVisitor {
  balance: Float
  cardNumber: String
  code: String
  createdAt: DateTime
  id: ID
  invoices: [InvoiceDomain!]
  isActive: Boolean
  isPartner: Boolean
  partnerCode: String
  paymentRequests: [PaymentRequestDomain!]
  sortOrder: Float
  title: String
  updatedAt: DateTime
  user: UserDomain
  userId: Float
  visitorCoupons: [VisitorCouponDomain!]
  visitorGroup: VisitorGroupDomain
  visitorGroupId: Float
  visitorSales: [VisitorSaleDomain!]
}

input UpdateVisitorCoupon {
  code: String
  createdAt: DateTime
  id: ID
  invoices: [InvoiceDomain!]
  isActive: Boolean
  name: String
  updatedAt: DateTime
  visitor: VisitorDomain
  visitorId: Float
}

input UpdateVisitorGroup {
  couponDiscountRate: Float
  createdAt: DateTime
  id: ID
  invoices: [InvoiceDomain!]
  name: String
  updatedAt: DateTime
  visitorGroupRates: [VisitorGroupRateDomain!]
  visitorSales: [VisitorSaleDomain!]
  visitors: [VisitorDomain!]
}

input UpdateVisitorGroupRate {
  createdAt: DateTime
  id: ID
  maxRevenue: Float
  minRevenue: Float
  rate: Float
  updatedAt: DateTime
  visitorGroup: VisitorGroupDomain
  visitorGroupId: Float
}

input UpdateVisitorSale {
  createdAt: DateTime
  endDate: DateTime
  id: ID
  monthSh: Float
  rate: Float
  startDate: DateTime
  totalSale: Float
  totalShare: Float
  updatedAt: DateTime
  visitor: VisitorDomain
  visitorGroup: VisitorGroupDomain
  visitorGroupId: Float
  visitorId: Float
  yearSh: Float
}

input UpdateWallet {
  createdAt: DateTime
  id: ID
  modemaBlocked: Float
  notUsableForLowTotalPrices: Boolean
  retargetingWalletCharges: [RetargetingWalletChargeDomain!]
  updatedAt: DateTime
  user: UserDomain
  userBlocked: Float
  userId: Float
  walletGiftCharges: [WalletGiftChargeDomain!]
  walletHistories: [WalletHistoryDomain!]
  withdrawable: Float
}

input UpdateWalletGiftCharge {
  amount: String
  createdAt: DateTime
  id: ID
  productComment: ProductCommentDomain
  productCommentId: Float
  updatedAt: DateTime
  user: UserDomain
  userId: Float
  wallet: WalletDomain
  walletId: Float
}

input UpdateWalletHistory {
  createdAt: DateTime
  createdBy: Float
  createdBy2: UserDomain
  id: ID
  modemaBlocked: Float
  transaction: TransactionDomain
  transactionId: Float
  updatedAt: DateTime
  userBlocked: Float
  wallet: WalletDomain
  walletId: Float
  withdrawable: Float
}

input UpdateWalletInput {
  description: String
  modemaBlocked: Float
  notUsableForLowTotalPrices: Float
  userBlocked: Float
  userId: Float!
  withdrawable: Float
}

type UpdateWalletResponseDto {
  walletId: Float!
}

input UpdateWebsitePage {
  createdAt: DateTime
  id: ID
  key: String
  page: String
  updatedAt: DateTime
  value: String
}

input UpdateWebsiteVisit {
  createdAt: DateTime
  dailyVisits: Float
  dateM: String
  dateSh: String
  daySh: Float
  id: ID
  monthSh: Float
  updatedAt: DateTime
  yearSh: Float
}

input UpdateWithdrawalRequest {
  amount: String
  cardNo: String
  confirmedAt: DateTime
  confirmedBy: Float
  createdAt: DateTime
  id: ID
  moneyTransferFromBank: String
  moneyTransferRefCode: String
  name: String
  updatedAt: DateTime
  user: UserDomain
  userId: Float
  withdrawalRequestStatus: WithdrawalRequestStatusDomain
  withdrawalRequestStatusId: Float
}

input UpdateWithdrawalRequestStatus {
  createdAt: DateTime
  id: ID
  status: String
  updatedAt: DateTime
  withdrawalRequests: [WithdrawalRequestDomain!]
}

input UpdateWonderfulOffer {
  createdAt: DateTime
  dayOfWeek: Float
  id: ID
  product: ProductDomain
  productId: Float
  updatedAt: DateTime
}

type User {
  activities: [Activity!]!
  addresses: [Address!]!
  apiToken: String
  atmCardNo: String
  automationEvents: [AutomationEvent!]!
  avatar: String
  basicCarpetDesigners: [BasicCarpetDesigner!]!
  campaignCartItems: String
  campaignCartItemsStartDate: DateTime
  campaignFindingCouponCode: String
  campaignFindingCouponFoundParts: String!
  campaignFindingCouponHidingPlace: String
  campaignFindingCouponUsed: Boolean!
  campaignFindingCouponWinnerPlace: Float
  campaignGoldCoinSubs: CampaignGoldCoinSub!
  campaignId: Float
  campaignInstagramFollows: [CampaignInstagramFollow!]!
  campaignPetForms: [CampaignPetForm!]!
  campaignRoomvoImages: [CampaignRoomvoImage!]!
  campaignRoomvoVotes: [CampaignRoomvoVote!]!
  campaignSubscriptions: [CampaignSubscription!]!
  campaignUefaEuroSubscriberHistories: [CampaignUefaEuroSubscriberHistory!]!
  campaignUefaEuroSubscribers: [CampaignUefaEuroSubscriber!]!
  campaignVotingImageUsers: [CampaignVotingImageUser!]!
  carpetFeatureUsers: [CarpetFeatureUser!]
  carpetUsagePlaceUsers: [CarpetUsagePlaceUser!]
  childrenCouponIsUsed: Boolean!
  code: String
  commentsChargedAmount: String!
  contactFormHistories: [ContactFormHistory!]
  contactForms: [ContactForm!]
  coupons: [Coupon!]
  coupons2: [Coupon!]
  coupons3: [Coupon!]
  coupons4: [Coupon!]
  createdAt: DateTime
  customerRequests: [CustomerRequest!]
  designs: [Design!]
  discountNotificationSentDate: DateTime
  discountNotifications: [DiscountNotification!]
  discounts: [Discount!]
  discounts2: [Discount!]
  email: String
  emailVerified: Float
  exitControls: [ExitControl!]
  family: String!
  favoriteProducts: [FavoriteProduct!]
  googleFormUtms: [GoogleFormUtm!]
  hafezPoemCount: Float!
  heardAboutUsOption: HeardAboutUsOption
  heardAboutUsOptionId: Float
  helpDesks: HelpDesk
  holidays: [Holiday!]
  id: ID!
  impersonateHistories: [ImpersonateHistory!]
  impersonateHistories2: [ImpersonateHistory!]
  incredibleOfferSentNotifications: [IncredibleOfferSentNotification!]
  invitationCode: InvitationCode
  invitationCodeId: Float
  invoiceAddresses: [InvoiceAddress!]
  invoiceHistories: [InvoiceHistory!]
  invoiceInvoiceStatuses: [InvoiceInvoiceStatus!]
  invoicePaymentHistories: [InvoicePaymentHistory!]
  invoicePaymentHistories2: [InvoicePaymentHistory!]
  invoicePayments: [InvoicePayment!]
  invoicePayments2: [InvoicePayment!]
  invoiceProductItemInvoiceProductStatuses: [InvoiceProductItemInvoiceProductStatus!]
  invoiceReversals: [InvoiceReversal!]
  invoices: [Invoice!]
  invoices2: [Invoice!]
  isActive: Float
  isForeigner: Boolean!
  isGuest: Float
  isPasswordChanged: Boolean!
  isPreorderApplicant: Boolean!
  loginEmail: String
  lotteryCode: String
  mah: Float
  modelVisits: [ModelVisit!]
  monthlyRetargetingStartDate: DateTime
  name: String!
  nationalId: String
  needsPhotographySubproducts: [NeedsPhotographySubproduct!]
  needsPhotographySubproducts2: [NeedsPhotographySubproduct!]
  negotiationHistories: [NegotiationHistory!]
  negotiationHistories2: [NegotiationHistory!]
  negotiationHistories3: [NegotiationHistory!]
  negotiationSteps: [NegotiationStep!]
  negotiations: [Negotiation!]
  negotiations2: [Negotiation!]
  newUsersCampaignCharged: Boolean!
  os: String
  osVersion: String
  password: String
  paymentRequests: [PaymentRequest!]
  phone: String
  phoneVerified: Float
  phoneVerifiedBy: Float
  phoneVerifiedBy2: User
  preorderPaid: Boolean!
  preorderPreorderStatuses: [PreorderPreorderStatus!]
  preorderRegisterDate: DateTime
  preorderRegisters: [PreorderRegister!]
  preorderRegisters2: [PreorderRegister!]
  preorderTurnEndDate: String
  preorderTurnStartDate: String
  preorders: [Preorder!]
  preorders2: [Preorder!]
  preorders3: [Preorder!]
  printProfiles: [PrintProfile!]
  printProfiles2: [PrintProfile!]
  printRips: [PrintRip!]
  productCommentLikes: [ProductCommentLike!]
  productComments: [ProductComment!]
  productComments2: [ProductComment!]
  productLikes: [ProductLike!]
  productRates: [ProductRate!]
  productionPadProductionPadStatuses: [ProductionPadProductionPadStatus!]
  productionRolls: [ProductionRoll!]
  productionRolls2: [ProductionRoll!]
  profilePicture: String
  rememberToken: String
  retargetingIsUsed: Boolean!
  retargetingWalletCharges: [RetargetingWalletCharge!]
  returnItemStatusReturnRequestItems: [ReturnItemStatusReturnRequestItem!]
  returnRequestAddresses: [ReturnRequestAddress!]
  returnRequestHistories: [ReturnRequestHistory!]
  returnRequestHistories2: [ReturnRequestHistory!]
  returnRequestItemReturnItemStatuses: [ReturnRequestItemReturnItemStatus!]
  returnRequestReturnStatuses: [ReturnRequestReturnStatus!]
  returnRequests: [ReturnRequest!]
  returnedInvoices: [ReturnedInvoice!]
  ripTemplates: [RipTemplate!]
  roz: Float
  sal: Float
  sepidarCode: Float
  sepidarId: Float
  socialFacebookAccounts: [SocialFacebookAccount!]
  socialGoogleAccounts: [SocialGoogleAccount!]
  spinnerIsUsed: Boolean!
  spinnerVerificationCode: String
  spinnerVerified: Boolean!
  status: Float!
  stripeId: String
  subproductStockHistories: [SubproductStockHistory!]
  temp: String
  tempName: String!
  transactions: [Transaction!]
  transactions2: [Transaction!]
  updatedAt: DateTime
  userCarts: [UserCart!]
  userHasPermission(
    """Specify to filter the records returned."""
    filter: UserHasPermissionFilter! = {}

    """Specify to sort results."""
    sorting: [UserHasPermissionSort!]! = []
  ): [UserHasPermission!]!
  userHasRole(
    """Specify to filter the records returned."""
    filter: UserHasRoleFilter! = {}

    """Specify to sort results."""
    sorting: [UserHasRoleSort!]! = []
  ): [UserHasRole!]!
  userUtms: [UserUtm!]
  username: String
  users: [User!]
  utmGoogleFormCoupons: [UtmGoogleFormCoupon!]
  verificationCode: String
  verifyUsers: [VerifyUser!]
  visitors: [Visitor!]
  walletGiftCharges: [WalletGiftCharge!]
  walletHistories: [WalletHistory!]
  wallets(
    """Specify to filter the records returned."""
    filter: WalletFilter! = {}

    """Specify to sort results."""
    sorting: [WalletSort!]! = []
  ): [Wallet!]!
  withdrawalRequests: [WithdrawalRequest!]
  withdrawalRequests2: [WithdrawalRequest!]
}

type UserCart {
  bundleCount: Float!
  count: Float!
  createdAt: DateTime
  description: String
  design: Design
  designId: Float
  id: ID!
  length: Float
  product: Product
  productId: Float
  relatedProduct: Product
  relatedProductId: Float
  relatedSubproduct: Subproduct
  relatedSubproductId: Float
  subproduct: Subproduct
  subproductId: Float
  updatedAt: DateTime
  user: User!
  userId: Float!
  width: Float
  withPad: Boolean!
}

type UserCartConnection {
  """Array of edges."""
  edges: [UserCartEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input UserCartDeleteFilter {
  and: [UserCartDeleteFilter!]
  id: IDFilterComparison
  or: [UserCartDeleteFilter!]
}

type UserCartDeleteResponse {
  bundleCount: Float
  count: Float
  createdAt: DateTime
  description: String
  design: Design
  designId: Float
  id: ID
  length: Float
  product: Product
  productId: Float
  relatedProduct: Product
  relatedProductId: Float
  relatedSubproduct: Subproduct
  relatedSubproductId: Float
  subproduct: Subproduct
  subproductId: Float
  updatedAt: DateTime
  user: User
  userId: Float
  width: Float
  withPad: Boolean
}

input UserCartDomain {
  bundleCount: Float!
  count: Float!
  createdAt: DateTime
  description: String
  design: DesignDomain
  designId: Float
  id: ID!
  length: Float
  product: ProductDomain
  productId: Float
  relatedProduct: ProductDomain
  relatedProductId: Float
  relatedSubproduct: SubproductDomain
  relatedSubproductId: Float
  subproduct: SubproductDomain
  subproductId: Float
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
  width: Float
  withPad: Boolean!
}

type UserCartEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the UserCart"""
  node: UserCart!
}

input UserCartFilter {
  and: [UserCartFilter!]
  id: IDFilterComparison
  or: [UserCartFilter!]
}

input UserCartSort {
  direction: SortDirection!
  field: UserCartSortFields!
  nulls: SortNulls
}

enum UserCartSortFields {
  id
}

input UserCartUpdateFilter {
  and: [UserCartUpdateFilter!]
  id: IDFilterComparison
  or: [UserCartUpdateFilter!]
}

type UserConnection {
  """Array of nodes."""
  nodes: [User!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

input UserDeleteFilter {
  and: [UserDeleteFilter!]
  createdAt: DateFieldComparison
  id: IDFilterComparison
  isGuest: NumberFieldComparison
  name: StringFieldComparison
  or: [UserDeleteFilter!]
  phone: StringFieldComparison
  username: StringFieldComparison
}

type UserDeleteResponse {
  activities: [Activity!]
  addresses: [Address!]
  apiToken: String
  atmCardNo: String
  automationEvents: [AutomationEvent!]
  avatar: String
  basicCarpetDesigners: [BasicCarpetDesigner!]
  campaignCartItems: String
  campaignCartItemsStartDate: DateTime
  campaignFindingCouponCode: String
  campaignFindingCouponFoundParts: String
  campaignFindingCouponHidingPlace: String
  campaignFindingCouponUsed: Boolean
  campaignFindingCouponWinnerPlace: Float
  campaignGoldCoinSubs: CampaignGoldCoinSub
  campaignId: Float
  campaignInstagramFollows: [CampaignInstagramFollow!]
  campaignPetForms: [CampaignPetForm!]
  campaignRoomvoImages: [CampaignRoomvoImage!]
  campaignRoomvoVotes: [CampaignRoomvoVote!]
  campaignSubscriptions: [CampaignSubscription!]
  campaignUefaEuroSubscriberHistories: [CampaignUefaEuroSubscriberHistory!]
  campaignUefaEuroSubscribers: [CampaignUefaEuroSubscriber!]
  campaignVotingImageUsers: [CampaignVotingImageUser!]
  carpetFeatureUsers: [CarpetFeatureUser!]
  carpetUsagePlaceUsers: [CarpetUsagePlaceUser!]
  childrenCouponIsUsed: Boolean
  code: String
  commentsChargedAmount: String
  contactFormHistories: [ContactFormHistory!]
  contactForms: [ContactForm!]
  coupons: [Coupon!]
  coupons2: [Coupon!]
  coupons3: [Coupon!]
  coupons4: [Coupon!]
  createdAt: DateTime
  customerRequests: [CustomerRequest!]
  designs: [Design!]
  discountNotificationSentDate: DateTime
  discountNotifications: [DiscountNotification!]
  discounts: [Discount!]
  discounts2: [Discount!]
  email: String
  emailVerified: Float
  exitControls: [ExitControl!]
  family: String
  favoriteProducts: [FavoriteProduct!]
  googleFormUtms: [GoogleFormUtm!]
  hafezPoemCount: Float
  heardAboutUsOption: HeardAboutUsOption
  heardAboutUsOptionId: Float
  helpDesks: HelpDesk
  holidays: [Holiday!]
  id: ID
  impersonateHistories: [ImpersonateHistory!]
  impersonateHistories2: [ImpersonateHistory!]
  incredibleOfferSentNotifications: [IncredibleOfferSentNotification!]
  invitationCode: InvitationCode
  invitationCodeId: Float
  invoiceAddresses: [InvoiceAddress!]
  invoiceHistories: [InvoiceHistory!]
  invoiceInvoiceStatuses: [InvoiceInvoiceStatus!]
  invoicePaymentHistories: [InvoicePaymentHistory!]
  invoicePaymentHistories2: [InvoicePaymentHistory!]
  invoicePayments: [InvoicePayment!]
  invoicePayments2: [InvoicePayment!]
  invoiceProductItemInvoiceProductStatuses: [InvoiceProductItemInvoiceProductStatus!]
  invoiceReversals: [InvoiceReversal!]
  invoices: [Invoice!]
  invoices2: [Invoice!]
  isActive: Float
  isForeigner: Boolean
  isGuest: Float
  isPasswordChanged: Boolean
  isPreorderApplicant: Boolean
  loginEmail: String
  lotteryCode: String
  mah: Float
  modelVisits: [ModelVisit!]
  monthlyRetargetingStartDate: DateTime
  name: String
  nationalId: String
  needsPhotographySubproducts: [NeedsPhotographySubproduct!]
  needsPhotographySubproducts2: [NeedsPhotographySubproduct!]
  negotiationHistories: [NegotiationHistory!]
  negotiationHistories2: [NegotiationHistory!]
  negotiationHistories3: [NegotiationHistory!]
  negotiationSteps: [NegotiationStep!]
  negotiations: [Negotiation!]
  negotiations2: [Negotiation!]
  newUsersCampaignCharged: Boolean
  os: String
  osVersion: String
  password: String
  paymentRequests: [PaymentRequest!]
  phone: String
  phoneVerified: Float
  phoneVerifiedBy: Float
  phoneVerifiedBy2: User
  preorderPaid: Boolean
  preorderPreorderStatuses: [PreorderPreorderStatus!]
  preorderRegisterDate: DateTime
  preorderRegisters: [PreorderRegister!]
  preorderRegisters2: [PreorderRegister!]
  preorderTurnEndDate: String
  preorderTurnStartDate: String
  preorders: [Preorder!]
  preorders2: [Preorder!]
  preorders3: [Preorder!]
  printProfiles: [PrintProfile!]
  printProfiles2: [PrintProfile!]
  printRips: [PrintRip!]
  productCommentLikes: [ProductCommentLike!]
  productComments: [ProductComment!]
  productComments2: [ProductComment!]
  productLikes: [ProductLike!]
  productRates: [ProductRate!]
  productionPadProductionPadStatuses: [ProductionPadProductionPadStatus!]
  productionRolls: [ProductionRoll!]
  productionRolls2: [ProductionRoll!]
  profilePicture: String
  rememberToken: String
  retargetingIsUsed: Boolean
  retargetingWalletCharges: [RetargetingWalletCharge!]
  returnItemStatusReturnRequestItems: [ReturnItemStatusReturnRequestItem!]
  returnRequestAddresses: [ReturnRequestAddress!]
  returnRequestHistories: [ReturnRequestHistory!]
  returnRequestHistories2: [ReturnRequestHistory!]
  returnRequestItemReturnItemStatuses: [ReturnRequestItemReturnItemStatus!]
  returnRequestReturnStatuses: [ReturnRequestReturnStatus!]
  returnRequests: [ReturnRequest!]
  returnedInvoices: [ReturnedInvoice!]
  ripTemplates: [RipTemplate!]
  roz: Float
  sal: Float
  sepidarCode: Float
  sepidarId: Float
  socialFacebookAccounts: [SocialFacebookAccount!]
  socialGoogleAccounts: [SocialGoogleAccount!]
  spinnerIsUsed: Boolean
  spinnerVerificationCode: String
  spinnerVerified: Boolean
  status: Float
  stripeId: String
  subproductStockHistories: [SubproductStockHistory!]
  temp: String
  tempName: String
  transactions: [Transaction!]
  transactions2: [Transaction!]
  updatedAt: DateTime
  userCarts: [UserCart!]
  userHasPermission: [UserHasPermission!]
  userHasRole: [UserHasRole!]
  userUtms: [UserUtm!]
  username: String
  users: [User!]
  utmGoogleFormCoupons: [UtmGoogleFormCoupon!]
  verificationCode: String
  verifyUsers: [VerifyUser!]
  visitors: [Visitor!]
  walletGiftCharges: [WalletGiftCharge!]
  walletHistories: [WalletHistory!]
  wallets: Wallet
  withdrawalRequests: [WithdrawalRequest!]
  withdrawalRequests2: [WithdrawalRequest!]
}

input UserDomain {
  activities: [ActivityInput!]!
  addresses: [AddressDomain!]!
  apiToken: String
  atmCardNo: String
  automationEvents: [AutomationEventDomain!]!
  avatar: String
  basicCarpetDesigners: [BasicCarpetDesignerDomain!]!
  campaignCartItems: String
  campaignCartItemsStartDate: DateTime
  campaignFindingCouponCode: String
  campaignFindingCouponFoundParts: String!
  campaignFindingCouponHidingPlace: String
  campaignFindingCouponUsed: Boolean!
  campaignFindingCouponWinnerPlace: Float
  campaignGoldCoinSubs: CampaignGoldCoinSubDomain!
  campaignId: Float
  campaignInstagramFollows: [CampaignInstagramFollowDomain!]!
  campaignPetForms: [CampaignPetFormDomain!]!
  campaignRoomvoImages: [CampaignRoomvoImageDomain!]!
  campaignRoomvoVotes: [CampaignRoomvoVoteDomain!]!
  campaignSubscriptions: [CampaignSubscriptionDomain!]!
  campaignUefaEuroSubscriberHistories: [CampaignUefaEuroSubscriberHistoryDomain!]!
  campaignUefaEuroSubscribers: [CampaignUefaEuroSubscriberDomain!]!
  campaignVotingImageUsers: [CampaignVotingImageUserDomain!]!
  carpetFeatureUsers: [CarpetFeatureUserDomain!]
  carpetUsagePlaceUsers: [CarpetUsagePlaceUserDomain!]
  childrenCouponIsUsed: Boolean!
  code: String
  commentsChargedAmount: String!
  contactFormHistories: [ContactFormHistoryDomain!]
  contactForms: [ContactFormDomain!]
  coupons: [CouponDomain!]
  coupons2: [CouponDomain!]
  coupons3: [CouponDomain!]
  coupons4: [CouponDomain!]
  createdAt: DateTime
  customerRequests: [CustomerRequestDomain!]
  designs: [DesignDomain!]
  discountNotificationSentDate: DateTime
  discountNotifications: [DiscountNotificationDomain!]
  discounts: [DiscountDomain!]
  discounts2: [DiscountDomain!]
  email: String
  emailVerified: Float
  exitControls: [ExitControlDomain!]
  family: String!
  favoriteProducts: [FavoriteProductDomain!]
  googleFormUtms: [GoogleFormUtmDomain!]
  hafezPoemCount: Float!
  heardAboutUsOption: HeardAboutUsOptionDomain
  heardAboutUsOptionId: Float
  helpDesks: HelpDeskDomain
  holidays: [HolidayDomain!]
  id: ID!
  impersonateHistories: [ImpersonateHistoryDomain!]
  impersonateHistories2: [ImpersonateHistoryDomain!]
  incredibleOfferSentNotifications: [IncredibleOfferSentNotificationDomain!]
  invitationCode: InvitationCodeDomain
  invitationCodeId: Float
  invoiceAddresses: [InvoiceAddressDomain!]
  invoiceHistories: [InvoiceHistoryDomain!]
  invoiceInvoiceStatuses: [InvoiceInvoiceStatusDomain!]
  invoicePaymentHistories: [InvoicePaymentHistoryDomain!]
  invoicePaymentHistories2: [InvoicePaymentHistoryDomain!]
  invoicePayments: [InvoicePaymentDomain!]
  invoicePayments2: [InvoicePaymentDomain!]
  invoiceProductItemInvoiceProductStatuses: [InvoiceProductItemInvoiceProductStatusDomain!]
  invoiceReversals: [InvoiceReversalDomain!]
  invoices: [InvoiceDomain!]
  invoices2: [InvoiceDomain!]
  isActive: Float
  isForeigner: Boolean!
  isGuest: Float
  isPasswordChanged: Boolean!
  isPreorderApplicant: Boolean!
  loginEmail: String
  lotteryCode: String
  mah: Float
  modelVisits: [ModelVisitDomain!]
  monthlyRetargetingStartDate: DateTime
  name: String!
  nationalId: String
  needsPhotographySubproducts: [NeedsPhotographySubproductDomain!]
  needsPhotographySubproducts2: [NeedsPhotographySubproductDomain!]
  negotiationHistories: [NegotiationHistoryDomain!]
  negotiationHistories2: [NegotiationHistoryDomain!]
  negotiationHistories3: [NegotiationHistoryDomain!]
  negotiationSteps: [NegotiationStepDomain!]
  negotiations: [NegotiationDomain!]
  negotiations2: [NegotiationDomain!]
  newUsersCampaignCharged: Boolean!
  os: String
  osVersion: String
  password: String
  paymentRequests: [PaymentRequestDomain!]
  phone: String
  phoneVerified: Float
  phoneVerifiedBy: Float
  phoneVerifiedBy2: UserDomain
  preorderPaid: Boolean!
  preorderPreorderStatuses: [PreorderPreorderStatusDomain!]
  preorderRegisterDate: DateTime
  preorderRegisters: [PreorderRegisterDomain!]
  preorderRegisters2: [PreorderRegisterDomain!]
  preorderTurnEndDate: String
  preorderTurnStartDate: String
  preorders: [PreorderDomain!]
  preorders2: [PreorderDomain!]
  preorders3: [PreorderDomain!]
  printProfiles: [PrintProfileDomain!]
  printProfiles2: [PrintProfileDomain!]
  printRips: [PrintRipDomain!]
  productCommentLikes: [ProductCommentLikeDomain!]
  productComments: [ProductCommentDomain!]
  productComments2: [ProductCommentDomain!]
  productLikes: [ProductLikeDomain!]
  productRates: [ProductRateDomain!]
  productionPadProductionPadStatuses: [ProductionPadProductionPadStatusDomain!]
  productionRolls: [ProductionRollDomain!]
  productionRolls2: [ProductionRollDomain!]
  profilePicture: String
  rememberToken: String
  retargetingIsUsed: Boolean!
  retargetingWalletCharges: [RetargetingWalletChargeDomain!]
  returnItemStatusReturnRequestItems: [ReturnItemStatusReturnRequestItemDomain!]
  returnRequestAddresses: [ReturnRequestAddressDomain!]
  returnRequestHistories: [ReturnRequestHistoryDomain!]
  returnRequestHistories2: [ReturnRequestHistoryDomain!]
  returnRequestItemReturnItemStatuses: [ReturnRequestItemReturnItemStatusDomain!]
  returnRequestReturnStatuses: [ReturnRequestReturnStatusDomain!]
  returnRequests: [ReturnRequestDomain!]
  returnedInvoices: [ReturnedInvoiceDomain!]
  ripTemplates: [RipTemplateDomain!]
  roz: Float
  sal: Float
  sepidarCode: Float
  sepidarId: Float
  socialFacebookAccounts: [SocialFacebookAccountDomain!]
  socialGoogleAccounts: [SocialGoogleAccountDomain!]
  spinnerIsUsed: Boolean!
  spinnerVerificationCode: String
  spinnerVerified: Boolean!
  status: Float!
  stripeId: String
  subproductStockHistories: [SubproductStockHistoryDomain!]
  temp: String
  tempName: String!
  transactions: [TransactionDomain!]
  transactions2: [TransactionDomain!]
  updatedAt: DateTime
  userCarts: [UserCartDomain!]
  userHasPermission: [UserHasPermissionDomain!]!
  userHasRole: [UserHasRoleDomain!]!
  userUtms: [UserUtmDomain!]
  username: String
  users: [UserDomain!]
  utmGoogleFormCoupons: [UtmGoogleFormCouponDomain!]
  verificationCode: String
  verifyUsers: [VerifyUserDomain!]
  visitors: [VisitorDomain!]
  walletGiftCharges: [WalletGiftChargeDomain!]
  walletHistories: [WalletHistoryDomain!]
  wallets: WalletDomain
  withdrawalRequests: [WithdrawalRequestDomain!]
  withdrawalRequests2: [WithdrawalRequestDomain!]
}

input UserFilter {
  and: [UserFilter!]
  createdAt: DateFieldComparison
  id: IDFilterComparison
  isGuest: NumberFieldComparison
  name: StringFieldComparison
  or: [UserFilter!]
  phone: StringFieldComparison
  username: StringFieldComparison
}

type UserHasPermission {
  permission(
    """Specify to filter the records returned."""
    filter: PermissionFilter! = {}

    """Specify to sort results."""
    sorting: [PermissionSort!]! = []
  ): [Permission!]!
  permissionId: Float!
  user(
    """Specify to filter the records returned."""
    filter: UserFilter! = {}

    """Specify to sort results."""
    sorting: [UserSort!]! = []
  ): [User!]!
  userId: ID!
}

type UserHasPermissionConnection {
  """Array of edges."""
  edges: [UserHasPermissionEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input UserHasPermissionDeleteFilter {
  and: [UserHasPermissionDeleteFilter!]
  or: [UserHasPermissionDeleteFilter!]
  userId: IDFilterComparison
}

type UserHasPermissionDeleteResponse {
  permission: Permission
  permissionId: Float
  userId: ID
}

input UserHasPermissionDomain {
  permission: PermissionDomain!
  permissionId: Float!
  userId: ID!
}

type UserHasPermissionEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the UserHasPermission"""
  node: UserHasPermission!
}

input UserHasPermissionFilter {
  and: [UserHasPermissionFilter!]
  or: [UserHasPermissionFilter!]
  userId: IDFilterComparison
}

input UserHasPermissionSort {
  direction: SortDirection!
  field: UserHasPermissionSortFields!
  nulls: SortNulls
}

enum UserHasPermissionSortFields {
  userId
}

input UserHasPermissionUpdateFilter {
  and: [UserHasPermissionUpdateFilter!]
  or: [UserHasPermissionUpdateFilter!]
  userId: IDFilterComparison
}

type UserHasRole {
  role(
    """Specify to filter the records returned."""
    filter: RoleDomainFilter! = {}

    """Specify to sort results."""
    sorting: [RoleDomainSort!]! = []
  ): [RoleDomain!]!
  roleId: Float!
  user(
    """Specify to filter the records returned."""
    filter: UserFilter! = {}

    """Specify to sort results."""
    sorting: [UserSort!]! = []
  ): [User!]!
  userId: ID!
}

type UserHasRoleConnection {
  """Array of edges."""
  edges: [UserHasRoleEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input UserHasRoleDeleteFilter {
  and: [UserHasRoleDeleteFilter!]
  or: [UserHasRoleDeleteFilter!]
  userId: IDFilterComparison
}

type UserHasRoleDeleteResponse {
  role: RoleDomain
  roleId: Float
  userId: ID
}

input UserHasRoleDomain {
  role: RoleDomainInput!
  roleId: Float!
  userId: ID!
}

type UserHasRoleEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the UserHasRole"""
  node: UserHasRole!
}

input UserHasRoleFilter {
  and: [UserHasRoleFilter!]
  or: [UserHasRoleFilter!]
  userId: IDFilterComparison
}

input UserHasRoleSort {
  direction: SortDirection!
  field: UserHasRoleSortFields!
  nulls: SortNulls
}

enum UserHasRoleSortFields {
  userId
}

input UserHasRoleUpdateFilter {
  and: [UserHasRoleUpdateFilter!]
  or: [UserHasRoleUpdateFilter!]
  userId: IDFilterComparison
}

input UserSort {
  direction: SortDirection!
  field: UserSortFields!
  nulls: SortNulls
}

enum UserSortFields {
  createdAt
  id
  isGuest
  name
  phone
  username
}

input UserUpdateFilter {
  and: [UserUpdateFilter!]
  createdAt: DateFieldComparison
  id: IDFilterComparison
  isGuest: NumberFieldComparison
  name: StringFieldComparison
  or: [UserUpdateFilter!]
  phone: StringFieldComparison
  username: StringFieldComparison
}

type UserUtm {
  createdAt: DateTime
  id: ID!
  updatedAt: DateTime
  user: User!
  userId: Float!
  utm: Utm!
  utmId: Float!
}

type UserUtmConnection {
  """Array of edges."""
  edges: [UserUtmEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input UserUtmDeleteFilter {
  and: [UserUtmDeleteFilter!]
  id: IDFilterComparison
  or: [UserUtmDeleteFilter!]
}

type UserUtmDeleteResponse {
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
  user: User
  userId: Float
  utm: Utm
  utmId: Float
}

input UserUtmDomain {
  createdAt: DateTime
  id: ID!
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
  utm: UtmDomain!
  utmId: Float!
}

type UserUtmEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the UserUtm"""
  node: UserUtm!
}

input UserUtmFilter {
  and: [UserUtmFilter!]
  id: IDFilterComparison
  or: [UserUtmFilter!]
}

input UserUtmSort {
  direction: SortDirection!
  field: UserUtmSortFields!
  nulls: SortNulls
}

enum UserUtmSortFields {
  id
}

input UserUtmUpdateFilter {
  and: [UserUtmUpdateFilter!]
  id: IDFilterComparison
  or: [UserUtmUpdateFilter!]
}

type Utm {
  createdAt: DateTime
  id: ID!
  updatedAt: DateTime
  userUtms: [UserUtm!]!
  utmCampaign: String
  utmContent: String
  utmMedium: String
  utmSource: String!
}

type UtmConnection {
  """Array of edges."""
  edges: [UtmEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input UtmDeleteFilter {
  and: [UtmDeleteFilter!]
  id: IDFilterComparison
  or: [UtmDeleteFilter!]
}

type UtmDeleteResponse {
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
  userUtms: [UserUtm!]
  utmCampaign: String
  utmContent: String
  utmMedium: String
  utmSource: String
}

input UtmDomain {
  createdAt: DateTime
  id: ID!
  updatedAt: DateTime
  userUtms: [UserUtmDomain!]!
  utmCampaign: String
  utmContent: String
  utmMedium: String
  utmSource: String!
}

type UtmEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Utm"""
  node: Utm!
}

input UtmFilter {
  and: [UtmFilter!]
  id: IDFilterComparison
  or: [UtmFilter!]
}

type UtmGoogleFormCoupon {
  coupon: Coupon
  couponId: Float
  createdAt: DateTime
  id: ID!
  lastPurchaseDate: DateTime
  registerDate: DateTime
  returnDate: DateTime
  row: Float
  shortLink: String
  type: String!
  updatedAt: DateTime
  user: User!
  userId: Float!
  utmLink: String
}

type UtmGoogleFormCouponConnection {
  """Array of edges."""
  edges: [UtmGoogleFormCouponEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input UtmGoogleFormCouponDeleteFilter {
  and: [UtmGoogleFormCouponDeleteFilter!]
  id: IDFilterComparison
  or: [UtmGoogleFormCouponDeleteFilter!]
}

type UtmGoogleFormCouponDeleteResponse {
  coupon: Coupon
  couponId: Float
  createdAt: DateTime
  id: ID
  lastPurchaseDate: DateTime
  registerDate: DateTime
  returnDate: DateTime
  row: Float
  shortLink: String
  type: String
  updatedAt: DateTime
  user: User
  userId: Float
  utmLink: String
}

input UtmGoogleFormCouponDomain {
  coupon: CouponDomain
  couponId: Float
  createdAt: DateTime
  id: ID!
  lastPurchaseDate: DateTime
  registerDate: DateTime
  returnDate: DateTime
  row: Float
  shortLink: String
  type: String!
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
  utmLink: String
}

type UtmGoogleFormCouponEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the UtmGoogleFormCoupon"""
  node: UtmGoogleFormCoupon!
}

input UtmGoogleFormCouponFilter {
  and: [UtmGoogleFormCouponFilter!]
  id: IDFilterComparison
  or: [UtmGoogleFormCouponFilter!]
}

input UtmGoogleFormCouponSort {
  direction: SortDirection!
  field: UtmGoogleFormCouponSortFields!
  nulls: SortNulls
}

enum UtmGoogleFormCouponSortFields {
  id
}

input UtmGoogleFormCouponUpdateFilter {
  and: [UtmGoogleFormCouponUpdateFilter!]
  id: IDFilterComparison
  or: [UtmGoogleFormCouponUpdateFilter!]
}

input UtmSort {
  direction: SortDirection!
  field: UtmSortFields!
  nulls: SortNulls
}

enum UtmSortFields {
  id
}

input UtmUpdateFilter {
  and: [UtmUpdateFilter!]
  id: IDFilterComparison
  or: [UtmUpdateFilter!]
}

type VerifyUser {
  createdAt: DateTime
  id: ID!
  token: String!
  updatedAt: DateTime
  user: User!
  userId: Float!
}

type VerifyUserConnection {
  """Array of edges."""
  edges: [VerifyUserEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input VerifyUserDeleteFilter {
  and: [VerifyUserDeleteFilter!]
  id: IDFilterComparison
  or: [VerifyUserDeleteFilter!]
}

type VerifyUserDeleteResponse {
  createdAt: DateTime
  id: ID
  token: String
  updatedAt: DateTime
  user: User
  userId: Float
}

input VerifyUserDomain {
  createdAt: DateTime
  id: ID!
  token: String!
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
}

type VerifyUserEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the VerifyUser"""
  node: VerifyUser!
}

input VerifyUserFilter {
  and: [VerifyUserFilter!]
  id: IDFilterComparison
  or: [VerifyUserFilter!]
}

input VerifyUserSort {
  direction: SortDirection!
  field: VerifyUserSortFields!
  nulls: SortNulls
}

enum VerifyUserSortFields {
  id
}

input VerifyUserUpdateFilter {
  and: [VerifyUserUpdateFilter!]
  id: IDFilterComparison
  or: [VerifyUserUpdateFilter!]
}

type Video {
  altText: String
  createdAt: DateTime
  customerVideoProducts: [CustomerVideoProduct!]!
  filename: String!
  id: ID!
  mime: String!
  originalFilename: String!
  path: String
  productVideos: [ProductVideo!]!
  returnRequestItemVideos: [ReturnRequestItemVideo!]!
  subproductVideos: [SubproductVideo!]!
  subproducts: [Subproduct!]!
  updatedAt: DateTime
  uploadSource: String!
}

type VideoConnection {
  """Array of edges."""
  edges: [VideoEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input VideoDeleteFilter {
  and: [VideoDeleteFilter!]
  id: IDFilterComparison
  or: [VideoDeleteFilter!]
}

type VideoDeleteResponse {
  altText: String
  createdAt: DateTime
  customerVideoProducts: [CustomerVideoProduct!]
  filename: String
  id: ID
  mime: String
  originalFilename: String
  path: String
  productVideos: [ProductVideo!]
  returnRequestItemVideos: [ReturnRequestItemVideo!]
  subproductVideos: [SubproductVideo!]
  subproducts: [Subproduct!]
  updatedAt: DateTime
  uploadSource: String
}

input VideoDomain {
  altText: String
  createdAt: DateTime
  customerVideoProducts: [CustomerVideoProductDomain!]!
  filename: String!
  id: ID!
  mime: String!
  originalFilename: String!
  path: String
  productVideos: [ProductVideoDomain!]!
  returnRequestItemVideos: [ReturnRequestItemVideoDomain!]!
  subproductVideos: [SubproductVideoDomain!]!
  subproducts: [SubproductDomain!]!
  updatedAt: DateTime
  uploadSource: String!
}

type VideoEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Video"""
  node: Video!
}

input VideoFilter {
  and: [VideoFilter!]
  id: IDFilterComparison
  or: [VideoFilter!]
}

input VideoSort {
  direction: SortDirection!
  field: VideoSortFields!
  nulls: SortNulls
}

enum VideoSortFields {
  id
}

input VideoUpdateFilter {
  and: [VideoUpdateFilter!]
  id: IDFilterComparison
  or: [VideoUpdateFilter!]
}

type Visitor {
  balance: Float
  cardNumber: String
  code: String!
  createdAt: DateTime!
  id: ID!
  invoices: [Invoice!]!
  isActive: Boolean!
  isPartner: Boolean!
  partnerCode: String
  paymentRequests: [PaymentRequest!]!
  sortOrder: Float
  title: String!
  updatedAt: DateTime!
  user: User!
  userId: Float!
  visitorCoupons: [VisitorCoupon!]!
  visitorGroup: VisitorGroup!
  visitorGroupId: Float!
  visitorSales: [VisitorSale!]!
}

type VisitorConnection {
  """Array of edges."""
  edges: [VisitorEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

type VisitorCoupon {
  code: String!
  createdAt: DateTime!
  id: ID!
  invoices: [Invoice!]!
  isActive: Boolean!
  name: String!
  updatedAt: DateTime!
  visitor: Visitor!
  visitorId: Float!
}

type VisitorCouponConnection {
  """Array of edges."""
  edges: [VisitorCouponEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input VisitorCouponDeleteFilter {
  and: [VisitorCouponDeleteFilter!]
  id: IDFilterComparison
  or: [VisitorCouponDeleteFilter!]
}

type VisitorCouponDeleteResponse {
  code: String
  createdAt: DateTime
  id: ID
  invoices: [Invoice!]
  isActive: Boolean
  name: String
  updatedAt: DateTime
  visitor: Visitor
  visitorId: Float
}

input VisitorCouponDomain {
  code: String!
  createdAt: DateTime!
  id: ID!
  invoices: [InvoiceDomain!]!
  isActive: Boolean!
  name: String!
  updatedAt: DateTime!
  visitor: VisitorDomain!
  visitorId: Float!
}

type VisitorCouponEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the VisitorCoupon"""
  node: VisitorCoupon!
}

input VisitorCouponFilter {
  and: [VisitorCouponFilter!]
  id: IDFilterComparison
  or: [VisitorCouponFilter!]
}

input VisitorCouponSort {
  direction: SortDirection!
  field: VisitorCouponSortFields!
  nulls: SortNulls
}

enum VisitorCouponSortFields {
  id
}

input VisitorCouponUpdateFilter {
  and: [VisitorCouponUpdateFilter!]
  id: IDFilterComparison
  or: [VisitorCouponUpdateFilter!]
}

input VisitorDeleteFilter {
  and: [VisitorDeleteFilter!]
  id: IDFilterComparison
  or: [VisitorDeleteFilter!]
}

type VisitorDeleteResponse {
  balance: Float
  cardNumber: String
  code: String
  createdAt: DateTime
  id: ID
  invoices: [Invoice!]
  isActive: Boolean
  isPartner: Boolean
  partnerCode: String
  paymentRequests: [PaymentRequest!]
  sortOrder: Float
  title: String
  updatedAt: DateTime
  user: User
  userId: Float
  visitorCoupons: [VisitorCoupon!]
  visitorGroup: VisitorGroup
  visitorGroupId: Float
  visitorSales: [VisitorSale!]
}

input VisitorDomain {
  balance: Float
  cardNumber: String
  code: String!
  createdAt: DateTime!
  id: ID!
  invoices: [InvoiceDomain!]!
  isActive: Boolean!
  isPartner: Boolean!
  partnerCode: String
  paymentRequests: [PaymentRequestDomain!]!
  sortOrder: Float
  title: String!
  updatedAt: DateTime!
  user: UserDomain!
  userId: Float!
  visitorCoupons: [VisitorCouponDomain!]!
  visitorGroup: VisitorGroupDomain!
  visitorGroupId: Float!
  visitorSales: [VisitorSaleDomain!]!
}

type VisitorEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Visitor"""
  node: Visitor!
}

input VisitorFilter {
  and: [VisitorFilter!]
  id: IDFilterComparison
  or: [VisitorFilter!]
}

type VisitorGroup {
  couponDiscountRate: Float!
  createdAt: DateTime!
  id: ID!
  invoices: [Invoice!]!
  name: String!
  updatedAt: DateTime!
  visitorGroupRates: [VisitorGroupRate!]!
  visitorSales: [VisitorSale!]!
  visitors: [Visitor!]!
}

type VisitorGroupConnection {
  """Array of edges."""
  edges: [VisitorGroupEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input VisitorGroupDeleteFilter {
  and: [VisitorGroupDeleteFilter!]
  id: IDFilterComparison
  or: [VisitorGroupDeleteFilter!]
}

type VisitorGroupDeleteResponse {
  couponDiscountRate: Float
  createdAt: DateTime
  id: ID
  invoices: [Invoice!]
  name: String
  updatedAt: DateTime
  visitorGroupRates: [VisitorGroupRate!]
  visitorSales: [VisitorSale!]
  visitors: [Visitor!]
}

input VisitorGroupDomain {
  couponDiscountRate: Float!
  createdAt: DateTime!
  id: ID!
  invoices: [InvoiceDomain!]!
  name: String!
  updatedAt: DateTime!
  visitorGroupRates: [VisitorGroupRateDomain!]!
  visitorSales: [VisitorSaleDomain!]!
  visitors: [VisitorDomain!]!
}

type VisitorGroupEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the VisitorGroup"""
  node: VisitorGroup!
}

input VisitorGroupFilter {
  and: [VisitorGroupFilter!]
  id: IDFilterComparison
  or: [VisitorGroupFilter!]
}

type VisitorGroupRate {
  createdAt: DateTime!
  id: ID!
  maxRevenue: Float!
  minRevenue: Float!
  rate: Float!
  updatedAt: DateTime!
  visitorGroup: VisitorGroup!
  visitorGroupId: Float!
}

type VisitorGroupRateConnection {
  """Array of edges."""
  edges: [VisitorGroupRateEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input VisitorGroupRateDeleteFilter {
  and: [VisitorGroupRateDeleteFilter!]
  id: IDFilterComparison
  or: [VisitorGroupRateDeleteFilter!]
}

type VisitorGroupRateDeleteResponse {
  createdAt: DateTime
  id: ID
  maxRevenue: Float
  minRevenue: Float
  rate: Float
  updatedAt: DateTime
  visitorGroup: VisitorGroup
  visitorGroupId: Float
}

input VisitorGroupRateDomain {
  createdAt: DateTime!
  id: ID!
  maxRevenue: Float!
  minRevenue: Float!
  rate: Float!
  updatedAt: DateTime!
  visitorGroup: VisitorGroupDomain!
  visitorGroupId: Float!
}

type VisitorGroupRateEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the VisitorGroupRate"""
  node: VisitorGroupRate!
}

input VisitorGroupRateFilter {
  and: [VisitorGroupRateFilter!]
  id: IDFilterComparison
  or: [VisitorGroupRateFilter!]
}

input VisitorGroupRateSort {
  direction: SortDirection!
  field: VisitorGroupRateSortFields!
  nulls: SortNulls
}

enum VisitorGroupRateSortFields {
  id
}

input VisitorGroupRateUpdateFilter {
  and: [VisitorGroupRateUpdateFilter!]
  id: IDFilterComparison
  or: [VisitorGroupRateUpdateFilter!]
}

input VisitorGroupSort {
  direction: SortDirection!
  field: VisitorGroupSortFields!
  nulls: SortNulls
}

enum VisitorGroupSortFields {
  id
}

input VisitorGroupUpdateFilter {
  and: [VisitorGroupUpdateFilter!]
  id: IDFilterComparison
  or: [VisitorGroupUpdateFilter!]
}

type VisitorSale {
  createdAt: DateTime!
  endDate: DateTime!
  id: ID!
  monthSh: Float!
  rate: Float!
  startDate: DateTime!
  totalSale: Float
  totalShare: Float
  updatedAt: DateTime!
  visitor: Visitor!
  visitorGroup: VisitorGroup!
  visitorGroupId: Float!
  visitorId: Float!
  yearSh: Float!
}

type VisitorSaleConnection {
  """Array of edges."""
  edges: [VisitorSaleEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input VisitorSaleDeleteFilter {
  and: [VisitorSaleDeleteFilter!]
  id: IDFilterComparison
  or: [VisitorSaleDeleteFilter!]
}

type VisitorSaleDeleteResponse {
  createdAt: DateTime
  endDate: DateTime
  id: ID
  monthSh: Float
  rate: Float
  startDate: DateTime
  totalSale: Float
  totalShare: Float
  updatedAt: DateTime
  visitor: Visitor
  visitorGroup: VisitorGroup
  visitorGroupId: Float
  visitorId: Float
  yearSh: Float
}

input VisitorSaleDomain {
  createdAt: DateTime!
  endDate: DateTime!
  id: ID!
  monthSh: Float!
  rate: Float!
  startDate: DateTime!
  totalSale: Float
  totalShare: Float
  updatedAt: DateTime!
  visitor: VisitorDomain!
  visitorGroup: VisitorGroupDomain!
  visitorGroupId: Float!
  visitorId: Float!
  yearSh: Float!
}

type VisitorSaleEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the VisitorSale"""
  node: VisitorSale!
}

input VisitorSaleFilter {
  and: [VisitorSaleFilter!]
  id: IDFilterComparison
  or: [VisitorSaleFilter!]
}

input VisitorSaleSort {
  direction: SortDirection!
  field: VisitorSaleSortFields!
  nulls: SortNulls
}

enum VisitorSaleSortFields {
  id
}

input VisitorSaleUpdateFilter {
  and: [VisitorSaleUpdateFilter!]
  id: IDFilterComparison
  or: [VisitorSaleUpdateFilter!]
}

input VisitorSort {
  direction: SortDirection!
  field: VisitorSortFields!
  nulls: SortNulls
}

enum VisitorSortFields {
  id
}

input VisitorUpdateFilter {
  and: [VisitorUpdateFilter!]
  id: IDFilterComparison
  or: [VisitorUpdateFilter!]
}

type Wallet {
  createdAt: DateTime
  id: ID!
  modemaBlocked: Float!
  notUsableForLowTotalPrices: Boolean!
  retargetingWalletCharges: [RetargetingWalletCharge!]!
  updatedAt: DateTime
  user: User!
  userBlocked: Float!
  userId: Float!
  walletGiftCharges: [WalletGiftCharge!]!
  walletHistories: [WalletHistory!]!
  withdrawable: Float!
}

type WalletConnection {
  """Array of edges."""
  edges: [WalletEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input WalletDeleteFilter {
  and: [WalletDeleteFilter!]
  id: IDFilterComparison
  or: [WalletDeleteFilter!]
}

type WalletDeleteResponse {
  createdAt: DateTime
  id: ID
  modemaBlocked: Float
  notUsableForLowTotalPrices: Boolean
  retargetingWalletCharges: [RetargetingWalletCharge!]
  updatedAt: DateTime
  user: User
  userBlocked: Float
  userId: Float
  walletGiftCharges: [WalletGiftCharge!]
  walletHistories: [WalletHistory!]
  withdrawable: Float
}

input WalletDomain {
  createdAt: DateTime
  id: ID!
  modemaBlocked: Float!
  notUsableForLowTotalPrices: Boolean!
  retargetingWalletCharges: [RetargetingWalletChargeDomain!]!
  updatedAt: DateTime
  user: UserDomain!
  userBlocked: Float!
  userId: Float!
  walletGiftCharges: [WalletGiftChargeDomain!]!
  walletHistories: [WalletHistoryDomain!]!
  withdrawable: Float!
}

type WalletEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Wallet"""
  node: Wallet!
}

input WalletFilter {
  and: [WalletFilter!]
  id: IDFilterComparison
  or: [WalletFilter!]
}

type WalletGiftCharge {
  amount: String!
  createdAt: DateTime
  id: ID!
  productComment: ProductComment!
  productCommentId: Float!
  updatedAt: DateTime
  user: User!
  userId: Float!
  wallet: Wallet!
  walletId: Float!
}

type WalletGiftChargeConnection {
  """Array of edges."""
  edges: [WalletGiftChargeEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input WalletGiftChargeDeleteFilter {
  and: [WalletGiftChargeDeleteFilter!]
  id: IDFilterComparison
  or: [WalletGiftChargeDeleteFilter!]
}

type WalletGiftChargeDeleteResponse {
  amount: String
  createdAt: DateTime
  id: ID
  productComment: ProductComment
  productCommentId: Float
  updatedAt: DateTime
  user: User
  userId: Float
  wallet: Wallet
  walletId: Float
}

input WalletGiftChargeDomain {
  amount: String!
  createdAt: DateTime
  id: ID!
  productComment: ProductCommentDomain!
  productCommentId: Float!
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
  wallet: WalletDomain!
  walletId: Float!
}

type WalletGiftChargeEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the WalletGiftCharge"""
  node: WalletGiftCharge!
}

input WalletGiftChargeFilter {
  and: [WalletGiftChargeFilter!]
  id: IDFilterComparison
  or: [WalletGiftChargeFilter!]
}

input WalletGiftChargeSort {
  direction: SortDirection!
  field: WalletGiftChargeSortFields!
  nulls: SortNulls
}

enum WalletGiftChargeSortFields {
  id
}

input WalletGiftChargeUpdateFilter {
  and: [WalletGiftChargeUpdateFilter!]
  id: IDFilterComparison
  or: [WalletGiftChargeUpdateFilter!]
}

type WalletHistory {
  createdAt: DateTime
  createdBy: Float
  createdBy2: User!
  id: ID!
  modemaBlocked: Float!
  transaction: Transaction!
  transactionId: Float!
  updatedAt: DateTime
  userBlocked: Float!
  wallet: Wallet!
  walletId: Float!
  withdrawable: Float!
}

type WalletHistoryConnection {
  """Array of edges."""
  edges: [WalletHistoryEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input WalletHistoryDeleteFilter {
  and: [WalletHistoryDeleteFilter!]
  id: IDFilterComparison
  or: [WalletHistoryDeleteFilter!]
}

type WalletHistoryDeleteResponse {
  createdAt: DateTime
  createdBy: Float
  createdBy2: User
  id: ID
  modemaBlocked: Float
  transaction: Transaction
  transactionId: Float
  updatedAt: DateTime
  userBlocked: Float
  wallet: Wallet
  walletId: Float
  withdrawable: Float
}

input WalletHistoryDomain {
  createdAt: DateTime
  createdBy: Float
  createdBy2: UserDomain!
  id: ID!
  modemaBlocked: Float!
  transaction: TransactionDomain!
  transactionId: Float!
  updatedAt: DateTime
  userBlocked: Float!
  wallet: WalletDomain!
  walletId: Float!
  withdrawable: Float!
}

type WalletHistoryEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the WalletHistory"""
  node: WalletHistory!
}

input WalletHistoryFilter {
  and: [WalletHistoryFilter!]
  id: IDFilterComparison
  or: [WalletHistoryFilter!]
}

input WalletHistorySort {
  direction: SortDirection!
  field: WalletHistorySortFields!
  nulls: SortNulls
}

enum WalletHistorySortFields {
  id
}

input WalletHistoryUpdateFilter {
  and: [WalletHistoryUpdateFilter!]
  id: IDFilterComparison
  or: [WalletHistoryUpdateFilter!]
}

input WalletSort {
  direction: SortDirection!
  field: WalletSortFields!
  nulls: SortNulls
}

enum WalletSortFields {
  id
}

input WalletUpdateFilter {
  and: [WalletUpdateFilter!]
  id: IDFilterComparison
  or: [WalletUpdateFilter!]
}

type WebsitePage {
  createdAt: DateTime
  id: ID!
  key: String!
  page: String!
  updatedAt: DateTime
  value: String!
}

type WebsitePageConnection {
  """Array of edges."""
  edges: [WebsitePageEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input WebsitePageDeleteFilter {
  and: [WebsitePageDeleteFilter!]
  id: IDFilterComparison
  or: [WebsitePageDeleteFilter!]
}

type WebsitePageDeleteResponse {
  createdAt: DateTime
  id: ID
  key: String
  page: String
  updatedAt: DateTime
  value: String
}

input WebsitePageDomain {
  createdAt: DateTime
  id: ID!
  key: String!
  page: String!
  updatedAt: DateTime
  value: String!
}

type WebsitePageEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the WebsitePage"""
  node: WebsitePage!
}

input WebsitePageFilter {
  and: [WebsitePageFilter!]
  id: IDFilterComparison
  or: [WebsitePageFilter!]
}

input WebsitePageSort {
  direction: SortDirection!
  field: WebsitePageSortFields!
  nulls: SortNulls
}

enum WebsitePageSortFields {
  id
}

input WebsitePageUpdateFilter {
  and: [WebsitePageUpdateFilter!]
  id: IDFilterComparison
  or: [WebsitePageUpdateFilter!]
}

type WebsiteVisit {
  createdAt: DateTime
  dailyVisits: Float!
  dateM: String
  dateSh: String
  daySh: Float
  id: ID!
  monthSh: Float
  updatedAt: DateTime
  yearSh: Float
}

type WebsiteVisitConnection {
  """Array of edges."""
  edges: [WebsiteVisitEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input WebsiteVisitDeleteFilter {
  and: [WebsiteVisitDeleteFilter!]
  id: IDFilterComparison
  or: [WebsiteVisitDeleteFilter!]
}

type WebsiteVisitDeleteResponse {
  createdAt: DateTime
  dailyVisits: Float
  dateM: String
  dateSh: String
  daySh: Float
  id: ID
  monthSh: Float
  updatedAt: DateTime
  yearSh: Float
}

input WebsiteVisitDomain {
  createdAt: DateTime
  dailyVisits: Float!
  dateM: String
  dateSh: String
  daySh: Float
  id: ID!
  monthSh: Float
  updatedAt: DateTime
  yearSh: Float
}

type WebsiteVisitEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the WebsiteVisit"""
  node: WebsiteVisit!
}

input WebsiteVisitFilter {
  and: [WebsiteVisitFilter!]
  id: IDFilterComparison
  or: [WebsiteVisitFilter!]
}

input WebsiteVisitSort {
  direction: SortDirection!
  field: WebsiteVisitSortFields!
  nulls: SortNulls
}

enum WebsiteVisitSortFields {
  id
}

input WebsiteVisitUpdateFilter {
  and: [WebsiteVisitUpdateFilter!]
  id: IDFilterComparison
  or: [WebsiteVisitUpdateFilter!]
}

type WithdrawalRequest {
  amount: String!
  cardNo: String!
  confirmedAt: DateTime
  confirmedBy: Float
  createdAt: DateTime
  id: ID!
  moneyTransferFromBank: String
  moneyTransferRefCode: String
  name: String!
  updatedAt: DateTime
  user: User!
  userId: Float!
  withdrawalRequestStatus: WithdrawalRequestStatus!
  withdrawalRequestStatusId: Float!
}

type WithdrawalRequestConnection {
  """Array of edges."""
  edges: [WithdrawalRequestEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input WithdrawalRequestDeleteFilter {
  and: [WithdrawalRequestDeleteFilter!]
  id: IDFilterComparison
  or: [WithdrawalRequestDeleteFilter!]
}

type WithdrawalRequestDeleteResponse {
  amount: String
  cardNo: String
  confirmedAt: DateTime
  confirmedBy: Float
  createdAt: DateTime
  id: ID
  moneyTransferFromBank: String
  moneyTransferRefCode: String
  name: String
  updatedAt: DateTime
  user: User
  userId: Float
  withdrawalRequestStatus: WithdrawalRequestStatus
  withdrawalRequestStatusId: Float
}

input WithdrawalRequestDomain {
  amount: String!
  cardNo: String!
  confirmedAt: DateTime
  confirmedBy: Float
  createdAt: DateTime
  id: ID!
  moneyTransferFromBank: String
  moneyTransferRefCode: String
  name: String!
  updatedAt: DateTime
  user: UserDomain!
  userId: Float!
  withdrawalRequestStatus: WithdrawalRequestStatusDomain!
  withdrawalRequestStatusId: Float!
}

type WithdrawalRequestEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the WithdrawalRequest"""
  node: WithdrawalRequest!
}

input WithdrawalRequestFilter {
  and: [WithdrawalRequestFilter!]
  id: IDFilterComparison
  or: [WithdrawalRequestFilter!]
}

input WithdrawalRequestSort {
  direction: SortDirection!
  field: WithdrawalRequestSortFields!
  nulls: SortNulls
}

enum WithdrawalRequestSortFields {
  id
}

type WithdrawalRequestStatus {
  createdAt: DateTime
  id: ID!
  status: String!
  updatedAt: DateTime
  withdrawalRequests: [WithdrawalRequest!]!
}

type WithdrawalRequestStatusConnection {
  """Array of edges."""
  edges: [WithdrawalRequestStatusEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input WithdrawalRequestStatusDeleteFilter {
  and: [WithdrawalRequestStatusDeleteFilter!]
  id: IDFilterComparison
  or: [WithdrawalRequestStatusDeleteFilter!]
}

type WithdrawalRequestStatusDeleteResponse {
  createdAt: DateTime
  id: ID
  status: String
  updatedAt: DateTime
  withdrawalRequests: [WithdrawalRequest!]
}

input WithdrawalRequestStatusDomain {
  createdAt: DateTime
  id: ID!
  status: String!
  updatedAt: DateTime
  withdrawalRequests: [WithdrawalRequestDomain!]!
}

type WithdrawalRequestStatusEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the WithdrawalRequestStatus"""
  node: WithdrawalRequestStatus!
}

input WithdrawalRequestStatusFilter {
  and: [WithdrawalRequestStatusFilter!]
  id: IDFilterComparison
  or: [WithdrawalRequestStatusFilter!]
}

input WithdrawalRequestStatusSort {
  direction: SortDirection!
  field: WithdrawalRequestStatusSortFields!
  nulls: SortNulls
}

enum WithdrawalRequestStatusSortFields {
  id
}

input WithdrawalRequestStatusUpdateFilter {
  and: [WithdrawalRequestStatusUpdateFilter!]
  id: IDFilterComparison
  or: [WithdrawalRequestStatusUpdateFilter!]
}

input WithdrawalRequestUpdateFilter {
  and: [WithdrawalRequestUpdateFilter!]
  id: IDFilterComparison
  or: [WithdrawalRequestUpdateFilter!]
}

type WonderfulOffer {
  createdAt: DateTime
  dayOfWeek: Float!
  id: ID!
  product: Product!
  productId: Float!
  updatedAt: DateTime
}

type WonderfulOfferConnection {
  """Array of edges."""
  edges: [WonderfulOfferEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

input WonderfulOfferDeleteFilter {
  and: [WonderfulOfferDeleteFilter!]
  id: IDFilterComparison
  or: [WonderfulOfferDeleteFilter!]
}

type WonderfulOfferDeleteResponse {
  createdAt: DateTime
  dayOfWeek: Float
  id: ID
  product: Product
  productId: Float
  updatedAt: DateTime
}

input WonderfulOfferDomain {
  createdAt: DateTime
  dayOfWeek: Float!
  id: ID!
  product: ProductDomain!
  productId: Float!
  updatedAt: DateTime
}

type WonderfulOfferEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the WonderfulOffer"""
  node: WonderfulOffer!
}

input WonderfulOfferFilter {
  and: [WonderfulOfferFilter!]
  id: IDFilterComparison
  or: [WonderfulOfferFilter!]
}

input WonderfulOfferSort {
  direction: SortDirection!
  field: WonderfulOfferSortFields!
  nulls: SortNulls
}

enum WonderfulOfferSortFields {
  id
}

input WonderfulOfferUpdateFilter {
  and: [WonderfulOfferUpdateFilter!]
  id: IDFilterComparison
  or: [WonderfulOfferUpdateFilter!]
}

input updateWalletResponse {
  walletId: Float!
}